/-
Copyright (c) 2020 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin

! This file was ported from Lean 3 source module ring_theory.finite_type
! leanprover-community/mathlib commit d64d67d000b974f0d86a2be7918cf800be6271c8
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.GroupTheory.Finiteness
import Mathbin.RingTheory.Adjoin.Tower
import Mathbin.RingTheory.Finiteness
import Mathbin.RingTheory.Noetherian

/-!
# Finiteness conditions in commutative algebra

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

In this file we define a notion of finiteness that is common in commutative algebra.

## Main declarations

- `algebra.finite_type`, `ring_hom.finite_type`, `alg_hom.finite_type`
  all of these express that some object is finitely generated *as algebra* over some base ring.

-/


open Function (Surjective)

open BigOperators Polynomial

section ModuleAndAlgebra

variable (R A B M N : Type _)

/- warning: algebra.finite_type -> Algebra.FiniteType is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (A : Type.{u2}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Prop
but is expected to have type
  forall (R : Type.{u2}) (A : Type.{u1}) [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u1} A] [_inst_3 : Algebra.{u2, u1} R A _inst_1 _inst_2], Prop
Case conversion may be inaccurate. Consider using '#align algebra.finite_type Algebra.FiniteTypeₓ'. -/
/-- An algebra over a commutative semiring is of `finite_type` if it is finitely generated
over the base ring as algebra. -/
class Algebra.FiniteType [CommSemiring R] [Semiring A] [Algebra R A] : Prop where
  out : (⊤ : Subalgebra R A).FG
#align algebra.finite_type Algebra.FiniteType

namespace Module

variable [Semiring R] [AddCommMonoid M] [Module R M] [AddCommMonoid N] [Module R N]

namespace Finite

open _Root_.Submodule Set

variable {R M N}

section Algebra

/- warning: module.finite.finite_type -> Module.Finite.finiteType is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} (A : Type.{u2}) [_inst_6 : CommSemiring.{u1} R] [_inst_7 : Semiring.{u2} A] [_inst_8 : Algebra.{u1, u2} R A _inst_6 _inst_7] [hRA : Module.Finite.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_6) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_7))) (Algebra.toModule.{u1, u2} R A _inst_6 _inst_7 _inst_8)], Algebra.FiniteType.{u1, u2} R A _inst_6 _inst_7 _inst_8
but is expected to have type
  forall {R : Type.{u1}} (A : Type.{u2}) [_inst_6 : CommSemiring.{u1} R] [_inst_7 : Semiring.{u2} A] [_inst_8 : Algebra.{u1, u2} R A _inst_6 _inst_7] [hRA : Module.Finite.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_6) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_7))) (Algebra.toModule.{u1, u2} R A _inst_6 _inst_7 _inst_8)], Algebra.FiniteType.{u2, u1} R A _inst_6 _inst_7 _inst_8
Case conversion may be inaccurate. Consider using '#align module.finite.finite_type Module.Finite.finiteTypeₓ'. -/
-- see Note [lower instance priority]
instance (priority := 100) finiteType {R : Type _} (A : Type _) [CommSemiring R] [Semiring A]
    [Algebra R A] [hRA : Finite R A] : Algebra.FiniteType R A :=
  ⟨Subalgebra.fg_of_submodule_fg hRA.1⟩
#align module.finite.finite_type Module.Finite.finiteType

end Algebra

end Finite

end Module

namespace Algebra

variable [CommRing R] [CommRing A] [Algebra R A] [CommRing B] [Algebra R B]

variable [AddCommGroup M] [Module R M]

variable [AddCommGroup N] [Module R N]

namespace FiniteType

#print Algebra.FiniteType.self /-
theorem self : FiniteType R R :=
  ⟨⟨{1}, Subsingleton.elim _ _⟩⟩
#align algebra.finite_type.self Algebra.FiniteType.self
-/

#print Algebra.FiniteType.polynomial /-
protected theorem polynomial : FiniteType R R[X] :=
  ⟨⟨{Polynomial.X}, by
      rw [Finset.coe_singleton]
      exact Polynomial.adjoin_X⟩⟩
#align algebra.finite_type.polynomial Algebra.FiniteType.polynomial
-/

open Classical

/- warning: algebra.finite_type.mv_polynomial -> Algebra.FiniteType.mvPolynomial is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) [_inst_1 : CommRing.{u1} R] (ι : Type.{u2}) [_inst_10 : Finite.{succ u2} ι], Algebra.FiniteType.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R ι _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))
but is expected to have type
  forall (R : Type.{u1}) [_inst_1 : CommRing.{u1} R] (ι : Type.{u2}) [_inst_10 : Finite.{succ u2} ι], Algebra.FiniteType.{max u1 u2, u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u1 u2} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.mv_polynomial Algebra.FiniteType.mvPolynomialₓ'. -/
protected theorem mvPolynomial (ι : Type _) [Finite ι] : FiniteType R (MvPolynomial ι R) := by
  cases nonempty_fintype ι <;>
    exact
      ⟨⟨finset.univ.image MvPolynomial.X,
          by
          rw [Finset.coe_image, Finset.coe_univ, Set.image_univ]
          exact MvPolynomial.adjoin_range_X⟩⟩
#align algebra.finite_type.mv_polynomial Algebra.FiniteType.mvPolynomial

/- warning: algebra.finite_type.of_restrict_scalars_finite_type -> Algebra.FiniteType.of_restrictScalars_finiteType is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (A : Type.{u2}) (B : Type.{u3}) [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_4 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))] [_inst_10 : Algebra.{u2, u3} A B (CommRing.toCommSemiring.{u2} A _inst_2) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))] [_inst_11 : IsScalarTower.{u1, u2, u3} R A B (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)))))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)))))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)))))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3))))) (SMulZeroClass.toHasSmul.{u2, u3} A B (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (SMulWithZero.toSmulZeroClass.{u2, u3} A B (MulZeroClass.toHasZero.{u2} A (MulZeroOneClass.toMulZeroClass.{u2} A (MonoidWithZero.toMulZeroOneClass.{u2} A (Semiring.toMonoidWithZero.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (MulActionWithZero.toSMulWithZero.{u2, u3} A B (Semiring.toMonoidWithZero.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (Module.toMulActionWithZero.{u2, u3} A B (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))))) (Algebra.toModule.{u2, u3} A B (CommRing.toCommSemiring.{u2} A _inst_2) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_10))))) (SMulZeroClass.toHasSmul.{u1, u3} R B (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (SMulWithZero.toSmulZeroClass.{u1, u3} R B (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (MulActionWithZero.toSMulWithZero.{u1, u3} R B (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (Module.toMulActionWithZero.{u1, u3} R B (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))))) (Algebra.toModule.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5)))))] [hB : Algebra.FiniteType.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5], Algebra.FiniteType.{u2, u3} A B (CommRing.toCommSemiring.{u2} A _inst_2) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_10
but is expected to have type
  forall (R : Type.{u1}) (A : Type.{u3}) (B : Type.{u2}) [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u3} A] [_inst_3 : Algebra.{u1, u3} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))] [_inst_4 : CommRing.{u2} B] [_inst_5 : Algebra.{u1, u2} R B (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4))] [_inst_10 : Algebra.{u3, u2} A B (CommRing.toCommSemiring.{u3} A _inst_2) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4))] [_inst_11 : IsScalarTower.{u1, u3, u2} R A B (Algebra.toSMul.{u1, u3} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3) (Algebra.toSMul.{u3, u2} A B (CommRing.toCommSemiring.{u3} A _inst_2) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_10) (Algebra.toSMul.{u1, u2} R B (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_5)] [hB : Algebra.FiniteType.{u2, u1} R B (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_5], Algebra.FiniteType.{u2, u3} A B (CommRing.toCommSemiring.{u3} A _inst_2) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_10
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.of_restrict_scalars_finite_type Algebra.FiniteType.of_restrictScalars_finiteTypeₓ'. -/
theorem of_restrictScalars_finiteType [Algebra A B] [IsScalarTower R A B] [hB : FiniteType R B] :
    FiniteType A B := by
  obtain ⟨S, hS⟩ := hB.out
  refine' ⟨⟨S, eq_top_iff.2 fun b => _⟩⟩
  have le : adjoin R (S : Set B) ≤ Subalgebra.restrictScalars R (adjoin A S) :=
    by
    apply (Algebra.adjoin_le _ : _ ≤ Subalgebra.restrictScalars R (adjoin A ↑S))
    simp only [Subalgebra.coe_restrictScalars]
    exact Algebra.subset_adjoin
  exact le (eq_top_iff.1 hS b)
#align algebra.finite_type.of_restrict_scalars_finite_type Algebra.FiniteType.of_restrictScalars_finiteType

variable {R A B}

/- warning: algebra.finite_type.of_surjective -> Algebra.FiniteType.of_surjective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_4 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))], (Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3) -> (forall (f : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_3 _inst_5), (Function.Surjective.{succ u2, succ u3} A B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_3 _inst_5) f)) -> (Algebra.FiniteType.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} {B : Type.{u1}} [_inst_1 : CommRing.{u2} R] [_inst_2 : CommRing.{u3} A] [_inst_3 : Algebra.{u2, u3} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))] [_inst_4 : CommRing.{u1} B] [_inst_5 : Algebra.{u2, u1} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))], (Algebra.FiniteType.{u3, u2} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3) -> (forall (f : AlgHom.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5), (Function.Surjective.{succ u3, succ u1} A B (FunLike.coe.{max (succ u3) (succ u1), succ u3, succ u1} (AlgHom.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u3 u1, u2, u3, u1} (AlgHom.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u2, u3} R A (AddMonoid.toZero.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))))))) (DistribSMul.toSMulZeroClass.{u2, u3} R A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))))))) (DistribMulAction.toDistribSMul.{u2, u3} R A (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)))))) (Module.toDistribMulAction.{u2, u3} R A (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))))) (Algebra.toModule.{u2, u3} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3))))) (SMulZeroClass.toSMul.{u2, u1} R B (AddMonoid.toZero.{u1} B (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))))))) (DistribSMul.toSMulZeroClass.{u2, u1} R B (AddMonoid.toAddZeroClass.{u1} B (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))))))) (DistribMulAction.toDistribSMul.{u2, u1} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)))))) (Module.toDistribMulAction.{u2, u1} R B (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))))) (Algebra.toModule.{u2, u1} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u1, u2, u3, u1} (AlgHom.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)))))) (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)))))) (Module.toDistribMulAction.{u2, u3} R A (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))))) (Algebra.toModule.{u2, u3} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3)) (Module.toDistribMulAction.{u2, u1} R B (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))))) (Algebra.toModule.{u2, u1} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u1, u2, u3, u1} (AlgHom.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R A (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))))) (Algebra.toModule.{u2, u3} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3)) (Module.toDistribMulAction.{u2, u1} R B (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))))) (Algebra.toModule.{u2, u1} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u1, max u3 u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5 (AlgHom.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5) (AlgHom.algHomClass.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5))))) f)) -> (Algebra.FiniteType.{u1, u2} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_5))
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.of_surjective Algebra.FiniteType.of_surjectiveₓ'. -/
theorem of_surjective (hRA : FiniteType R A) (f : A →ₐ[R] B) (hf : Surjective f) : FiniteType R B :=
  ⟨by
    convert hRA.1.map f
    simpa only [map_top f, @eq_comm _ ⊤, eq_top_iff, AlgHom.mem_range] using hf⟩
#align algebra.finite_type.of_surjective Algebra.FiniteType.of_surjective

/- warning: algebra.finite_type.equiv -> Algebra.FiniteType.equiv is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_4 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))], (Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3) -> (AlgEquiv.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_3 _inst_5) -> (Algebra.FiniteType.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} {B : Type.{u1}} [_inst_1 : CommRing.{u2} R] [_inst_2 : CommRing.{u3} A] [_inst_3 : Algebra.{u2, u3} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))] [_inst_4 : CommRing.{u1} B] [_inst_5 : Algebra.{u2, u1} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4))], (Algebra.FiniteType.{u3, u2} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3) -> (AlgEquiv.{u2, u3, u1} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_3 _inst_5) -> (Algebra.FiniteType.{u1, u2} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_4)) _inst_5)
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.equiv Algebra.FiniteType.equivₓ'. -/
theorem equiv (hRA : FiniteType R A) (e : A ≃ₐ[R] B) : FiniteType R B :=
  hRA.ofSurjective e e.Surjective
#align algebra.finite_type.equiv Algebra.FiniteType.equiv

/- warning: algebra.finite_type.trans -> Algebra.FiniteType.trans is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_4 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))] [_inst_10 : Algebra.{u2, u3} A B (CommRing.toCommSemiring.{u2} A _inst_2) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))] [_inst_11 : IsScalarTower.{u1, u2, u3} R A B (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)))))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)))))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)))))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3))))) (SMulZeroClass.toHasSmul.{u2, u3} A B (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (SMulWithZero.toSmulZeroClass.{u2, u3} A B (MulZeroClass.toHasZero.{u2} A (MulZeroOneClass.toMulZeroClass.{u2} A (MonoidWithZero.toMulZeroOneClass.{u2} A (Semiring.toMonoidWithZero.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (MulActionWithZero.toSMulWithZero.{u2, u3} A B (Semiring.toMonoidWithZero.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (Module.toMulActionWithZero.{u2, u3} A B (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))))) (Algebra.toModule.{u2, u3} A B (CommRing.toCommSemiring.{u2} A _inst_2) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_10))))) (SMulZeroClass.toHasSmul.{u1, u3} R B (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (SMulWithZero.toSmulZeroClass.{u1, u3} R B (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (MulActionWithZero.toSMulWithZero.{u1, u3} R B (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (AddZeroClass.toHasZero.{u3} B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)))))))) (Module.toMulActionWithZero.{u1, u3} R B (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))))) (Algebra.toModule.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5)))))], (Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3) -> (Algebra.FiniteType.{u2, u3} A B (CommRing.toCommSemiring.{u2} A _inst_2) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_10) -> (Algebra.FiniteType.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u3}} {B : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u3} A] [_inst_3 : Algebra.{u1, u3} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))] [_inst_4 : CommRing.{u2} B] [_inst_5 : Algebra.{u1, u2} R B (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4))] [_inst_10 : Algebra.{u3, u2} A B (CommRing.toCommSemiring.{u3} A _inst_2) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4))] [_inst_11 : IsScalarTower.{u1, u3, u2} R A B (Algebra.toSMul.{u1, u3} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3) (Algebra.toSMul.{u3, u2} A B (CommRing.toCommSemiring.{u3} A _inst_2) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_10) (Algebra.toSMul.{u1, u2} R B (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_5)], (Algebra.FiniteType.{u3, u1} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) _inst_3) -> (Algebra.FiniteType.{u2, u3} A B (CommRing.toCommSemiring.{u3} A _inst_2) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_10) -> (Algebra.FiniteType.{u2, u1} R B (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_4)) _inst_5)
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.trans Algebra.FiniteType.transₓ'. -/
theorem trans [Algebra A B] [IsScalarTower R A B] (hRA : FiniteType R A) (hAB : FiniteType A B) :
    FiniteType R B :=
  ⟨fg_trans' hRA.1 hAB.1⟩
#align algebra.finite_type.trans Algebra.FiniteType.trans

/- warning: algebra.finite_type.iff_quotient_mv_polynomial -> Algebra.FiniteType.iff_quotient_mvPolynomial is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))], Iff (Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3) (Exists.{succ u2} (Finset.{u2} A) (fun (s : Finset.{u2} A) => Exists.{max (succ (max u2 u1)) (succ u2)} (AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (f : AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => Function.Surjective.{max (succ u2) (succ u1), succ u2} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (coeFn.{max (succ (max u2 u1)) (succ u2), max (succ (max u2 u1)) (succ u2)} (AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (_x : AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) -> A) ([anonymous].{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Finset.{u2} A) (Finset.hasMem.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) f))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))], Iff (Algebra.FiniteType.{u2, u1} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3) (Exists.{succ u2} (Finset.{u2} A) (fun (s : Finset.{u2} A) => Exists.{max (succ u2) (succ u1)} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (f : AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => Function.Surjective.{max (succ u2) (succ u1), succ u2} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (FunLike.coe.{max (succ u2) (succ u1), max (succ u2) (succ u1), succ u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (fun (_x : MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) => A) _x) (SMulHomClass.toFunLike.{max u2 u1, u1, max u2 u1, u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (SMulZeroClass.toSMul.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))))))) (Module.toDistribMulAction.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u1, max u2 u1, u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))))))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u1, max u2 u1, u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, max u2 u1, u2, max u2 u1} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3 (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (AlgHom.algHomClass.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Finset.{u2} A) (Finset.instMembershipFinset.{u2} A) x s)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3))))) f))))
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.iff_quotient_mv_polynomial Algebra.FiniteType.iff_quotient_mvPolynomialₓ'. -/
/-- An algebra is finitely generated if and only if it is a quotient
of a polynomial ring whose variables are indexed by a finset. -/
theorem iff_quotient_mvPolynomial :
    FiniteType R A ↔ ∃ (s : Finset A)(f : MvPolynomial { x // x ∈ s } R →ₐ[R] A), Surjective f :=
  by
  constructor
  · rintro ⟨s, hs⟩
    use s, MvPolynomial.aeval coe
    intro x
    have hrw : (↑s : Set A) = fun x : A => x ∈ s.val := rfl
    rw [← Set.mem_range, ← AlgHom.coe_range, ← adjoin_eq_range, ← hrw, hs]
    exact Set.mem_univ x
  · rintro ⟨s, ⟨f, hsur⟩⟩
    exact finite_type.of_surjective (finite_type.mv_polynomial R { x // x ∈ s }) f hsur
#align algebra.finite_type.iff_quotient_mv_polynomial Algebra.FiniteType.iff_quotient_mvPolynomial

/- warning: algebra.finite_type.iff_quotient_mv_polynomial' -> Algebra.FiniteType.iff_quotient_mvPolynomial' is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))], Iff (Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3) (Exists.{succ (succ u2)} Type.{u2} (fun (ι : Type.{u2}) => Exists.{succ u2} (Fintype.{u2} ι) (fun (_x : Fintype.{u2} ι) => Exists.{max (succ (max u2 u1)) (succ u2)} (AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R ι _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (f : AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R ι _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => Function.Surjective.{max (succ u2) (succ u1), succ u2} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (coeFn.{max (succ (max u2 u1)) (succ u2), max (succ (max u2 u1)) (succ u2)} (AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R ι _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (_x : AlgHom.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R ι _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) -> A) ([anonymous].{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, u2} R ι _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) f)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))], Iff (Algebra.FiniteType.{u2, u1} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3) (Exists.{succ (succ u2)} Type.{u2} (fun (ι : Type.{u2}) => Exists.{succ u2} (Fintype.{u2} ι) (fun (_x : Fintype.{u2} ι) => Exists.{max (succ u2) (succ u1)} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (f : AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => Function.Surjective.{max (succ u2) (succ u1), succ u2} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (FunLike.coe.{max (succ u2) (succ u1), max (succ u2) (succ u1), succ u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (fun (_x : MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) => A) _x) (SMulHomClass.toFunLike.{max u2 u1, u1, max u2 u1, u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (SMulZeroClass.toSMul.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))))))) (Module.toDistribMulAction.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u1, max u2 u1, u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))))))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u1, max u2 u1, u2} (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, max u2 u1, u2, max u2 u1} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3 (AlgHom.{u1, max u1 u2, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (AlgHom.algHomClass.{u1, max u2 u1, u2} R (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} ι R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, u2} R ι (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, u2} R R ι (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3))))) f)))))
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.iff_quotient_mv_polynomial' Algebra.FiniteType.iff_quotient_mvPolynomial'ₓ'. -/
/-- An algebra is finitely generated if and only if it is a quotient
of a polynomial ring whose variables are indexed by a fintype. -/
theorem iff_quotient_mvPolynomial' :
    FiniteType R A ↔ ∃ (ι : Type u_2)(_ : Fintype ι)(f : MvPolynomial ι R →ₐ[R] A), Surjective f :=
  by
  constructor
  · rw [iff_quotient_mv_polynomial]
    rintro ⟨s, ⟨f, hsur⟩⟩
    use { x // x ∈ s }, by infer_instance, f, hsur
  · rintro ⟨ι, ⟨hfintype, ⟨f, hsur⟩⟩⟩
    letI : Fintype ι := hfintype
    exact finite_type.of_surjective (finite_type.mv_polynomial R ι) f hsur
#align algebra.finite_type.iff_quotient_mv_polynomial' Algebra.FiniteType.iff_quotient_mvPolynomial'

/- warning: algebra.finite_type.iff_quotient_mv_polynomial'' -> Algebra.FiniteType.iff_quotient_mvPolynomial'' is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))], Iff (Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3) (Exists.{1} Nat (fun (n : Nat) => Exists.{max (succ u1) (succ u2)} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, 0} R (Fin n) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (f : AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, 0} R (Fin n) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => Function.Surjective.{succ u1, succ u2} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, 0} R (Fin n) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (_x : AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, 0} R (Fin n) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) -> A) ([anonymous].{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toRing.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commRing.{u1, 0} R (Fin n) _inst_1))) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) f))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))], Iff (Algebra.FiniteType.{u2, u1} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3) (Exists.{1} Nat (fun (n : Nat) => Exists.{max (succ u2) (succ u1)} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (fun (f : AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) => Function.Surjective.{succ u1, succ u2} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (FunLike.coe.{max (succ u2) (succ u1), succ u1, succ u2} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (fun (_x : MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) => A) _x) (SMulHomClass.toFunLike.{max u2 u1, u1, u1, u2} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (SMulZeroClass.toSMul.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (DistribSMul.toSMulZeroClass.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (DistribMulAction.toDistribSMul.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))))))) (Module.toDistribMulAction.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))))))) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u1, u1, u2} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))))))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u1, u1, u2} (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1)))))) (Algebra.toModule.{u1, u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_3)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u1, u2, max u2 u1} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3 (AlgHom.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3) (AlgHom.algHomClass.{u1, u1, u2} R (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) A (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} (MvPolynomial.{0, u1} (Fin n) R (CommRing.toCommSemiring.{u1} R _inst_1)) (MvPolynomial.commSemiring.{u1, 0} R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (MvPolynomial.algebra.{u1, u1, 0} R R (Fin n) (CommRing.toCommSemiring.{u1} R _inst_1) (CommRing.toCommSemiring.{u1} R _inst_1) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _inst_3))))) f))))
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.iff_quotient_mv_polynomial'' Algebra.FiniteType.iff_quotient_mvPolynomial''ₓ'. -/
/-- An algebra is finitely generated if and only if it is a quotient of a polynomial ring in `n`
variables. -/
theorem iff_quotient_mvPolynomial'' :
    FiniteType R A ↔ ∃ (n : ℕ)(f : MvPolynomial (Fin n) R →ₐ[R] A), Surjective f :=
  by
  constructor
  · rw [iff_quotient_mv_polynomial']
    rintro ⟨ι, hfintype, ⟨f, hsur⟩⟩
    skip
    have equiv := MvPolynomial.renameEquiv R (Fintype.equivFin ι)
    exact
      ⟨Fintype.card ι, AlgHom.comp f Equiv.symm,
        Function.Surjective.comp hsur (AlgEquiv.symm Equiv).Surjective⟩
  · rintro ⟨n, ⟨f, hsur⟩⟩
    exact finite_type.of_surjective (finite_type.mv_polynomial R (Fin n)) f hsur
#align algebra.finite_type.iff_quotient_mv_polynomial'' Algebra.FiniteType.iff_quotient_mvPolynomial''

/- warning: algebra.finite_type.prod -> Algebra.FiniteType.prod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_4 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))] [hA : Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3] [hB : Algebra.FiniteType.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5], Algebra.FiniteType.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommRing.toCommSemiring.{u1} R _inst_1) (Prod.semiring.{u2, u3} A B (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4))) (Prod.algebra.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_3 (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_4)) _inst_5)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} {B : Type.{u3}} [_inst_1 : CommRing.{u2} R] [_inst_2 : CommRing.{u1} A] [_inst_3 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2))] [_inst_4 : CommRing.{u3} B] [_inst_5 : Algebra.{u2, u3} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_4))] [hA : Algebra.FiniteType.{u1, u2} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2)) _inst_3] [hB : Algebra.FiniteType.{u3, u2} R B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_4)) _inst_5], Algebra.FiniteType.{max u3 u1, u2} R (Prod.{u1, u3} A B) (CommRing.toCommSemiring.{u2} R _inst_1) (Prod.instSemiringProd.{u1, u3} A B (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2)) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_4))) (Prod.algebra.{u2, u1, u3} R A B (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2)) _inst_3 (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_4)) _inst_5)
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.prod Algebra.FiniteType.prodₓ'. -/
instance prod [hA : FiniteType R A] [hB : FiniteType R B] : FiniteType R (A × B) :=
  ⟨by
    rw [← Subalgebra.prod_top]
    exact hA.1.Prod hB.1⟩
#align algebra.finite_type.prod Algebra.FiniteType.prod

/- warning: algebra.finite_type.is_noetherian_ring -> Algebra.FiniteType.isNoetherianRing is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (S : Type.{u2}) [_inst_10 : CommRing.{u1} R] [_inst_11 : CommRing.{u2} S] [_inst_12 : Algebra.{u1, u2} R S (CommRing.toCommSemiring.{u1} R _inst_10) (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_11))] [h : Algebra.FiniteType.{u1, u2} R S (CommRing.toCommSemiring.{u1} R _inst_10) (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_11)) _inst_12] [_inst_13 : IsNoetherianRing.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_10))], IsNoetherianRing.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_11))
but is expected to have type
  forall (R : Type.{u2}) (S : Type.{u1}) [_inst_10 : CommRing.{u2} R] [_inst_11 : CommRing.{u1} S] [_inst_12 : Algebra.{u2, u1} R S (CommRing.toCommSemiring.{u2} R _inst_10) (CommSemiring.toSemiring.{u1} S (CommRing.toCommSemiring.{u1} S _inst_11))] [h : Algebra.FiniteType.{u1, u2} R S (CommRing.toCommSemiring.{u2} R _inst_10) (CommSemiring.toSemiring.{u1} S (CommRing.toCommSemiring.{u1} S _inst_11)) _inst_12] [_inst_13 : IsNoetherianRing.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_10))], IsNoetherianRing.{u1} S (CommSemiring.toSemiring.{u1} S (CommRing.toCommSemiring.{u1} S _inst_11))
Case conversion may be inaccurate. Consider using '#align algebra.finite_type.is_noetherian_ring Algebra.FiniteType.isNoetherianRingₓ'. -/
theorem isNoetherianRing (R S : Type _) [CommRing R] [CommRing S] [Algebra R S]
    [h : Algebra.FiniteType R S] [IsNoetherianRing R] : IsNoetherianRing S :=
  by
  obtain ⟨s, hs⟩ := h.1
  apply
    isNoetherianRing_of_surjective (MvPolynomial s R) S
      (MvPolynomial.aeval coe : MvPolynomial s R →ₐ[R] S)
  rw [← Set.range_iff_surjective, AlgHom.coe_toRingHom, ← AlgHom.coe_range, ←
    Algebra.adjoin_range_eq_range_aeval, Subtype.range_coe_subtype, Finset.setOf_mem, hs]
  rfl
#align algebra.finite_type.is_noetherian_ring Algebra.FiniteType.isNoetherianRing

/- warning: subalgebra.fg_iff_finite_type -> Subalgebra.fg_iff_finiteType is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_10 : CommSemiring.{u1} R] [_inst_11 : Semiring.{u2} A] [_inst_12 : Algebra.{u1, u2} R A _inst_10 _inst_11] (S : Subalgebra.{u1, u2} R A _inst_10 _inst_11 _inst_12), Iff (Subalgebra.FG.{u1, u2} R A _inst_10 _inst_11 _inst_12 S) (Algebra.FiniteType.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_10 _inst_11 _inst_12) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_10 _inst_11 _inst_12) A (Subalgebra.setLike.{u1, u2} R A _inst_10 _inst_11 _inst_12)) S) _inst_10 (Subalgebra.toSemiring.{u1, u2} R A _inst_10 _inst_11 _inst_12 S) (Subalgebra.algebra.{u1, u2} R A _inst_10 _inst_11 _inst_12 S))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_10 : CommSemiring.{u2} R] [_inst_11 : Semiring.{u1} A] [_inst_12 : Algebra.{u2, u1} R A _inst_10 _inst_11] (S : Subalgebra.{u2, u1} R A _inst_10 _inst_11 _inst_12), Iff (Subalgebra.FG.{u2, u1} R A _inst_10 _inst_11 _inst_12 S) (Algebra.FiniteType.{u1, u2} R (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A _inst_10 _inst_11 _inst_12) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A _inst_10 _inst_11 _inst_12) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_10 _inst_11 _inst_12)) x S)) _inst_10 (Subalgebra.toSemiring.{u2, u1} R A _inst_10 _inst_11 _inst_12 S) (Subalgebra.algebra.{u2, u1} R A _inst_10 _inst_11 _inst_12 S))
Case conversion may be inaccurate. Consider using '#align subalgebra.fg_iff_finite_type Subalgebra.fg_iff_finiteTypeₓ'. -/
theorem Subalgebra.fg_iff_finiteType {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A]
    (S : Subalgebra R A) : S.FG ↔ Algebra.FiniteType R S :=
  S.fg_top.symm.trans ⟨fun h => ⟨h⟩, fun h => h.out⟩
#align subalgebra.fg_iff_finite_type Subalgebra.fg_iff_finiteType

end FiniteType

end Algebra

end ModuleAndAlgebra

namespace RingHom

variable {A B C : Type _} [CommRing A] [CommRing B] [CommRing C]

#print RingHom.FiniteType /-
/-- A ring morphism `A →+* B` is of `finite_type` if `B` is finitely generated as `A`-algebra. -/
def FiniteType (f : A →+* B) : Prop :=
  @Algebra.FiniteType A B _ _ f.toAlgebra
#align ring_hom.finite_type RingHom.FiniteType
-/

namespace Finite

variable {A}

/- warning: ring_hom.finite.finite_type -> RingHom.Finite.finiteType is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] {f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))}, (RingHom.Finite.{u1, u2} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u1, u2} A B _inst_1 _inst_2 f)
but is expected to have type
  forall {A : Type.{u2}} {B : Type.{u1}} [_inst_1 : CommRing.{u2} A] [_inst_2 : CommRing.{u1} B] {f : RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))}, (RingHom.Finite.{u2, u1} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u2, u1} A B _inst_1 _inst_2 f)
Case conversion may be inaccurate. Consider using '#align ring_hom.finite.finite_type RingHom.Finite.finiteTypeₓ'. -/
theorem finiteType {f : A →+* B} (hf : f.Finite) : FiniteType f :=
  @Module.Finite.finiteType _ _ _ _ f.toAlgebra hf
#align ring_hom.finite.finite_type RingHom.Finite.finiteType

end Finite

namespace FiniteType

variable (A)

#print RingHom.FiniteType.id /-
theorem id : FiniteType (RingHom.id A) :=
  Algebra.FiniteType.self A
#align ring_hom.finite_type.id RingHom.FiniteType.id
-/

variable {A}

/- warning: ring_hom.finite_type.comp_surjective -> RingHom.FiniteType.comp_surjective is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} {C : Type.{u3}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] [_inst_3 : CommRing.{u3} C] {f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))} {g : RingHom.{u2, u3} B C (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3)))}, (RingHom.FiniteType.{u1, u2} A B _inst_1 _inst_2 f) -> (Function.Surjective.{succ u2, succ u3} B C (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (RingHom.{u2, u3} B C (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3)))) (fun (_x : RingHom.{u2, u3} B C (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3)))) => B -> C) (RingHom.hasCoeToFun.{u2, u3} B C (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3)))) g)) -> (RingHom.FiniteType.{u1, u3} A C _inst_1 _inst_3 (RingHom.comp.{u1, u2, u3} A B C (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3))) g f))
but is expected to have type
  forall {A : Type.{u3}} {B : Type.{u2}} {C : Type.{u1}} [_inst_1 : CommRing.{u3} A] [_inst_2 : CommRing.{u2} B] [_inst_3 : CommRing.{u1} C] {f : RingHom.{u3, u2} A B (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1))) (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2)))} {g : RingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))}, (RingHom.FiniteType.{u3, u2} A B _inst_1 _inst_2 f) -> (Function.Surjective.{succ u2, succ u1} B C (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))) B (fun (_x : B) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : B) => C) _x) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))) B C (NonUnitalNonAssocSemiring.toMul.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))))) (NonUnitalNonAssocSemiring.toMul.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3))))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))) B C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))) B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3))) (RingHom.instRingHomClassRingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3))))))) g)) -> (RingHom.FiniteType.{u3, u1} A C _inst_1 _inst_3 (RingHom.comp.{u3, u2, u1} A B C (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1))) (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3))) g f))
Case conversion may be inaccurate. Consider using '#align ring_hom.finite_type.comp_surjective RingHom.FiniteType.comp_surjectiveₓ'. -/
theorem comp_surjective {f : A →+* B} {g : B →+* C} (hf : f.FiniteType) (hg : Surjective g) :
    (g.comp f).FiniteType :=
  @Algebra.FiniteType.of_surjective A B C _ _ f.toAlgebra _ (g.comp f).toAlgebra hf
    { g with
      toFun := g
      commutes' := fun a => rfl }
    hg
#align ring_hom.finite_type.comp_surjective RingHom.FiniteType.comp_surjective

/- warning: ring_hom.finite_type.of_surjective -> RingHom.FiniteType.of_surjective is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] (f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))), (Function.Surjective.{succ u1, succ u2} A B (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))) (fun (_x : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))) => A -> B) (RingHom.hasCoeToFun.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))) f)) -> (RingHom.FiniteType.{u1, u2} A B _inst_1 _inst_2 f)
but is expected to have type
  forall {A : Type.{u2}} {B : Type.{u1}} [_inst_1 : CommRing.{u2} A] [_inst_2 : CommRing.{u1} B] (f : RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))), (Function.Surjective.{succ u2, succ u1} A B (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : A) => B) _x) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))) A B (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))))) (NonUnitalNonAssocSemiring.toMul.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2))))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))) A B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))) A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2))) (RingHom.instRingHomClassRingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2))))))) f)) -> (RingHom.FiniteType.{u2, u1} A B _inst_1 _inst_2 f)
Case conversion may be inaccurate. Consider using '#align ring_hom.finite_type.of_surjective RingHom.FiniteType.of_surjectiveₓ'. -/
theorem of_surjective (f : A →+* B) (hf : Surjective f) : f.FiniteType :=
  by
  rw [← f.comp_id]
  exact (id A).comp_surjective hf
#align ring_hom.finite_type.of_surjective RingHom.FiniteType.of_surjective

/- warning: ring_hom.finite_type.comp -> RingHom.FiniteType.comp is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} {C : Type.{u3}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] [_inst_3 : CommRing.{u3} C] {g : RingHom.{u2, u3} B C (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3)))} {f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))}, (RingHom.FiniteType.{u2, u3} B C _inst_2 _inst_3 g) -> (RingHom.FiniteType.{u1, u2} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u1, u3} A C _inst_1 _inst_3 (RingHom.comp.{u1, u2, u3} A B C (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3))) g f))
but is expected to have type
  forall {A : Type.{u1}} {B : Type.{u3}} {C : Type.{u2}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u3} B] [_inst_3 : CommRing.{u2} C] {g : RingHom.{u3, u2} B C (Semiring.toNonAssocSemiring.{u3} B (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_2))) (Semiring.toNonAssocSemiring.{u2} C (CommSemiring.toSemiring.{u2} C (CommRing.toCommSemiring.{u2} C _inst_3)))} {f : RingHom.{u1, u3} A B (Semiring.toNonAssocSemiring.{u1} A (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_1))) (Semiring.toNonAssocSemiring.{u3} B (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_2)))}, (RingHom.FiniteType.{u3, u2} B C _inst_2 _inst_3 g) -> (RingHom.FiniteType.{u1, u3} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u1, u2} A C _inst_1 _inst_3 (RingHom.comp.{u1, u3, u2} A B C (Semiring.toNonAssocSemiring.{u1} A (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_1))) (Semiring.toNonAssocSemiring.{u3} B (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_2))) (Semiring.toNonAssocSemiring.{u2} C (CommSemiring.toSemiring.{u2} C (CommRing.toCommSemiring.{u2} C _inst_3))) g f))
Case conversion may be inaccurate. Consider using '#align ring_hom.finite_type.comp RingHom.FiniteType.compₓ'. -/
theorem comp {g : B →+* C} {f : A →+* B} (hg : g.FiniteType) (hf : f.FiniteType) :
    (g.comp f).FiniteType :=
  @Algebra.FiniteType.trans A B C _ _ f.toAlgebra _ (g.comp f).toAlgebra g.toAlgebra
    (by
      fconstructor
      intro a b c
      simp only [Algebra.smul_def, RingHom.map_mul, mul_assoc]
      rfl)
    hf hg
#align ring_hom.finite_type.comp RingHom.FiniteType.comp

/- warning: ring_hom.finite_type.of_finite -> RingHom.FiniteType.of_finite is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] {f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))}, (RingHom.Finite.{u1, u2} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u1, u2} A B _inst_1 _inst_2 f)
but is expected to have type
  forall {A : Type.{u2}} {B : Type.{u1}} [_inst_1 : CommRing.{u2} A] [_inst_2 : CommRing.{u1} B] {f : RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))}, (RingHom.Finite.{u2, u1} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u2, u1} A B _inst_1 _inst_2 f)
Case conversion may be inaccurate. Consider using '#align ring_hom.finite_type.of_finite RingHom.FiniteType.of_finiteₓ'. -/
theorem of_finite {f : A →+* B} (hf : f.Finite) : f.FiniteType :=
  @Module.Finite.finiteType _ _ _ _ f.toAlgebra hf
#align ring_hom.finite_type.of_finite RingHom.FiniteType.of_finite

/- warning: ring_hom.finite.to_finite_type -> RingHom.Finite.to_finiteType is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] {f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))}, (RingHom.Finite.{u1, u2} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u1, u2} A B _inst_1 _inst_2 f)
but is expected to have type
  forall {A : Type.{u2}} {B : Type.{u1}} [_inst_1 : CommRing.{u2} A] [_inst_2 : CommRing.{u1} B] {f : RingHom.{u2, u1} A B (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_1))) (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_2)))}, (RingHom.Finite.{u2, u1} A B _inst_1 _inst_2 f) -> (RingHom.FiniteType.{u2, u1} A B _inst_1 _inst_2 f)
Case conversion may be inaccurate. Consider using '#align ring_hom.finite.to_finite_type RingHom.Finite.to_finiteTypeₓ'. -/
alias of_finite ← _root_.ring_hom.finite.to_finite_type
#align ring_hom.finite.to_finite_type RingHom.Finite.to_finiteType

/- warning: ring_hom.finite_type.of_comp_finite_type -> RingHom.FiniteType.of_comp_finiteType is a dubious translation:
lean 3 declaration is
  forall {A : Type.{u1}} {B : Type.{u2}} {C : Type.{u3}} [_inst_1 : CommRing.{u1} A] [_inst_2 : CommRing.{u2} B] [_inst_3 : CommRing.{u3} C] {f : RingHom.{u1, u2} A B (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2)))} {g : RingHom.{u2, u3} B C (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3)))}, (RingHom.FiniteType.{u1, u3} A C _inst_1 _inst_3 (RingHom.comp.{u1, u2, u3} A B C (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A (CommRing.toRing.{u1} A _inst_1))) (NonAssocRing.toNonAssocSemiring.{u2} B (Ring.toNonAssocRing.{u2} B (CommRing.toRing.{u2} B _inst_2))) (NonAssocRing.toNonAssocSemiring.{u3} C (Ring.toNonAssocRing.{u3} C (CommRing.toRing.{u3} C _inst_3))) g f)) -> (RingHom.FiniteType.{u2, u3} B C _inst_2 _inst_3 g)
but is expected to have type
  forall {A : Type.{u3}} {B : Type.{u2}} {C : Type.{u1}} [_inst_1 : CommRing.{u3} A] [_inst_2 : CommRing.{u2} B] [_inst_3 : CommRing.{u1} C] {f : RingHom.{u3, u2} A B (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1))) (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2)))} {g : RingHom.{u2, u1} B C (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3)))}, (RingHom.FiniteType.{u3, u1} A C _inst_1 _inst_3 (RingHom.comp.{u3, u2, u1} A B C (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1))) (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_2))) (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_3))) g f)) -> (RingHom.FiniteType.{u2, u1} B C _inst_2 _inst_3 g)
Case conversion may be inaccurate. Consider using '#align ring_hom.finite_type.of_comp_finite_type RingHom.FiniteType.of_comp_finiteTypeₓ'. -/
theorem of_comp_finiteType {f : A →+* B} {g : B →+* C} (h : (g.comp f).FiniteType) : g.FiniteType :=
  by
  letI := f.to_algebra
  letI := g.to_algebra
  letI := (g.comp f).toAlgebra
  letI : IsScalarTower A B C := RestrictScalars.isScalarTower A B C
  letI : Algebra.FiniteType A C := h
  exact Algebra.FiniteType.of_restrictScalars_finiteType A B C
#align ring_hom.finite_type.of_comp_finite_type RingHom.FiniteType.of_comp_finiteType

end FiniteType

end RingHom

namespace AlgHom

variable {R A B C : Type _} [CommRing R]

variable [CommRing A] [CommRing B] [CommRing C]

variable [Algebra R A] [Algebra R B] [Algebra R C]

#print AlgHom.FiniteType /-
/-- An algebra morphism `A →ₐ[R] B` is of `finite_type` if it is of finite type as ring morphism.
In other words, if `B` is finitely generated as `A`-algebra. -/
def FiniteType (f : A →ₐ[R] B) : Prop :=
  f.toRingHom.FiniteType
#align alg_hom.finite_type AlgHom.FiniteType
-/

namespace Finite

variable {R A}

/- warning: alg_hom.finite.finite_type -> AlgHom.Finite.finiteType is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_6 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3))] {f : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6}, (AlgHom.Finite.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f) -> (AlgHom.FiniteType.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f)
but is expected to have type
  forall {R : Type.{u3}} {A : Type.{u2}} {B : Type.{u1}} [_inst_1 : CommRing.{u3} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u1} B] [_inst_5 : Algebra.{u3, u2} R A (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))] [_inst_6 : Algebra.{u3, u1} R B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))] {f : AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6}, (AlgHom.Finite.{u3, u2, u1} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f) -> (AlgHom.FiniteType.{u3, u2, u1} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f)
Case conversion may be inaccurate. Consider using '#align alg_hom.finite.finite_type AlgHom.Finite.finiteTypeₓ'. -/
theorem finiteType {f : A →ₐ[R] B} (hf : f.Finite) : FiniteType f :=
  RingHom.Finite.finiteType hf
#align alg_hom.finite.finite_type AlgHom.Finite.finiteType

end Finite

namespace FiniteType

variable (R A)

/- warning: alg_hom.finite_type.id -> AlgHom.FiniteType.id is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (A : Type.{u2}) [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_5 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))], AlgHom.FiniteType.{u1, u2, u2} R A A _inst_1 _inst_2 _inst_2 _inst_5 _inst_5 (AlgHom.id.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) _inst_5)
but is expected to have type
  forall (R : Type.{u2}) (A : Type.{u1}) [_inst_1 : CommRing.{u2} R] [_inst_2 : CommRing.{u1} A] [_inst_5 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2))], AlgHom.FiniteType.{u2, u1, u1} R A A _inst_1 _inst_2 _inst_2 _inst_5 _inst_5 (AlgHom.id.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2)) _inst_5)
Case conversion may be inaccurate. Consider using '#align alg_hom.finite_type.id AlgHom.FiniteType.idₓ'. -/
theorem id : FiniteType (AlgHom.id R A) :=
  RingHom.FiniteType.id A
#align alg_hom.finite_type.id AlgHom.FiniteType.id

variable {R A}

/- warning: alg_hom.finite_type.comp -> AlgHom.FiniteType.comp is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} {C : Type.{u4}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u3} B] [_inst_4 : CommRing.{u4} C] [_inst_5 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_6 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3))] [_inst_7 : Algebra.{u1, u4} R C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4))] {g : AlgHom.{u1, u3, u4} R B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_6 _inst_7} {f : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6}, (AlgHom.FiniteType.{u1, u3, u4} R B C _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 g) -> (AlgHom.FiniteType.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f) -> (AlgHom.FiniteType.{u1, u2, u4} R A C _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 (AlgHom.comp.{u1, u2, u3, u4} R A B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_5 _inst_6 _inst_7 g f))
but is expected to have type
  forall {R : Type.{u4}} {A : Type.{u1}} {B : Type.{u3}} {C : Type.{u2}} [_inst_1 : CommRing.{u4} R] [_inst_2 : CommRing.{u1} A] [_inst_3 : CommRing.{u3} B] [_inst_4 : CommRing.{u2} C] [_inst_5 : Algebra.{u4, u1} R A (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2))] [_inst_6 : Algebra.{u4, u3} R B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_3))] [_inst_7 : Algebra.{u4, u2} R C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} C (CommRing.toCommSemiring.{u2} C _inst_4))] {g : AlgHom.{u4, u3, u2} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_3)) (CommSemiring.toSemiring.{u2} C (CommRing.toCommSemiring.{u2} C _inst_4)) _inst_6 _inst_7} {f : AlgHom.{u4, u1, u3} R A B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2)) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_3)) _inst_5 _inst_6}, (AlgHom.FiniteType.{u4, u3, u2} R B C _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 g) -> (AlgHom.FiniteType.{u4, u1, u3} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f) -> (AlgHom.FiniteType.{u4, u1, u2} R A C _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 (AlgHom.comp.{u4, u1, u3, u2} R A B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} A (CommRing.toCommSemiring.{u1} A _inst_2)) (CommSemiring.toSemiring.{u3} B (CommRing.toCommSemiring.{u3} B _inst_3)) (CommSemiring.toSemiring.{u2} C (CommRing.toCommSemiring.{u2} C _inst_4)) _inst_5 _inst_6 _inst_7 g f))
Case conversion may be inaccurate. Consider using '#align alg_hom.finite_type.comp AlgHom.FiniteType.compₓ'. -/
theorem comp {g : B →ₐ[R] C} {f : A →ₐ[R] B} (hg : g.FiniteType) (hf : f.FiniteType) :
    (g.comp f).FiniteType :=
  RingHom.FiniteType.comp hg hf
#align alg_hom.finite_type.comp AlgHom.FiniteType.comp

/- warning: alg_hom.finite_type.comp_surjective -> AlgHom.FiniteType.comp_surjective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} {C : Type.{u4}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u3} B] [_inst_4 : CommRing.{u4} C] [_inst_5 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_6 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3))] [_inst_7 : Algebra.{u1, u4} R C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4))] {f : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6} {g : AlgHom.{u1, u3, u4} R B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_6 _inst_7}, (AlgHom.FiniteType.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f) -> (Function.Surjective.{succ u3, succ u4} B C (coeFn.{max (succ u3) (succ u4), max (succ u3) (succ u4)} (AlgHom.{u1, u3, u4} R B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_6 _inst_7) (fun (_x : AlgHom.{u1, u3, u4} R B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_6 _inst_7) => B -> C) ([anonymous].{u1, u3, u4} R B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_6 _inst_7) g)) -> (AlgHom.FiniteType.{u1, u2, u4} R A C _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 (AlgHom.comp.{u1, u2, u3, u4} R A B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_5 _inst_6 _inst_7 g f))
but is expected to have type
  forall {R : Type.{u4}} {A : Type.{u3}} {B : Type.{u2}} {C : Type.{u1}} [_inst_1 : CommRing.{u4} R] [_inst_2 : CommRing.{u3} A] [_inst_3 : CommRing.{u2} B] [_inst_4 : CommRing.{u1} C] [_inst_5 : Algebra.{u4, u3} R A (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))] [_inst_6 : Algebra.{u4, u2} R B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))] [_inst_7 : Algebra.{u4, u1} R C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))] {f : AlgHom.{u4, u3, u2} R A B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) _inst_5 _inst_6} {g : AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7}, (AlgHom.FiniteType.{u4, u3, u2} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f) -> (Function.Surjective.{succ u2, succ u1} B C (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7) B (fun (_x : B) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : B) => C) _x) (SMulHomClass.toFunLike.{max u2 u1, u4, u2, u1} (AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7) R B C (SMulZeroClass.toSMul.{u4, u2} R B (AddMonoid.toZero.{u2} B (AddCommMonoid.toAddMonoid.{u2} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))))))) (DistribSMul.toSMulZeroClass.{u4, u2} R B (AddMonoid.toAddZeroClass.{u2} B (AddCommMonoid.toAddMonoid.{u2} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))))))) (DistribMulAction.toDistribSMul.{u4, u2} R B (MonoidWithZero.toMonoid.{u4} R (Semiring.toMonoidWithZero.{u4} R (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)))))) (Module.toDistribMulAction.{u4, u2} R B (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))))) (Algebra.toModule.{u4, u2} R B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) _inst_6))))) (SMulZeroClass.toSMul.{u4, u1} R C (AddMonoid.toZero.{u1} C (AddCommMonoid.toAddMonoid.{u1} C (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))))))) (DistribSMul.toSMulZeroClass.{u4, u1} R C (AddMonoid.toAddZeroClass.{u1} C (AddCommMonoid.toAddMonoid.{u1} C (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))))))) (DistribMulAction.toDistribSMul.{u4, u1} R C (MonoidWithZero.toMonoid.{u4} R (Semiring.toMonoidWithZero.{u4} R (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u1} C (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)))))) (Module.toDistribMulAction.{u4, u1} R C (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))))) (Algebra.toModule.{u4, u1} R C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_7))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u4, u2, u1} (AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7) R B C (MonoidWithZero.toMonoid.{u4} R (Semiring.toMonoidWithZero.{u4} R (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)))))) (AddCommMonoid.toAddMonoid.{u1} C (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)))))) (Module.toDistribMulAction.{u4, u2} R B (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))))) (Algebra.toModule.{u4, u2} R B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) _inst_6)) (Module.toDistribMulAction.{u4, u1} R C (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))))) (Algebra.toModule.{u4, u1} R C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_7)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u4, u2, u1} (AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7) R B C (MonoidWithZero.toMonoid.{u4} R (Semiring.toMonoidWithZero.{u4} R (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)))) (Module.toDistribMulAction.{u4, u2} R B (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} B (Semiring.toNonAssocSemiring.{u2} B (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))))) (Algebra.toModule.{u4, u2} R B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) _inst_6)) (Module.toDistribMulAction.{u4, u1} R C (CommSemiring.toSemiring.{u4} R (CommRing.toCommSemiring.{u4} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} C (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} C (Semiring.toNonAssocSemiring.{u1} C (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))))) (Algebra.toModule.{u4, u1} R C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_7)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u4, u2, u1, max u2 u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7 (AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7) (AlgHom.algHomClass.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7))))) g)) -> (AlgHom.FiniteType.{u4, u3, u1} R A C _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 (AlgHom.comp.{u4, u3, u2, u1} R A B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_5 _inst_6 _inst_7 g f))
Case conversion may be inaccurate. Consider using '#align alg_hom.finite_type.comp_surjective AlgHom.FiniteType.comp_surjectiveₓ'. -/
theorem comp_surjective {f : A →ₐ[R] B} {g : B →ₐ[R] C} (hf : f.FiniteType) (hg : Surjective g) :
    (g.comp f).FiniteType :=
  RingHom.FiniteType.comp_surjective hf hg
#align alg_hom.finite_type.comp_surjective AlgHom.FiniteType.comp_surjective

/- warning: alg_hom.finite_type.of_surjective -> AlgHom.FiniteType.of_surjective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u3} B] [_inst_5 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_6 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3))] (f : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6), (Function.Surjective.{succ u2, succ u3} A B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6) (fun (_x : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6) => A -> B) ([anonymous].{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6) f)) -> (AlgHom.FiniteType.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f)
but is expected to have type
  forall {R : Type.{u3}} {A : Type.{u2}} {B : Type.{u1}} [_inst_1 : CommRing.{u3} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u1} B] [_inst_5 : Algebra.{u3, u2} R A (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))] [_inst_6 : Algebra.{u3, u1} R B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))] (f : AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6), (Function.Surjective.{succ u2, succ u1} A B (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u1, u3, u2, u1} (AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6) R A B (SMulZeroClass.toSMul.{u3, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribSMul.toSMulZeroClass.{u3, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))))) (DistribMulAction.toDistribSMul.{u3, u2} R A (MonoidWithZero.toMonoid.{u3} R (Semiring.toMonoidWithZero.{u3} R (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (Module.toDistribMulAction.{u3, u2} R A (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u3, u2} R A (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_5))))) (SMulZeroClass.toSMul.{u3, u1} R B (AddMonoid.toZero.{u1} B (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))))))) (DistribSMul.toSMulZeroClass.{u3, u1} R B (AddMonoid.toAddZeroClass.{u1} B (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))))))) (DistribMulAction.toDistribSMul.{u3, u1} R B (MonoidWithZero.toMonoid.{u3} R (Semiring.toMonoidWithZero.{u3} R (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)))))) (Module.toDistribMulAction.{u3, u1} R B (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))))) (Algebra.toModule.{u3, u1} R B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_6))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u3, u2, u1} (AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6) R A B (MonoidWithZero.toMonoid.{u3} R (Semiring.toMonoidWithZero.{u3} R (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))))) (AddCommMonoid.toAddMonoid.{u1} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)))))) (Module.toDistribMulAction.{u3, u2} R A (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u3, u2} R A (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_5)) (Module.toDistribMulAction.{u3, u1} R B (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))))) (Algebra.toModule.{u3, u1} R B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_6)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u3, u2, u1} (AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6) R A B (MonoidWithZero.toMonoid.{u3} R (Semiring.toMonoidWithZero.{u3} R (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)))) (Module.toDistribMulAction.{u3, u2} R A (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2))))) (Algebra.toModule.{u3, u2} R A (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) _inst_5)) (Module.toDistribMulAction.{u3, u1} R B (CommSemiring.toSemiring.{u3} R (CommRing.toCommSemiring.{u3} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} B (Semiring.toNonAssocSemiring.{u1} B (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3))))) (Algebra.toModule.{u3, u1} R B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_6)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u3, u2, u1, max u2 u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6 (AlgHom.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6) (AlgHom.algHomClass.{u3, u2, u1} R A B (CommRing.toCommSemiring.{u3} R _inst_1) (CommSemiring.toSemiring.{u2} A (CommRing.toCommSemiring.{u2} A _inst_2)) (CommSemiring.toSemiring.{u1} B (CommRing.toCommSemiring.{u1} B _inst_3)) _inst_5 _inst_6))))) f)) -> (AlgHom.FiniteType.{u3, u2, u1} R A B _inst_1 _inst_2 _inst_3 _inst_5 _inst_6 f)
Case conversion may be inaccurate. Consider using '#align alg_hom.finite_type.of_surjective AlgHom.FiniteType.of_surjectiveₓ'. -/
theorem of_surjective (f : A →ₐ[R] B) (hf : Surjective f) : f.FiniteType :=
  RingHom.FiniteType.of_surjective f hf
#align alg_hom.finite_type.of_surjective AlgHom.FiniteType.of_surjective

/- warning: alg_hom.finite_type.of_comp_finite_type -> AlgHom.FiniteType.of_comp_finiteType is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} {C : Type.{u4}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommRing.{u2} A] [_inst_3 : CommRing.{u3} B] [_inst_4 : CommRing.{u4} C] [_inst_5 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2))] [_inst_6 : Algebra.{u1, u3} R B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3))] [_inst_7 : Algebra.{u1, u4} R C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4))] {f : AlgHom.{u1, u2, u3} R A B (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) _inst_5 _inst_6} {g : AlgHom.{u1, u3, u4} R B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_6 _inst_7}, (AlgHom.FiniteType.{u1, u2, u4} R A C _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 (AlgHom.comp.{u1, u2, u3, u4} R A B C (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_2)) (Ring.toSemiring.{u3} B (CommRing.toRing.{u3} B _inst_3)) (Ring.toSemiring.{u4} C (CommRing.toRing.{u4} C _inst_4)) _inst_5 _inst_6 _inst_7 g f)) -> (AlgHom.FiniteType.{u1, u3, u4} R B C _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 g)
but is expected to have type
  forall {R : Type.{u4}} {A : Type.{u3}} {B : Type.{u2}} {C : Type.{u1}} [_inst_1 : CommRing.{u4} R] [_inst_2 : CommRing.{u3} A] [_inst_3 : CommRing.{u2} B] [_inst_4 : CommRing.{u1} C] [_inst_5 : Algebra.{u4, u3} R A (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2))] [_inst_6 : Algebra.{u4, u2} R B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3))] [_inst_7 : Algebra.{u4, u1} R C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4))] {f : AlgHom.{u4, u3, u2} R A B (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) _inst_5 _inst_6} {g : AlgHom.{u4, u2, u1} R B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_6 _inst_7}, (AlgHom.FiniteType.{u4, u3, u1} R A C _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 (AlgHom.comp.{u4, u3, u2, u1} R A B C (CommRing.toCommSemiring.{u4} R _inst_1) (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_2)) (CommSemiring.toSemiring.{u2} B (CommRing.toCommSemiring.{u2} B _inst_3)) (CommSemiring.toSemiring.{u1} C (CommRing.toCommSemiring.{u1} C _inst_4)) _inst_5 _inst_6 _inst_7 g f)) -> (AlgHom.FiniteType.{u4, u2, u1} R B C _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 g)
Case conversion may be inaccurate. Consider using '#align alg_hom.finite_type.of_comp_finite_type AlgHom.FiniteType.of_comp_finiteTypeₓ'. -/
theorem of_comp_finiteType {f : A →ₐ[R] B} {g : B →ₐ[R] C} (h : (g.comp f).FiniteType) :
    g.FiniteType :=
  RingHom.FiniteType.of_comp_finiteType h
#align alg_hom.finite_type.of_comp_finite_type AlgHom.FiniteType.of_comp_finiteType

end FiniteType

end AlgHom

section MonoidAlgebra

variable {R : Type _} {M : Type _}

namespace AddMonoidAlgebra

open Algebra AddSubmonoid Submodule

section Span

section Semiring

variable [CommSemiring R] [AddMonoid M]

/- warning: add_monoid_algebra.mem_adjoin_support -> AddMonoidAlgebra.mem_adjoin_support is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : AddMonoid.{u2} M] (f : AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)), Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (SetLike.hasMem.{max u2 u1, max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Subalgebra.setLike.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))) f (Algebra.adjoin.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.image.{u2, max u2 u1} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) (Finsupp.support.{u2, u1} M R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) f))))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : AddMonoid.{u1} M] (f : AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)), Membership.mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Subalgebra.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2)) (SetLike.instMembership.{max u2 u1, max u2 u1} (Subalgebra.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2)) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Subalgebra.instSetLikeSubalgebra.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2))) f (Algebra.adjoin.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2) (Set.image.{u1, max u2 u1} M (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.of'.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Finset.toSet.{u1} M (Finsupp.support.{u1, u2} M R (MonoidWithZero.toZero.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) f))))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.mem_adjoin_support AddMonoidAlgebra.mem_adjoin_supportₓ'. -/
/-- An element of `add_monoid_algebra R M` is in the subalgebra generated by its support. -/
theorem mem_adjoin_support (f : AddMonoidAlgebra R M) : f ∈ adjoin R (of' R M '' f.support) :=
  by
  suffices span R (of' R M '' f.support) ≤ (adjoin R (of' R M '' f.support)).toSubmodule by
    exact this (mem_span_support f)
  rw [Submodule.span_le]
  exact subset_adjoin
#align add_monoid_algebra.mem_adjoin_support AddMonoidAlgebra.mem_adjoin_support

/- warning: add_monoid_algebra.support_gen_of_gen -> AddMonoidAlgebra.support_gen_of_gen is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : AddMonoid.{u2} M] {S : Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{succ (max u2 u1)} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{succ (max u2 u1)} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.iUnion.{max u2 u1, succ (max u2 u1)} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{max u2 u1, 0} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => Set.image.{u2, max u2 u1} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) (Finsupp.support.{u2, u1} M R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) f)))))) (Top.top.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : AddMonoid.{u2} M] {S : Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.iUnion.{max u1 u2, succ (max u1 u2)} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{max u1 u2, 0} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Membership.mem.{max u1 u2, max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.mem.{max u1 u2, max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => Set.image.{u2, max u1 u2} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Finset.toSet.{u2} M (Finsupp.support.{u2, u1} M R (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) f)))))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.support_gen_of_gen AddMonoidAlgebra.support_gen_of_genₓ'. -/
/-- If a set `S` generates, as algebra, `add_monoid_algebra R M`, then the set of supports of
elements of `S` generates `add_monoid_algebra R M`. -/
theorem support_gen_of_gen {S : Set (AddMonoidAlgebra R M)} (hS : Algebra.adjoin R S = ⊤) :
    Algebra.adjoin R (⋃ f ∈ S, of' R M '' (f.support : Set M)) = ⊤ :=
  by
  refine' le_antisymm le_top _
  rw [← hS, adjoin_le_iff]
  intro f hf
  have hincl :
    of' R M '' f.support ⊆ ⋃ (g : AddMonoidAlgebra R M) (H : g ∈ S), of' R M '' g.support :=
    by
    intro s hs
    exact Set.mem_iUnion₂.2 ⟨f, ⟨hf, hs⟩⟩
  exact adjoin_mono hincl (mem_adjoin_support f)
#align add_monoid_algebra.support_gen_of_gen AddMonoidAlgebra.support_gen_of_gen

/- warning: add_monoid_algebra.support_gen_of_gen' -> AddMonoidAlgebra.support_gen_of_gen' is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : AddMonoid.{u2} M] {S : Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{succ (max u2 u1)} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{succ (max u2 u1)} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.image.{u2, max u2 u1} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.iUnion.{u2, succ (max u2 u1)} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{u2, 0} M (Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => (fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) (Finsupp.support.{u2, u1} M R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) f)))))) (Top.top.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : AddMonoid.{u2} M] {S : Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.image.{u2, max u1 u2} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.iUnion.{u2, succ (max u1 u2)} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{u2, 0} M (Membership.mem.{max u1 u2, max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.mem.{max u1 u2, max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => Finset.toSet.{u2} M (Finsupp.support.{u2, u1} M R (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) f)))))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.support_gen_of_gen' AddMonoidAlgebra.support_gen_of_gen'ₓ'. -/
/-- If a set `S` generates, as algebra, `add_monoid_algebra R M`, then the image of the union of
the supports of elements of `S` generates `add_monoid_algebra R M`. -/
theorem support_gen_of_gen' {S : Set (AddMonoidAlgebra R M)} (hS : Algebra.adjoin R S = ⊤) :
    Algebra.adjoin R (of' R M '' ⋃ f ∈ S, (f.support : Set M)) = ⊤ :=
  by
  suffices (of' R M '' ⋃ f ∈ S, (f.support : Set M)) = ⋃ f ∈ S, of' R M '' (f.support : Set M)
    by
    rw [this]
    exact support_gen_of_gen hS
  simp only [Set.image_iUnion]
#align add_monoid_algebra.support_gen_of_gen' AddMonoidAlgebra.support_gen_of_gen'

end Semiring

section Ring

variable [CommRing R] [AddCommMonoid M]

/- warning: add_monoid_algebra.exists_finset_adjoin_eq_top -> AddMonoidAlgebra.exists_finset_adjoin_eq_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : AddCommMonoid.{u2} M] [h : Algebra.FiniteType.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))], Exists.{succ u2} (Finset.{u2} M) (fun (G : Finset.{u2} M) => Eq.{succ (max u2 u1)} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (Algebra.adjoin.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (Set.image.{u2, max u2 u1} M (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.of'.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) G))) (Top.top.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (CompleteLattice.toHasTop.{max u2 u1} (Subalgebra.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (Algebra.Subalgebra.completeLattice.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))))))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : AddCommMonoid.{u2} M] [h : Algebra.FiniteType.{max u2 u1, u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))], Exists.{succ u2} (Finset.{u2} M) (fun (G : Finset.{u2} M) => Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (Algebra.adjoin.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (Set.image.{u2, max u1 u2} M (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Finset.toSet.{u2} M G))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (AddCommMonoid.toAddMonoid.{u2} M _inst_2))))))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.exists_finset_adjoin_eq_top AddMonoidAlgebra.exists_finset_adjoin_eq_topₓ'. -/
/-- If `add_monoid_algebra R M` is of finite type, there there is a `G : finset M` such that its
image generates, as algera, `add_monoid_algebra R M`. -/
theorem exists_finset_adjoin_eq_top [h : FiniteType R (AddMonoidAlgebra R M)] :
    ∃ G : Finset M, Algebra.adjoin R (of' R M '' G) = ⊤ :=
  by
  obtain ⟨S, hS⟩ := h
  letI : DecidableEq M := Classical.decEq M
  use Finset.biUnion S fun f => f.support
  have : (Finset.biUnion S fun f => f.support : Set M) = ⋃ f ∈ S, (f.support : Set M) := by
    simp only [Finset.set_biUnion_coe, Finset.coe_biUnion]
  rw [this]
  exact support_gen_of_gen' hS
#align add_monoid_algebra.exists_finset_adjoin_eq_top AddMonoidAlgebra.exists_finset_adjoin_eq_top

/- warning: add_monoid_algebra.of'_mem_span -> AddMonoidAlgebra.of'_mem_span is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Nontrivial.{u1} R] {m : M} {S : Set.{u2} M}, Iff (Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (SetLike.hasMem.{max u2 u1, max u2 u1} (Submodule.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.setLike.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (AddMonoidAlgebra.of'.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) m) (Submodule.span.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (Set.image.{u2, max u2 u1} M (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.of'.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) S))) (Membership.Mem.{u2, u2} M (Set.{u2} M) (Set.hasMem.{u2} M) m S)
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommRing.{u2} R] [_inst_2 : AddCommMonoid.{u1} M] [_inst_3 : Nontrivial.{u2} R] {m : M} {S : Set.{u1} M}, Iff (Membership.mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submodule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (SetLike.instMembership.{max u2 u1, max u2 u1} (Submodule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submodule.setLike.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (AddMonoidAlgebra.of'.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) m) (Submodule.span.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (Set.image.{u1, max u2 u1} M (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.of'.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) S))) (Membership.mem.{u1, u1} M (Set.{u1} M) (Set.instMembershipSet.{u1} M) m S)
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.of'_mem_span AddMonoidAlgebra.of'_mem_spanₓ'. -/
/-- The image of an element `m : M` in `add_monoid_algebra R M` belongs the submodule generated by
`S : set M` if and only if `m ∈ S`. -/
theorem of'_mem_span [Nontrivial R] {m : M} {S : Set M} :
    of' R M m ∈ span R (of' R M '' S) ↔ m ∈ S :=
  by
  refine' ⟨fun h => _, fun h => Submodule.subset_span <| Set.mem_image_of_mem (of R M) h⟩
  rw [of', ← Finsupp.supported_eq_span_single, Finsupp.mem_supported,
    Finsupp.support_single_ne_zero _ (one_ne_zero' R)] at h
  simpa using h
#align add_monoid_algebra.of'_mem_span AddMonoidAlgebra.of'_mem_span

/- warning: add_monoid_algebra.mem_closure_of_mem_span_closure -> AddMonoidAlgebra.mem_closure_of_mem_span_closure is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Nontrivial.{u1} R] {m : M} {S : Set.{u2} M}, (Membership.Mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (SetLike.hasMem.{max u2 u1, max u2 u1} (Submodule.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.setLike.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (AddMonoidAlgebra.of'.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) m) (Submodule.span.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) ((fun (a : Type.{max u2 u1}) (b : Type.{max u2 u1}) [self : HasLiftT.{succ (max u2 u1), succ (max u2 u1)} a b] => self.0) (Submonoid.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (HasLiftT.mk.{succ (max u2 u1), succ (max u2 u1)} (Submonoid.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (CoeTCₓ.coe.{succ (max u2 u1), succ (max u2 u1)} (Submonoid.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))) (Set.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (SetLike.Set.hasCoeT.{max u2 u1, max u2 u1} (Submonoid.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))) (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submonoid.setLike.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))))))))) (Submonoid.closure.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))))) (Set.image.{u2, max u2 u1} M (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddMonoidAlgebra.of'.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) S))))) -> (Membership.Mem.{u2, u2} M (AddSubmonoid.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (SetLike.hasMem.{u2, u2} (AddSubmonoid.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) M (AddSubmonoid.setLike.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))) m (AddSubmonoid.closure.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) S))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommRing.{u2} R] [_inst_2 : AddCommMonoid.{u1} M] [_inst_3 : Nontrivial.{u2} R] {m : M} {S : Set.{u1} M}, (Membership.mem.{max u2 u1, max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submodule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (SetLike.instMembership.{max u2 u1, max u2 u1} (Submodule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submodule.setLike.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (AddMonoidAlgebra.of'.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) m) (Submodule.span.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (SetLike.coe.{max u2 u1, max u2 u1} (Submonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2)))))) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submonoid.instSetLikeSubmonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2)))))) (Submonoid.closure.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2))))) (Set.image.{u1, max u2 u1} M (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoidAlgebra.of'.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) S))))) -> (Membership.mem.{u1, u1} M (AddSubmonoid.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2))) (SetLike.instMembership.{u1, u1} (AddSubmonoid.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2))) M (AddSubmonoid.instSetLikeAddSubmonoid.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2)))) m (AddSubmonoid.closure.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_2)) S))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.mem_closure_of_mem_span_closure AddMonoidAlgebra.mem_closure_of_mem_span_closureₓ'. -/
/--
If the image of an element `m : M` in `add_monoid_algebra R M` belongs the submodule generated by
the closure of some `S : set M` then `m ∈ closure S`. -/
theorem mem_closure_of_mem_span_closure [Nontrivial R] {m : M} {S : Set M}
    (h : of' R M m ∈ span R (Submonoid.closure (of' R M '' S) : Set (AddMonoidAlgebra R M))) :
    m ∈ closure S :=
  by
  suffices Multiplicative.ofAdd m ∈ Submonoid.closure (Multiplicative.toAdd ⁻¹' S) by
    simpa [← to_submonoid_closure]
  let S' := @Submonoid.closure M Multiplicative.mulOneClass S
  have h' : Submonoid.map (of R M) S' = Submonoid.closure ((fun x : M => (of R M) x) '' S) :=
    MonoidHom.map_mclosure _ _
  rw [Set.image_congr' (show ∀ x, of' R M x = of R M x from fun x => of'_eq_of x), ← h'] at h
  simpa using of'_mem_span.1 h
#align add_monoid_algebra.mem_closure_of_mem_span_closure AddMonoidAlgebra.mem_closure_of_mem_span_closure

end Ring

end Span

variable [AddCommMonoid M]

/- warning: add_monoid_algebra.mv_polynomial_aeval_of_surjective_of_closure -> AddMonoidAlgebra.mvPolynomial_aeval_of_surjective_of_closure is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : AddCommMonoid.{u2} M] [_inst_2 : CommSemiring.{u1} R] {S : Set.{u2} M}, (Eq.{succ u2} (AddSubmonoid.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1))) (AddSubmonoid.closure.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1)) S) (Top.top.{u2} (AddSubmonoid.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1))) (AddSubmonoid.hasTop.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1))))) -> (Function.Surjective.{max (succ u2) (succ u1), max (succ u2) (succ u1)} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (coeFn.{succ (max u2 u1), succ (max u2 u1)} (AlgHom.{u1, max u2 u1, max u2 u1} R (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MvPolynomial.commSemiring.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u1, u1, u2} R R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 _inst_2 (Algebra.id.{u1} R _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))) (fun (_x : AlgHom.{u1, max u2 u1, max u2 u1} R (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MvPolynomial.commSemiring.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u1, u1, u2} R R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 _inst_2 (Algebra.id.{u1} R _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))) => (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) -> (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2))) ([anonymous].{u1, max u2 u1, max u2 u1} R (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MvPolynomial.commSemiring.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u1, u1, u2} R R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 _inst_2 (Algebra.id.{u1} R _inst_2)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))) (MvPolynomial.aeval.{u1, max u2 u1, u2} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 (AddMonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (AddCommMonoid.toAddMonoid.{u2} M _inst_1)) (fun (s : coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) => AddMonoidAlgebra.of'.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (coeSubtype.{succ u2} M (fun (x : M) => Membership.Mem.{u2, u2} M (Set.{u2} M) (Set.hasMem.{u2} M) x S))))) s)))))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : AddCommMonoid.{u1} M] [_inst_2 : CommSemiring.{u2} R] {S : Set.{u1} M}, (Eq.{succ u1} (AddSubmonoid.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) (AddSubmonoid.closure.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_1)) S) (Top.top.{u1} (AddSubmonoid.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) (AddSubmonoid.instTopAddSubmonoid.{u1} M (AddMonoid.toAddZeroClass.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_1))))) -> (Function.Surjective.{max (succ u2) (succ u1), max (succ u2) (succ u1)} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (FunLike.coe.{max (succ u2) (succ u1), max (succ u1) (succ u2), max (succ u2) (succ u1)} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (fun (_x : MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) => AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _x) (SMulHomClass.toFunLike.{max u2 u1, u2, max u1 u2, max u2 u1} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (SMulZeroClass.toSMul.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoid.toZero.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))))) (DistribSMul.toSMulZeroClass.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoid.toAddZeroClass.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))))) (DistribMulAction.toDistribSMul.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)))))) (Module.toDistribMulAction.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))) (Algebra.toModule.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2))))))) (SMulZeroClass.toSMul.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoid.toZero.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))))) (DistribSMul.toSMulZeroClass.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoid.toAddZeroClass.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))))) (DistribMulAction.toDistribSMul.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (AddCommMonoid.toAddMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)))))) (Module.toDistribMulAction.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))) (Algebra.toModule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u2, max u1 u2, max u2 u1} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)))))) (AddCommMonoid.toAddMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)))))) (Module.toDistribMulAction.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))) (Algebra.toModule.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)))) (Module.toDistribMulAction.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))) (Algebra.toModule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1)))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u2, max u1 u2, max u2 u1} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)))) (Module.toDistribMulAction.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))) (Algebra.toModule.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)))) (Module.toDistribMulAction.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))) (Algebra.toModule.{u2, max u2 u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1)))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, max u1 u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1)) (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) (AlgHom.algHomClass.{u2, max u1 u2, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))))))) (MvPolynomial.aeval.{u2, max u2 u1, u1} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Set.Elem.{u1} M S) _inst_2 (AddMonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (AddCommMonoid.toAddMonoid.{u1} M _inst_1)) (fun (s : Set.Elem.{u1} M S) => AddMonoidAlgebra.of'.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Subtype.val.{succ u1} M (fun (x : M) => Membership.mem.{u1, u1} M (Set.{u1} M) (Set.instMembershipSet.{u1} M) x S) s)))))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.mv_polynomial_aeval_of_surjective_of_closure AddMonoidAlgebra.mvPolynomial_aeval_of_surjective_of_closureₓ'. -/
/-- If a set `S` generates an additive monoid `M`, then the image of `M` generates, as algebra,
`add_monoid_algebra R M`. -/
theorem mvPolynomial_aeval_of_surjective_of_closure [CommSemiring R] {S : Set M}
    (hS : closure S = ⊤) :
    Function.Surjective
      (MvPolynomial.aeval fun s : S => of' R M ↑s : MvPolynomial S R → AddMonoidAlgebra R M) :=
  by
  refine' fun f => induction_on f (fun m => _) _ _
  · have : m ∈ closure S := hS.symm ▸ mem_top _
    refine' closure_induction this (fun m hm => _) _ _
    · exact ⟨MvPolynomial.X ⟨m, hm⟩, MvPolynomial.aeval_X _ _⟩
    · exact ⟨1, AlgHom.map_one _⟩
    · rintro m₁ m₂ ⟨P₁, hP₁⟩ ⟨P₂, hP₂⟩
      exact
        ⟨P₁ * P₂, by
          rw [AlgHom.map_mul, hP₁, hP₂, of_apply, of_apply, of_apply, single_mul_single,
              one_mul] <;>
            rfl⟩
  · rintro f g ⟨P, rfl⟩ ⟨Q, rfl⟩
    exact ⟨P + Q, AlgHom.map_add _ _ _⟩
  · rintro r f ⟨P, rfl⟩
    exact ⟨r • P, AlgHom.map_smul _ _ _⟩
#align add_monoid_algebra.mv_polynomial_aeval_of_surjective_of_closure AddMonoidAlgebra.mvPolynomial_aeval_of_surjective_of_closure

variable (R M)

/- warning: add_monoid_algebra.finite_type_of_fg -> AddMonoidAlgebra.finiteType_of_fg is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (M : Type.{u2}) [_inst_1 : AddCommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [h : AddMonoid.FG.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1)], Algebra.FiniteType.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))
but is expected to have type
  forall (R : Type.{u1}) (M : Type.{u2}) [_inst_1 : AddCommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [h : AddMonoid.FG.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1)], Algebra.FiniteType.{max u2 u1, u1} R (AddMonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (AddMonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.finite_type_of_fg AddMonoidAlgebra.finiteType_of_fgₓ'. -/
/-- If an additive monoid `M` is finitely generated then `add_monoid_algebra R M` is of finite
type. -/
instance finiteType_of_fg [CommRing R] [h : AddMonoid.FG M] : FiniteType R (AddMonoidAlgebra R M) :=
  by
  obtain ⟨S, hS⟩ := h.out
  exact
    (finite_type.mv_polynomial R (S : Set M)).ofSurjective
      (MvPolynomial.aeval fun s : (S : Set M) => of' R M ↑s)
      (mv_polynomial_aeval_of_surjective_of_closure hS)
#align add_monoid_algebra.finite_type_of_fg AddMonoidAlgebra.finiteType_of_fg

variable {R M}

/- warning: add_monoid_algebra.finite_type_iff_fg -> AddMonoidAlgebra.finiteType_iff_fg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : AddCommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [_inst_3 : Nontrivial.{u1} R], Iff (Algebra.FiniteType.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))) (AddMonoid.FG.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : AddCommMonoid.{u1} M] [_inst_2 : CommRing.{u2} R] [_inst_3 : Nontrivial.{u2} R], Iff (Algebra.FiniteType.{max u1 u2, u2} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2))) (CommRing.toCommSemiring.{u2} R _inst_2) (AddMonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{u1} M _inst_1)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R (CommRing.toCommSemiring.{u2} R _inst_2) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))) (AddMonoid.FG.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_1))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.finite_type_iff_fg AddMonoidAlgebra.finiteType_iff_fgₓ'. -/
/-- An additive monoid `M` is finitely generated if and only if `add_monoid_algebra R M` is of
finite type. -/
theorem finiteType_iff_fg [CommRing R] [Nontrivial R] :
    FiniteType R (AddMonoidAlgebra R M) ↔ AddMonoid.FG M :=
  by
  refine' ⟨fun h => _, fun h => @AddMonoidAlgebra.finiteType_of_fg _ _ _ _ h⟩
  obtain ⟨S, hS⟩ := @exists_finset_adjoin_eq_top R M _ _ h
  refine' AddMonoid.fg_def.2 ⟨S, (eq_top_iff' _).2 fun m => _⟩
  have hm : of' R M m ∈ (adjoin R (of' R M '' ↑S)).toSubmodule := by
    simp only [hS, top_to_submodule, Submodule.mem_top]
  rw [adjoin_eq_span] at hm
  exact mem_closure_of_mem_span_closure hm
#align add_monoid_algebra.finite_type_iff_fg AddMonoidAlgebra.finiteType_iff_fg

/- warning: add_monoid_algebra.fg_of_finite_type -> AddMonoidAlgebra.fg_of_finiteType is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : AddCommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [_inst_3 : Nontrivial.{u1} R] [h : Algebra.FiniteType.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (AddMonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1)) (AddMonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (AddCommMonoid.toAddMonoid.{u2} M _inst_1))], AddMonoid.FG.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_1)
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : AddCommMonoid.{u1} M] [_inst_2 : CommRing.{u2} R] [_inst_3 : Nontrivial.{u2} R] [h : Algebra.FiniteType.{max u1 u2, u2} R (AddMonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2))) (CommRing.toCommSemiring.{u2} R _inst_2) (AddMonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{u1} M _inst_1)) (AddMonoidAlgebra.algebra.{u2, u1, u2} R M R (CommRing.toCommSemiring.{u2} R _inst_2) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{u1} M _inst_1))], AddMonoid.FG.{u1} M (AddCommMonoid.toAddMonoid.{u1} M _inst_1)
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.fg_of_finite_type AddMonoidAlgebra.fg_of_finiteTypeₓ'. -/
/-- If `add_monoid_algebra R M` is of finite type then `M` is finitely generated. -/
theorem fg_of_finiteType [CommRing R] [Nontrivial R] [h : FiniteType R (AddMonoidAlgebra R M)] :
    AddMonoid.FG M :=
  finiteType_iff_fg.1 h
#align add_monoid_algebra.fg_of_finite_type AddMonoidAlgebra.fg_of_finiteType

/- warning: add_monoid_algebra.finite_type_iff_group_fg -> AddMonoidAlgebra.finiteType_iff_group_fg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {G : Type.{u2}} [_inst_2 : AddCommGroup.{u2} G] [_inst_3 : CommRing.{u1} R] [_inst_4 : Nontrivial.{u1} R], Iff (Algebra.FiniteType.{u1, max u2 u1} R (AddMonoidAlgebra.{u1, u2} R G (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_3))) (CommRing.toCommSemiring.{u1} R _inst_3) (AddMonoidAlgebra.semiring.{u1, u2} R G (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_3)) (SubNegMonoid.toAddMonoid.{u2} G (AddGroup.toSubNegMonoid.{u2} G (AddCommGroup.toAddGroup.{u2} G _inst_2)))) (AddMonoidAlgebra.algebra.{u1, u2, u1} R G R (CommRing.toCommSemiring.{u1} R _inst_3) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_3)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (SubNegMonoid.toAddMonoid.{u2} G (AddGroup.toSubNegMonoid.{u2} G (AddCommGroup.toAddGroup.{u2} G _inst_2))))) (AddGroup.FG.{u2} G (AddCommGroup.toAddGroup.{u2} G _inst_2))
but is expected to have type
  forall {R : Type.{u1}} {G : Type.{u2}} [_inst_2 : AddCommGroup.{u2} G] [_inst_3 : CommRing.{u1} R] [_inst_4 : Nontrivial.{u1} R], Iff (Algebra.FiniteType.{max u2 u1, u1} R (AddMonoidAlgebra.{u1, u2} R G (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3))) (CommRing.toCommSemiring.{u1} R _inst_3) (AddMonoidAlgebra.semiring.{u1, u2} R G (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (SubNegMonoid.toAddMonoid.{u2} G (AddGroup.toSubNegMonoid.{u2} G (AddCommGroup.toAddGroup.{u2} G _inst_2)))) (AddMonoidAlgebra.algebra.{u1, u2, u1} R G R (CommRing.toCommSemiring.{u1} R _inst_3) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (SubNegMonoid.toAddMonoid.{u2} G (AddGroup.toSubNegMonoid.{u2} G (AddCommGroup.toAddGroup.{u2} G _inst_2))))) (AddGroup.FG.{u2} G (AddCommGroup.toAddGroup.{u2} G _inst_2))
Case conversion may be inaccurate. Consider using '#align add_monoid_algebra.finite_type_iff_group_fg AddMonoidAlgebra.finiteType_iff_group_fgₓ'. -/
/-- An additive group `G` is finitely generated if and only if `add_monoid_algebra R G` is of
finite type. -/
theorem finiteType_iff_group_fg {G : Type _} [AddCommGroup G] [CommRing R] [Nontrivial R] :
    FiniteType R (AddMonoidAlgebra R G) ↔ AddGroup.FG G := by
  simpa [AddGroup.fg_iff_addMonoid_fg] using finite_type_iff_fg
#align add_monoid_algebra.finite_type_iff_group_fg AddMonoidAlgebra.finiteType_iff_group_fg

end AddMonoidAlgebra

namespace MonoidAlgebra

open Algebra Submonoid Submodule

section Span

section Semiring

variable [CommSemiring R] [Monoid M]

/- warning: monoid_algebra.mem_adjoin_support -> MonoidAlgebra.mem_adjoin_support is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Monoid.{u2} M] (f : MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)), Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (SetLike.hasMem.{max u1 u2, max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Subalgebra.setLike.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))) f (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) => M -> (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) (Finsupp.support.{u2, u1} M R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) f))))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Monoid.{u1} M] (f : MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)), Membership.mem.{max u2 u1, max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Subalgebra.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2)) (SetLike.instMembership.{max u2 u1, max u2 u1} (Subalgebra.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2)) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Subalgebra.instSetLikeSubalgebra.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2))) f (Algebra.adjoin.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_1 (CommSemiring.toSemiring.{u2} R _inst_1) (Algebra.id.{u2} R _inst_1) _inst_2) (Set.image.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (FunLike.coe.{max (succ u2) (succ u1), succ u1, max (succ u2) (succ u1)} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) _x) (MulHomClass.toFunLike.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MulOneClass.toMul.{u1} M (Monoid.toMulOneClass.{u1} M _inst_2)) (MulOneClass.toMul.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2))))) (MonoidHomClass.toMulHomClass.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2)))) (MonoidHom.monoidHomClass.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2))))))) (MonoidAlgebra.of.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_1) (Monoid.toMulOneClass.{u1} M _inst_2))) (Finset.toSet.{u1} M (Finsupp.support.{u1, u2} M R (MonoidWithZero.toZero.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) f))))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.mem_adjoin_support MonoidAlgebra.mem_adjoin_supportₓ'. -/
/-- An element of `monoid_algebra R M` is in the subalgebra generated by its support. -/
theorem mem_adjoin_support (f : MonoidAlgebra R M) : f ∈ adjoin R (of R M '' f.support) :=
  by
  suffices span R (of R M '' f.support) ≤ (adjoin R (of R M '' f.support)).toSubmodule by
    exact this (mem_span_support f)
  rw [Submodule.span_le]
  exact subset_adjoin
#align monoid_algebra.mem_adjoin_support MonoidAlgebra.mem_adjoin_support

/- warning: monoid_algebra.support_gen_of_gen -> MonoidAlgebra.support_gen_of_gen is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Monoid.{u2} M] {S : Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{succ (max u1 u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{succ (max u1 u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.iUnion.{max u1 u2, succ (max u1 u2)} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{max u1 u2, 0} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) => M -> (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) (Finsupp.support.{u2, u1} M R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) f)))))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Monoid.{u2} M] {S : Set.{max u2 u1} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.iUnion.{max u1 u2, succ (max u1 u2)} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{max u1 u2, 0} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Membership.mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (FunLike.coe.{max (succ u1) (succ u2), succ u2, max (succ u1) (succ u2)} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _x) (MulHomClass.toFunLike.{max u1 u2, u2, max u1 u2} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MulOneClass.toMul.{u2} M (Monoid.toMulOneClass.{u2} M _inst_2)) (MulOneClass.toMul.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (MonoidHomClass.toMulHomClass.{max u1 u2, u2, max u1 u2} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2)))) (MonoidHom.monoidHomClass.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))) (Finset.toSet.{u2} M (Finsupp.support.{u2, u1} M R (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) f)))))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.support_gen_of_gen MonoidAlgebra.support_gen_of_genₓ'. -/
/-- If a set `S` generates, as algebra, `monoid_algebra R M`, then the set of supports of elements
of `S` generates `monoid_algebra R M`. -/
theorem support_gen_of_gen {S : Set (MonoidAlgebra R M)} (hS : Algebra.adjoin R S = ⊤) :
    Algebra.adjoin R (⋃ f ∈ S, of R M '' (f.support : Set M)) = ⊤ :=
  by
  refine' le_antisymm le_top _
  rw [← hS, adjoin_le_iff]
  intro f hf
  have hincl : of R M '' f.support ⊆ ⋃ (g : MonoidAlgebra R M) (H : g ∈ S), of R M '' g.support :=
    by
    intro s hs
    exact Set.mem_iUnion₂.2 ⟨f, ⟨hf, hs⟩⟩
  exact adjoin_mono hincl (mem_adjoin_support f)
#align monoid_algebra.support_gen_of_gen MonoidAlgebra.support_gen_of_gen

/- warning: monoid_algebra.support_gen_of_gen' -> MonoidAlgebra.support_gen_of_gen' is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Monoid.{u2} M] {S : Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{succ (max u1 u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{succ (max u1 u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) => M -> (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))) (Set.iUnion.{u2, succ (max u1 u2)} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{u2, 0} M (Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.hasMem.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => (fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) (Finsupp.support.{u2, u1} M R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) f)))))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toHasTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.Subalgebra.completeLattice.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Monoid.{u2} M] {S : Set.{max u2 u1} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))}, (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) S) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2))))) -> (Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (FunLike.coe.{max (succ u1) (succ u2), succ u2, max (succ u1) (succ u2)} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _x) (MulHomClass.toFunLike.{max u1 u2, u2, max u1 u2} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MulOneClass.toMul.{u2} M (Monoid.toMulOneClass.{u2} M _inst_2)) (MulOneClass.toMul.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) (MonoidHomClass.toMulHomClass.{max u1 u2, u2, max u1 u2} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))) M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2)))) (MonoidHom.monoidHomClass.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M _inst_2) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) (Monoid.toMulOneClass.{u2} M _inst_2))) (Set.iUnion.{u2, succ (max u1 u2)} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (fun (f : MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) => Set.iUnion.{u2, 0} M (Membership.mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) (fun (H : Membership.mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) (Set.{max u2 u1} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) (Set.instMembershipSet.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1))) f S) => Finset.toSet.{u2} M (Finsupp.support.{u2, u1} M R (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) f)))))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_1 (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_1 (CommSemiring.toSemiring.{u1} R _inst_1) (Algebra.id.{u1} R _inst_1) _inst_2)))))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.support_gen_of_gen' MonoidAlgebra.support_gen_of_gen'ₓ'. -/
/-- If a set `S` generates, as algebra, `monoid_algebra R M`, then the image of the union of the
supports of elements of `S` generates `monoid_algebra R M`. -/
theorem support_gen_of_gen' {S : Set (MonoidAlgebra R M)} (hS : Algebra.adjoin R S = ⊤) :
    Algebra.adjoin R (of R M '' ⋃ f ∈ S, (f.support : Set M)) = ⊤ :=
  by
  suffices (of R M '' ⋃ f ∈ S, (f.support : Set M)) = ⋃ f ∈ S, of R M '' (f.support : Set M)
    by
    rw [this]
    exact support_gen_of_gen hS
  simp only [Set.image_iUnion]
#align monoid_algebra.support_gen_of_gen' MonoidAlgebra.support_gen_of_gen'

end Semiring

section Ring

variable [CommRing R] [CommMonoid M]

/- warning: monoid_algebra.exists_finset_adjoin_eq_top -> MonoidAlgebra.exists_finset_adjoin_eq_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommMonoid.{u2} M] [h : Algebra.FiniteType.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))], Exists.{succ u2} (Finset.{u2} M) (fun (G : Finset.{u2} M) => Eq.{succ (max u1 u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) => M -> (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidAlgebra.of.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Finset.{u2} M) (Set.{u2} M) (HasLiftT.mk.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (CoeTCₓ.coe.{succ u2, succ u2} (Finset.{u2} M) (Set.{u2} M) (Finset.Set.hasCoeT.{u2} M))) G))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))) (CompleteLattice.toHasTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))) (Algebra.Subalgebra.completeLattice.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))))))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommMonoid.{u2} M] [h : Algebra.FiniteType.{max u2 u1, u1} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))], Exists.{succ u2} (Finset.{u2} M) (fun (G : Finset.{u2} M) => Eq.{max (succ u1) (succ u2)} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))) (Algebra.adjoin.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (FunLike.coe.{max (succ u1) (succ u2), succ u2, max (succ u1) (succ u2)} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) _x) (MulHomClass.toFunLike.{max u1 u2, u2, max u1 u2} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MulOneClass.toMul.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))) (MulOneClass.toMul.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidHomClass.toMulHomClass.{max u1 u2, u2, max u1 u2} (MonoidHom.{u2, max u2 u1} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))))) (MonoidHom.monoidHomClass.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))) (Finset.toSet.{u2} M G))) (Top.top.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))) (CompleteLattice.toTop.{max u1 u2} (Subalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))) (Algebra.instCompleteLatticeSubalgebra.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (CommRing.toCommSemiring.{u1} R _inst_1) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (CommMonoid.toMonoid.{u2} M _inst_2))))))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.exists_finset_adjoin_eq_top MonoidAlgebra.exists_finset_adjoin_eq_topₓ'. -/
/-- If `monoid_algebra R M` is of finite type, there there is a `G : finset M` such that its image
generates, as algera, `monoid_algebra R M`. -/
theorem exists_finset_adjoin_eq_top [h : FiniteType R (MonoidAlgebra R M)] :
    ∃ G : Finset M, Algebra.adjoin R (of R M '' G) = ⊤ :=
  by
  obtain ⟨S, hS⟩ := h
  letI : DecidableEq M := Classical.decEq M
  use Finset.biUnion S fun f => f.support
  have : (Finset.biUnion S fun f => f.support : Set M) = ⋃ f ∈ S, (f.support : Set M) := by
    simp only [Finset.set_biUnion_coe, Finset.coe_biUnion]
  rw [this]
  exact support_gen_of_gen' hS
#align monoid_algebra.exists_finset_adjoin_eq_top MonoidAlgebra.exists_finset_adjoin_eq_top

/- warning: monoid_algebra.of_mem_span_of_iff -> MonoidAlgebra.of_mem_span_of_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommMonoid.{u2} M] [_inst_3 : Nontrivial.{u1} R] {m : M} {S : Set.{u2} M}, Iff (Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (SetLike.hasMem.{max u1 u2, max u1 u2} (Submodule.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.setLike.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) => M -> (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidAlgebra.of.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))) m) (Submodule.span.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) => M -> (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidAlgebra.of.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))) S))) (Membership.Mem.{u2, u2} M (Set.{u2} M) (Set.hasMem.{u2} M) m S)
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommRing.{u2} R] [_inst_2 : CommMonoid.{u1} M] [_inst_3 : Nontrivial.{u2} R] {m : M} {S : Set.{u1} M}, Iff (Membership.mem.{max u2 u1, max u2 u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) m) (Submodule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (SetLike.instMembership.{max u2 u1, max u2 u1} (Submodule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submodule.setLike.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (FunLike.coe.{max (succ u2) (succ u1), succ u1, max (succ u2) (succ u1)} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) _x) (MulHomClass.toFunLike.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulOneClass.toMul.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) (MulOneClass.toMul.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) (MonoidHomClass.toMulHomClass.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))))) (MonoidHom.monoidHomClass.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))))) (MonoidAlgebra.of.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) m) (Submodule.span.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (Set.image.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (FunLike.coe.{max (succ u2) (succ u1), succ u1, max (succ u2) (succ u1)} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) _x) (MulHomClass.toFunLike.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulOneClass.toMul.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) (MulOneClass.toMul.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) (MonoidHomClass.toMulHomClass.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))))) (MonoidHom.monoidHomClass.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))))) (MonoidAlgebra.of.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))) S))) (Membership.mem.{u1, u1} M (Set.{u1} M) (Set.instMembershipSet.{u1} M) m S)
Case conversion may be inaccurate. Consider using '#align monoid_algebra.of_mem_span_of_iff MonoidAlgebra.of_mem_span_of_iffₓ'. -/
/-- The image of an element `m : M` in `monoid_algebra R M` belongs the submodule generated by
`S : set M` if and only if `m ∈ S`. -/
theorem of_mem_span_of_iff [Nontrivial R] {m : M} {S : Set M} :
    of R M m ∈ span R (of R M '' S) ↔ m ∈ S :=
  by
  refine' ⟨fun h => _, fun h => Submodule.subset_span <| Set.mem_image_of_mem (of R M) h⟩
  rw [of, MonoidHom.coe_mk, ← Finsupp.supported_eq_span_single, Finsupp.mem_supported,
    Finsupp.support_single_ne_zero _ (one_ne_zero' R)] at h
  simpa using h
#align monoid_algebra.of_mem_span_of_iff MonoidAlgebra.of_mem_span_of_iff

/- warning: monoid_algebra.mem_closure_of_mem_span_closure -> MonoidAlgebra.mem_closure_of_mem_span_closure is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommRing.{u1} R] [_inst_2 : CommMonoid.{u2} M] [_inst_3 : Nontrivial.{u1} R] {m : M} {S : Set.{u2} M}, (Membership.Mem.{max u1 u2, max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (SetLike.hasMem.{max u1 u2, max u1 u2} (Submodule.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submodule.setLike.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) => M -> (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidAlgebra.of.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))) m) (Submodule.span.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.module.{u1, u2, u1} R M R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Semiring.toModule.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) ((fun (a : Type.{max u1 u2}) (b : Type.{max u1 u2}) [self : HasLiftT.{succ (max u1 u2), succ (max u1 u2)} a b] => self.0) (Submonoid.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (HasLiftT.mk.{succ (max u1 u2), succ (max u1 u2)} (Submonoid.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (CoeTCₓ.coe.{succ (max u1 u2), succ (max u1 u2)} (Submonoid.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (Set.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (SetLike.Set.hasCoeT.{max u1 u2, max u1 u2} (Submonoid.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Submonoid.setLike.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))))))))) (Submonoid.closure.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))))) (Set.image.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) => M -> (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))))) (MonoidAlgebra.of.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))) S))))) -> (Membership.Mem.{u2, u2} M (Submonoid.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))) (SetLike.hasMem.{u2, u2} (Submonoid.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2))) M (Submonoid.setLike.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)))) m (Submonoid.closure.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_2)) S))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommRing.{u2} R] [_inst_2 : CommMonoid.{u1} M] [_inst_3 : Nontrivial.{u2} R] {m : M} {S : Set.{u1} M}, (Membership.mem.{max u2 u1, max u2 u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) m) (Submodule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (SetLike.instMembership.{max u2 u1, max u2 u1} (Submodule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submodule.setLike.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (FunLike.coe.{max (succ u2) (succ u1), succ u1, max (succ u2) (succ u1)} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) _x) (MulHomClass.toFunLike.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulOneClass.toMul.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) (MulOneClass.toMul.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) (MonoidHomClass.toMulHomClass.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))))) (MonoidHom.monoidHomClass.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))))) (MonoidAlgebra.of.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) m) (Submodule.span.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (MonoidAlgebra.addCommMonoid.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.module.{u2, u1, u2} R M R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Semiring.toModule.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (SetLike.coe.{max u2 u1, max u2 u1} (Submonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Submonoid.instSetLikeSubmonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) (Submonoid.closure.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))))) (Set.image.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (FunLike.coe.{max (succ u2) (succ u1), succ u1, max (succ u2) (succ u1)} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) _x) (MulHomClass.toFunLike.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulOneClass.toMul.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) (MulOneClass.toMul.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) (MonoidHomClass.toMulHomClass.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))))) (MonoidHom.monoidHomClass.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))))))) (MonoidAlgebra.of.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))) S))))) -> (Membership.mem.{u1, u1} M (Submonoid.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) (SetLike.instMembership.{u1, u1} (Submonoid.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2))) M (Submonoid.instSetLikeSubmonoid.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)))) m (Submonoid.closure.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_2)) S))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.mem_closure_of_mem_span_closure MonoidAlgebra.mem_closure_of_mem_span_closureₓ'. -/
/--
If the image of an element `m : M` in `monoid_algebra R M` belongs the submodule generated by the
closure of some `S : set M` then `m ∈ closure S`. -/
theorem mem_closure_of_mem_span_closure [Nontrivial R] {m : M} {S : Set M}
    (h : of R M m ∈ span R (Submonoid.closure (of R M '' S) : Set (MonoidAlgebra R M))) :
    m ∈ closure S := by
  rw [← MonoidHom.map_mclosure] at h
  simpa using of_mem_span_of_iff.1 h
#align monoid_algebra.mem_closure_of_mem_span_closure MonoidAlgebra.mem_closure_of_mem_span_closure

end Ring

end Span

variable [CommMonoid M]

/- warning: monoid_algebra.mv_polynomial_aeval_of_surjective_of_closure -> MonoidAlgebra.mvPolynomial_aeval_of_surjective_of_closure is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommMonoid.{u2} M] [_inst_2 : CommSemiring.{u1} R] {S : Set.{u2} M}, (Eq.{succ u2} (Submonoid.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1))) (Submonoid.closure.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)) S) (Top.top.{u2} (Submonoid.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1))) (Submonoid.hasTop.{u2} M (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1))))) -> (Function.Surjective.{max (succ u2) (succ u1), succ (max u1 u2)} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (coeFn.{max (succ (max u2 u1)) (succ (max u1 u2)), max (succ (max u2 u1)) (succ (max u1 u2))} (AlgHom.{u1, max u2 u1, max u1 u2} R (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MvPolynomial.commSemiring.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2)) (CommSemiring.toSemiring.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (MonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u1, u1, u2} R R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 _inst_2 (Algebra.id.{u1} R _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (CommMonoid.toMonoid.{u2} M _inst_1))) (fun (_x : AlgHom.{u1, max u2 u1, max u1 u2} R (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MvPolynomial.commSemiring.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2)) (CommSemiring.toSemiring.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (MonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u1, u1, u2} R R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 _inst_2 (Algebra.id.{u1} R _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (CommMonoid.toMonoid.{u2} M _inst_1))) => (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) -> (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2))) ([anonymous].{u1, max u2 u1, max u1 u2} R (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u2, u1} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) R _inst_2) (MvPolynomial.commSemiring.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2)) (CommSemiring.toSemiring.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (MonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u1, u1, u2} R R (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 _inst_2 (Algebra.id.{u1} R _inst_2)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (CommMonoid.toMonoid.{u2} M _inst_1))) (MvPolynomial.aeval.{u1, max u1 u2, u2} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) _inst_2 (MonoidAlgebra.commSemiring.{u1, u2} R M _inst_2 _inst_1) (MonoidAlgebra.algebra.{u1, u2, u1} R M R _inst_2 (CommSemiring.toSemiring.{u1} R _inst_2) (Algebra.id.{u1} R _inst_2) (CommMonoid.toMonoid.{u2} M _inst_1)) (fun (s : coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) => coeFn.{max (succ (max u1 u2)) (succ u2), max (succ u2) (succ (max u1 u2))} (MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)))))) (fun (_x : MonoidHom.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)))))) => M -> (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2))) (MonoidHom.hasCoeToFun.{u2, max u1 u2} M (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u1 u2} (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)))))) (MonoidAlgebra.of.{u1, u2} R M (CommSemiring.toSemiring.{u1} R _inst_2) (Monoid.toMulOneClass.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} M) Type.{u2} (Set.hasCoeToSort.{u2} M) S) M (coeSubtype.{succ u2} M (fun (x : M) => Membership.Mem.{u2, u2} M (Set.{u2} M) (Set.hasMem.{u2} M) x S))))) s)))))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommMonoid.{u1} M] [_inst_2 : CommSemiring.{u2} R] {S : Set.{u1} M}, (Eq.{succ u1} (Submonoid.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))) (Submonoid.closure.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)) S) (Top.top.{u1} (Submonoid.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))) (Submonoid.instTopSubmonoid.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))))) -> (Function.Surjective.{max (succ u2) (succ u1), max (succ u2) (succ u1)} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (FunLike.coe.{max (succ u2) (succ u1), max (succ u1) (succ u2), max (succ u2) (succ u1)} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))) (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (fun (_x : MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _x) (SMulHomClass.toFunLike.{max u2 u1, u2, max u1 u2, max u2 u1} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))) R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (SMulZeroClass.toSMul.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoid.toZero.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))))) (DistribSMul.toSMulZeroClass.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddMonoid.toAddZeroClass.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))))) (DistribMulAction.toDistribSMul.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)))))) (Module.toDistribMulAction.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))) (Algebra.toModule.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2))))))) (SMulZeroClass.toSMul.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoid.toZero.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))))) (DistribSMul.toSMulZeroClass.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddMonoid.toAddZeroClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (AddCommMonoid.toAddMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))))) (DistribMulAction.toDistribSMul.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (AddCommMonoid.toAddMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)))))) (Module.toDistribMulAction.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))) (Algebra.toModule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u1, u2, max u1 u2, max u2 u1} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))) R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (AddCommMonoid.toAddMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)))))) (AddCommMonoid.toAddMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)))))) (Module.toDistribMulAction.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))) (Algebra.toModule.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)))) (Module.toDistribMulAction.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))) (Algebra.toModule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1)))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u1, u2, max u1 u2, max u2 u1} (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))) R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_2))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)))) (Module.toDistribMulAction.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (Semiring.toNonAssocSemiring.{max u1 u2} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2))))) (Algebra.toModule.{u2, max u1 u2} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)))) (Module.toDistribMulAction.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{u2} R _inst_2) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Semiring.toNonAssocSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1))))) (Algebra.toModule.{u2, max u2 u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1)))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, max u1 u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1)) (AlgHom.{u2, max u2 u1, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))) (AlgHom.algHomClass.{u2, max u1 u2, max u2 u1} R (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _inst_2 (CommSemiring.toSemiring.{max u2 u1} (MvPolynomial.{u1, u2} (Set.Elem.{u1} M S) R _inst_2) (MvPolynomial.commSemiring.{u2, u1} R (Set.Elem.{u1} M S) _inst_2)) (CommSemiring.toSemiring.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1)) (MvPolynomial.algebra.{u2, u2, u1} R R (Set.Elem.{u1} M S) _inst_2 _inst_2 (Algebra.id.{u2} R _inst_2)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1))))))) (MvPolynomial.aeval.{u2, max u2 u1, u1} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Set.Elem.{u1} M S) _inst_2 (MonoidAlgebra.commSemiring.{u2, u1} R M _inst_2 _inst_1) (MonoidAlgebra.algebra.{u2, u1, u2} R M R _inst_2 (CommSemiring.toSemiring.{u2} R _inst_2) (Algebra.id.{u2} R _inst_2) (CommMonoid.toMonoid.{u1} M _inst_1)) (fun (s : Set.Elem.{u1} M S) => FunLike.coe.{max (succ u2) (succ u1), succ u1, max (succ u2) (succ u1)} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)))))) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2397 : M) => MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) _x) (MulHomClass.toFunLike.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MulOneClass.toMul.{u1} M (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))) (MulOneClass.toMul.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)))))) (MonoidHomClass.toMulHomClass.{max u2 u1, u1, max u2 u1} (MonoidHom.{u1, max u1 u2} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)))))) M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))))) (MonoidHom.monoidHomClass.{u1, max u2 u1} M (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)) (MulZeroOneClass.toMulOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (NonAssocSemiring.toMulZeroOneClass.{max u2 u1} (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2)) (MonoidAlgebra.nonAssocSemiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)))))))) (MonoidAlgebra.of.{u2, u1} R M (CommSemiring.toSemiring.{u2} R _inst_2) (Monoid.toMulOneClass.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))) (Subtype.val.{succ u1} M (fun (x : M) => Membership.mem.{u1, u1} M (Set.{u1} M) (Set.instMembershipSet.{u1} M) x S) s)))))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.mv_polynomial_aeval_of_surjective_of_closure MonoidAlgebra.mvPolynomial_aeval_of_surjective_of_closureₓ'. -/
/-- If a set `S` generates a monoid `M`, then the image of `M` generates, as algebra,
`monoid_algebra R M`. -/
theorem mvPolynomial_aeval_of_surjective_of_closure [CommSemiring R] {S : Set M}
    (hS : closure S = ⊤) :
    Function.Surjective
      (MvPolynomial.aeval fun s : S => of R M ↑s : MvPolynomial S R → MonoidAlgebra R M) :=
  by
  refine' fun f => induction_on f (fun m => _) _ _
  · have : m ∈ closure S := hS.symm ▸ mem_top _
    refine' closure_induction this (fun m hm => _) _ _
    · exact ⟨MvPolynomial.X ⟨m, hm⟩, MvPolynomial.aeval_X _ _⟩
    · exact ⟨1, AlgHom.map_one _⟩
    · rintro m₁ m₂ ⟨P₁, hP₁⟩ ⟨P₂, hP₂⟩
      exact
        ⟨P₁ * P₂, by
          rw [AlgHom.map_mul, hP₁, hP₂, of_apply, of_apply, of_apply, single_mul_single, one_mul]⟩
  · rintro f g ⟨P, rfl⟩ ⟨Q, rfl⟩
    exact ⟨P + Q, AlgHom.map_add _ _ _⟩
  · rintro r f ⟨P, rfl⟩
    exact ⟨r • P, AlgHom.map_smul _ _ _⟩
#align monoid_algebra.mv_polynomial_aeval_of_surjective_of_closure MonoidAlgebra.mvPolynomial_aeval_of_surjective_of_closure

/- warning: monoid_algebra.finite_type_of_fg -> MonoidAlgebra.finiteType_of_fg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [_inst_3 : Monoid.FG.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)], Algebra.FiniteType.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1))
but is expected to have type
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [_inst_3 : Monoid.FG.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)], Algebra.FiniteType.{max u2 u1, u1} R (MonoidAlgebra.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (MonoidAlgebra.semiring.{u1, u2} R M (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.finite_type_of_fg MonoidAlgebra.finiteType_of_fgₓ'. -/
/-- If a monoid `M` is finitely generated then `monoid_algebra R M` is of finite type. -/
instance finiteType_of_fg [CommRing R] [Monoid.FG M] : FiniteType R (MonoidAlgebra R M) :=
  (AddMonoidAlgebra.finiteType_of_fg R (Additive M)).Equiv (toAdditiveAlgEquiv R M).symm
#align monoid_algebra.finite_type_of_fg MonoidAlgebra.finiteType_of_fg

/- warning: monoid_algebra.finite_type_iff_fg -> MonoidAlgebra.finiteType_iff_fg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [_inst_3 : Nontrivial.{u1} R], Iff (Algebra.FiniteType.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1))) (Monoid.FG.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1))
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommMonoid.{u1} M] [_inst_2 : CommRing.{u2} R] [_inst_3 : Nontrivial.{u2} R], Iff (Algebra.FiniteType.{max u1 u2, u2} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2))) (CommRing.toCommSemiring.{u2} R _inst_2) (MonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (CommMonoid.toMonoid.{u1} M _inst_1)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R (CommRing.toCommSemiring.{u2} R _inst_2) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (CommMonoid.toMonoid.{u1} M _inst_1))) (Monoid.FG.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.finite_type_iff_fg MonoidAlgebra.finiteType_iff_fgₓ'. -/
/-- A monoid `M` is finitely generated if and only if `monoid_algebra R M` is of finite type. -/
theorem finiteType_iff_fg [CommRing R] [Nontrivial R] :
    FiniteType R (MonoidAlgebra R M) ↔ Monoid.FG M :=
  ⟨fun h =>
    Monoid.fg_iff_add_fg.2 <|
      AddMonoidAlgebra.finiteType_iff_fg.1 <| h.Equiv <| toAdditiveAlgEquiv R M,
    fun h => @MonoidAlgebra.finiteType_of_fg _ _ _ _ h⟩
#align monoid_algebra.finite_type_iff_fg MonoidAlgebra.finiteType_iff_fg

/- warning: monoid_algebra.fg_of_finite_type -> MonoidAlgebra.fg_of_finiteType is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M : Type.{u2}} [_inst_1 : CommMonoid.{u2} M] [_inst_2 : CommRing.{u1} R] [_inst_3 : Nontrivial.{u1} R] [h : Algebra.FiniteType.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2))) (CommRing.toCommSemiring.{u1} R _inst_2) (MonoidAlgebra.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1)) (MonoidAlgebra.algebra.{u1, u2, u1} R M R (CommRing.toCommSemiring.{u1} R _inst_2) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_2)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_2)) (CommMonoid.toMonoid.{u2} M _inst_1))], Monoid.FG.{u2} M (CommMonoid.toMonoid.{u2} M _inst_1)
but is expected to have type
  forall {R : Type.{u2}} {M : Type.{u1}} [_inst_1 : CommMonoid.{u1} M] [_inst_2 : CommRing.{u2} R] [_inst_3 : Nontrivial.{u2} R] [h : Algebra.FiniteType.{max u1 u2, u2} R (MonoidAlgebra.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2))) (CommRing.toCommSemiring.{u2} R _inst_2) (MonoidAlgebra.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (CommMonoid.toMonoid.{u1} M _inst_1)) (MonoidAlgebra.algebra.{u2, u1, u2} R M R (CommRing.toCommSemiring.{u2} R _inst_2) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_2)) (CommMonoid.toMonoid.{u1} M _inst_1))], Monoid.FG.{u1} M (CommMonoid.toMonoid.{u1} M _inst_1)
Case conversion may be inaccurate. Consider using '#align monoid_algebra.fg_of_finite_type MonoidAlgebra.fg_of_finiteTypeₓ'. -/
/-- If `monoid_algebra R M` is of finite type then `M` is finitely generated. -/
theorem fg_of_finiteType [CommRing R] [Nontrivial R] [h : FiniteType R (MonoidAlgebra R M)] :
    Monoid.FG M :=
  finiteType_iff_fg.1 h
#align monoid_algebra.fg_of_finite_type MonoidAlgebra.fg_of_finiteType

/- warning: monoid_algebra.finite_type_iff_group_fg -> MonoidAlgebra.finiteType_iff_group_fg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {G : Type.{u2}} [_inst_2 : CommGroup.{u2} G] [_inst_3 : CommRing.{u1} R] [_inst_4 : Nontrivial.{u1} R], Iff (Algebra.FiniteType.{u1, max u1 u2} R (MonoidAlgebra.{u1, u2} R G (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_3))) (CommRing.toCommSemiring.{u1} R _inst_3) (MonoidAlgebra.semiring.{u1, u2} R G (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_3)) (DivInvMonoid.toMonoid.{u2} G (Group.toDivInvMonoid.{u2} G (CommGroup.toGroup.{u2} G _inst_2)))) (MonoidAlgebra.algebra.{u1, u2, u1} R G R (CommRing.toCommSemiring.{u1} R _inst_3) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_3)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (DivInvMonoid.toMonoid.{u2} G (Group.toDivInvMonoid.{u2} G (CommGroup.toGroup.{u2} G _inst_2))))) (Group.FG.{u2} G (CommGroup.toGroup.{u2} G _inst_2))
but is expected to have type
  forall {R : Type.{u1}} {G : Type.{u2}} [_inst_2 : CommGroup.{u2} G] [_inst_3 : CommRing.{u1} R] [_inst_4 : Nontrivial.{u1} R], Iff (Algebra.FiniteType.{max u2 u1, u1} R (MonoidAlgebra.{u1, u2} R G (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3))) (CommRing.toCommSemiring.{u1} R _inst_3) (MonoidAlgebra.semiring.{u1, u2} R G (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (DivInvMonoid.toMonoid.{u2} G (Group.toDivInvMonoid.{u2} G (CommGroup.toGroup.{u2} G _inst_2)))) (MonoidAlgebra.algebra.{u1, u2, u1} R G R (CommRing.toCommSemiring.{u1} R _inst_3) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_3)) (DivInvMonoid.toMonoid.{u2} G (Group.toDivInvMonoid.{u2} G (CommGroup.toGroup.{u2} G _inst_2))))) (Group.FG.{u2} G (CommGroup.toGroup.{u2} G _inst_2))
Case conversion may be inaccurate. Consider using '#align monoid_algebra.finite_type_iff_group_fg MonoidAlgebra.finiteType_iff_group_fgₓ'. -/
/-- A group `G` is finitely generated if and only if `add_monoid_algebra R G` is of finite type. -/
theorem finiteType_iff_group_fg {G : Type _} [CommGroup G] [CommRing R] [Nontrivial R] :
    FiniteType R (MonoidAlgebra R G) ↔ Group.FG G := by
  simpa [Group.fg_iff_monoid_fg] using finite_type_iff_fg
#align monoid_algebra.finite_type_iff_group_fg MonoidAlgebra.finiteType_iff_group_fg

end MonoidAlgebra

end MonoidAlgebra

section Vasconcelos

variable {R : Type _} [CommRing R] {M : Type _} [AddCommGroup M] [Module R M] (f : M →ₗ[R] M)

noncomputable section

#print modulePolynomialOfEndo /-
/-- The structure of a module `M` over a ring `R` as a module over `R[X]` when given a
choice of how `X` acts by choosing a linear map `f : M →ₗ[R] M` -/
def modulePolynomialOfEndo : Module R[X] M :=
  Module.compHom M (Polynomial.aeval f).toRingHom
#align module_polynomial_of_endo modulePolynomialOfEndo
-/

/- warning: module_polynomial_of_endo_smul_def -> modulePolynomialOfEndo_smul_def is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : CommRing.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommGroup.{u2} M] [_inst_3 : Module.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)] (f : LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (n : Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (a : M), Eq.{succ u2} M (SMul.smul.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (MulAction.toHasSmul.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (MonoidWithZero.toMonoid.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Semiring.toMonoidWithZero.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (DistribMulAction.toMulAction.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (MonoidWithZero.toMonoid.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Semiring.toMonoidWithZero.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)) (Module.toDistribMulAction.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (modulePolynomialOfEndo.{u1, u2} R _inst_1 M _inst_2 _inst_3 f)))) n a) (coeFn.{succ u2, succ u2} (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (fun (_x : LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) => M -> M) (LinearMap.hasCoeToFun.{u1, u1, u2, u2} R R M M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (AlgHom.{u1, u1, u2} R (Polynomial.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u1} R _inst_1) (Polynomial.semiring.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Module.End.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u1, u1} R R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Module.End.algebra.{u1, u2} R M (CommRing.toCommSemiring.{u1} R _inst_1) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3)) (fun (_x : AlgHom.{u1, u1, u2} R (Polynomial.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u1} R _inst_1) (Polynomial.semiring.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Module.End.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u1, u1} R R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Module.End.algebra.{u1, u2} R M (CommRing.toCommSemiring.{u1} R _inst_1) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3)) => (Polynomial.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) -> (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3)) ([anonymous].{u1, u1, u2} R (Polynomial.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u1} R _inst_1) (Polynomial.semiring.{u1} R (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Module.End.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u1, u1} R R (CommRing.toCommSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1)) (Algebra.id.{u1} R (CommRing.toCommSemiring.{u1} R _inst_1))) (Module.End.algebra.{u1, u2} R M (CommRing.toCommSemiring.{u1} R _inst_1) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3)) (Polynomial.aeval.{u1, u2} R (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u1} R _inst_1) (Module.End.semiring.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3) (Module.End.algebra.{u1, u2} R M (CommRing.toCommSemiring.{u1} R _inst_1) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3) f) n) a)
but is expected to have type
  forall {R : Type.{u2}} [_inst_1 : CommRing.{u2} R] {M : Type.{u1}} [_inst_2 : AddCommGroup.{u1} M] [_inst_3 : Module.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2)] (f : LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (n : Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (a : M), Eq.{succ u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M) => M) a) (HSMul.hSMul.{u2, u1, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M) => M) a) (inferInstance.{max (succ u2) (succ u1)} ([mdata noImplicitLambda:1 HSMul.{u2, u1, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M) => M) a)]) (instHSMul.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (SMulZeroClass.toSMul.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (SMulWithZero.toSMulZeroClass.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Polynomial.zero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (MulActionWithZero.toSMulWithZero.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Semiring.toMonoidWithZero.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (Module.toMulActionWithZero.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (modulePolynomialOfEndo.{u2, u1} R _inst_1 M _inst_2 _inst_3 f))))))) n a) (FunLike.coe.{succ u1, succ u1, succ u1} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) => LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) n) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M) => M) _x) (LinearMap.instFunLikeLinearMap.{u2, u2, u1, u1} R R M M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (FunLike.coe.{max (succ u1) (succ u2), succ u2, succ u1} (AlgHom.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)) (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (fun (_x : Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) => LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) _x) (SMulHomClass.toFunLike.{max u1 u2, u2, u2, u1} (AlgHom.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)) R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (SMulZeroClass.toSMul.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoid.toZero.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))))) (DistribSMul.toSMulZeroClass.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddMonoid.toAddZeroClass.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))))) (DistribMulAction.toDistribSMul.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))))) (Module.toDistribMulAction.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (Algebra.toModule.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))))) (SMulZeroClass.toSMul.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (AddMonoid.toZero.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (AddCommMonoid.toAddMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))))) (DistribSMul.toSMulZeroClass.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (AddMonoid.toAddZeroClass.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (AddCommMonoid.toAddMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))))) (DistribMulAction.toDistribSMul.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3))))) (Module.toDistribMulAction.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))) (Algebra.toModule.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))))) (DistribMulActionHomClass.toSMulHomClass.{max u1 u2, u2, u2, u1} (AlgHom.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)) R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (AddCommMonoid.toAddMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))))) (AddCommMonoid.toAddMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3))))) (Module.toDistribMulAction.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (Algebra.toModule.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (Module.toDistribMulAction.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))) (Algebra.toModule.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u1 u2, u2, u2, u1} (AlgHom.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)) R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3))) (Module.toDistribMulAction.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Semiring.toNonAssocSemiring.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))))) (Algebra.toModule.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) (Module.toDistribMulAction.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Semiring.toNonAssocSemiring.{u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))) (Algebra.toModule.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u2, u1, max u1 u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (AlgHom.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)) (AlgHom.algHomClass.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3)))))) (Polynomial.aeval.{u2, u1} R (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) (CommRing.toCommSemiring.{u2} R _inst_1) (Module.End.semiring.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) (Module.instAlgebraEndToSemiringSemiring.{u2, u1} R M (CommRing.toCommSemiring.{u2} R _inst_1) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3) f) n) a)
Case conversion may be inaccurate. Consider using '#align module_polynomial_of_endo_smul_def modulePolynomialOfEndo_smul_defₓ'. -/
theorem modulePolynomialOfEndo_smul_def (n : R[X]) (a : M) :
    @SMul.smul (modulePolynomialOfEndo f).toSMul n a = Polynomial.aeval f n a :=
  rfl
#align module_polynomial_of_endo_smul_def modulePolynomialOfEndo_smul_def

attribute [local simp] modulePolynomialOfEndo_smul_def

include f

/- warning: module_polynomial_of_endo.is_scalar_tower -> modulePolynomialOfEndo.isScalarTower is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : CommRing.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommGroup.{u2} M] [_inst_3 : Module.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)] (f : LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3), IsScalarTower.{u1, u1, u2} R (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (SMulZeroClass.toHasSmul.{u1, u1} R (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Polynomial.zero.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Polynomial.smulZeroClass.{u1, u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) R (SMulWithZero.toSmulZeroClass.{u1, u1} R R (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} R (NonAssocRing.toNonUnitalNonAssocRing.{u1} R (Ring.toNonAssocRing.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (MulZeroClass.toSMulWithZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} R (NonAssocRing.toNonUnitalNonAssocRing.{u1} R (Ring.toNonAssocRing.{u1} R (CommRing.toRing.{u1} R _inst_1))))))))) (let _inst : Module.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) := modulePolynomialOfEndo.{u1, u2} R _inst_1 M _inst_2 _inst_3 f; SMulZeroClass.toHasSmul.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)))) (SMulWithZero.toSmulZeroClass.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (MulZeroClass.toHasZero.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MulZeroOneClass.toMulZeroClass.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (MonoidWithZero.toMulZeroOneClass.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Semiring.toMonoidWithZero.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))))) (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)))) (MulActionWithZero.toSMulWithZero.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (Semiring.toMonoidWithZero.{u1} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)))) (Module.toMulActionWithZero.{u1, u2} (Polynomial.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) M (Polynomial.semiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst)))) (SMulZeroClass.toHasSmul.{u1, u2} R M (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)))) (SMulWithZero.toSmulZeroClass.{u1, u2} R M (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))))) (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R M (Semiring.toMonoidWithZero.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))) (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)))) (Module.toMulActionWithZero.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3))))
but is expected to have type
  forall {R : Type.{u2}} [_inst_1 : CommRing.{u2} R] {M : Type.{u1}} [_inst_2 : AddCommGroup.{u1} M] [_inst_3 : Module.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2)] (f : LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3), IsScalarTower.{u2, u2, u1} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Algebra.toSMul.{u2, u2} R (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (CommRing.toCommSemiring.{u2} R _inst_1) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.algebraOfAlgebra.{u2, u2} R R (CommRing.toCommSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (Algebra.id.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (inferInstance.{max (succ u2) (succ u1)} ([mdata noImplicitLambda:1 SMul.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M]) (SMulZeroClass.toSMul.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (SMulWithZero.toSMulZeroClass.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Polynomial.zero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (MulActionWithZero.toSMulWithZero.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Semiring.toMonoidWithZero.{u2} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (Module.toMulActionWithZero.{u2, u1} (Polynomial.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) M (Polynomial.semiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (modulePolynomialOfEndo.{u2, u1} R _inst_1 M _inst_2 _inst_3 f)))))) (SMulZeroClass.toSMul.{u2, u1} R M (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (SMulWithZero.toSMulZeroClass.{u2, u1} R M (CommMonoidWithZero.toZero.{u2} R (CommSemiring.toCommMonoidWithZero.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (MulActionWithZero.toSMulWithZero.{u2, u1} R M (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))) (NegZeroClass.toZero.{u1} M (SubNegZeroMonoid.toNegZeroClass.{u1} M (SubtractionMonoid.toSubNegZeroMonoid.{u1} M (SubtractionCommMonoid.toSubtractionMonoid.{u1} M (AddCommGroup.toDivisionAddCommMonoid.{u1} M _inst_2))))) (Module.toMulActionWithZero.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3))))
Case conversion may be inaccurate. Consider using '#align module_polynomial_of_endo.is_scalar_tower modulePolynomialOfEndo.isScalarTowerₓ'. -/
theorem modulePolynomialOfEndo.isScalarTower :
    @IsScalarTower R R[X] M _
      (by
        letI := modulePolynomialOfEndo f
        infer_instance)
      _ :=
  by
  letI := modulePolynomialOfEndo f
  constructor
  intro x y z
  simp
#align module_polynomial_of_endo.is_scalar_tower modulePolynomialOfEndo.isScalarTower

open Polynomial Module

/- warning: module.finite.injective_of_surjective_endomorphism -> Module.Finite.injective_of_surjective_endomorphism is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : CommRing.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommGroup.{u2} M] [_inst_3 : Module.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2)] (f : LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) [hfg : Module.Finite.{u1, u2} R M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3], (Function.Surjective.{succ u2, succ u2} M M (coeFn.{succ u2, succ u2} (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (fun (_x : LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) => M -> M) (LinearMap.hasCoeToFun.{u1, u1, u2, u2} R R M M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) f)) -> (Function.Injective.{succ u2, succ u2} M M (coeFn.{succ u2, succ u2} (LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) (fun (_x : LinearMap.{u1, u1, u2, u2} R R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3) => M -> M) (LinearMap.hasCoeToFun.{u1, u1, u2, u2} R R M M (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) (AddCommGroup.toAddCommMonoid.{u2} M _inst_2) _inst_3 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (Ring.toSemiring.{u1} R (CommRing.toRing.{u1} R _inst_1))))) f))
but is expected to have type
  forall {R : Type.{u2}} [_inst_1 : CommRing.{u2} R] {M : Type.{u1}} [_inst_2 : AddCommGroup.{u1} M] [_inst_3 : Module.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2)] (f : LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) [hfg : Module.Finite.{u2, u1} R M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3], (Function.Surjective.{succ u1, succ u1} M M (FunLike.coe.{succ u1, succ u1, succ u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M) => M) _x) (LinearMap.instFunLikeLinearMap.{u2, u2, u1, u1} R R M M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) f)) -> (Function.Injective.{succ u1, succ u1} M M (FunLike.coe.{succ u1, succ u1, succ u1} (LinearMap.{u2, u2, u1, u1} R R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)))) M M (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3) M (fun (_x : M) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M) => M) _x) (LinearMap.instFunLikeLinearMap.{u2, u2, u1, u1} R R M M (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1)) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) (AddCommGroup.toAddCommMonoid.{u1} M _inst_2) _inst_3 _inst_3 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (CommRing.toCommSemiring.{u2} R _inst_1))))) f))
Case conversion may be inaccurate. Consider using '#align module.finite.injective_of_surjective_endomorphism Module.Finite.injective_of_surjective_endomorphismₓ'. -/
/-- A theorem/proof by Vasconcelos, given a finite module `M` over a commutative ring, any
surjective endomorphism of `M` is also injective. Based on,
https://math.stackexchange.com/a/239419/31917,
https://www.ams.org/journals/tran/1969-138-00/S0002-9947-1969-0238839-5/.
This is similar to `is_noetherian.injective_of_surjective_endomorphism` but only applies in the
commutative case, but does not use a Noetherian hypothesis. -/
theorem Module.Finite.injective_of_surjective_endomorphism [hfg : Finite R M]
    (f_surj : Function.Surjective f) : Function.Injective f :=
  by
  letI := modulePolynomialOfEndo f
  haveI : IsScalarTower R R[X] M := modulePolynomialOfEndo.isScalarTower f
  have hfgpoly : Finite R[X] M := finite.of_restrict_scalars_finite R _ _
  have X_mul : ∀ o, (X : R[X]) • o = f o := by
    intro
    simp
  have : (⊤ : Submodule R[X] M) ≤ Ideal.span {X} • ⊤ :=
    by
    intro a ha
    obtain ⟨y, rfl⟩ := f_surj a
    rw [← X_mul y]
    exact Submodule.smul_mem_smul (ideal.mem_span_singleton.mpr (dvd_refl _)) trivial
  obtain ⟨F, hFa, hFb⟩ :=
    Submodule.exists_sub_one_mem_and_smul_eq_zero_of_fg_of_le_smul _ (⊤ : Submodule R[X] M)
      (finite_def.mp hfgpoly) this
  rw [← LinearMap.ker_eq_bot, LinearMap.ker_eq_bot']
  intro m hm
  rw [Ideal.mem_span_singleton'] at hFa
  obtain ⟨G, hG⟩ := hFa
  suffices (F - 1) • m = 0 by
    have Fmzero := hFb m (by simp)
    rwa [← sub_add_cancel F 1, add_smul, one_smul, this, zero_add] at Fmzero
  rw [← hG, mul_smul, X_mul m, hm, smul_zero]
#align module.finite.injective_of_surjective_endomorphism Module.Finite.injective_of_surjective_endomorphism

end Vasconcelos

