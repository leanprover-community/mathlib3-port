/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel

! This file was ported from Lean 3 source module analysis.calculus.bump_function_findim
! leanprover-community/mathlib commit 207cfac9fcd06138865b5d04f7091e46d9320432
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Calculus.SpecificFunctions
import Mathbin.Analysis.Calculus.Series
import Mathbin.Analysis.Convolution
import Mathbin.Data.Set.Pointwise.Support

/-!
# Bump functions in finite-dimensional vector spaces

Let `E` be a finite-dimensional real normed vector space. We show that any open set `s` in `E` is
exactly the support of a smooth function taking values in `[0, 1]`,
in `is_open.exists_smooth_support_eq`.

TODO: use this construction to construct bump functions with nice behavior in any finite-dimensional
real normed vector space, by convolving the indicator function of `closed_ball 0 1` with a
function as above with `s = ball 0 D`.
-/


noncomputable section

open
  Set Metric TopologicalSpace Function Asymptotics MeasureTheory FiniteDimensional ContinuousLinearMap Filter MeasureTheory.Measure

open Pointwise TopologicalSpace Nnreal BigOperators convolution

variable {E : Type _} [NormedAddCommGroup E]

section

variable [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]

/-- If a set `s` is a neighborhood of `x`, then there exists a smooth function `f` taking
values in `[0, 1]`, supported in `s` and with `f x = 1`. -/
theorem exists_smooth_tsupport_subset {s : Set E} {x : E} (hs : s ‚àà ùìù x) :
    ‚àÉ f : E ‚Üí ‚Ñù,
      tsupport f ‚äÜ s ‚àß HasCompactSupport f ‚àß ContDiff ‚Ñù ‚ä§ f ‚àß range f ‚äÜ Icc 0 1 ‚àß f x = 1 :=
  by 
  obtain ‚ü®d, d_pos, hd‚ü© : ‚àÉ (d : ‚Ñù)(hr : 0 < d), Euclidean.closedBall x d ‚äÜ s
  exact euclidean.nhds_basis_closed_ball.mem_iff.1 hs
  let c : ContDiffBumpOfInner (toEuclidean x) :=
    { R := d / 2
      r := d
      r_pos := half_pos d_pos
      r_lt_R := half_lt_self d_pos }
  let f : E ‚Üí ‚Ñù := c ‚àò toEuclidean
  have f_supp : f.support ‚äÜ Euclidean.ball x d := by
    intro y hy
    have : toEuclidean y ‚àà Function.support c := by
      simpa only [f, Function.mem_support, Function.comp_apply, Ne.def] using hy
    rwa [c.support_eq] at this
  have f_tsupp : tsupport f ‚äÜ Euclidean.closedBall x d := by
    rw [tsupport, ‚Üê Euclidean.closure_ball _ d_pos.ne']
    exact closure_mono f_supp
  refine' ‚ü®f, f_tsupp.trans hd, _, _, _, _‚ü©
  ¬∑ refine' is_compact_of_is_closed_bounded is_closed_closure _
    have : bounded (Euclidean.closedBall x d) := euclidean.is_compact_closed_ball.bounded
    apply this.mono _
    refine' (IsClosed.closure_subset_iff Euclidean.is_closed_closed_ball).2 _
    exact f_supp.trans Euclidean.ball_subset_closed_ball
  ¬∑ apply c.cont_diff.comp
    exact ContinuousLinearEquiv.contDiff _
  ¬∑ rintro t ‚ü®y, rfl‚ü©
    exact ‚ü®c.nonneg, c.le_one‚ü©
  ¬∑ apply c.one_of_mem_closed_ball
    apply mem_closed_ball_self
    exact (half_pos d_pos).le
#align exists_smooth_tsupport_subset exists_smooth_tsupport_subset

/-- Given an open set `s` in a finite-dimensional real normed vector space, there exists a smooth
function with values in `[0, 1]` whose support is exactly `s`. -/
theorem IsOpen.exists_smooth_support_eq {s : Set E} (hs : IsOpen s) :
    ‚àÉ f : E ‚Üí ‚Ñù, f.support = s ‚àß ContDiff ‚Ñù ‚ä§ f ‚àß Set.range f ‚äÜ Set.Icc 0 1 :=
  by
  /- For any given point `x` in `s`, one can construct a smooth function with support in `s` and
    nonzero at `x`. By second-countability, it follows that we may cover `s` with the supports of
    countably many such functions, say `g i`.
    Then `‚àë i, r i ‚Ä¢ g i` will be the desired function if `r i` is a sequence of positive numbers
    tending quickly enough to zero. Indeed, this ensures that, for any `k ‚â§ i`, the `k`-th derivative
    of `r i ‚Ä¢ g i` is bounded by a prescribed (summable) sequence `u i`. From this, the summability
    of the series and of its successive derivatives follows. -/
  rcases eq_empty_or_nonempty s with (rfl | h's)
  ¬∑
    exact
      ‚ü®fun x => 0, Function.support_zero, contDiffConst, by
        simp only [range_const, singleton_subset_iff, left_mem_Icc, zero_le_one]‚ü©
  let Œπ := { f : E ‚Üí ‚Ñù // f.support ‚äÜ s ‚àß HasCompactSupport f ‚àß ContDiff ‚Ñù ‚ä§ f ‚àß range f ‚äÜ Icc 0 1 }
  obtain ‚ü®T, T_count, hT‚ü© : ‚àÉ T : Set Œπ, T.Countable ‚àß (‚ãÉ f ‚àà T, support (f : E ‚Üí ‚Ñù)) = s := by
    have : (‚ãÉ f : Œπ, (f : E ‚Üí ‚Ñù).support) = s := by
      refine' subset.antisymm (Union_subset fun f => f.2.1) _
      intro x hx
      rcases exists_smooth_tsupport_subset (hs.mem_nhds hx) with ‚ü®f, hf‚ü©
      let g : Œπ := ‚ü®f, (subset_tsupport f).trans hf.1, hf.2.1, hf.2.2.1, hf.2.2.2.1‚ü©
      have : x ‚àà support (g : E ‚Üí ‚Ñù) := by
        simp only [hf.2.2.2.2, Subtype.coe_mk, mem_support, Ne.def, one_ne_zero, not_false_iff]
      exact mem_Union_of_mem _ this
    simp_rw [‚Üê this]
    apply is_open_Union_countable
    rintro ‚ü®f, hf‚ü©
    exact hf.2.2.1.Continuous.is_open_support
  obtain ‚ü®g0, hg‚ü© : ‚àÉ g0 : ‚Ñï ‚Üí Œπ, T = range g0 := by
    apply countable.exists_eq_range T_count
    rcases eq_empty_or_nonempty T with (rfl | hT)
    ¬∑ simp only [Union_false, Union_empty] at hT
      simp only [‚Üê hT, not_nonempty_empty] at h's
      exact h's.elim
    ¬∑ exact hT
  let g : ‚Ñï ‚Üí E ‚Üí ‚Ñù := fun n => (g0 n).1
  have g_s : ‚àÄ n, support (g n) ‚äÜ s := fun n => (g0 n).2.1
  have s_g : ‚àÄ x ‚àà s, ‚àÉ n, x ‚àà support (g n) := by
    intro x hx
    rw [‚Üê hT] at hx
    obtain ‚ü®i, iT, hi‚ü© : ‚àÉ (i : Œπ)(hi : i ‚àà T), x ‚àà support (i : E ‚Üí ‚Ñù) := by
      simpa only [mem_Union] using hx
    rw [hg, mem_range] at iT
    rcases iT with ‚ü®n, hn‚ü©
    rw [‚Üê hn] at hi
    exact ‚ü®n, hi‚ü©
  have g_smooth : ‚àÄ n, ContDiff ‚Ñù ‚ä§ (g n) := fun n => (g0 n).2.2.2.1
  have g_comp_supp : ‚àÄ n, HasCompactSupport (g n) := fun n => (g0 n).2.2.1
  have g_nonneg : ‚àÄ n x, 0 ‚â§ g n x := fun n x => ((g0 n).2.2.2.2 (mem_range_self x)).1
  obtain ‚ü®Œ¥, Œ¥pos, c, Œ¥c, c_lt‚ü© :
    ‚àÉ Œ¥ : ‚Ñï ‚Üí ‚Ñù‚â•0, (‚àÄ i : ‚Ñï, 0 < Œ¥ i) ‚àß ‚àÉ c : Nnreal, HasSum Œ¥ c ‚àß c < 1
  exact Nnreal.exists_pos_sum_of_countable one_ne_zero ‚Ñï
  have : ‚àÄ n : ‚Ñï, ‚àÉ r : ‚Ñù, 0 < r ‚àß ‚àÄ i ‚â§ n, ‚àÄ x, ‚ÄñiteratedFderiv ‚Ñù i (r ‚Ä¢ g n) x‚Äñ ‚â§ Œ¥ n := by
    intro n
    have : ‚àÄ i, ‚àÉ R, ‚àÄ x, ‚ÄñiteratedFderiv ‚Ñù i (fun x => g n x) x‚Äñ ‚â§ R := by
      intro i
      have : BddAbove (range fun x => ‚ÄñiteratedFderiv ‚Ñù i (fun x : E => g n x) x‚Äñ) := by
        apply
          ((g_smooth n).continuous_iterated_fderiv
                le_top).norm.bdd_above_range_of_has_compact_support
        apply HasCompactSupport.comp_left _ norm_zero
        apply (g_comp_supp n).iteratedFderiv
      rcases this with ‚ü®R, hR‚ü©
      exact ‚ü®R, fun x => hR (mem_range_self _)‚ü©
    choose R hR using this
    let M := max (((Finset.range (n + 1)).image R).max' (by simp)) 1
    have M_pos : 0 < M := zero_lt_one.trans_le (le_max_right _ _)
    have Œ¥npos : 0 < Œ¥ n := Œ¥pos n
    have IR : ‚àÄ i ‚â§ n, R i ‚â§ M := by 
      intro i hi
      refine' le_trans _ (le_max_left _ _)
      apply Finset.le_max'
      apply Finset.mem_image_of_mem
      simp only [Finset.mem_range]
      linarith
    refine' ‚ü®M‚Åª¬π * Œ¥ n, by positivity, fun i hi x => _‚ü©
    calc
      ‚ÄñiteratedFderiv ‚Ñù i ((M‚Åª¬π * Œ¥ n) ‚Ä¢ g n) x‚Äñ = ‚Äñ(M‚Åª¬π * Œ¥ n) ‚Ä¢ iteratedFderiv ‚Ñù i (g n) x‚Äñ := by
        rw [iterated_fderiv_const_smul_apply]
        exact (g_smooth n).of_le le_top
      _ = M‚Åª¬π * Œ¥ n * ‚ÄñiteratedFderiv ‚Ñù i (g n) x‚Äñ := by
        rw [norm_smul, Real.norm_of_nonneg]
        positivity
      _ ‚â§ M‚Åª¬π * Œ¥ n * M := mul_le_mul_of_nonneg_left ((hR i x).trans (IR i hi)) (by positivity)
      _ = Œ¥ n := by field_simp [M_pos.ne']
      
  choose r rpos hr using this
  have S : ‚àÄ x, Summable fun n => (r n ‚Ä¢ g n) x := by
    intro x
    refine' summable_of_nnnorm_bounded _ Œ¥c.summable fun n => _
    rw [‚Üê Nnreal.coe_le_coe, coe_nnnorm]
    simpa only [norm_iterated_fderiv_zero] using hr n 0 (zero_le n) x
  refine' ‚ü®fun x => ‚àë' n, (r n ‚Ä¢ g n) x, _, _, _‚ü©
  ¬∑ apply subset.antisymm
    ¬∑ intro x hx
      simp only [Pi.smul_apply, Algebra.id.smul_eq_mul, mem_support, Ne.def] at hx
      contrapose! hx
      have : ‚àÄ n, g n x = 0 := by 
        intro n
        contrapose! hx
        exact g_s n hx
      simp only [this, mul_zero, tsum_zero]
    ¬∑ intro x hx
      obtain ‚ü®n, hn‚ü© : ‚àÉ n, x ‚àà support (g n)
      exact s_g x hx
      have I : 0 < r n * g n x := mul_pos (rpos n) (lt_of_le_of_ne (g_nonneg n x) (Ne.symm hn))
      exact ne_of_gt (tsum_pos (S x) (fun i => mul_nonneg (rpos i).le (g_nonneg i x)) n I)
  ¬∑ refine'
      contDiffTsumOfEventually (fun n => (g_smooth n).const_smul _)
        (fun k hk => (Nnreal.has_sum_coe.2 Œ¥c).Summable) _
    intro i hi
    simp only [Nat.cofinite_eq_at_top, Pi.smul_apply, Algebra.id.smul_eq_mul,
      Filter.eventually_at_top, ge_iff_le]
    exact ‚ü®i, fun n hn x => hr _ _ hn _‚ü©
  ¬∑ rintro - ‚ü®y, rfl‚ü©
    refine' ‚ü®tsum_nonneg fun n => mul_nonneg (rpos n).le (g_nonneg n y), le_trans _ c_lt.le‚ü©
    have A : HasSum (fun n => (Œ¥ n : ‚Ñù)) c := Nnreal.has_sum_coe.2 Œ¥c
    rw [‚Üê A.tsum_eq]
    apply tsum_le_tsum _ (S y) A.summable
    intro n
    apply (le_abs_self _).trans
    simpa only [norm_iterated_fderiv_zero] using hr n 0 (zero_le n) y
#align is_open.exists_smooth_support_eq IsOpen.exists_smooth_support_eq

end

