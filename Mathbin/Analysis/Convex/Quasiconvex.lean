/-
Copyright (c) 2021 Ya√´l Dillies. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies
-/
import Mathbin.Analysis.Convex.Function

#align_import analysis.convex.quasiconvex from "leanprover-community/mathlib"@"9a48a083b390d9b84a71efbdc4e8dfa26a687104"

/-!
# Quasiconvex and quasiconcave functions

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file defines quasiconvexity, quasiconcavity and quasilinearity of functions, which are
generalizations of unimodality and monotonicity. Convexity implies quasiconvexity, concavity implies
quasiconcavity, and monotonicity implies quasilinearity.

## Main declarations

* `quasiconvex_on ùïú s f`: Quasiconvexity of the function `f` on the set `s` with scalars `ùïú`. This
  means that, for all `r`, `{x ‚àà s | f x ‚â§ r}` is `ùïú`-convex.
* `quasiconcave_on ùïú s f`: Quasiconcavity of the function `f` on the set `s` with scalars `ùïú`. This
  means that, for all `r`, `{x ‚àà s | r ‚â§ f x}` is `ùïú`-convex.
* `quasilinear_on ùïú s f`: Quasilinearity of the function `f` on the set `s` with scalars `ùïú`. This
  means that `f` is both quasiconvex and quasiconcave.

## References

* https://en.wikipedia.org/wiki/Quasiconvex_function
-/


open Function OrderDual Set

variable {ùïú E F Œ≤ : Type _}

section OrderedSemiring

variable [OrderedSemiring ùïú]

section AddCommMonoid

variable [AddCommMonoid E] [AddCommMonoid F]

section OrderedAddCommMonoid

variable (ùïú) [OrderedAddCommMonoid Œ≤] [SMul ùïú E] (s : Set E) (f : E ‚Üí Œ≤)

#print QuasiconvexOn /-
/-- A function is quasiconvex if all its sublevels are convex.
This means that, for all `r`, `{x ‚àà s | f x ‚â§ r}` is `ùïú`-convex. -/
def QuasiconvexOn : Prop :=
  ‚àÄ r, Convex ùïú ({x ‚àà s | f x ‚â§ r})
#align quasiconvex_on QuasiconvexOn
-/

#print QuasiconcaveOn /-
/-- A function is quasiconcave if all its superlevels are convex.
This means that, for all `r`, `{x ‚àà s | r ‚â§ f x}` is `ùïú`-convex. -/
def QuasiconcaveOn : Prop :=
  ‚àÄ r, Convex ùïú ({x ‚àà s | r ‚â§ f x})
#align quasiconcave_on QuasiconcaveOn
-/

#print QuasilinearOn /-
/-- A function is quasilinear if it is both quasiconvex and quasiconcave.
This means that, for all `r`,
the sets `{x ‚àà s | f x ‚â§ r}` and `{x ‚àà s | r ‚â§ f x}` are `ùïú`-convex. -/
def QuasilinearOn : Prop :=
  QuasiconvexOn ùïú s f ‚àß QuasiconcaveOn ùïú s f
#align quasilinear_on QuasilinearOn
-/

variable {ùïú s f}

#print QuasiconvexOn.dual /-
theorem QuasiconvexOn.dual : QuasiconvexOn ùïú s f ‚Üí QuasiconcaveOn ùïú s (toDual ‚àò f) :=
  id
#align quasiconvex_on.dual QuasiconvexOn.dual
-/

#print QuasiconcaveOn.dual /-
theorem QuasiconcaveOn.dual : QuasiconcaveOn ùïú s f ‚Üí QuasiconvexOn ùïú s (toDual ‚àò f) :=
  id
#align quasiconcave_on.dual QuasiconcaveOn.dual
-/

#print QuasilinearOn.dual /-
theorem QuasilinearOn.dual : QuasilinearOn ùïú s f ‚Üí QuasilinearOn ùïú s (toDual ‚àò f) :=
  And.symm
#align quasilinear_on.dual QuasilinearOn.dual
-/

#print Convex.quasiconvexOn_of_convex_le /-
theorem Convex.quasiconvexOn_of_convex_le (hs : Convex ùïú s) (h : ‚àÄ r, Convex ùïú {x | f x ‚â§ r}) :
    QuasiconvexOn ùïú s f := fun r => hs.inter (h r)
#align convex.quasiconvex_on_of_convex_le Convex.quasiconvexOn_of_convex_le
-/

#print Convex.quasiconcaveOn_of_convex_ge /-
theorem Convex.quasiconcaveOn_of_convex_ge (hs : Convex ùïú s) (h : ‚àÄ r, Convex ùïú {x | r ‚â§ f x}) :
    QuasiconcaveOn ùïú s f :=
  @Convex.quasiconvexOn_of_convex_le ùïú E Œ≤·µí·µà _ _ _ _ _ _ hs h
#align convex.quasiconcave_on_of_convex_ge Convex.quasiconcaveOn_of_convex_ge
-/

#print QuasiconvexOn.convex /-
theorem QuasiconvexOn.convex [IsDirected Œ≤ (¬∑ ‚â§ ¬∑)] (hf : QuasiconvexOn ùïú s f) : Convex ùïú s :=
  fun x hx y hy a b ha hb hab =>
  let ‚ü®z, hxz, hyz‚ü© := exists_ge_ge (f x) (f y)
  (hf _ ‚ü®hx, hxz‚ü© ‚ü®hy, hyz‚ü© ha hb hab).1
#align quasiconvex_on.convex QuasiconvexOn.convex
-/

#print QuasiconcaveOn.convex /-
theorem QuasiconcaveOn.convex [IsDirected Œ≤ (¬∑ ‚â• ¬∑)] (hf : QuasiconcaveOn ùïú s f) : Convex ùïú s :=
  hf.dual.Convex
#align quasiconcave_on.convex QuasiconcaveOn.convex
-/

end OrderedAddCommMonoid

section LinearOrderedAddCommMonoid

variable [LinearOrderedAddCommMonoid Œ≤]

section SMul

variable [SMul ùïú E] {s : Set E} {f g : E ‚Üí Œ≤}

#print QuasiconvexOn.sup /-
theorem QuasiconvexOn.sup (hf : QuasiconvexOn ùïú s f) (hg : QuasiconvexOn ùïú s g) :
    QuasiconvexOn ùïú s (f ‚äî g) := by
  intro r
  simp_rw [Pi.sup_def, sup_le_iff, Set.sep_and]
  exact (hf r).inter (hg r)
#align quasiconvex_on.sup QuasiconvexOn.sup
-/

#print QuasiconcaveOn.inf /-
theorem QuasiconcaveOn.inf (hf : QuasiconcaveOn ùïú s f) (hg : QuasiconcaveOn ùïú s g) :
    QuasiconcaveOn ùïú s (f ‚äì g) :=
  hf.dual.sup hg
#align quasiconcave_on.inf QuasiconcaveOn.inf
-/

#print quasiconvexOn_iff_le_max /-
theorem quasiconvexOn_iff_le_max :
    QuasiconvexOn ùïú s f ‚Üî
      Convex ùïú s ‚àß
        ‚àÄ ‚¶Éx‚¶Ñ,
          x ‚àà s ‚Üí
            ‚àÄ ‚¶Éy‚¶Ñ,
              y ‚àà s ‚Üí
                ‚àÄ ‚¶Éa b : ùïú‚¶Ñ, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a + b = 1 ‚Üí f (a ‚Ä¢ x + b ‚Ä¢ y) ‚â§ max (f x) (f y) :=
  ‚ü®fun hf =>
    ‚ü®hf.Convex, fun x hx y hy a b ha hb hab =>
      (hf _ ‚ü®hx, le_max_left _ _‚ü© ‚ü®hy, le_max_right _ _‚ü© ha hb hab).2‚ü©,
    fun hf r x hx y hy a b ha hb hab =>
    ‚ü®hf.1 hx.1 hy.1 ha hb hab, (hf.2 hx.1 hy.1 ha hb hab).trans <| max_le hx.2 hy.2‚ü©‚ü©
#align quasiconvex_on_iff_le_max quasiconvexOn_iff_le_max
-/

#print quasiconcaveOn_iff_min_le /-
theorem quasiconcaveOn_iff_min_le :
    QuasiconcaveOn ùïú s f ‚Üî
      Convex ùïú s ‚àß
        ‚àÄ ‚¶Éx‚¶Ñ,
          x ‚àà s ‚Üí
            ‚àÄ ‚¶Éy‚¶Ñ,
              y ‚àà s ‚Üí
                ‚àÄ ‚¶Éa b : ùïú‚¶Ñ, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a + b = 1 ‚Üí min (f x) (f y) ‚â§ f (a ‚Ä¢ x + b ‚Ä¢ y) :=
  @quasiconvexOn_iff_le_max ùïú E Œ≤·µí·µà _ _ _ _ _ _
#align quasiconcave_on_iff_min_le quasiconcaveOn_iff_min_le
-/

#print quasilinearOn_iff_mem_uIcc /-
theorem quasilinearOn_iff_mem_uIcc :
    QuasilinearOn ùïú s f ‚Üî
      Convex ùïú s ‚àß
        ‚àÄ ‚¶Éx‚¶Ñ,
          x ‚àà s ‚Üí
            ‚àÄ ‚¶Éy‚¶Ñ,
              y ‚àà s ‚Üí
                ‚àÄ ‚¶Éa b : ùïú‚¶Ñ, 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí a + b = 1 ‚Üí f (a ‚Ä¢ x + b ‚Ä¢ y) ‚àà uIcc (f x) (f y) :=
  by
  rw [QuasilinearOn, quasiconvexOn_iff_le_max, quasiconcaveOn_iff_min_le, and_and_and_comm,
    and_self_iff]
  apply and_congr_right'
  simp_rw [‚Üê forall_and, ‚Üê Icc_min_max, mem_Icc, and_comm']
#align quasilinear_on_iff_mem_uIcc quasilinearOn_iff_mem_uIcc
-/

#print QuasiconvexOn.convex_lt /-
theorem QuasiconvexOn.convex_lt (hf : QuasiconvexOn ùïú s f) (r : Œ≤) : Convex ùïú ({x ‚àà s | f x < r}) :=
  by
  refine' fun x hx y hy a b ha hb hab => _
  have h := hf _ ‚ü®hx.1, le_max_left _ _‚ü© ‚ü®hy.1, le_max_right _ _‚ü© ha hb hab
  exact ‚ü®h.1, h.2.trans_lt <| max_lt hx.2 hy.2‚ü©
#align quasiconvex_on.convex_lt QuasiconvexOn.convex_lt
-/

#print QuasiconcaveOn.convex_gt /-
theorem QuasiconcaveOn.convex_gt (hf : QuasiconcaveOn ùïú s f) (r : Œ≤) :
    Convex ùïú ({x ‚àà s | r < f x}) :=
  hf.dual.convex_lt r
#align quasiconcave_on.convex_gt QuasiconcaveOn.convex_gt
-/

end SMul

section OrderedSMul

variable [SMul ùïú E] [Module ùïú Œ≤] [OrderedSMul ùïú Œ≤] {s : Set E} {f : E ‚Üí Œ≤}

#print ConvexOn.quasiconvexOn /-
theorem ConvexOn.quasiconvexOn (hf : ConvexOn ùïú s f) : QuasiconvexOn ùïú s f :=
  hf.convex_le
#align convex_on.quasiconvex_on ConvexOn.quasiconvexOn
-/

#print ConcaveOn.quasiconcaveOn /-
theorem ConcaveOn.quasiconcaveOn (hf : ConcaveOn ùïú s f) : QuasiconcaveOn ùïú s f :=
  hf.convex_ge
#align concave_on.quasiconcave_on ConcaveOn.quasiconcaveOn
-/

end OrderedSMul

end LinearOrderedAddCommMonoid

end AddCommMonoid

section LinearOrderedAddCommMonoid

variable [LinearOrderedAddCommMonoid E] [OrderedAddCommMonoid Œ≤] [Module ùïú E] [OrderedSMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤}

#print MonotoneOn.quasiconvexOn /-
theorem MonotoneOn.quasiconvexOn (hf : MonotoneOn f s) (hs : Convex ùïú s) : QuasiconvexOn ùïú s f :=
  hf.convex_le hs
#align monotone_on.quasiconvex_on MonotoneOn.quasiconvexOn
-/

#print MonotoneOn.quasiconcaveOn /-
theorem MonotoneOn.quasiconcaveOn (hf : MonotoneOn f s) (hs : Convex ùïú s) : QuasiconcaveOn ùïú s f :=
  hf.convex_ge hs
#align monotone_on.quasiconcave_on MonotoneOn.quasiconcaveOn
-/

#print MonotoneOn.quasilinearOn /-
theorem MonotoneOn.quasilinearOn (hf : MonotoneOn f s) (hs : Convex ùïú s) : QuasilinearOn ùïú s f :=
  ‚ü®hf.QuasiconvexOn hs, hf.QuasiconcaveOn hs‚ü©
#align monotone_on.quasilinear_on MonotoneOn.quasilinearOn
-/

#print AntitoneOn.quasiconvexOn /-
theorem AntitoneOn.quasiconvexOn (hf : AntitoneOn f s) (hs : Convex ùïú s) : QuasiconvexOn ùïú s f :=
  hf.convex_le hs
#align antitone_on.quasiconvex_on AntitoneOn.quasiconvexOn
-/

#print AntitoneOn.quasiconcaveOn /-
theorem AntitoneOn.quasiconcaveOn (hf : AntitoneOn f s) (hs : Convex ùïú s) : QuasiconcaveOn ùïú s f :=
  hf.convex_ge hs
#align antitone_on.quasiconcave_on AntitoneOn.quasiconcaveOn
-/

#print AntitoneOn.quasilinearOn /-
theorem AntitoneOn.quasilinearOn (hf : AntitoneOn f s) (hs : Convex ùïú s) : QuasilinearOn ùïú s f :=
  ‚ü®hf.QuasiconvexOn hs, hf.QuasiconcaveOn hs‚ü©
#align antitone_on.quasilinear_on AntitoneOn.quasilinearOn
-/

#print Monotone.quasiconvexOn /-
theorem Monotone.quasiconvexOn (hf : Monotone f) : QuasiconvexOn ùïú univ f :=
  (hf.MonotoneOn _).QuasiconvexOn convex_univ
#align monotone.quasiconvex_on Monotone.quasiconvexOn
-/

#print Monotone.quasiconcaveOn /-
theorem Monotone.quasiconcaveOn (hf : Monotone f) : QuasiconcaveOn ùïú univ f :=
  (hf.MonotoneOn _).QuasiconcaveOn convex_univ
#align monotone.quasiconcave_on Monotone.quasiconcaveOn
-/

#print Monotone.quasilinearOn /-
theorem Monotone.quasilinearOn (hf : Monotone f) : QuasilinearOn ùïú univ f :=
  ‚ü®hf.QuasiconvexOn, hf.QuasiconcaveOn‚ü©
#align monotone.quasilinear_on Monotone.quasilinearOn
-/

#print Antitone.quasiconvexOn /-
theorem Antitone.quasiconvexOn (hf : Antitone f) : QuasiconvexOn ùïú univ f :=
  (hf.AntitoneOn _).QuasiconvexOn convex_univ
#align antitone.quasiconvex_on Antitone.quasiconvexOn
-/

#print Antitone.quasiconcaveOn /-
theorem Antitone.quasiconcaveOn (hf : Antitone f) : QuasiconcaveOn ùïú univ f :=
  (hf.AntitoneOn _).QuasiconcaveOn convex_univ
#align antitone.quasiconcave_on Antitone.quasiconcaveOn
-/

#print Antitone.quasilinearOn /-
theorem Antitone.quasilinearOn (hf : Antitone f) : QuasilinearOn ùïú univ f :=
  ‚ü®hf.QuasiconvexOn, hf.QuasiconcaveOn‚ü©
#align antitone.quasilinear_on Antitone.quasilinearOn
-/

end LinearOrderedAddCommMonoid

end OrderedSemiring

section LinearOrderedField

variable [LinearOrderedField ùïú] [LinearOrderedAddCommMonoid Œ≤] {s : Set ùïú} {f : ùïú ‚Üí Œ≤}

#print QuasilinearOn.monotoneOn_or_antitoneOn /-
theorem QuasilinearOn.monotoneOn_or_antitoneOn (hf : QuasilinearOn ùïú s f) :
    MonotoneOn f s ‚à® AntitoneOn f s :=
  by
  simp_rw [monotone_on_or_antitone_on_iff_uIcc, ‚Üê segment_eq_uIcc]
  rintro a ha b hb c hc h
  refine' ‚ü®((hf.2 _).segment_subset _ _ h).2, ((hf.1 _).segment_subset _ _ h).2‚ü© <;> simp [*]
#align quasilinear_on.monotone_on_or_antitone_on QuasilinearOn.monotoneOn_or_antitoneOn
-/

#print quasilinearOn_iff_monotoneOn_or_antitoneOn /-
theorem quasilinearOn_iff_monotoneOn_or_antitoneOn (hs : Convex ùïú s) :
    QuasilinearOn ùïú s f ‚Üî MonotoneOn f s ‚à® AntitoneOn f s :=
  ‚ü®fun h => h.monotoneOn_or_antitoneOn, fun h =>
    h.elim (fun h => h.QuasilinearOn hs) fun h => h.QuasilinearOn hs‚ü©
#align quasilinear_on_iff_monotone_on_or_antitone_on quasilinearOn_iff_monotoneOn_or_antitoneOn
-/

end LinearOrderedField

