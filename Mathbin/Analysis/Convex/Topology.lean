/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alexander Bentkamp, Yury Kudryashov

! This file was ported from Lean 3 source module analysis.convex.topology
! leanprover-community/mathlib commit ba2245edf0c8bb155f1569fd9b9492a9b384cde6
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Convex.Jensen
import Mathbin.Analysis.Convex.Strict
import Mathbin.Analysis.Normed.Group.Pointwise
import Mathbin.Topology.Algebra.Module.FiniteDimension
import Mathbin.Analysis.NormedSpace.Ray
import Mathbin.Topology.PathConnected
import Mathbin.Topology.Algebra.Affine

/-!
# Topological and metric properties of convex sets

We prove the following facts:

* `convex.interior` : interior of a convex set is convex;
* `convex.closure` : closure of a convex set is convex;
* `set.finite.compact_convex_hull` : convex hull of a finite set is compact;
* `set.finite.is_closed_convex_hull` : convex hull of a finite set is closed;
* `convex_on_norm`, `convex_on_dist` : norm and distance to a fixed point is convex on any convex
  set;
* `convex_on_univ_norm`, `convex_on_univ_dist` : norm and distance to a fixed point is convex on
  the whole space;
* `convex_hull_ediam`, `convex_hull_diam` : convex hull of a set has the same (e)metric diameter
  as the original set;
* `bounded_convex_hull` : convex hull of a set is bounded if and only if the original set
  is bounded.
* `bounded_std_simplex`, `is_closed_std_simplex`, `compact_std_simplex`: topological properties
  of the standard simplex;
-/


variable {Œπ : Type _} {E : Type _}

open Metric Set

open Pointwise Convex

theorem Real.convex_iff_is_preconnected {s : Set ‚Ñù} : Convex ‚Ñù s ‚Üî IsPreconnected s :=
  convex_iff_ord_connected.trans is_preconnected_iff_ord_connected.symm
#align real.convex_iff_is_preconnected Real.convex_iff_is_preconnected

alias Real.convex_iff_is_preconnected ‚Üî _ IsPreconnected.convex

/-! ### Standard simplex -/


section stdSimplex

variable [Fintype Œπ]

/-- Every vector in `std_simplex ùïú Œπ` has `max`-norm at most `1`. -/
theorem std_simplex_subset_closed_ball : stdSimplex ‚Ñù Œπ ‚äÜ Metric.closedBall 0 1 := by
  intro f hf
  rw [Metric.mem_closed_ball, dist_zero_right]
  refine' Nnreal.coe_one ‚ñ∏ Nnreal.coe_le_coe.2 <| Finset.sup_le fun x hx => _
  change |f x| ‚â§ 1
  rw [abs_of_nonneg <| hf.1 x]
  exact (mem_Icc_of_mem_std_simplex hf x).2
#align std_simplex_subset_closed_ball std_simplex_subset_closed_ball

variable (Œπ)

/-- `std_simplex ‚Ñù Œπ` is bounded. -/
theorem boundedStdSimplex : Metric.Bounded (stdSimplex ‚Ñù Œπ) :=
  (Metric.bounded_iff_subset_ball 0).2 ‚ü®1, std_simplex_subset_closed_ball‚ü©
#align bounded_std_simplex boundedStdSimplex

/-- `std_simplex ‚Ñù Œπ` is closed. -/
theorem is_closed_std_simplex : IsClosed (stdSimplex ‚Ñù Œπ) :=
  (std_simplex_eq_inter ‚Ñù Œπ).symm ‚ñ∏
    IsClosed.inter (is_closed_Inter fun i => is_closed_le continuous_const (continuous_apply i))
      (is_closed_eq ((continuous_finset_sum _) fun x _ => continuous_apply x) continuous_const)
#align is_closed_std_simplex is_closed_std_simplex

/-- `std_simplex ‚Ñù Œπ` is compact. -/
theorem is_compact_std_simplex : IsCompact (stdSimplex ‚Ñù Œπ) :=
  Metric.is_compact_iff_is_closed_bounded.2 ‚ü®is_closed_std_simplex Œπ, boundedStdSimplex Œπ‚ü©
#align is_compact_std_simplex is_compact_std_simplex

end stdSimplex

/-! ### Topological vector space -/


section HasContinuousConstSmul

variable {ùïú : Type _} [LinearOrderedField ùïú] [AddCommGroup E] [Module ùïú E] [TopologicalSpace E]
  [TopologicalAddGroup E] [HasContinuousConstSmul ùïú E]

/-- If `s` is a convex set, then `a ‚Ä¢ interior s + b ‚Ä¢ closure s ‚äÜ interior s` for all `0 < a`,
`0 ‚â§ b`, `a + b = 1`. See also `convex.combo_interior_self_subset_interior` for a weaker version. -/
theorem Convex.combo_interior_closure_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú}
    (ha : 0 < a) (hb : 0 ‚â§ b) (hab : a + b = 1) : a ‚Ä¢ interior s + b ‚Ä¢ closure s ‚äÜ interior s :=
  interior_smul‚ÇÄ ha.ne' s ‚ñ∏
    calc
      interior (a ‚Ä¢ s) + b ‚Ä¢ closure s ‚äÜ interior (a ‚Ä¢ s) + closure (b ‚Ä¢ s) :=
        add_subset_add Subset.rfl (smul_closure_subset b s)
      _ = interior (a ‚Ä¢ s) + b ‚Ä¢ s := by rw [is_open_interior.add_closure (b ‚Ä¢ s)]
      _ ‚äÜ interior (a ‚Ä¢ s + b ‚Ä¢ s) := subset_interior_add_left
      _ ‚äÜ interior s := interior_mono <| hs.set_combo_subset ha.le hb hab
      
#align convex.combo_interior_closure_subset_interior Convex.combo_interior_closure_subset_interior

/-- If `s` is a convex set, then `a ‚Ä¢ interior s + b ‚Ä¢ s ‚äÜ interior s` for all `0 < a`, `0 ‚â§ b`,
`a + b = 1`. See also `convex.combo_interior_closure_subset_interior` for a stronger version. -/
theorem Convex.combo_interior_self_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú}
    (ha : 0 < a) (hb : 0 ‚â§ b) (hab : a + b = 1) : a ‚Ä¢ interior s + b ‚Ä¢ s ‚äÜ interior s :=
  calc
    a ‚Ä¢ interior s + b ‚Ä¢ s ‚äÜ a ‚Ä¢ interior s + b ‚Ä¢ closure s :=
      add_subset_add Subset.rfl <| image_subset _ subset_closure
    _ ‚äÜ interior s := hs.combo_interior_closure_subset_interior ha hb hab
    
#align convex.combo_interior_self_subset_interior Convex.combo_interior_self_subset_interior

/-- If `s` is a convex set, then `a ‚Ä¢ closure s + b ‚Ä¢ interior s ‚äÜ interior s` for all `0 ‚â§ a`,
`0 < b`, `a + b = 1`. See also `convex.combo_self_interior_subset_interior` for a weaker version. -/
theorem Convex.combo_closure_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú}
    (ha : 0 ‚â§ a) (hb : 0 < b) (hab : a + b = 1) : a ‚Ä¢ closure s + b ‚Ä¢ interior s ‚äÜ interior s := by
  rw [add_comm]
  exact hs.combo_interior_closure_subset_interior hb ha (add_comm a b ‚ñ∏ hab)
#align convex.combo_closure_interior_subset_interior Convex.combo_closure_interior_subset_interior

/-- If `s` is a convex set, then `a ‚Ä¢ s + b ‚Ä¢ interior s ‚äÜ interior s` for all `0 ‚â§ a`, `0 < b`,
`a + b = 1`. See also `convex.combo_closure_interior_subset_interior` for a stronger version. -/
theorem Convex.combo_self_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {a b : ùïú}
    (ha : 0 ‚â§ a) (hb : 0 < b) (hab : a + b = 1) : a ‚Ä¢ s + b ‚Ä¢ interior s ‚äÜ interior s := by
  rw [add_comm]
  exact hs.combo_interior_self_subset_interior hb ha (add_comm a b ‚ñ∏ hab)
#align convex.combo_self_interior_subset_interior Convex.combo_self_interior_subset_interior

theorem Convex.combo_interior_closure_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà interior s) (hy : y ‚àà closure s) {a b : ùïú} (ha : 0 < a) (hb : 0 ‚â§ b)
    (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà interior s :=
  hs.combo_interior_closure_subset_interior ha hb hab <|
    add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)
#align convex.combo_interior_closure_mem_interior Convex.combo_interior_closure_mem_interior

theorem Convex.combo_interior_self_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà interior s) (hy : y ‚àà s) {a b : ùïú} (ha : 0 < a) (hb : 0 ‚â§ b) (hab : a + b = 1) :
    a ‚Ä¢ x + b ‚Ä¢ y ‚àà interior s :=
  hs.combo_interior_closure_mem_interior hx (subset_closure hy) ha hb hab
#align convex.combo_interior_self_mem_interior Convex.combo_interior_self_mem_interior

theorem Convex.combo_closure_interior_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà closure s) (hy : y ‚àà interior s) {a b : ùïú} (ha : 0 ‚â§ a) (hb : 0 < b)
    (hab : a + b = 1) : a ‚Ä¢ x + b ‚Ä¢ y ‚àà interior s :=
  hs.combo_closure_interior_subset_interior ha hb hab <|
    add_mem_add (smul_mem_smul_set hx) (smul_mem_smul_set hy)
#align convex.combo_closure_interior_mem_interior Convex.combo_closure_interior_mem_interior

theorem Convex.combo_self_interior_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s)
    (hy : y ‚àà interior s) {a b : ùïú} (ha : 0 ‚â§ a) (hb : 0 < b) (hab : a + b = 1) :
    a ‚Ä¢ x + b ‚Ä¢ y ‚àà interior s :=
  hs.combo_closure_interior_mem_interior (subset_closure hx) hy ha hb hab
#align convex.combo_self_interior_mem_interior Convex.combo_self_interior_mem_interior

theorem Convex.open_segment_interior_closure_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà interior s) (hy : y ‚àà closure s) : openSegment ùïú x y ‚äÜ interior s := by
  rintro _ ‚ü®a, b, ha, hb, hab, rfl‚ü©
  exact hs.combo_interior_closure_mem_interior hx hy ha hb.le hab
#align
  convex.open_segment_interior_closure_subset_interior Convex.open_segment_interior_closure_subset_interior

theorem Convex.open_segment_interior_self_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà interior s) (hy : y ‚àà s) : openSegment ùïú x y ‚äÜ interior s :=
  hs.open_segment_interior_closure_subset_interior hx (subset_closure hy)
#align
  convex.open_segment_interior_self_subset_interior Convex.open_segment_interior_self_subset_interior

theorem Convex.open_segment_closure_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà closure s) (hy : y ‚àà interior s) : openSegment ùïú x y ‚äÜ interior s := by
  rintro _ ‚ü®a, b, ha, hb, hab, rfl‚ü©
  exact hs.combo_closure_interior_mem_interior hx hy ha.le hb hab
#align
  convex.open_segment_closure_interior_subset_interior Convex.open_segment_closure_interior_subset_interior

theorem Convex.open_segment_self_interior_subset_interior {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà s) (hy : y ‚àà interior s) : openSegment ùïú x y ‚äÜ interior s :=
  hs.open_segment_closure_interior_subset_interior (subset_closure hx) hy
#align
  convex.open_segment_self_interior_subset_interior Convex.open_segment_self_interior_subset_interior

/-- If `x ‚àà closure s` and `y ‚àà interior s`, then the segment `(x, y]` is included in `interior s`.
-/
theorem Convex.add_smul_sub_mem_interior' {s : Set E} (hs : Convex ùïú s) {x y : E}
    (hx : x ‚àà closure s) (hy : y ‚àà interior s) {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) :
    x + t ‚Ä¢ (y - x) ‚àà interior s := by
  simpa only [sub_smul, smul_sub, one_smul, add_sub, add_comm] using
    hs.combo_interior_closure_mem_interior hy hx ht.1 (sub_nonneg.mpr ht.2)
      (add_sub_cancel'_right _ _)
#align convex.add_smul_sub_mem_interior' Convex.add_smul_sub_mem_interior'

/-- If `x ‚àà s` and `y ‚àà interior s`, then the segment `(x, y]` is included in `interior s`. -/
theorem Convex.add_smul_sub_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s)
    (hy : y ‚àà interior s) {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ (y - x) ‚àà interior s :=
  hs.add_smul_sub_mem_interior' (subset_closure hx) hy ht
#align convex.add_smul_sub_mem_interior Convex.add_smul_sub_mem_interior

/-- If `x ‚àà closure s` and `x + y ‚àà interior s`, then `x + t y ‚àà interior s` for `t ‚àà (0, 1]`. -/
theorem Convex.add_smul_mem_interior' {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà closure s)
    (hy : x + y ‚àà interior s) {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ y ‚àà interior s := by
  simpa only [add_sub_cancel'] using hs.add_smul_sub_mem_interior' hx hy ht
#align convex.add_smul_mem_interior' Convex.add_smul_mem_interior'

/-- If `x ‚àà s` and `x + y ‚àà interior s`, then `x + t y ‚àà interior s` for `t ‚àà (0, 1]`. -/
theorem Convex.add_smul_mem_interior {s : Set E} (hs : Convex ùïú s) {x y : E} (hx : x ‚àà s)
    (hy : x + y ‚àà interior s) {t : ùïú} (ht : t ‚àà Ioc (0 : ùïú) 1) : x + t ‚Ä¢ y ‚àà interior s :=
  hs.add_smul_mem_interior' (subset_closure hx) hy ht
#align convex.add_smul_mem_interior Convex.add_smul_mem_interior

/-- In a topological vector space, the interior of a convex set is convex. -/
protected theorem Convex.interior {s : Set E} (hs : Convex ùïú s) : Convex ùïú (interior s) :=
  convex_iff_open_segment_subset.mpr fun x hx y hy =>
    hs.open_segment_closure_interior_subset_interior (interior_subset_closure hx) hy
#align convex.interior Convex.interior

/-- In a topological vector space, the closure of a convex set is convex. -/
protected theorem Convex.closure {s : Set E} (hs : Convex ùïú s) : Convex ùïú (closure s) :=
  fun x hx y hy a b ha hb hab =>
  let f : E ‚Üí E ‚Üí E := fun x' y' => a ‚Ä¢ x' + b ‚Ä¢ y'
  have hf : Continuous (Function.uncurry f) :=
    (continuous_fst.const_smul _).add (continuous_snd.const_smul _)
  show f x y ‚àà closure s from map_mem_closure‚ÇÇ hf hx hy fun x' hx' y' hy' => hs hx' hy' ha hb hab
#align convex.closure Convex.closure

open AffineMap

/-- A convex set `s` is strictly convex provided that for any two distinct points of
`s \ interior s`, the line passing through these points has nonempty intersection with
`interior s`. -/
protected theorem Convex.strict_convex' {s : Set E} (hs : Convex ùïú s)
    (h : (s \ interior s).Pairwise fun x y => ‚àÉ c : ùïú, lineMap x y c ‚àà interior s) :
    StrictConvex ùïú s := by 
  refine' strict_convex_iff_open_segment_subset.2 _
  intro x hx y hy hne
  by_cases hx' : x ‚àà interior s; ¬∑ exact hs.open_segment_interior_self_subset_interior hx' hy
  by_cases hy' : y ‚àà interior s; ¬∑ exact hs.open_segment_self_interior_subset_interior hx hy'
  rcases h ‚ü®hx, hx'‚ü© ‚ü®hy, hy'‚ü© hne with ‚ü®c, hc‚ü©
  refine' (open_segment_subset_union x y ‚ü®c, rfl‚ü©).trans (insert_subset.2 ‚ü®hc, union_subset _ _‚ü©)
  exacts[hs.open_segment_self_interior_subset_interior hx hc,
    hs.open_segment_interior_self_subset_interior hc hy]
#align convex.strict_convex' Convex.strict_convex'

/-- A convex set `s` is strictly convex provided that for any two distinct points `x`, `y` of
`s \ interior s`, the segment with endpoints `x`, `y` has nonempty intersection with
`interior s`. -/
protected theorem Convex.strict_convex {s : Set E} (hs : Convex ùïú s)
    (h : (s \ interior s).Pairwise fun x y => ([x -[ùïú] y] \ frontier s).Nonempty) :
    StrictConvex ùïú s := by
  refine' hs.strict_convex' <| h.imp_on fun x hx y hy hne => _
  simp only [segment_eq_image_line_map, ‚Üê self_diff_frontier]
  rintro ‚ü®_, ‚ü®‚ü®c, hc, rfl‚ü©, hcs‚ü©‚ü©
  refine' ‚ü®c, hs.segment_subset hx.1 hy.1 _, hcs‚ü©
  exact (segment_eq_image_line_map ùïú x y).symm ‚ñ∏ mem_image_of_mem _ hc
#align convex.strict_convex Convex.strict_convex

end HasContinuousConstSmul

section HasContinuousSmul

variable [AddCommGroup E] [Module ‚Ñù E] [TopologicalSpace E] [TopologicalAddGroup E]
  [HasContinuousSmul ‚Ñù E]

/-- Convex hull of a finite set is compact. -/
theorem Set.Finite.compact_convex_hull {s : Set E} (hs : s.Finite) : IsCompact (convexHull ‚Ñù s) :=
  by 
  rw [hs.convex_hull_eq_image]
  apply (is_compact_std_simplex _).image
  haveI := hs.fintype
  apply LinearMap.continuous_on_pi
#align set.finite.compact_convex_hull Set.Finite.compact_convex_hull

/-- Convex hull of a finite set is closed. -/
theorem Set.Finite.is_closed_convex_hull [T2Space E] {s : Set E} (hs : s.Finite) :
    IsClosed (convexHull ‚Ñù s) :=
  hs.compact_convex_hull.IsClosed
#align set.finite.is_closed_convex_hull Set.Finite.is_closed_convex_hull

open AffineMap

/-- If we dilate the interior of a convex set about a point in its interior by a scale `t > 1`,
the result includes the closure of the original set.

TODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/
theorem Convex.closure_subset_image_homothety_interior_of_one_lt {s : Set E} (hs : Convex ‚Ñù s)
    {x : E} (hx : x ‚àà interior s) (t : ‚Ñù) (ht : 1 < t) : closure s ‚äÜ homothety x t '' interior s :=
  by 
  intro y hy
  have hne : t ‚â† 0 := (one_pos.trans ht).ne'
  refine'
    ‚ü®homothety x t‚Åª¬π y, hs.open_segment_interior_closure_subset_interior hx hy _,
      (AffineEquiv.homothetyUnitsMulHom x (Units.mk0 t hne)).apply_symm_apply y‚ü©
  rw [open_segment_eq_image_line_map, ‚Üê inv_one, ‚Üê inv_Ioi (zero_lt_one' ‚Ñù), ‚Üê image_inv,
    image_image, homothety_eq_line_map]
  exact mem_image_of_mem _ ht
#align
  convex.closure_subset_image_homothety_interior_of_one_lt Convex.closure_subset_image_homothety_interior_of_one_lt

/-- If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of
the result includes the closure of the original set.

TODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/
theorem Convex.closure_subset_interior_image_homothety_of_one_lt {s : Set E} (hs : Convex ‚Ñù s)
    {x : E} (hx : x ‚àà interior s) (t : ‚Ñù) (ht : 1 < t) :
    closure s ‚äÜ interior (homothety x t '' s) :=
  (hs.closure_subset_image_homothety_interior_of_one_lt hx t ht).trans <|
    (homothety_is_open_map x t (one_pos.trans ht).ne').image_interior_subset _
#align
  convex.closure_subset_interior_image_homothety_of_one_lt Convex.closure_subset_interior_image_homothety_of_one_lt

/-- If we dilate a convex set about a point in its interior by a scale `t > 1`, the interior of
the result includes the closure of the original set.

TODO Generalise this from convex sets to sets that are balanced / star-shaped about `x`. -/
theorem Convex.subset_interior_image_homothety_of_one_lt {s : Set E} (hs : Convex ‚Ñù s) {x : E}
    (hx : x ‚àà interior s) (t : ‚Ñù) (ht : 1 < t) : s ‚äÜ interior (homothety x t '' s) :=
  subset_closure.trans <| hs.closure_subset_interior_image_homothety_of_one_lt hx t ht
#align
  convex.subset_interior_image_homothety_of_one_lt Convex.subset_interior_image_homothety_of_one_lt

/-- A nonempty convex set is path connected. -/
protected theorem Convex.is_path_connected {s : Set E} (hconv : Convex ‚Ñù s) (hne : s.Nonempty) :
    IsPathConnected s := by 
  refine' is_path_connected_iff.mpr ‚ü®hne, _‚ü©
  intro x x_in y y_in
  have H := hconv.segment_subset x_in y_in
  rw [segment_eq_image_line_map] at H
  exact
    JoinedIn.of_line affine_map.line_map_continuous.continuous_on (line_map_apply_zero _ _)
      (line_map_apply_one _ _) H
#align convex.is_path_connected Convex.is_path_connected

/-- A nonempty convex set is connected. -/
protected theorem Convex.is_connected {s : Set E} (h : Convex ‚Ñù s) (hne : s.Nonempty) :
    IsConnected s :=
  (h.IsPathConnected hne).IsConnected
#align convex.is_connected Convex.is_connected

/-- A convex set is preconnected. -/
protected theorem Convex.is_preconnected {s : Set E} (h : Convex ‚Ñù s) : IsPreconnected s :=
  s.eq_empty_or_nonempty.elim (fun h => h.symm ‚ñ∏ is_preconnected_empty) fun hne =>
    (h.IsConnected hne).IsPreconnected
#align convex.is_preconnected Convex.is_preconnected

/-- Every topological vector space over ‚Ñù is path connected.

Not an instance, because it creates enormous TC subproblems (turn on `pp.all`).
-/
protected theorem TopologicalAddGroup.path_connected : PathConnectedSpace E :=
  path_connected_space_iff_univ.mpr <| convex_univ.IsPathConnected ‚ü®(0 : E), trivial‚ü©
#align topological_add_group.path_connected TopologicalAddGroup.path_connected

end HasContinuousSmul

/-! ### Normed vector space -/


section NormedSpace

variable [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E] {s t : Set E}

/-- The norm on a real normed space is convex on any convex set. See also `seminorm.convex_on`
and `convex_on_univ_norm`. -/
theorem convex_on_norm (hs : Convex ‚Ñù s) : ConvexOn ‚Ñù s norm :=
  ‚ü®hs, fun x hx y hy a b ha hb hab =>
    calc
      ‚Äña ‚Ä¢ x + b ‚Ä¢ y‚Äñ ‚â§ ‚Äña ‚Ä¢ x‚Äñ + ‚Äñb ‚Ä¢ y‚Äñ := norm_add_le _ _
      _ = a * ‚Äñx‚Äñ + b * ‚Äñy‚Äñ := by
        rw [norm_smul, norm_smul, Real.norm_of_nonneg ha, Real.norm_of_nonneg hb]
      ‚ü©
#align convex_on_norm convex_on_norm

/-- The norm on a real normed space is convex on the whole space. See also `seminorm.convex_on`
and `convex_on_norm`. -/
theorem convex_on_univ_norm : ConvexOn ‚Ñù univ (norm : E ‚Üí ‚Ñù) :=
  convex_on_norm convex_univ
#align convex_on_univ_norm convex_on_univ_norm

theorem convex_on_dist (z : E) (hs : Convex ‚Ñù s) : ConvexOn ‚Ñù s fun z' => dist z' z := by
  simpa [dist_eq_norm, preimage_preimage] using
    (convex_on_norm (hs.translate (-z))).comp_affine_map (AffineMap.id ‚Ñù E - AffineMap.const ‚Ñù E z)
#align convex_on_dist convex_on_dist

theorem convex_on_univ_dist (z : E) : ConvexOn ‚Ñù univ fun z' => dist z' z :=
  convex_on_dist z convex_univ
#align convex_on_univ_dist convex_on_univ_dist

theorem convex_ball (a : E) (r : ‚Ñù) : Convex ‚Ñù (Metric.ball a r) := by
  simpa only [Metric.ball, sep_univ] using (convex_on_univ_dist a).convex_lt r
#align convex_ball convex_ball

theorem convex_closed_ball (a : E) (r : ‚Ñù) : Convex ‚Ñù (Metric.closedBall a r) := by
  simpa only [Metric.closedBall, sep_univ] using (convex_on_univ_dist a).convex_le r
#align convex_closed_ball convex_closed_ball

theorem Convex.thickening (hs : Convex ‚Ñù s) (Œ¥ : ‚Ñù) : Convex ‚Ñù (thickening Œ¥ s) := by
  rw [‚Üê add_ball_zero]
  exact hs.add (convex_ball 0 _)
#align convex.thickening Convex.thickening

theorem Convex.cthickening (hs : Convex ‚Ñù s) (Œ¥ : ‚Ñù) : Convex ‚Ñù (cthickening Œ¥ s) := by
  obtain hŒ¥ | hŒ¥ := le_total 0 Œ¥
  ¬∑ rw [cthickening_eq_Inter_thickening hŒ¥]
    exact convex_Inter‚ÇÇ fun _ _ => hs.thickening _
  ¬∑ rw [cthickening_of_nonpos hŒ¥]
    exact hs.closure
#align convex.cthickening Convex.cthickening

/-- Given a point `x` in the convex hull of `s` and a point `y`, there exists a point
of `s` at distance at least `dist x y` from `y`. -/
theorem convex_hull_exists_dist_ge {s : Set E} {x : E} (hx : x ‚àà convexHull ‚Ñù s) (y : E) :
    ‚àÉ x' ‚àà s, dist x y ‚â§ dist x' y :=
  (convex_on_dist y (convex_convex_hull ‚Ñù _)).exists_ge_of_mem_convex_hull hx
#align convex_hull_exists_dist_ge convex_hull_exists_dist_ge

/-- Given a point `x` in the convex hull of `s` and a point `y` in the convex hull of `t`,
there exist points `x' ‚àà s` and `y' ‚àà t` at distance at least `dist x y`. -/
theorem convex_hull_exists_dist_ge2 {s t : Set E} {x y : E} (hx : x ‚àà convexHull ‚Ñù s)
    (hy : y ‚àà convexHull ‚Ñù t) : ‚àÉ x' ‚àà s, ‚àÉ y' ‚àà t, dist x y ‚â§ dist x' y' := by
  rcases convex_hull_exists_dist_ge hx y with ‚ü®x', hx', Hx'‚ü©
  rcases convex_hull_exists_dist_ge hy x' with ‚ü®y', hy', Hy'‚ü©
  use x', hx', y', hy'
  exact le_trans Hx' (dist_comm y x' ‚ñ∏ dist_comm y' x' ‚ñ∏ Hy')
#align convex_hull_exists_dist_ge2 convex_hull_exists_dist_ge2

/-- Emetric diameter of the convex hull of a set `s` equals the emetric diameter of `s. -/
@[simp]
theorem convex_hull_ediam (s : Set E) : Emetric.diam (convexHull ‚Ñù s) = Emetric.diam s := by
  refine'
    (Emetric.diam_le fun x hx y hy => _).antisymm (Emetric.diam_mono <| subset_convex_hull ‚Ñù s)
  rcases convex_hull_exists_dist_ge2 hx hy with ‚ü®x', hx', y', hy', H‚ü©
  rw [edist_dist]
  apply le_trans (Ennreal.of_real_le_of_real H)
  rw [‚Üê edist_dist]
  exact Emetric.edist_le_diam_of_mem hx' hy'
#align convex_hull_ediam convex_hull_ediam

/-- Diameter of the convex hull of a set `s` equals the emetric diameter of `s. -/
@[simp]
theorem convex_hull_diam (s : Set E) : Metric.diam (convexHull ‚Ñù s) = Metric.diam s := by
  simp only [Metric.diam, convex_hull_ediam]
#align convex_hull_diam convex_hull_diam

/-- Convex hull of `s` is bounded if and only if `s` is bounded. -/
@[simp]
theorem bounded_convex_hull {s : Set E} : Metric.Bounded (convexHull ‚Ñù s) ‚Üî Metric.Bounded s := by
  simp only [Metric.bounded_iff_ediam_ne_top, convex_hull_ediam]
#align bounded_convex_hull bounded_convex_hull

instance (priority := 100) NormedSpace.path_connected : PathConnectedSpace E :=
  TopologicalAddGroup.path_connected
#align normed_space.path_connected NormedSpace.path_connected

instance (priority := 100) NormedSpace.loc_path_connected : LocPathConnectedSpace E :=
  loc_path_connected_of_bases (fun x => Metric.nhds_basis_ball) fun x r r_pos =>
    (convex_ball x r).IsPathConnected <| by simp [r_pos]
#align normed_space.loc_path_connected NormedSpace.loc_path_connected

theorem dist_add_dist_of_mem_segment {x y z : E} (h : y ‚àà [x -[‚Ñù] z]) :
    dist x y + dist y z = dist x z := by
  simp only [dist_eq_norm, mem_segment_iff_same_ray] at *
  simpa only [sub_add_sub_cancel', norm_sub_rev] using h.norm_add.symm
#align dist_add_dist_of_mem_segment dist_add_dist_of_mem_segment

/-- The set of vectors in the same ray as `x` is connected. -/
theorem is_connected_set_of_same_ray (x : E) : IsConnected { y | SameRay ‚Ñù x y } := by
  by_cases hx : x = 0; ¬∑ simpa [hx] using is_connected_univ
  simp_rw [‚Üê exists_nonneg_left_iff_same_ray hx]
  exact is_connected_Ici.image _ (continuous_id.smul continuous_const).ContinuousOn
#align is_connected_set_of_same_ray is_connected_set_of_same_ray

/-- The set of nonzero vectors in the same ray as the nonzero vector `x` is connected. -/
theorem is_connected_set_of_same_ray_and_ne_zero {x : E} (hx : x ‚â† 0) :
    IsConnected { y | SameRay ‚Ñù x y ‚àß y ‚â† 0 } := by
  simp_rw [‚Üê exists_pos_left_iff_same_ray_and_ne_zero hx]
  exact is_connected_Ioi.image _ (continuous_id.smul continuous_const).ContinuousOn
#align is_connected_set_of_same_ray_and_ne_zero is_connected_set_of_same_ray_and_ne_zero

end NormedSpace

