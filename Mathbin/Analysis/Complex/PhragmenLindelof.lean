/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module analysis.complex.phragmen_lindelof
! leanprover-community/mathlib commit 6d0adfa76594f304b4650d098273d4366edeb61b
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Complex.AbsMax
import Mathbin.Analysis.Asymptotics.SuperpolynomialDecay

/-!
# Phragmen-Lindelöf principle

In this file we prove several versions of the Phragmen-Lindelöf principle, a version of the maximum
modulus principle for an unbounded domain.

## Main statements

* `phragmen_lindelof.horizontal_strip`: the Phragmen-Lindelöf principle in a horizontal strip
  `{z : ℂ | a < complex.im z < b}`;

* `phragmen_lindelof.eq_zero_on_horizontal_strip`, `phragmen_lindelof.eq_on_horizontal_strip`:
  extensionality lemmas based on the Phragmen-Lindelöf principle in a horizontal strip;

* `phragmen_lindelof.vertical_strip`: the Phragmen-Lindelöf principle in a vertical strip
  `{z : ℂ | a < complex.re z < b}`;

* `phragmen_lindelof.eq_zero_on_vertical_strip`, `phragmen_lindelof.eq_on_vertical_strip`:
  extensionality lemmas based on the Phragmen-Lindelöf principle in a vertical strip;

* `phragmen_lindelof.quadrant_I`, `phragmen_lindelof.quadrant_II`, `phragmen_lindelof.quadrant_III`,
  `phragmen_lindelof.quadrant_IV`: the Phragmen-Lindelöf principle in the coordinate quadrants;

* `phragmen_lindelof.right_half_plane_of_tendsto_zero_on_real`,
  `phragmen_lindelof.right_half_plane_of_bounded_on_real`: two versions of the Phragmen-Lindelöf
  principle in the right half-plane;

* `phragmen_lindelof.eq_zero_on_right_half_plane_of_superexponential_decay`,
  `phragmen_lindelof.eq_on_right_half_plane_of_superexponential_decay`: extensionality lemmas based
  on the Phragmen-Lindelöf principle in the right half-plane.

In the case of the right half-plane, we prove a version of the Phragmen-Lindelöf principle that is
useful for Ilyashenko's proof of the individual finiteness theorem (a polynomial vector field on the
real plane has only finitely many limit cycles).
-/


open Set Function Filter Asymptotics Metric Complex

open TopologicalSpace Filter Real

-- mathport name: exprexpR
local notation "expR" => Real.exp

namespace PhragmenLindelof

/-!
### Auxiliary lemmas
-/


variable {E : Type _} [NormedAddCommGroup E]

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "An auxiliary lemma that combines two double exponential estimates into a similar estimate\non the difference of the functions. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `is_O_sub_exp_exp [])
      (Command.declSig
       [(Term.implicitBinder "{" [`a] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
        (Term.implicitBinder
         "{"
         [`f `g]
         [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)]
         "}")
        (Term.implicitBinder "{" [`l] [":" (Term.app `Filter [(Data.Complex.Basic.termℂ "ℂ")])] "}")
        (Term.implicitBinder
         "{"
         [`u]
         [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" (Data.Real.Basic.termℝ "ℝ"))]
         "}")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_» "<" `a)
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             `l
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_» "<" `a)
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             `l
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))]))))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Std.ExtendedBinder.«term∃__,_»
         "∃"
         (Lean.binderIdent `c)
         (Std.ExtendedBinder.«binderTerm<_» "<" `a)
         ","
         («term∃_,_»
          "∃"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
          ","
          (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
           («term_-_» `f "-" `g)
           " =O["
           `l
           "] "
           (Term.fun
            "fun"
            (Term.basicFun
             [`z]
             []
             "=>"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `B
                "*"
                (Term.app
                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                 [(«term_*_»
                   `c
                   "*"
                   («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))]))))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [] "}")]
                 []
                 ","
                 (Term.arrow
                  («term_≤_» `c₁ "≤" `c₂)
                  "→"
                  (Term.arrow
                   («term_≤_» (num "0") "≤" `B₂)
                   "→"
                   (Term.arrow
                    («term_≤_» `B₁ "≤" `B₂)
                    "→"
                    (Term.forall
                     "∀"
                     [`z]
                     []
                     ","
                     («term_≤_»
                      (Analysis.Normed.Group.Basic.«term‖_‖»
                       "‖"
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(«term_*_»
                          `B₁
                          "*"
                          (Term.app
                           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                           [(«term_*_»
                             `c₁
                             "*"
                             («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
                       "‖")
                      "≤"
                      (Analysis.Normed.Group.Basic.«term‖_‖»
                       "‖"
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(«term_*_»
                          `B₂
                          "*"
                          (Term.app
                           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                           [(«term_*_»
                             `c₂
                             "*"
                             («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
                       "‖"))))))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB `z])
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `Real.norm_eq_abs)
                     ","
                     (Tactic.rwRule [] `Real.norm_eq_abs)
                     ","
                     (Tactic.rwRule [] `Real.abs_exp)
                     ","
                     (Tactic.rwRule [] `Real.abs_exp)
                     ","
                     (Tactic.rwRule [] `Real.exp_le_exp)]
                    "]")
                   [])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `mul_le_mul
                    [`hB
                     («term_<|_»
                      (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
                      "<|"
                      («term_<|_»
                       (Term.app `mul_le_mul_of_nonneg_right [`hc])
                       "<|"
                       (Term.app `abs_nonneg [(Term.hole "_")])))
                     (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
                     `hB₀]))]))))))
           []
           (Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `hBf)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                   [])]
                 "⟩")])
              [])])
           []
           (Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `hBg)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                   [])]
                 "⟩")])
              [])])
           []
           (Tactic.refine'
            "refine'"
            (Term.anonymousCtor
             "⟨"
             [(Term.app `max [`cf `cg])
              ","
              (Term.app `max_lt [`hcf `hcg])
              ","
              (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
              ","
              (Term.hole "_")]
             "⟩"))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.proj
              («term_<|_»
               `hOf.trans_le
               "<|"
               (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
              "."
              `sub)
             [(«term_<|_»
               `hOg.trans_le
               "<|"
               (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
           []
           (Std.Tactic.exacts
            "exacts"
            "["
            [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app
              (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
              [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
             ","
             (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app
              (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
              [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]
            "]")])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [] "}")]
                []
                ","
                (Term.arrow
                 («term_≤_» `c₁ "≤" `c₂)
                 "→"
                 (Term.arrow
                  («term_≤_» (num "0") "≤" `B₂)
                  "→"
                  (Term.arrow
                   («term_≤_» `B₁ "≤" `B₂)
                   "→"
                   (Term.forall
                    "∀"
                    [`z]
                    []
                    ","
                    («term_≤_»
                     (Analysis.Normed.Group.Basic.«term‖_‖»
                      "‖"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_»
                         `B₁
                         "*"
                         (Term.app
                          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                          [(«term_*_»
                            `c₁
                            "*"
                            («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
                      "‖")
                     "≤"
                     (Analysis.Normed.Group.Basic.«term‖_‖»
                      "‖"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_»
                         `B₂
                         "*"
                         (Term.app
                          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                          [(«term_*_»
                            `c₂
                            "*"
                            («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
                      "‖"))))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB `z])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `Real.norm_eq_abs)
                    ","
                    (Tactic.rwRule [] `Real.norm_eq_abs)
                    ","
                    (Tactic.rwRule [] `Real.abs_exp)
                    ","
                    (Tactic.rwRule [] `Real.abs_exp)
                    ","
                    (Tactic.rwRule [] `Real.exp_le_exp)]
                   "]")
                  [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `mul_le_mul
                   [`hB
                    («term_<|_»
                     (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
                     "<|"
                     («term_<|_»
                      (Term.app `mul_le_mul_of_nonneg_right [`hc])
                      "<|"
                      (Term.app `abs_nonneg [(Term.hole "_")])))
                    (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
                    `hB₀]))]))))))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hBf)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                  [])]
                "⟩")])
             [])])
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hBg)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "⟨"
            [(Term.app `max [`cf `cg])
             ","
             (Term.app `max_lt [`hcf `hcg])
             ","
             (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
             ","
             (Term.hole "_")]
            "⟩"))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj
             («term_<|_»
              `hOf.trans_le
              "<|"
              (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
             "."
             `sub)
            [(«term_<|_»
              `hOg.trans_le
              "<|"
              (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
          []
          (Std.Tactic.exacts
           "exacts"
           "["
           [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app
             (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
             [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
            ","
            (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app
             (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
             [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]
           "]")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.exacts
       "exacts"
       "["
       [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app
         (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
         [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
        ","
        (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app
         (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
         [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]
       "]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
       [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
       [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         («term_<|_»
          `hOf.trans_le
          "<|"
          (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
         "."
         `sub)
        [(«term_<|_»
          `hOg.trans_le
          "<|"
          (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        («term_<|_»
         `hOf.trans_le
         "<|"
         (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
        "."
        `sub)
       [(«term_<|_»
         `hOg.trans_le
         "<|"
         (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       `hOg.trans_le
       "<|"
       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hOg.trans_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `hOg.trans_le
      "<|"
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       («term_<|_»
        `hOf.trans_le
        "<|"
        (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
       "."
       `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_»
       `hOf.trans_le
       "<|"
       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hOf.trans_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `hOf.trans_le
      "<|"
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(Term.app `max [`cf `cg])
         ","
         (Term.app `max_lt [`hcf `hcg])
         ","
         (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
         ","
         (Term.hole "_")]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app `max [`cf `cg])
        ","
        (Term.app `max_lt [`hcf `hcg])
        ","
        (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
        ","
        (Term.hole "_")]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`Bf `Bg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Bg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Bf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `max [`Bf `Bg]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_lt [`hcf `hcg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hcg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hcf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`cf `cg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `cf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hBg)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hBf)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [] "}")]
            []
            ","
            (Term.arrow
             («term_≤_» `c₁ "≤" `c₂)
             "→"
             (Term.arrow
              («term_≤_» (num "0") "≤" `B₂)
              "→"
              (Term.arrow
               («term_≤_» `B₁ "≤" `B₂)
               "→"
               (Term.forall
                "∀"
                [`z]
                []
                ","
                («term_≤_»
                 (Analysis.Normed.Group.Basic.«term‖_‖»
                  "‖"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `B₁
                     "*"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_»
                        `c₁
                        "*"
                        («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
                  "‖")
                 "≤"
                 (Analysis.Normed.Group.Basic.«term‖_‖»
                  "‖"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `B₂
                     "*"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_»
                        `c₂
                        "*"
                        («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
                  "‖"))))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB `z])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `Real.norm_eq_abs)
                ","
                (Tactic.rwRule [] `Real.norm_eq_abs)
                ","
                (Tactic.rwRule [] `Real.abs_exp)
                ","
                (Tactic.rwRule [] `Real.abs_exp)
                ","
                (Tactic.rwRule [] `Real.exp_le_exp)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `mul_le_mul
               [`hB
                («term_<|_»
                 (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
                 "<|"
                 («term_<|_»
                  (Term.app `mul_le_mul_of_nonneg_right [`hc])
                  "<|"
                  (Term.app `abs_nonneg [(Term.hole "_")])))
                (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
                `hB₀]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB `z])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `Real.norm_eq_abs)
             ","
             (Tactic.rwRule [] `Real.norm_eq_abs)
             ","
             (Tactic.rwRule [] `Real.abs_exp)
             ","
             (Tactic.rwRule [] `Real.abs_exp)
             ","
             (Tactic.rwRule [] `Real.exp_le_exp)]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul
            [`hB
             («term_<|_»
              (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
              "<|"
              («term_<|_»
               (Term.app `mul_le_mul_of_nonneg_right [`hc])
               "<|"
               (Term.app `abs_nonneg [(Term.hole "_")])))
             (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
             `hB₀]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul
        [`hB
         («term_<|_»
          (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
          "<|"
          («term_<|_»
           (Term.app `mul_le_mul_of_nonneg_right [`hc])
           "<|"
           (Term.app `abs_nonneg [(Term.hole "_")])))
         (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
         `hB₀]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul
       [`hB
        («term_<|_»
         (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
         "<|"
         («term_<|_»
          (Term.app `mul_le_mul_of_nonneg_right [`hc])
          "<|"
          (Term.app `abs_nonneg [(Term.hole "_")])))
        (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
        `hB₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_»
       (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
       "<|"
       («term_<|_»
        (Term.app `mul_le_mul_of_nonneg_right [`hc])
        "<|"
        (Term.app `abs_nonneg [(Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.app `mul_le_mul_of_nonneg_right [`hc])
       "<|"
       (Term.app `abs_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.app `mul_le_mul_of_nonneg_right [`hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul_of_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Real.exp_le_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.proj `Real.exp_le_exp "." (fieldIdx "2"))
      "<|"
      («term_<|_»
       (Term.app `mul_le_mul_of_nonneg_right [`hc])
       "<|"
       (Term.app `abs_nonneg [(Term.hole "_")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Real.norm_eq_abs)
         ","
         (Tactic.rwRule [] `Real.norm_eq_abs)
         ","
         (Tactic.rwRule [] `Real.abs_exp)
         ","
         (Tactic.rwRule [] `Real.abs_exp)
         ","
         (Tactic.rwRule [] `Real.exp_le_exp)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_le_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.abs_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.abs_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.norm_eq_abs
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.norm_eq_abs
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB `z])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB₀
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [] "}")]
       []
       ","
       (Term.arrow
        («term_≤_» `c₁ "≤" `c₂)
        "→"
        (Term.arrow
         («term_≤_» (num "0") "≤" `B₂)
         "→"
         (Term.arrow
          («term_≤_» `B₁ "≤" `B₂)
          "→"
          (Term.forall
           "∀"
           [`z]
           []
           ","
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖»
             "‖"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `B₁
                "*"
                (Term.app
                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                 [(«term_*_» `c₁ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
             "‖")
            "≤"
            (Analysis.Normed.Group.Basic.«term‖_‖»
             "‖"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `B₂
                "*"
                (Term.app
                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                 [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
             "‖")))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `c₁ "≤" `c₂)
       "→"
       (Term.arrow
        («term_≤_» (num "0") "≤" `B₂)
        "→"
        (Term.arrow
         («term_≤_» `B₁ "≤" `B₂)
         "→"
         (Term.forall
          "∀"
          [`z]
          []
          ","
          («term_≤_»
           (Analysis.Normed.Group.Basic.«term‖_‖»
            "‖"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `B₁
               "*"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `c₁ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
            "‖")
           "≤"
           (Analysis.Normed.Group.Basic.«term‖_‖»
            "‖"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `B₂
               "*"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
            "‖"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `B₂)
       "→"
       (Term.arrow
        («term_≤_» `B₁ "≤" `B₂)
        "→"
        (Term.forall
         "∀"
         [`z]
         []
         ","
         («term_≤_»
          (Analysis.Normed.Group.Basic.«term‖_‖»
           "‖"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B₁
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_» `c₁ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
           "‖")
          "≤"
          (Analysis.Normed.Group.Basic.«term‖_‖»
           "‖"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B₂
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
           "‖")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `B₁ "≤" `B₂)
       "→"
       (Term.forall
        "∀"
        [`z]
        []
        ","
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖»
          "‖"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B₁
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `c₁ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
          "‖")
         "≤"
         (Analysis.Normed.Group.Basic.«term‖_‖»
          "‖"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B₂
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
          "‖"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       []
       ","
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖»
         "‖"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B₁
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_» `c₁ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
         "‖")
        "≤"
        (Analysis.Normed.Group.Basic.«term‖_‖»
         "‖"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B₂
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
         "‖")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖»
        "‖"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B₁
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c₁ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
        "‖")
       "≤"
       (Analysis.Normed.Group.Basic.«term‖_‖»
        "‖"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B₂
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
        "‖"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.«term‖_‖»
       "‖"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_»
          `B₂
          "*"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
       "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_»
         `B₂
         "*"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B₂
       "*"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.app `u [`z]) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `u [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `c₂
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `c₂ "*" («term|___|» (group "|") (Term.app `u [`z]) (group) "|"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    An auxiliary lemma that combines two double exponential estimates into a similar estimate
    on the difference of the functions. -/
  theorem
    is_O_sub_exp_exp
    { a : ℝ }
        { f g : ℂ → E }
        { l : Filter ℂ }
        { u : ℂ → ℝ }
        ( hBf : ∃ c < a , ∃ B , f =O[ l ] fun z => expR B * expR c * | u z | )
        ( hBg : ∃ c < a , ∃ B , g =O[ l ] fun z => expR B * expR c * | u z | )
      : ∃ c < a , ∃ B , f - g =O[ l ] fun z => expR B * expR c * | u z |
    :=
      by
        have
            :
                ∀
                  { c₁ c₂ B₁ B₂ }
                  ,
                  c₁ ≤ c₂
                    →
                    0 ≤ B₂
                      →
                      B₁ ≤ B₂
                        →
                        ∀ z , ‖ expR B₁ * expR c₁ * | u z | ‖ ≤ ‖ expR B₂ * expR c₂ * | u z | ‖
              :=
              by
                intro c₁ c₂ B₁ B₂ hc hB₀ hB z
                  rw
                    [
                      Real.norm_eq_abs
                        ,
                        Real.norm_eq_abs
                        ,
                        Real.abs_exp
                        ,
                        Real.abs_exp
                        ,
                        Real.exp_le_exp
                      ]
                  exact
                    mul_le_mul
                      hB
                        Real.exp_le_exp . 2 <| mul_le_mul_of_nonneg_right hc <| abs_nonneg _
                        Real.exp_pos _ . le
                        hB₀
          rcases hBf with ⟨ cf , hcf , Bf , hOf ⟩
          rcases hBg with ⟨ cg , hcg , Bg , hOg ⟩
          refine' ⟨ max cf cg , max_lt hcf hcg , max 0 max Bf Bg , _ ⟩
          refine' hOf.trans_le <| this _ _ _ . sub hOg.trans_le <| this _ _ _
          exacts
            [
            le_max_left _ _
              ,
              le_max_left _ _
              ,
              le_max_left _ _ . trans le_max_right _ _
              ,
              le_max_right _ _
              ,
              le_max_left _ _
              ,
              le_max_right _ _ . trans le_max_right _ _
            ]
#align phragmen_lindelof.is_O_sub_exp_exp PhragmenLindelof.is_O_sub_exp_exp

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "An auxiliary lemma that combines two “exponential of a power” estimates into a similar estimate\non the difference of the functions. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `is_O_sub_exp_rpow [])
      (Command.declSig
       [(Term.implicitBinder "{" [`a] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
        (Term.implicitBinder
         "{"
         [`f `g]
         [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)]
         "}")
        (Term.implicitBinder "{" [`l] [":" (Term.app `Filter [(Data.Complex.Basic.termℂ "ℂ")])] "}")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_» "<" `a)
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `atTop]) " ⊓ " `l)
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_» "<" `a)
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `atTop]) " ⊓ " `l)
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Std.ExtendedBinder.«term∃__,_»
         "∃"
         (Lean.binderIdent `c)
         (Std.ExtendedBinder.«binderTerm<_» "<" `a)
         ","
         («term∃_,_»
          "∃"
          (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
          ","
          (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
           («term_-_» `f "-" `g)
           " =O["
           (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `atTop]) " ⊓ " `l)
           "] "
           (Term.fun
            "fun"
            (Term.basicFun
             [`z]
             []
             "=>"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
                 []
                 ","
                 (Term.arrow
                  («term_≤_» `c₁ "≤" `c₂)
                  "→"
                  (Term.arrow
                   («term_≤_» (num "0") "≤" `B₂)
                   "→"
                   (Term.arrow
                    («term_≤_» `B₁ "≤" `B₂)
                    "→"
                    (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [`z]
                       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                       "=>"
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
                     " =O["
                     (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                     "] "
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [`z]
                       []
                       "=>"
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                        "∀ᶠ"
                        (Std.ExtendedBinder.extBinders
                         (Std.ExtendedBinder.extBinder
                          (Lean.binderIdent `z)
                          [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
                        " in "
                        (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                        ", "
                        («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
                     ":="
                     (Term.app
                      (Term.proj
                       (Term.app
                        (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
                        [(Term.hole "_")])
                       "."
                       `filter_mono)
                      [`inf_le_left]))))
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB]
                     []
                     "=>"
                     (Term.app
                      `is_O.of_bound
                      [(num "1")
                       (Term.app
                        `this.mono
                        [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))))
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `one_mul)
                     ","
                     (Tactic.rwRule [] `Real.norm_eq_abs)
                     ","
                     (Tactic.rwRule [] `Real.norm_eq_abs)
                     ","
                     (Tactic.rwRule [] `Real.abs_exp)
                     ","
                     (Tactic.rwRule [] `Real.abs_exp)
                     ","
                     (Tactic.rwRule [] `Real.exp_le_exp)]
                    "]")
                   [])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `mul_le_mul
                    [`hB
                     (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
                     (Term.app
                      `Real.rpow_nonneg_of_nonneg
                      [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
                     `hB₀]))]))))))
           []
           (Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `hBf)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                   [])]
                 "⟩")])
              [])])
           []
           (Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `hBg)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                   [])]
                 "⟩")])
              [])])
           []
           (Tactic.refine'
            "refine'"
            (Term.anonymousCtor
             "⟨"
             [(Term.app `max [`cf `cg])
              ","
              (Term.app `max_lt [`hcf `hcg])
              ","
              (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
              ","
              (Term.hole "_")]
             "⟩"))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.proj
              («term_<|_»
               `hOf.trans
               "<|"
               (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
              "."
              `sub)
             [(«term_<|_»
               `hOg.trans
               "<|"
               (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
           []
           (Std.Tactic.exacts
            "exacts"
            "["
            [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app
              (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
              [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
             ","
             (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             ","
             (Term.app
              (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
              [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]
            "]")])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
                []
                ","
                (Term.arrow
                 («term_≤_» `c₁ "≤" `c₂)
                 "→"
                 (Term.arrow
                  («term_≤_» (num "0") "≤" `B₂)
                  "→"
                  (Term.arrow
                   («term_≤_» `B₁ "≤" `B₂)
                   "→"
                   (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`z]
                      [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                      "=>"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
                    " =O["
                    (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                    "] "
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`z]
                      []
                      "=>"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                       "∀ᶠ"
                       (Std.ExtendedBinder.extBinders
                        (Std.ExtendedBinder.extBinder
                         (Lean.binderIdent `z)
                         [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
                       " in "
                       (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                       ", "
                       («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
                    ":="
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
                       [(Term.hole "_")])
                      "."
                      `filter_mono)
                     [`inf_le_left]))))
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB]
                    []
                    "=>"
                    (Term.app
                     `is_O.of_bound
                     [(num "1")
                      (Term.app
                       `this.mono
                       [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `one_mul)
                    ","
                    (Tactic.rwRule [] `Real.norm_eq_abs)
                    ","
                    (Tactic.rwRule [] `Real.norm_eq_abs)
                    ","
                    (Tactic.rwRule [] `Real.abs_exp)
                    ","
                    (Tactic.rwRule [] `Real.abs_exp)
                    ","
                    (Tactic.rwRule [] `Real.exp_le_exp)]
                   "]")
                  [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `mul_le_mul
                   [`hB
                    (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
                    (Term.app
                     `Real.rpow_nonneg_of_nonneg
                     [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
                    `hB₀]))]))))))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hBf)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                  [])]
                "⟩")])
             [])])
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hBg)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "⟨"
            [(Term.app `max [`cf `cg])
             ","
             (Term.app `max_lt [`hcf `hcg])
             ","
             (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
             ","
             (Term.hole "_")]
            "⟩"))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj
             («term_<|_»
              `hOf.trans
              "<|"
              (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
             "."
             `sub)
            [(«term_<|_»
              `hOg.trans
              "<|"
              (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
          []
          (Std.Tactic.exacts
           "exacts"
           "["
           [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app
             (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
             [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
            ","
            (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
            ","
            (Term.app
             (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
             [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]
           "]")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.exacts
       "exacts"
       "["
       [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app
         (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
         [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
        ","
        (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        ","
        (Term.app
         (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
         [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]
       "]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
       [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
       [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         («term_<|_»
          `hOf.trans
          "<|"
          (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
         "."
         `sub)
        [(«term_<|_»
          `hOg.trans
          "<|"
          (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        («term_<|_»
         `hOf.trans
         "<|"
         (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
        "."
        `sub)
       [(«term_<|_»
         `hOg.trans
         "<|"
         (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       `hOg.trans
       "<|"
       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hOg.trans
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hOg.trans "<|" (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       («term_<|_»
        `hOf.trans
        "<|"
        (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
       "."
       `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_»
       `hOf.trans
       "<|"
       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hOf.trans
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hOf.trans "<|" (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(Term.app `max [`cf `cg])
         ","
         (Term.app `max_lt [`hcf `hcg])
         ","
         (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
         ","
         (Term.hole "_")]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app `max [`cf `cg])
        ","
        (Term.app `max_lt [`hcf `hcg])
        ","
        (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
        ","
        (Term.hole "_")]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`Bf `Bg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Bg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Bf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `max [`Bf `Bg]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_lt [`hcf `hcg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hcg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hcf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`cf `cg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `cf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hBg)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hBf)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
            []
            ","
            (Term.arrow
             («term_≤_» `c₁ "≤" `c₂)
             "→"
             (Term.arrow
              («term_≤_» (num "0") "≤" `B₂)
              "→"
              (Term.arrow
               («term_≤_» `B₁ "≤" `B₂)
               "→"
               (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`z]
                  [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                  "=>"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
                " =O["
                (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                "] "
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`z]
                  []
                  "=>"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                   "∀ᶠ"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder
                     (Lean.binderIdent `z)
                     [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
                   " in "
                   (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                   ", "
                   («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
                ":="
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
                   [(Term.hole "_")])
                  "."
                  `filter_mono)
                 [`inf_le_left]))))
             []
             (Tactic.refine'
              "refine'"
              (Term.fun
               "fun"
               (Term.basicFun
                [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB]
                []
                "=>"
                (Term.app
                 `is_O.of_bound
                 [(num "1")
                  (Term.app
                   `this.mono
                   [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `one_mul)
                ","
                (Tactic.rwRule [] `Real.norm_eq_abs)
                ","
                (Tactic.rwRule [] `Real.norm_eq_abs)
                ","
                (Tactic.rwRule [] `Real.abs_exp)
                ","
                (Tactic.rwRule [] `Real.abs_exp)
                ","
                (Tactic.rwRule [] `Real.exp_le_exp)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `mul_le_mul
               [`hB
                (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
                (Term.app
                 `Real.rpow_nonneg_of_nonneg
                 [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
                `hB₀]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                "∀ᶠ"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder
                  (Lean.binderIdent `z)
                  [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
                " in "
                (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
                ", "
                («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
             ":="
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
                [(Term.hole "_")])
               "."
               `filter_mono)
              [`inf_le_left]))))
          []
          (Tactic.refine'
           "refine'"
           (Term.fun
            "fun"
            (Term.basicFun
             [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB]
             []
             "=>"
             (Term.app
              `is_O.of_bound
              [(num "1")
               (Term.app
                `this.mono
                [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `one_mul)
             ","
             (Tactic.rwRule [] `Real.norm_eq_abs)
             ","
             (Tactic.rwRule [] `Real.norm_eq_abs)
             ","
             (Tactic.rwRule [] `Real.abs_exp)
             ","
             (Tactic.rwRule [] `Real.abs_exp)
             ","
             (Tactic.rwRule [] `Real.exp_le_exp)]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul
            [`hB
             (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
             (Term.app
              `Real.rpow_nonneg_of_nonneg
              [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
             `hB₀]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul
        [`hB
         (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
         (Term.app
          `Real.rpow_nonneg_of_nonneg
          [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
         `hB₀]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul
       [`hB
        (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
        (Term.app
         `Real.rpow_nonneg_of_nonneg
         [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
        `hB₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Real.rpow_nonneg_of_nonneg
       [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `complex.abs.nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `complex.abs.nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `complex.abs.nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_nonneg_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Real.rpow_nonneg_of_nonneg
      [(Term.paren "(" (Term.app `complex.abs.nonneg [(Term.hole "_")]) ")") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_le_rpow_of_exponent_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `one_mul)
         ","
         (Tactic.rwRule [] `Real.norm_eq_abs)
         ","
         (Tactic.rwRule [] `Real.norm_eq_abs)
         ","
         (Tactic.rwRule [] `Real.abs_exp)
         ","
         (Tactic.rwRule [] `Real.abs_exp)
         ","
         (Tactic.rwRule [] `Real.exp_le_exp)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_le_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.abs_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.abs_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.norm_eq_abs
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.norm_eq_abs
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.fun
        "fun"
        (Term.basicFun
         [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB]
         []
         "=>"
         (Term.app
          `is_O.of_bound
          [(num "1")
           (Term.app
            `this.mono
            [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`c₁ `c₂ `B₁ `B₂ `hc `hB₀ `hB]
        []
        "=>"
        (Term.app
         `is_O.of_bound
         [(num "1")
          (Term.app
           `this.mono
           [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_O.of_bound
       [(num "1")
        (Term.app `this.mono [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this.mono [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `this.mono [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O.of_bound
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB₀
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
            "∀ᶠ"
            (Std.ExtendedBinder.extBinders
             (Std.ExtendedBinder.extBinder
              (Lean.binderIdent `z)
              [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
            " in "
            (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
            ", "
            («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
         ":="
         (Term.app
          (Term.proj
           (Term.app
            (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
            [(Term.hole "_")])
           "."
           `filter_mono)
          [`inf_le_left]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
         [(Term.hole "_")])
        "."
        `filter_mono)
       [`inf_le_left])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inf_le_left
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
        [(Term.hole "_")])
       "."
       `filter_mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `eventually_ge_at_top [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eventually_ge_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `eventually_ge_at_top [(num "1")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `eventually_ge_at_top [(num "1")]) ")") "." `comap)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
       "∀ᶠ"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `z)
         [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
       " in "
       (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
       ", "
       («term_≤_» (num "1") "≤" (Term.app `abs [`z])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "1") "≤" (Term.app `abs [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `l
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 69, term))
      (Term.app `comap [`Complex.abs `at_top])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Complex.abs
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `comap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 69 >? 1022, (some 1023, term) <=? (some 69, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 69, (some 70, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
       []
       ","
       (Term.arrow
        («term_≤_» `c₁ "≤" `c₂)
        "→"
        (Term.arrow
         («term_≤_» (num "0") "≤" `B₂)
         "→"
         (Term.arrow
          («term_≤_» `B₁ "≤" `B₂)
          "→"
          (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
           (Term.fun
            "fun"
            (Term.basicFun
             [`z]
             [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
             "=>"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
           " =O["
           (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
           "] "
           (Term.fun
            "fun"
            (Term.basicFun
             [`z]
             []
             "=>"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `c₁ "≤" `c₂)
       "→"
       (Term.arrow
        («term_≤_» (num "0") "≤" `B₂)
        "→"
        (Term.arrow
         («term_≤_» `B₁ "≤" `B₂)
         "→"
         (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
          (Term.fun
           "fun"
           (Term.basicFun
            [`z]
            [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
            "=>"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
          " =O["
          (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
          "] "
          (Term.fun
           "fun"
           (Term.basicFun
            [`z]
            []
            "=>"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `B₂)
       "→"
       (Term.arrow
        («term_≤_» `B₁ "≤" `B₂)
        "→"
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
         " =O["
         (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `B₁ "≤" `B₂)
       "→"
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
        " =O["
        (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
       " =O["
       (Order.Basic.«term_⊓_» (Term.app `comap [`Complex.abs `at_top]) " ⊓ " `l)
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c₂)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c₂
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B₂
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    An auxiliary lemma that combines two “exponential of a power” estimates into a similar estimate
    on the difference of the functions. -/
  theorem
    is_O_sub_exp_rpow
    { a : ℝ }
        { f g : ℂ → E }
        { l : Filter ℂ }
        ( hBf : ∃ c < a , ∃ B , f =O[ comap Complex.abs atTop ⊓ l ] fun z => expR B * abs z ^ c )
        ( hBg : ∃ c < a , ∃ B , g =O[ comap Complex.abs atTop ⊓ l ] fun z => expR B * abs z ^ c )
      : ∃ c < a , ∃ B , f - g =O[ comap Complex.abs atTop ⊓ l ] fun z => expR B * abs z ^ c
    :=
      by
        have
            :
                ∀
                  { c₁ c₂ B₁ B₂ : ℝ }
                  ,
                  c₁ ≤ c₂
                    →
                    0 ≤ B₂
                      →
                      B₁ ≤ B₂
                        →
                        fun z : ℂ => expR B₁ * abs z ^ c₁
                          =O[
                          comap Complex.abs at_top ⊓ l
                          ]
                          fun z => expR B₂ * abs z ^ c₂
              :=
              by
                have
                    : ∀ᶠ z : ℂ in comap Complex.abs at_top ⊓ l , 1 ≤ abs z
                      :=
                      eventually_ge_at_top 1 . comap _ . filter_mono inf_le_left
                  refine' fun c₁ c₂ B₁ B₂ hc hB₀ hB => is_O.of_bound 1 this.mono fun z hz => _
                  rw
                    [
                      one_mul
                        ,
                        Real.norm_eq_abs
                        ,
                        Real.norm_eq_abs
                        ,
                        Real.abs_exp
                        ,
                        Real.abs_exp
                        ,
                        Real.exp_le_exp
                      ]
                  exact
                    mul_le_mul
                      hB
                        Real.rpow_le_rpow_of_exponent_le hz hc
                        Real.rpow_nonneg_of_nonneg complex.abs.nonneg _ _
                        hB₀
          rcases hBf with ⟨ cf , hcf , Bf , hOf ⟩
          rcases hBg with ⟨ cg , hcg , Bg , hOg ⟩
          refine' ⟨ max cf cg , max_lt hcf hcg , max 0 max Bf Bg , _ ⟩
          refine' hOf.trans <| this _ _ _ . sub hOg.trans <| this _ _ _
          exacts
            [
            le_max_left _ _
              ,
              le_max_left _ _
              ,
              le_max_left _ _ . trans le_max_right _ _
              ,
              le_max_right _ _
              ,
              le_max_left _ _
              ,
              le_max_right _ _ . trans le_max_right _ _
            ]
#align phragmen_lindelof.is_O_sub_exp_rpow PhragmenLindelof.is_O_sub_exp_rpow

variable [NormedSpace ℂ E] {a b C : ℝ} {f g : ℂ → E} {z : ℂ}

/-!
### Phragmen-Lindelöf principle in a horizontal strip
-/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < im z < b}`.\nLet `f : ℂ → E` be a function such that\n\n* `f` is differentiable on `U` and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some `c < π / (b - a)`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of `U`.\n\nThen `‖f z‖` is bounded by the same constant on the closed strip\n`{z : ℂ | a ≤ im z ≤ b}`. Moreover, it suffices to verify the second assumption\nonly for sufficiently large values of `|re z|`.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `horizontal_strip [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hfd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hle_a]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.app `im [`z]) "=" `a)
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hle_b]
         [":"
          (Term.forall
           "∀"
           [`z]
           []
           ","
           (Term.arrow
            («term_=_» (Term.app `im [`z]) "=" `b)
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder "(" [`hza] [":" («term_≤_» `a "≤" (Term.app `im [`z]))] [] ")")
        (Term.explicitBinder "(" [`hzb] [":" («term_≤_» (Term.app `im [`z]) "≤" `b)] [] ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `le_iff_eq_or_lt)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hza `hzb] []))])
           []
           (Tactic.cases'
            "cases'"
            [(Tactic.casesTarget [] `hza)]
            []
            ["with" [(Lean.binderIdent `hza) (Lean.binderIdent `hza)]])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.exact "exact" (Term.app `hle_a [(Term.hole "_") `hza.symm]))])
           []
           (Tactic.cases'
            "cases'"
            [(Tactic.casesTarget [] `hzb)]
            []
            ["with" [(Lean.binderIdent `hzb) (Lean.binderIdent `hzb)]])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.exact "exact" (Term.app `hle_b [(Term.hole "_") `hzb]))])
           []
           (Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (Term.forall
              "∀"
              [`C']
              [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
              ","
              (Term.arrow
               («term_<_» (num "0") "<" `C')
               "→"
               (Term.arrow
                (Term.forall
                 "∀"
                 [`w]
                 [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                 ","
                 (Term.arrow
                  («term_=_» (Term.app `im [`w]) "=" `a)
                  "→"
                  («term_≤_»
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`w]) "‖")
                   "≤"
                   `C')))
                "→"
                (Term.arrow
                 (Term.forall
                  "∀"
                  [`w]
                  [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                  ","
                  (Term.arrow
                   («term_=_» (Term.app `im [`w]) "=" `b)
                   "→"
                   («term_≤_»
                    (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`w]) "‖")
                    "≤"
                    `C')))
                 "→"
                 («term_≤_»
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
                  "≤"
                  `C')))))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `le_of_forall_le_of_dense
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`C' `hC']
                      []
                      "=>"
                      (Term.app
                       `this
                       [`C'
                        (Term.hole "_")
                        (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
                        (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))])))]))
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.refine'
                    "refine'"
                    (Term.app
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app `norm_nonneg [(Term.app `f [(«term_*_» `a "*" `I)])])
                        "."
                        `trans)
                       [(Term.app `hle_a [(Term.hole "_") (Term.hole "_")])])
                      "."
                      `trans_lt)
                     [`hC']))
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `mul_I_im) "," (Tactic.rwRule [] `of_real_re)]
                     "]")
                    [])])
                 []
                 (Std.Tactic.exacts
                  "exacts"
                  "["
                  [(Term.app
                    (Term.proj (Term.app `hle_a [(Term.hole "_") `hw]) "." `trans)
                    [`hC'.le])
                   ","
                   (Term.app
                    (Term.proj (Term.app `hle_b [(Term.hole "_") `hw]) "." `trans)
                    [`hC'.le])]
                  "]")])))))
           []
           (Mathlib.Tactic.clear! "clear!" [`C])
           []
           (Tactic.intro "intro" [`C `hC₀ `hle_a `hle_b])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders
               (Lean.unbracketedExplicitBinders [(Lean.binderIdent `a') (Lean.binderIdent `b')] []))
              ","
              («term_∧_»
               («term_=_» `a "=" («term_-_» `a' "-" `b'))
               "∧"
               («term_=_» `b "=" («term_+_» `a' "+" `b'))))]
            [":="
             [(Term.anonymousCtor
               "⟨"
               [(«term_/_» («term_+_» `a "+" `b) "/" (num "2"))
                ","
                («term_/_» («term_-_» `b "-" `a) "/" (num "2"))
                ","
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")])))
                ","
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")])))]
               "⟩")]])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hab []]
              [(Term.typeSpec ":" («term_<_» («term_-_» `a "-" `b) "<" («term_+_» `a "+" `b)))]
              ":="
              (Term.app `hza.trans [`hzb]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hb []]
              [(Term.typeSpec ":" («term_<_» (num "0") "<" `b))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs
                      "["
                      [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                       ","
                       (Tactic.simpLemma [] [] `add_lt_add_iff_left)
                       ","
                       (Tactic.simpLemma [] [] `neg_lt_self_iff)]
                      "]")]
                    ["using" `hab]))]))))))
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `add_sub_sub_cancel)
              ","
              (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `two_mul)
              ","
              (Tactic.rwRule [] `div_mul_eq_div_div)]
             "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hB] []))])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hπb []]
              [(Term.typeSpec
                ":"
                («term_<_»
                 (num "0")
                 "<"
                 («term_/_»
                  («term_/_»
                   (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                   "/"
                   (num "2"))
                  "/"
                  `b)))]
              ":="
              (Term.app `div_pos [`Real.pi_div_two_pos `hb]))))
           []
           (Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `hB)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                   [])]
                 "⟩")])
              [])])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `d)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed
                   [(Std.Tactic.RCases.rcasesPat.tuple
                     "⟨"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcd)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hd₀)])
                       [])]
                     "⟩")])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hd)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `d)] []))
              ","
              («term_∧_»
               («term_∧_» («term_<_» `c "<" `d) "∧" («term_<_» (num "0") "<" `d))
               "∧"
               («term_<_»
                `d
                "<"
                («term_/_»
                 («term_/_»
                  (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                  "/"
                  (num "2"))
                 "/"
                 `b))))]
            [":="
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `max_lt_iff)] "]")]
                    ["using" (Term.app `exists_between [(Term.app `max_lt [`hc `hπb])])]))])))]])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hb' []]
              [(Term.typeSpec
                ":"
                («term_<_»
                 («term_*_» `d "*" `b)
                 "<"
                 («term_/_»
                  (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                  "/"
                  (num "2"))))]
              ":="
              (Term.app (Term.proj (Term.app `lt_div_iff [`hb]) "." (fieldIdx "1")) [`hd]))))
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `aff
             [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" (Data.Complex.Basic.termℂ "ℂ"))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`w]
               []
               "=>"
               («term_*_» `d "*" («term_-_» `w "-" («term_*_» `a "*" `I)))))
             []))
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `g
             [":"
              (Term.arrow
               (Data.Real.Basic.termℝ "ℝ")
               "→"
               (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" (Data.Complex.Basic.termℂ "ℂ")))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`ε `w]
               []
               "=>"
               (Term.app
                `exp
                [(«term_*_»
                  `ε
                  "*"
                  («term_+_»
                   (Term.app `exp [(Term.app `aff [`w])])
                   "+"
                   (Term.app `exp [(«term-_» "-" (Term.app `aff [`w]))])))])))
             []))
           []
           (Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
              "∀ᶠ"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder
                (Lean.binderIdent `ε)
                [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
              " in "
              (TopologicalSpace.Topology.Basic.nhds_within.lt "𝓝[<] " (num "0"))
              ", "
              («term_≤_»
               (Analysis.Normed.Group.Basic.«term‖_‖»
                "‖"
                (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `z]) " • " (Term.app `f [`z]))
                "‖")
               "≤"
               `C))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `le_of_tendsto
                   [(Term.app `tendsto.mono_left [(Term.hole "_") `nhds_within_le_nhds]) `this]))
                 []
                 (Tactic.apply
                  "apply"
                  (Term.proj
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.proj (Term.app `continuous_of_real.mul [`continuous_const]) "." `cexp)
                      "."
                      `smul)
                     [`continuous_const])
                    "."
                    `norm)
                   "."
                   `tendsto'))
                 []
                 (Tactic.simp "simp" [] [] [] [] [])
                 []
                 (Tactic.tacticInfer_instance "infer_instance")])))))
           []
           (Tactic.filterUpwards
            "filter_upwards"
            [(Tactic.termList "[" [`self_mem_nhds_within] "]")]
            ["with" [`ε `ε₀]]
            [])
           []
           (Tactic.change
            "change"
            («term_<_» `ε "<" (num "0"))
            [(Tactic.location "at" (Tactic.locationHyp [`ε₀] []))])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ₀)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hδ)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders
               (Lean.unbracketedExplicitBinders
                [(Lean.binderIdent `δ)]
                [":" (Data.Real.Basic.termℝ "ℝ")]))
              ","
              («term_∧_»
               («term_<_» `δ "<" (num "0"))
               "∧"
               (Term.forall
                "∀"
                [(Term.strictImplicitBinder "⦃" [`w] [] "⦄")]
                []
                ","
                (Term.arrow
                 («term_∈_»
                  (Term.app `im [`w])
                  "∈"
                  (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
                 "→"
                 («term_≤_»
                  (Term.app `abs [(Term.app `g [`ε `w])])
                  "≤"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `δ
                     "*"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_»
                        `d
                        "*"
                        («term|___|» (group "|") (Term.app `re [`w]) (group) "|"))]))]))))))]
            [":="
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.refine'
                   "refine'"
                   (Term.anonymousCtor
                    "⟨"
                    [(«term_*_» `ε "*" (Term.app `Real.cos [(«term_*_» `d "*" `b)]))
                     ","
                     (Term.app
                      `mul_neg_of_neg_of_pos
                      [`ε₀
                       («term_<|_»
                        `Real.cos_pos_of_mem_Ioo
                        "<|"
                        («term_<|_»
                         (Term.proj `abs_lt "." (fieldIdx "1"))
                         "<|"
                         (Term.subst
                          (Term.proj
                           (Term.app `abs_of_pos [(Term.app `mul_pos [`hd₀ `hb])])
                           "."
                           `symm)
                          "▸"
                          [`hb'])))])
                     ","
                     (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))]
                    "⟩"))
                  []
                  (Mathlib.Tactic.replace'
                   "replace"
                   [`hw []]
                   [(Term.typeSpec
                     ":"
                     («term_≤_»
                      («term|___|» (group "|") (Term.app `im [(Term.app `aff [`w])]) (group) "|")
                      "≤"
                      («term_*_» `d "*" `b)))])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Real.closed_ball_eq_Icc)]
                      "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`hw] []))])
                    []
                    (Std.Tactic.tacticRwa__
                     "rwa"
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `of_real_mul_im)
                       ","
                       (Tactic.rwRule [] `sub_im)
                       ","
                       (Tactic.rwRule [] `mul_I_im)
                       ","
                       (Tactic.rwRule [] `of_real_re)
                       ","
                       (Tactic.rwRule [] `_root_.abs_mul)
                       ","
                       (Tactic.rwRule [] (Term.app `abs_of_pos [`hd₀]))
                       ","
                       (Tactic.rwRule [] (Term.app `mul_le_mul_left [`hd₀]))]
                      "]")
                     [])])
                  []
                  (Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs
                      "["
                      [(Tactic.simpLemma [] [] `of_real_mul_re)
                       ","
                       (Tactic.simpLemma [] [] `_root_.abs_mul)
                       ","
                       (Tactic.simpLemma [] [] (Term.app `abs_of_pos [`hd₀]))
                       ","
                       (Tactic.simpLemma [] [] `sub_re)
                       ","
                       (Tactic.simpLemma [] [] `mul_I_re)
                       ","
                       (Tactic.simpLemma [] [] `of_real_im)
                       ","
                       (Tactic.simpLemma [] [] `zero_mul)
                       ","
                       (Tactic.simpLemma [] [] `neg_zero)
                       ","
                       (Tactic.simpLemma [] [] `sub_zero)]
                      "]")]
                    ["using"
                     (Term.app
                      `abs_exp_mul_exp_add_exp_neg_le_of_abs_im_le
                      [`ε₀.le `hw `hb'.le])]))])))]])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hg₁ []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`w]
                 []
                 ","
                 (Term.arrow
                  («term_∨_»
                   («term_=_» (Term.app `im [`w]) "=" («term_-_» `a "-" `b))
                   "∨"
                   («term_=_» (Term.app `im [`w]) "=" («term_+_» `a "+" `b)))
                  "→"
                  («term_≤_» (Term.app `abs [(Term.app `g [`ε `w])]) "≤" (num "1")))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.refine'
                   "refine'"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`w `hw]
                     []
                     "=>"
                     (Term.app
                      (Term.proj
                       («term_<|_»
                        `hδ
                        "<|"
                        (Term.app (Term.proj `hw "." `byCases) [(Term.hole "_") (Term.hole "_")]))
                       "."
                       `trans)
                      [(Term.app
                        (Term.proj `Real.exp_le_one_iff "." (fieldIdx "2"))
                        [(Term.hole "_")])]))))
                  []
                  (Std.Tactic.exacts
                   "exacts"
                   "["
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`h]
                      []
                      "=>"
                      (Term.subst
                       (Term.proj `h "." `symm)
                       "▸"
                       [(Term.app (Term.proj `left_mem_Icc "." (fieldIdx "2")) [`hab.le])])))
                    ","
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`h]
                      []
                      "=>"
                      (Term.subst
                       (Term.proj `h "." `symm)
                       "▸"
                       [(Term.app (Term.proj `right_mem_Icc "." (fieldIdx "2")) [`hab.le])])))
                    ","
                    (Term.app
                     `mul_nonpos_of_nonpos_of_nonneg
                     [`δ₀.le (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])]
                   "]")]))))))
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `R)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hzR)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hR)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders
               (Lean.unbracketedExplicitBinders
                [(Lean.binderIdent `R)]
                [":" (Data.Real.Basic.termℝ "ℝ")]))
              ","
              («term_∧_»
               («term_<_» («term|___|» (group "|") `z.re (group) "|") "<" `R)
               "∧"
               (Term.forall
                "∀"
                [`w]
                []
                ","
                (Term.arrow
                 («term_=_» («term|___|» (group "|") (Term.app `re [`w]) (group) "|") "=" `R)
                 "→"
                 (Term.arrow
                  («term_∈_»
                   (Term.app `im [`w])
                   "∈"
                   (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
                  "→"
                  («term_≤_»
                   (Analysis.Normed.Group.Basic.«term‖_‖»
                    "‖"
                    (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))
                    "‖")
                   "≤"
                   `C))))))]
            [":="
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.refine'
                   "refine'"
                   (Term.proj
                    (Term.app
                     (Term.proj (Term.app `eventually_gt_at_top [(Term.hole "_")]) "." `And)
                     [(Term.hole "_")])
                    "."
                    `exists))
                  []
                  (Std.Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget [] `hO.exists_pos)]
                   ["with"
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.tuple
                        "⟨"
                        [(Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `A)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA₀)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA)])
                          [])]
                        "⟩")])
                     [])])
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `is_O_with_iff)
                     ","
                     (Tactic.simpLemma [] [] `eventually_inf_principal)
                     ","
                     (Tactic.simpLemma [] [] `eventually_comap)
                     ","
                     (Tactic.simpLemma [] [] `mem_Ioo)
                     ","
                     (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `abs_lt)
                     ","
                     (Tactic.simpLemma [] [] `mem_preimage)
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                     ","
                     (Tactic.simpLemma [] [] `Real.norm_eq_abs)
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.app `abs_of_pos [(Term.app `Real.exp_pos [(Term.hole "_")])]))]
                    "]"]
                   [(Tactic.location "at" (Tactic.locationHyp [`hA] []))])
                  []
                  (Tactic.tacticSuffices_
                   "suffices"
                   (Term.sufficesDecl
                    []
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [`R]
                        []
                        "=>"
                        (Term.app
                         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                         [(«term_+_»
                           («term_+_»
                            («term_*_»
                             `δ
                             "*"
                             (Term.app
                              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                              [(«term_*_» `d "*" `R)]))
                            "+"
                            («term_*_»
                             `B
                             "*"
                             (Term.app
                              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                              [(«term_*_» `c "*" `R)])))
                           "+"
                           (Term.app `Real.log [`A]))])))
                      `at_top
                      (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])
                    (Term.byTactic'
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.filterUpwards
                         "filter_upwards"
                         [(Tactic.termList
                           "["
                           [(Term.app `this.eventually [(Term.app `ge_mem_nhds [`hC₀])]) "," `hA]
                           "]")]
                         ["with" [`R `hR `Hle `w `hre `him]]
                         [])
                        []
                        (calcTactic
                         "calc"
                         (calcStep
                          («term_≤_»
                           (Analysis.Normed.Group.Basic.«term‖_‖»
                            "‖"
                            (Algebra.Group.Defs.«term_•_»
                             (Term.app `g [`ε `w])
                             " • "
                             (Term.app `f [`w]))
                            "‖")
                           "≤"
                           (Term.app
                            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                            [(«term_+_»
                              («term_+_»
                               («term_*_»
                                `δ
                                "*"
                                (Term.app
                                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                                 [(«term_*_» `d "*" `R)]))
                               "+"
                               («term_*_»
                                `B
                                "*"
                                (Term.app
                                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                                 [(«term_*_» `c "*" `R)])))
                              "+"
                              (Term.app `Real.log [`A]))]))
                          ":="
                          (Term.hole "_"))
                         [(calcStep («term_≤_» (Term.hole "_") "≤" `C) ":=" `hR)])
                        []
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] `norm_smul)
                           ","
                           (Tactic.rwRule [] `Real.exp_add)
                           ","
                           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hre)
                           ","
                           (Tactic.rwRule [] `Real.exp_add)
                           ","
                           (Tactic.rwRule [] (Term.app `Real.exp_log [`hA₀]))
                           ","
                           (Tactic.rwRule [] `mul_assoc)
                           ","
                           (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `A]))]
                          "]")
                         [])
                        []
                        (Tactic.exact
                         "exact"
                         (Term.app
                          `mul_le_mul
                          [(«term_<|_» `hδ "<|" (Term.app `Ioo_subset_Icc_self [`him]))
                           (Term.app `Hle [(Term.hole "_") `hre `him])
                           (Term.app `norm_nonneg [(Term.hole "_")])
                           (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])))))
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.app `real.tendsto_exp_at_bot.comp [(Term.hole "_")]))
                  []
                  (Mathlib.Tactic.tacticSuffices_
                   "suffices"
                   [`H []]
                   [(Term.typeSpec
                     ":"
                     (Term.app
                      `tendsto
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [`R]
                         []
                         "=>"
                         («term_+_»
                          `δ
                          "+"
                          («term_*_»
                           `B
                           "*"
                           («term_⁻¹»
                            (Term.app
                             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                             [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
                            "⁻¹")))))
                       `at_top
                       (Term.app
                        (TopologicalSpace.Topology.Basic.nhds "𝓝")
                        [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])]))])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `mul_zero) "," (Tactic.rwRule [] `add_zero)]
                      "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
                    []
                    (Tactic.refine'
                     "refine'"
                     (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds]))
                    []
                    (Std.Tactic.Simpa.simpa
                     "simpa"
                     []
                     []
                     (Std.Tactic.Simpa.simpaArgsRest
                      []
                      []
                      ["only"]
                      [(Tactic.simpArgs
                        "["
                        [(Tactic.simpLemma [] [] `id)
                         ","
                         (Tactic.simpLemma
                          []
                          []
                          (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                         ","
                         (Tactic.simpLemma [] [] `add_mul)
                         ","
                         (Tactic.simpLemma [] [] `mul_assoc)
                         ","
                         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `div_eq_inv_mul)
                         ","
                         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_sub)
                         ","
                         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `sub_mul)
                         ","
                         (Tactic.simpLemma [] [] `sub_sub_cancel)]
                        "]")]
                      ["using"
                       (Term.app
                        `H.neg_mul_at_top
                        [`δ₀
                         («term_<|_»
                          `real.tendsto_exp_at_top.comp
                          "<|"
                          (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])]))])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `tendsto_const_nhds.add
                    [(Term.app `tendsto_const_nhds.mul [(Term.hole "_")])]))
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `tendsto_inv_at_top_zero.comp
                    [(«term_<|_»
                      `real.tendsto_exp_at_top.comp
                      "<|"
                      (Term.app
                       `tendsto_const_nhds.mul_at_top
                       [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd])
                        `tendsto_id]))]))])))]])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hR₀ []]
              [(Term.typeSpec ":" («term_<_» (num "0") "<" `R))]
              ":="
              (Term.app
               (Term.proj (Term.app `_root_.abs_nonneg [(Term.hole "_")]) "." `trans_lt)
               [`hzR]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hgd []]
              [(Term.typeSpec
                ":"
                (Term.app `Differentiable [(Data.Complex.Basic.termℂ "ℂ") (Term.app `g [`ε])]))]
              ":="
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app `differentiable_id.sub_const [(Term.hole "_")])
                      "."
                      `const_mul)
                     [(Term.hole "_")])
                    "."
                    `cexp)
                   "."
                   `add)
                  [(Term.proj
                    (Term.proj
                     (Term.app
                      (Term.proj
                       (Term.app `differentiable_id.sub_const [(Term.hole "_")])
                       "."
                       `const_mul)
                      [(Term.hole "_")])
                     "."
                     `neg)
                    "."
                    `cexp)])
                 "."
                 `const_mul)
                [(Term.hole "_")])
               "."
               `cexp))))
           []
           (Mathlib.Tactic.replace'
            "replace"
            [`hd []]
            [(Term.typeSpec
              ":"
              (Term.app
               `DiffContOnCl
               [(Data.Complex.Basic.termℂ "ℂ")
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`w]
                  []
                  "=>"
                  (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))))
                (Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioo [(«term-_» "-" `R) `R])
                 " ×ℂ "
                 (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))]))])
           []
           (Tactic.exact
            "exact"
            (Term.app
             (Term.proj (Term.app `hgd.diff_cont_on_cl.smul [`hfd]) "." `mono)
             [(Term.app `inter_subset_right [(Term.hole "_") (Term.hole "_")])]))
           []
           (convert
            "convert"
            []
            (Term.app
             `norm_le_of_forall_mem_frontier_norm_le
             [(Term.app
               (Term.proj (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) "." `reProdIm)
               [(Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])])
              `hd
              (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
              (Term.hole "_")])
            [])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl [`hwc []] [] ":=" (Term.app `frontier_subset_closure [`hw]))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `frontier_re_prod_im)
                ","
                (Tactic.rwRule
                 []
                 (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))
                ","
                (Tactic.rwRule [] (Term.app `frontier_Ioo [`hab]))
                ","
                (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
                ","
                (Tactic.rwRule [] (Term.app `frontier_Ioo [(Term.app `neg_lt_self [`hR₀])]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hw] []))])
             []
             (Classical.«tacticBy_cases_:_»
              "by_cases"
              [`him ":"]
              («term_∨_»
               («term_=_» `w.im "=" («term_-_» `a "-" `b))
               "∨"
               («term_=_» `w.im "=" («term_+_» `a "+" `b))))
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `closure_re_prod_im)
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hwc] []))])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `norm_smul)
                  ","
                  (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `one_mul [`C]))]
                 "]")
                [])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `mul_le_mul
                 [(Term.app `hg₁ [(Term.hole "_") `him])
                  (Term.app
                   `him.by_cases
                   [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
                  (Term.app `norm_nonneg [(Term.hole "_")])
                  `zero_le_one]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Mathlib.Tactic.replace'
                "replace"
                [`hw []]
                [(Term.typeSpec
                  ":"
                  («term_∈_»
                   `w
                   "∈"
                   (Complex.Data.Complex.Basic.«term_×ℂ_»
                    («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
                    " ×ℂ "
                    (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))))])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `hw.resolve_left
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`h]
                    []
                    "=>"
                    (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))]))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hw' []]
                  []
                  ":="
                  (Term.app
                   `eq_endpoints_or_mem_Ioo_of_mem_Icc
                   [(Term.proj `hw "." (fieldIdx "2"))]))))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `or_assoc)]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hw'] []))])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `hR
                 [(Term.hole "_")
                  (Term.app
                   (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
                   [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
                  (Term.app `hw'.resolve_left [`him])]))])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `closure_re_prod_im)
                ","
                (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
                ","
                (Tactic.rwRule
                 []
                 (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.anonymousCtor
               "⟨"
               [(Term.app (Term.proj `abs_le "." (fieldIdx "1")) [`hzR.le])
                ","
                (Term.anonymousCtor "⟨" [`hza.le "," `hzb.le] "⟩")]
               "⟩"))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `le_iff_eq_or_lt)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hza `hzb] []))])
          []
          (Tactic.cases'
           "cases'"
           [(Tactic.casesTarget [] `hza)]
           []
           ["with" [(Lean.binderIdent `hza) (Lean.binderIdent `hza)]])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact "exact" (Term.app `hle_a [(Term.hole "_") `hza.symm]))])
          []
          (Tactic.cases'
           "cases'"
           [(Tactic.casesTarget [] `hzb)]
           []
           ["with" [(Lean.binderIdent `hzb) (Lean.binderIdent `hzb)]])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact "exact" (Term.app `hle_b [(Term.hole "_") `hzb]))])
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Term.forall
             "∀"
             [`C']
             [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
             ","
             (Term.arrow
              («term_<_» (num "0") "<" `C')
              "→"
              (Term.arrow
               (Term.forall
                "∀"
                [`w]
                [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                ","
                (Term.arrow
                 («term_=_» (Term.app `im [`w]) "=" `a)
                 "→"
                 («term_≤_»
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`w]) "‖")
                  "≤"
                  `C')))
               "→"
               (Term.arrow
                (Term.forall
                 "∀"
                 [`w]
                 [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                 ","
                 (Term.arrow
                  («term_=_» (Term.app `im [`w]) "=" `b)
                  "→"
                  («term_≤_»
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`w]) "‖")
                   "≤"
                   `C')))
                "→"
                («term_≤_»
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
                 "≤"
                 `C')))))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.refine'
                 "refine'"
                 (Term.app
                  `le_of_forall_le_of_dense
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`C' `hC']
                     []
                     "=>"
                     (Term.app
                      `this
                      [`C'
                       (Term.hole "_")
                       (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
                       (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))])))]))
                []
                (tactic__
                 (cdotTk (patternIgnore (token.«· » "·")))
                 [(Tactic.refine'
                   "refine'"
                   (Term.app
                    (Term.proj
                     (Term.app
                      (Term.proj
                       (Term.app `norm_nonneg [(Term.app `f [(«term_*_» `a "*" `I)])])
                       "."
                       `trans)
                      [(Term.app `hle_a [(Term.hole "_") (Term.hole "_")])])
                     "."
                     `trans_lt)
                    [`hC']))
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `mul_I_im) "," (Tactic.rwRule [] `of_real_re)]
                    "]")
                   [])])
                []
                (Std.Tactic.exacts
                 "exacts"
                 "["
                 [(Term.app
                   (Term.proj (Term.app `hle_a [(Term.hole "_") `hw]) "." `trans)
                   [`hC'.le])
                  ","
                  (Term.app
                   (Term.proj (Term.app `hle_b [(Term.hole "_") `hw]) "." `trans)
                   [`hC'.le])]
                 "]")])))))
          []
          (Mathlib.Tactic.clear! "clear!" [`C])
          []
          (Tactic.intro "intro" [`C `hC₀ `hle_a `hle_b])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders
              (Lean.unbracketedExplicitBinders [(Lean.binderIdent `a') (Lean.binderIdent `b')] []))
             ","
             («term_∧_»
              («term_=_» `a "=" («term_-_» `a' "-" `b'))
              "∧"
              («term_=_» `b "=" («term_+_» `a' "+" `b'))))]
           [":="
            [(Term.anonymousCtor
              "⟨"
              [(«term_/_» («term_+_» `a "+" `b) "/" (num "2"))
               ","
               («term_/_» («term_-_» `b "-" `a) "/" (num "2"))
               ","
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")])))
               ","
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")])))]
              "⟩")]])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hab []]
             [(Term.typeSpec ":" («term_<_» («term_-_» `a "-" `b) "<" («term_+_» `a "+" `b)))]
             ":="
             (Term.app `hza.trans [`hzb]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hb []]
             [(Term.typeSpec ":" («term_<_» (num "0") "<" `b))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                      ","
                      (Tactic.simpLemma [] [] `add_lt_add_iff_left)
                      ","
                      (Tactic.simpLemma [] [] `neg_lt_self_iff)]
                     "]")]
                   ["using" `hab]))]))))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `add_sub_sub_cancel)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `two_mul)
             ","
             (Tactic.rwRule [] `div_mul_eq_div_div)]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hB] []))])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hπb []]
             [(Term.typeSpec
               ":"
               («term_<_»
                (num "0")
                "<"
                («term_/_»
                 («term_/_»
                  (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                  "/"
                  (num "2"))
                 "/"
                 `b)))]
             ":="
             (Term.app `div_pos [`Real.pi_div_two_pos `hb]))))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hB)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                  [])]
                "⟩")])
             [])])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `d)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "⟨"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcd)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hd₀)])
                      [])]
                    "⟩")])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hd)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `d)] []))
             ","
             («term_∧_»
              («term_∧_» («term_<_» `c "<" `d) "∧" («term_<_» (num "0") "<" `d))
              "∧"
              («term_<_»
               `d
               "<"
               («term_/_»
                («term_/_»
                 (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                 "/"
                 (num "2"))
                "/"
                `b))))]
           [":="
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `max_lt_iff)] "]")]
                   ["using" (Term.app `exists_between [(Term.app `max_lt [`hc `hπb])])]))])))]])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hb' []]
             [(Term.typeSpec
               ":"
               («term_<_»
                («term_*_» `d "*" `b)
                "<"
                («term_/_»
                 (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                 "/"
                 (num "2"))))]
             ":="
             (Term.app (Term.proj (Term.app `lt_div_iff [`hb]) "." (fieldIdx "1")) [`hd]))))
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `aff
            [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" (Data.Complex.Basic.termℂ "ℂ"))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`w]
              []
              "=>"
              («term_*_» `d "*" («term_-_» `w "-" («term_*_» `a "*" `I)))))
            []))
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `g
            [":"
             (Term.arrow
              (Data.Real.Basic.termℝ "ℝ")
              "→"
              (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" (Data.Complex.Basic.termℂ "ℂ")))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`ε `w]
              []
              "=>"
              (Term.app
               `exp
               [(«term_*_»
                 `ε
                 "*"
                 («term_+_»
                  (Term.app `exp [(Term.app `aff [`w])])
                  "+"
                  (Term.app `exp [(«term-_» "-" (Term.app `aff [`w]))])))])))
            []))
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
             "∀ᶠ"
             (Std.ExtendedBinder.extBinders
              (Std.ExtendedBinder.extBinder
               (Lean.binderIdent `ε)
               [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
             " in "
             (TopologicalSpace.Topology.Basic.nhds_within.lt "𝓝[<] " (num "0"))
             ", "
             («term_≤_»
              (Analysis.Normed.Group.Basic.«term‖_‖»
               "‖"
               (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `z]) " • " (Term.app `f [`z]))
               "‖")
              "≤"
              `C))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.refine'
                 "refine'"
                 (Term.app
                  `le_of_tendsto
                  [(Term.app `tendsto.mono_left [(Term.hole "_") `nhds_within_le_nhds]) `this]))
                []
                (Tactic.apply
                 "apply"
                 (Term.proj
                  (Term.proj
                   (Term.app
                    (Term.proj
                     (Term.proj (Term.app `continuous_of_real.mul [`continuous_const]) "." `cexp)
                     "."
                     `smul)
                    [`continuous_const])
                   "."
                   `norm)
                  "."
                  `tendsto'))
                []
                (Tactic.simp "simp" [] [] [] [] [])
                []
                (Tactic.tacticInfer_instance "infer_instance")])))))
          []
          (Tactic.filterUpwards
           "filter_upwards"
           [(Tactic.termList "[" [`self_mem_nhds_within] "]")]
           ["with" [`ε `ε₀]]
           [])
          []
          (Tactic.change
           "change"
           («term_<_» `ε "<" (num "0"))
           [(Tactic.location "at" (Tactic.locationHyp [`ε₀] []))])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ₀)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hδ)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders
              (Lean.unbracketedExplicitBinders
               [(Lean.binderIdent `δ)]
               [":" (Data.Real.Basic.termℝ "ℝ")]))
             ","
             («term_∧_»
              («term_<_» `δ "<" (num "0"))
              "∧"
              (Term.forall
               "∀"
               [(Term.strictImplicitBinder "⦃" [`w] [] "⦄")]
               []
               ","
               (Term.arrow
                («term_∈_»
                 (Term.app `im [`w])
                 "∈"
                 (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
                "→"
                («term_≤_»
                 (Term.app `abs [(Term.app `g [`ε `w])])
                 "≤"
                 (Term.app
                  (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                  [(«term_*_»
                    `δ
                    "*"
                    (Term.app
                     (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                     [(«term_*_»
                       `d
                       "*"
                       («term|___|» (group "|") (Term.app `re [`w]) (group) "|"))]))]))))))]
           [":="
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.anonymousCtor
                   "⟨"
                   [(«term_*_» `ε "*" (Term.app `Real.cos [(«term_*_» `d "*" `b)]))
                    ","
                    (Term.app
                     `mul_neg_of_neg_of_pos
                     [`ε₀
                      («term_<|_»
                       `Real.cos_pos_of_mem_Ioo
                       "<|"
                       («term_<|_»
                        (Term.proj `abs_lt "." (fieldIdx "1"))
                        "<|"
                        (Term.subst
                         (Term.proj
                          (Term.app `abs_of_pos [(Term.app `mul_pos [`hd₀ `hb])])
                          "."
                          `symm)
                         "▸"
                         [`hb'])))])
                    ","
                    (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))]
                   "⟩"))
                 []
                 (Mathlib.Tactic.replace'
                  "replace"
                  [`hw []]
                  [(Term.typeSpec
                    ":"
                    («term_≤_»
                     («term|___|» (group "|") (Term.app `im [(Term.app `aff [`w])]) (group) "|")
                     "≤"
                     («term_*_» `d "*" `b)))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Real.closed_ball_eq_Icc)]
                     "]")
                    [(Tactic.location "at" (Tactic.locationHyp [`hw] []))])
                   []
                   (Std.Tactic.tacticRwa__
                    "rwa"
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `of_real_mul_im)
                      ","
                      (Tactic.rwRule [] `sub_im)
                      ","
                      (Tactic.rwRule [] `mul_I_im)
                      ","
                      (Tactic.rwRule [] `of_real_re)
                      ","
                      (Tactic.rwRule [] `_root_.abs_mul)
                      ","
                      (Tactic.rwRule [] (Term.app `abs_of_pos [`hd₀]))
                      ","
                      (Tactic.rwRule [] (Term.app `mul_le_mul_left [`hd₀]))]
                     "]")
                    [])])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `of_real_mul_re)
                      ","
                      (Tactic.simpLemma [] [] `_root_.abs_mul)
                      ","
                      (Tactic.simpLemma [] [] (Term.app `abs_of_pos [`hd₀]))
                      ","
                      (Tactic.simpLemma [] [] `sub_re)
                      ","
                      (Tactic.simpLemma [] [] `mul_I_re)
                      ","
                      (Tactic.simpLemma [] [] `of_real_im)
                      ","
                      (Tactic.simpLemma [] [] `zero_mul)
                      ","
                      (Tactic.simpLemma [] [] `neg_zero)
                      ","
                      (Tactic.simpLemma [] [] `sub_zero)]
                     "]")]
                   ["using"
                    (Term.app
                     `abs_exp_mul_exp_add_exp_neg_le_of_abs_im_le
                     [`ε₀.le `hw `hb'.le])]))])))]])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hg₁ []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`w]
                []
                ","
                (Term.arrow
                 («term_∨_»
                  («term_=_» (Term.app `im [`w]) "=" («term_-_» `a "-" `b))
                  "∨"
                  («term_=_» (Term.app `im [`w]) "=" («term_+_» `a "+" `b)))
                 "→"
                 («term_≤_» (Term.app `abs [(Term.app `g [`ε `w])]) "≤" (num "1")))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`w `hw]
                    []
                    "=>"
                    (Term.app
                     (Term.proj
                      («term_<|_»
                       `hδ
                       "<|"
                       (Term.app (Term.proj `hw "." `byCases) [(Term.hole "_") (Term.hole "_")]))
                      "."
                      `trans)
                     [(Term.app
                       (Term.proj `Real.exp_le_one_iff "." (fieldIdx "2"))
                       [(Term.hole "_")])]))))
                 []
                 (Std.Tactic.exacts
                  "exacts"
                  "["
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`h]
                     []
                     "=>"
                     (Term.subst
                      (Term.proj `h "." `symm)
                      "▸"
                      [(Term.app (Term.proj `left_mem_Icc "." (fieldIdx "2")) [`hab.le])])))
                   ","
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`h]
                     []
                     "=>"
                     (Term.subst
                      (Term.proj `h "." `symm)
                      "▸"
                      [(Term.app (Term.proj `right_mem_Icc "." (fieldIdx "2")) [`hab.le])])))
                   ","
                   (Term.app
                    `mul_nonpos_of_nonpos_of_nonneg
                    [`δ₀.le (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])]
                  "]")]))))))
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `R)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hzR)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hR)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders
              (Lean.unbracketedExplicitBinders
               [(Lean.binderIdent `R)]
               [":" (Data.Real.Basic.termℝ "ℝ")]))
             ","
             («term_∧_»
              («term_<_» («term|___|» (group "|") `z.re (group) "|") "<" `R)
              "∧"
              (Term.forall
               "∀"
               [`w]
               []
               ","
               (Term.arrow
                («term_=_» («term|___|» (group "|") (Term.app `re [`w]) (group) "|") "=" `R)
                "→"
                (Term.arrow
                 («term_∈_»
                  (Term.app `im [`w])
                  "∈"
                  (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
                 "→"
                 («term_≤_»
                  (Analysis.Normed.Group.Basic.«term‖_‖»
                   "‖"
                   (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))
                   "‖")
                  "≤"
                  `C))))))]
           [":="
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.proj
                   (Term.app
                    (Term.proj (Term.app `eventually_gt_at_top [(Term.hole "_")]) "." `And)
                    [(Term.hole "_")])
                   "."
                   `exists))
                 []
                 (Std.Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget [] `hO.exists_pos)]
                  ["with"
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.tuple
                       "⟨"
                       [(Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `A)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA₀)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA)])
                         [])]
                       "⟩")])
                    [])])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `is_O_with_iff)
                    ","
                    (Tactic.simpLemma [] [] `eventually_inf_principal)
                    ","
                    (Tactic.simpLemma [] [] `eventually_comap)
                    ","
                    (Tactic.simpLemma [] [] `mem_Ioo)
                    ","
                    (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `abs_lt)
                    ","
                    (Tactic.simpLemma [] [] `mem_preimage)
                    ","
                    (Tactic.simpLemma
                     []
                     []
                     (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                    ","
                    (Tactic.simpLemma [] [] `Real.norm_eq_abs)
                    ","
                    (Tactic.simpLemma
                     []
                     []
                     (Term.app `abs_of_pos [(Term.app `Real.exp_pos [(Term.hole "_")])]))]
                   "]"]
                  [(Tactic.location "at" (Tactic.locationHyp [`hA] []))])
                 []
                 (Tactic.tacticSuffices_
                  "suffices"
                  (Term.sufficesDecl
                   []
                   (Term.app
                    `tendsto
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [`R]
                       []
                       "=>"
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(«term_+_»
                          («term_+_»
                           («term_*_»
                            `δ
                            "*"
                            (Term.app
                             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                             [(«term_*_» `d "*" `R)]))
                           "+"
                           («term_*_»
                            `B
                            "*"
                            (Term.app
                             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                             [(«term_*_» `c "*" `R)])))
                          "+"
                          (Term.app `Real.log [`A]))])))
                     `at_top
                     (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])
                   (Term.byTactic'
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.filterUpwards
                        "filter_upwards"
                        [(Tactic.termList
                          "["
                          [(Term.app `this.eventually [(Term.app `ge_mem_nhds [`hC₀])]) "," `hA]
                          "]")]
                        ["with" [`R `hR `Hle `w `hre `him]]
                        [])
                       []
                       (calcTactic
                        "calc"
                        (calcStep
                         («term_≤_»
                          (Analysis.Normed.Group.Basic.«term‖_‖»
                           "‖"
                           (Algebra.Group.Defs.«term_•_»
                            (Term.app `g [`ε `w])
                            " • "
                            (Term.app `f [`w]))
                           "‖")
                          "≤"
                          (Term.app
                           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                           [(«term_+_»
                             («term_+_»
                              («term_*_»
                               `δ
                               "*"
                               (Term.app
                                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                                [(«term_*_» `d "*" `R)]))
                              "+"
                              («term_*_»
                               `B
                               "*"
                               (Term.app
                                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                                [(«term_*_» `c "*" `R)])))
                             "+"
                             (Term.app `Real.log [`A]))]))
                         ":="
                         (Term.hole "_"))
                        [(calcStep («term_≤_» (Term.hole "_") "≤" `C) ":=" `hR)])
                       []
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `norm_smul)
                          ","
                          (Tactic.rwRule [] `Real.exp_add)
                          ","
                          (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hre)
                          ","
                          (Tactic.rwRule [] `Real.exp_add)
                          ","
                          (Tactic.rwRule [] (Term.app `Real.exp_log [`hA₀]))
                          ","
                          (Tactic.rwRule [] `mul_assoc)
                          ","
                          (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `A]))]
                         "]")
                        [])
                       []
                       (Tactic.exact
                        "exact"
                        (Term.app
                         `mul_le_mul
                         [(«term_<|_» `hδ "<|" (Term.app `Ioo_subset_Icc_self [`him]))
                          (Term.app `Hle [(Term.hole "_") `hre `him])
                          (Term.app `norm_nonneg [(Term.hole "_")])
                          (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])))))
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app `real.tendsto_exp_at_bot.comp [(Term.hole "_")]))
                 []
                 (Mathlib.Tactic.tacticSuffices_
                  "suffices"
                  [`H []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `tendsto
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [`R]
                        []
                        "=>"
                        («term_+_»
                         `δ
                         "+"
                         («term_*_»
                          `B
                          "*"
                          («term_⁻¹»
                           (Term.app
                            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                            [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
                           "⁻¹")))))
                      `at_top
                      (Term.app
                       (TopologicalSpace.Topology.Basic.nhds "𝓝")
                       [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])]))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `mul_zero) "," (Tactic.rwRule [] `add_zero)]
                     "]")
                    [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
                   []
                   (Tactic.refine'
                    "refine'"
                    (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds]))
                   []
                   (Std.Tactic.Simpa.simpa
                    "simpa"
                    []
                    []
                    (Std.Tactic.Simpa.simpaArgsRest
                     []
                     []
                     ["only"]
                     [(Tactic.simpArgs
                       "["
                       [(Tactic.simpLemma [] [] `id)
                        ","
                        (Tactic.simpLemma
                         []
                         []
                         (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                        ","
                        (Tactic.simpLemma [] [] `add_mul)
                        ","
                        (Tactic.simpLemma [] [] `mul_assoc)
                        ","
                        (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `div_eq_inv_mul)
                        ","
                        (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_sub)
                        ","
                        (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `sub_mul)
                        ","
                        (Tactic.simpLemma [] [] `sub_sub_cancel)]
                       "]")]
                     ["using"
                      (Term.app
                       `H.neg_mul_at_top
                       [`δ₀
                        («term_<|_»
                         `real.tendsto_exp_at_top.comp
                         "<|"
                         (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])]))])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `tendsto_const_nhds.add
                   [(Term.app `tendsto_const_nhds.mul [(Term.hole "_")])]))
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `tendsto_inv_at_top_zero.comp
                   [(«term_<|_»
                     `real.tendsto_exp_at_top.comp
                     "<|"
                     (Term.app
                      `tendsto_const_nhds.mul_at_top
                      [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd])
                       `tendsto_id]))]))])))]])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hR₀ []]
             [(Term.typeSpec ":" («term_<_» (num "0") "<" `R))]
             ":="
             (Term.app
              (Term.proj (Term.app `_root_.abs_nonneg [(Term.hole "_")]) "." `trans_lt)
              [`hzR]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hgd []]
             [(Term.typeSpec
               ":"
               (Term.app `Differentiable [(Data.Complex.Basic.termℂ "ℂ") (Term.app `g [`ε])]))]
             ":="
             (Term.proj
              (Term.app
               (Term.proj
                (Term.app
                 (Term.proj
                  (Term.proj
                   (Term.app
                    (Term.proj
                     (Term.app `differentiable_id.sub_const [(Term.hole "_")])
                     "."
                     `const_mul)
                    [(Term.hole "_")])
                   "."
                   `cexp)
                  "."
                  `add)
                 [(Term.proj
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.app `differentiable_id.sub_const [(Term.hole "_")])
                      "."
                      `const_mul)
                     [(Term.hole "_")])
                    "."
                    `neg)
                   "."
                   `cexp)])
                "."
                `const_mul)
               [(Term.hole "_")])
              "."
              `cexp))))
          []
          (Mathlib.Tactic.replace'
           "replace"
           [`hd []]
           [(Term.typeSpec
             ":"
             (Term.app
              `DiffContOnCl
              [(Data.Complex.Basic.termℂ "ℂ")
               (Term.fun
                "fun"
                (Term.basicFun
                 [`w]
                 []
                 "=>"
                 (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))))
               (Complex.Data.Complex.Basic.«term_×ℂ_»
                (Term.app `Ioo [(«term-_» "-" `R) `R])
                " ×ℂ "
                (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))]))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            (Term.proj (Term.app `hgd.diff_cont_on_cl.smul [`hfd]) "." `mono)
            [(Term.app `inter_subset_right [(Term.hole "_") (Term.hole "_")])]))
          []
          (convert
           "convert"
           []
           (Term.app
            `norm_le_of_forall_mem_frontier_norm_le
            [(Term.app
              (Term.proj (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) "." `reProdIm)
              [(Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])])
             `hd
             (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
             (Term.hole "_")])
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl [`hwc []] [] ":=" (Term.app `frontier_subset_closure [`hw]))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `frontier_re_prod_im)
               ","
               (Tactic.rwRule
                []
                (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))
               ","
               (Tactic.rwRule [] (Term.app `frontier_Ioo [`hab]))
               ","
               (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
               ","
               (Tactic.rwRule [] (Term.app `frontier_Ioo [(Term.app `neg_lt_self [`hR₀])]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hw] []))])
            []
            (Classical.«tacticBy_cases_:_»
             "by_cases"
             [`him ":"]
             («term_∨_»
              («term_=_» `w.im "=" («term_-_» `a "-" `b))
              "∨"
              («term_=_» `w.im "=" («term_+_» `a "+" `b))))
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `closure_re_prod_im)
                 ","
                 (Tactic.rwRule
                  []
                  (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
                "]")
               [(Tactic.location "at" (Tactic.locationHyp [`hwc] []))])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `norm_smul)
                 ","
                 (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `one_mul [`C]))]
                "]")
               [])
              []
              (Tactic.exact
               "exact"
               (Term.app
                `mul_le_mul
                [(Term.app `hg₁ [(Term.hole "_") `him])
                 (Term.app
                  `him.by_cases
                  [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
                 (Term.app `norm_nonneg [(Term.hole "_")])
                 `zero_le_one]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Mathlib.Tactic.replace'
               "replace"
               [`hw []]
               [(Term.typeSpec
                 ":"
                 («term_∈_»
                  `w
                  "∈"
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
                   " ×ℂ "
                   (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))))])
              []
              (Tactic.exact
               "exact"
               (Term.app
                `hw.resolve_left
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`h]
                   []
                   "=>"
                   (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))]))
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hw' []]
                 []
                 ":="
                 (Term.app
                  `eq_endpoints_or_mem_Ioo_of_mem_Icc
                  [(Term.proj `hw "." (fieldIdx "2"))]))))
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `or_assoc)]
                "]")
               [(Tactic.location "at" (Tactic.locationHyp [`hw'] []))])
              []
              (Tactic.exact
               "exact"
               (Term.app
                `hR
                [(Term.hole "_")
                 (Term.app
                  (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
                  [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
                 (Term.app `hw'.resolve_left [`him])]))])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `closure_re_prod_im)
               ","
               (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
               ","
               (Tactic.rwRule
                []
                (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.anonymousCtor
              "⟨"
              [(Term.app (Term.proj `abs_le "." (fieldIdx "1")) [`hzR.le])
               ","
               (Term.anonymousCtor "⟨" [`hza.le "," `hzb.le] "⟩")]
              "⟩"))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `closure_re_prod_im)
           ","
           (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
           ","
           (Tactic.rwRule
            []
            (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.anonymousCtor
          "⟨"
          [(Term.app (Term.proj `abs_le "." (fieldIdx "1")) [`hzR.le])
           ","
           (Term.anonymousCtor "⟨" [`hza.le "," `hzb.le] "⟩")]
          "⟩"))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor
        "⟨"
        [(Term.app (Term.proj `abs_le "." (fieldIdx "1")) [`hzR.le])
         ","
         (Term.anonymousCtor "⟨" [`hza.le "," `hzb.le] "⟩")]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app (Term.proj `abs_le "." (fieldIdx "1")) [`hzR.le])
        ","
        (Term.anonymousCtor "⟨" [`hza.le "," `hzb.le] "⟩")]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "⟨" [`hza.le "," `hzb.le] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hzb.le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hza.le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `abs_le "." (fieldIdx "1")) [`hzR.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hzR.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `abs_le "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `abs_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `closure_re_prod_im)
         ","
         (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
         ","
         (Tactic.rwRule
          []
          (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `neg_lt_self [`hR₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hR₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `neg_lt_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `neg_lt_self [`hR₀]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `closure_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `closure_Ioo [`hab.ne])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab.ne
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `closure_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `closure_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl [`hwc []] [] ":=" (Term.app `frontier_subset_closure [`hw]))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `frontier_re_prod_im)
           ","
           (Tactic.rwRule
            []
            (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))
           ","
           (Tactic.rwRule [] (Term.app `frontier_Ioo [`hab]))
           ","
           (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
           ","
           (Tactic.rwRule [] (Term.app `frontier_Ioo [(Term.app `neg_lt_self [`hR₀])]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hw] []))])
        []
        (Classical.«tacticBy_cases_:_»
         "by_cases"
         [`him ":"]
         («term_∨_»
          («term_=_» `w.im "=" («term_-_» `a "-" `b))
          "∨"
          («term_=_» `w.im "=" («term_+_» `a "+" `b))))
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `closure_re_prod_im)
             ","
             (Tactic.rwRule
              []
              (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hwc] []))])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `norm_smul)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `one_mul [`C]))]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul
            [(Term.app `hg₁ [(Term.hole "_") `him])
             (Term.app
              `him.by_cases
              [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
             (Term.app `norm_nonneg [(Term.hole "_")])
             `zero_le_one]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Mathlib.Tactic.replace'
           "replace"
           [`hw []]
           [(Term.typeSpec
             ":"
             («term_∈_»
              `w
              "∈"
              (Complex.Data.Complex.Basic.«term_×ℂ_»
               («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
               " ×ℂ "
               (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `hw.resolve_left
            [(Term.fun
              "fun"
              (Term.basicFun [`h] [] "=>" (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))]))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hw' []]
             []
             ":="
             (Term.app `eq_endpoints_or_mem_Ioo_of_mem_Icc [(Term.proj `hw "." (fieldIdx "2"))]))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `or_assoc)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hw'] []))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `hR
            [(Term.hole "_")
             (Term.app
              (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
              [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
             (Term.app `hw'.resolve_left [`him])]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Mathlib.Tactic.replace'
         "replace"
         [`hw []]
         [(Term.typeSpec
           ":"
           («term_∈_»
            `w
            "∈"
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
             " ×ℂ "
             (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))))])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hw.resolve_left
          [(Term.fun
            "fun"
            (Term.basicFun [`h] [] "=>" (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))]))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hw' []]
           []
           ":="
           (Term.app `eq_endpoints_or_mem_Ioo_of_mem_Icc [(Term.proj `hw "." (fieldIdx "2"))]))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `or_assoc)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hw'] []))])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hR
          [(Term.hole "_")
           (Term.app
            (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
            [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
           (Term.app `hw'.resolve_left [`him])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hR
        [(Term.hole "_")
         (Term.app
          (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
          [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
         (Term.app `hw'.resolve_left [`him])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hR
       [(Term.hole "_")
        (Term.app
         (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
         [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
        (Term.app `hw'.resolve_left [`him])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hw'.resolve_left [`him])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hw'.resolve_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hw'.resolve_left [`him]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
       [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hw "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `abs_eq [`hR₀.le]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `abs_eq [`hR₀.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hR₀.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs_eq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `abs_eq [`hR₀.le]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `abs_eq [`hR₀.le]) ")") "." (fieldIdx "2"))
      [(Term.proj (Term.proj `hw "." (fieldIdx "1")) "." `symm)])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hR
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `or_assoc)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hw'] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `or_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hw' []]
         []
         ":="
         (Term.app `eq_endpoints_or_mem_Ioo_of_mem_Icc [(Term.proj `hw "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_endpoints_or_mem_Ioo_of_mem_Icc [(Term.proj `hw "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hw "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_endpoints_or_mem_Ioo_of_mem_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hw.resolve_left
        [(Term.fun
          "fun"
          (Term.basicFun [`h] [] "=>" (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hw.resolve_left
       [(Term.fun
         "fun"
         (Term.basicFun [`h] [] "=>" (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun [`h] [] "=>" (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [(Term.proj `h "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `h "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `h
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hw.resolve_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.replace'
       "replace"
       [`hw []]
       [(Term.typeSpec
         ":"
         («term_∈_»
          `w
          "∈"
          (Complex.Data.Complex.Basic.«term_×ℂ_»
           («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
           " ×ℂ "
           (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∈_»
       `w
       "∈"
       (Complex.Data.Complex.Basic.«term_×ℂ_»
        («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
        " ×ℂ "
        (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
       " ×ℂ "
       (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `a "+" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `a "+" `b) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_-_» `a "-" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `a "-" `b) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      («term{_}» "{" [(«term-_» "-" `R) "," `R] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `R
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" `R)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `R
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1024, (none, [anonymous]) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 72, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `closure_re_prod_im)
           ","
           (Tactic.rwRule
            []
            (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hwc] []))])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `norm_smul)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `one_mul [`C]))]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `mul_le_mul
          [(Term.app `hg₁ [(Term.hole "_") `him])
           (Term.app
            `him.by_cases
            [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
           (Term.app `norm_nonneg [(Term.hole "_")])
           `zero_le_one]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul
        [(Term.app `hg₁ [(Term.hole "_") `him])
         (Term.app
          `him.by_cases
          [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
         (Term.app `norm_nonneg [(Term.hole "_")])
         `zero_le_one]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul
       [(Term.app `hg₁ [(Term.hole "_") `him])
        (Term.app
         `him.by_cases
         [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
        (Term.app `norm_nonneg [(Term.hole "_")])
        `zero_le_one])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_le_one
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `norm_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `him.by_cases
       [(Term.app `hle_a [(Term.hole "_")]) (Term.app `hle_b [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hle_b [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle_b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hle_b [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hle_a [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle_a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hle_a [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him.by_cases
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `him.by_cases
      [(Term.paren "(" (Term.app `hle_a [(Term.hole "_")]) ")")
       (Term.paren "(" (Term.app `hle_b [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hg₁ [(Term.hole "_") `him])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hg₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hg₁ [(Term.hole "_") `him])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `norm_smul)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `one_mul [`C]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `one_mul [`C])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `closure_re_prod_im)
         ","
         (Tactic.rwRule
          []
          (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hwc] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hwc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `neg_lt_self [`hR₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hR₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `neg_lt_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `neg_lt_self [`hR₀]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `closure_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `closure_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Classical.«tacticBy_cases_:_»
       "by_cases"
       [`him ":"]
       («term_∨_»
        («term_=_» `w.im "=" («term_-_» `a "-" `b))
        "∨"
        («term_=_» `w.im "=" («term_+_» `a "+" `b))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∨_»
       («term_=_» `w.im "=" («term_-_» `a "-" `b))
       "∨"
       («term_=_» `w.im "=" («term_+_» `a "+" `b)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» `w.im "=" («term_+_» `a "+" `b))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `a "+" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `w.im
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 30 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 30, term))
      («term_=_» `w.im "=" («term_-_» `a "-" `b))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `a "-" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `w.im
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 31 >? 50, (some 51, term) <=? (some 30, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 30, (some 30, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `frontier_re_prod_im)
         ","
         (Tactic.rwRule
          []
          (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)]))
         ","
         (Tactic.rwRule [] (Term.app `frontier_Ioo [`hab]))
         ","
         (Tactic.rwRule [] (Term.app `closure_Ioo [`hab.ne]))
         ","
         (Tactic.rwRule [] (Term.app `frontier_Ioo [(Term.app `neg_lt_self [`hR₀])]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hw] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `frontier_Ioo [(Term.app `neg_lt_self [`hR₀])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `neg_lt_self [`hR₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hR₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `neg_lt_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `neg_lt_self [`hR₀]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `frontier_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `closure_Ioo [`hab.ne])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab.ne
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `closure_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `frontier_Ioo [`hab])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `frontier_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `closure_Ioo [(Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `neg_lt_self [`hR₀]) "." `Ne)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `neg_lt_self [`hR₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hR₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `neg_lt_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `neg_lt_self [`hR₀]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `closure_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `frontier_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl [`hwc []] [] ":=" (Term.app `frontier_subset_closure [`hw]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `frontier_subset_closure [`hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `frontier_subset_closure
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        `norm_le_of_forall_mem_frontier_norm_le
        [(Term.app
          (Term.proj (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) "." `reProdIm)
          [(Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])])
         `hd
         (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
         (Term.hole "_")])
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `norm_le_of_forall_mem_frontier_norm_le
       [(Term.app
         (Term.proj (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) "." `reProdIm)
         [(Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])])
        `hd
        (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`w `hw] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) "." `reProdIm)
       [(Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `bounded_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) "." `reProdIm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `bounded_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren "(" (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) ")")
       "."
       `reProdIm)
      [(Term.paren "(" (Term.app `bounded_Ioo [(Term.hole "_") (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_le_of_forall_mem_frontier_norm_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj (Term.app `hgd.diff_cont_on_cl.smul [`hfd]) "." `mono)
        [(Term.app `inter_subset_right [(Term.hole "_") (Term.hole "_")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `hgd.diff_cont_on_cl.smul [`hfd]) "." `mono)
       [(Term.app `inter_subset_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inter_subset_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inter_subset_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `inter_subset_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `hgd.diff_cont_on_cl.smul [`hfd]) "." `mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hgd.diff_cont_on_cl.smul [`hfd])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hfd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hgd.diff_cont_on_cl.smul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hgd.diff_cont_on_cl.smul [`hfd])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.replace'
       "replace"
       [`hd []]
       [(Term.typeSpec
         ":"
         (Term.app
          `DiffContOnCl
          [(Data.Complex.Basic.termℂ "ℂ")
           (Term.fun
            "fun"
            (Term.basicFun
             [`w]
             []
             "=>"
             (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))))
           (Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioo [(«term-_» "-" `R) `R])
            " ×ℂ "
            (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `DiffContOnCl
       [(Data.Complex.Basic.termℂ "ℂ")
        (Term.fun
         "fun"
         (Term.basicFun
          [`w]
          []
          "=>"
          (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))))
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Ioo [(«term-_» "-" `R) `R])
         " ×ℂ "
         (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Ioo [(«term-_» "-" `R) `R])
       " ×ℂ "
       (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `a "+" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `a "+" `b) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_-_» `a "-" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `a "-" `b) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Ioo [(«term-_» "-" `R) `R])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term-_» "-" `R)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `R
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" `R) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Ioo [(Term.paren "(" («term-_» "-" `R) ")") `R])
      " ×ℂ "
      (Term.app
       `Ioo
       [(Term.paren "(" («term_-_» `a "-" `b) ")") (Term.paren "(" («term_+_» `a "+" `b) ")")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`w]
        []
        "=>"
        (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`w])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `g [`ε `w])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`w]
       []
       "=>"
       (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `DiffContOnCl
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hgd []]
         [(Term.typeSpec
           ":"
           (Term.app `Differentiable [(Data.Complex.Basic.termℂ "ℂ") (Term.app `g [`ε])]))]
         ":="
         (Term.proj
          (Term.app
           (Term.proj
            (Term.app
             (Term.proj
              (Term.proj
               (Term.app
                (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
                [(Term.hole "_")])
               "."
               `cexp)
              "."
              `add)
             [(Term.proj
               (Term.proj
                (Term.app
                 (Term.proj
                  (Term.app `differentiable_id.sub_const [(Term.hole "_")])
                  "."
                  `const_mul)
                 [(Term.hole "_")])
                "."
                `neg)
               "."
               `cexp)])
            "."
            `const_mul)
           [(Term.hole "_")])
          "."
          `cexp))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj
           (Term.proj
            (Term.app
             (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
             [(Term.hole "_")])
            "."
            `cexp)
           "."
           `add)
          [(Term.proj
            (Term.proj
             (Term.app
              (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
              [(Term.hole "_")])
             "."
             `neg)
            "."
            `cexp)])
         "."
         `const_mul)
        [(Term.hole "_")])
       "."
       `cexp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj
          (Term.proj
           (Term.app
            (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
            [(Term.hole "_")])
           "."
           `cexp)
          "."
          `add)
         [(Term.proj
           (Term.proj
            (Term.app
             (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
             [(Term.hole "_")])
            "."
            `neg)
           "."
           `cexp)])
        "."
        `const_mul)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.proj
         (Term.proj
          (Term.app
           (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
           [(Term.hole "_")])
          "."
          `cexp)
         "."
         `add)
        [(Term.proj
          (Term.proj
           (Term.app
            (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
            [(Term.hole "_")])
           "."
           `neg)
          "."
          `cexp)])
       "."
       `const_mul)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.proj
         (Term.app
          (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
          [(Term.hole "_")])
         "."
         `cexp)
        "."
        `add)
       [(Term.proj
         (Term.proj
          (Term.app
           (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
           [(Term.hole "_")])
          "."
          `neg)
         "."
         `cexp)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.proj
        (Term.app
         (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
         [(Term.hole "_")])
        "."
        `neg)
       "."
       `cexp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.app
        (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
        [(Term.hole "_")])
       "."
       `neg)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `differentiable_id.sub_const [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `differentiable_id.sub_const
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `differentiable_id.sub_const [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren "(" (Term.app `differentiable_id.sub_const [(Term.hole "_")]) ")")
       "."
       `const_mul)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.proj
        (Term.app
         (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
         [(Term.hole "_")])
        "."
        `cexp)
       "."
       `add)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.app
        (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
        [(Term.hole "_")])
       "."
       `cexp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `differentiable_id.sub_const [(Term.hole "_")]) "." `const_mul)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `differentiable_id.sub_const [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `differentiable_id.sub_const
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `differentiable_id.sub_const [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren "(" (Term.app `differentiable_id.sub_const [(Term.hole "_")]) ")")
       "."
       `const_mul)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.proj
        (Term.paren
         "("
         (Term.app
          (Term.proj
           (Term.paren "(" (Term.app `differentiable_id.sub_const [(Term.hole "_")]) ")")
           "."
           `const_mul)
          [(Term.hole "_")])
         ")")
        "."
        `cexp)
       "."
       `add)
      [(Term.proj
        (Term.proj
         (Term.paren
          "("
          (Term.app
           (Term.proj
            (Term.paren "(" (Term.app `differentiable_id.sub_const [(Term.hole "_")]) ")")
            "."
            `const_mul)
           [(Term.hole "_")])
          ")")
         "."
         `neg)
        "."
        `cexp)])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        (Term.app
         (Term.proj
          (Term.proj
           (Term.paren
            "("
            (Term.app
             (Term.proj
              (Term.paren "(" (Term.app `differentiable_id.sub_const [(Term.hole "_")]) ")")
              "."
              `const_mul)
             [(Term.hole "_")])
            ")")
           "."
           `cexp)
          "."
          `add)
         [(Term.proj
           (Term.proj
            (Term.paren
             "("
             (Term.app
              (Term.proj
               (Term.paren "(" (Term.app `differentiable_id.sub_const [(Term.hole "_")]) ")")
               "."
               `const_mul)
              [(Term.hole "_")])
             ")")
            "."
            `neg)
           "."
           `cexp)])
        ")")
       "."
       `const_mul)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Differentiable [(Data.Complex.Basic.termℂ "ℂ") (Term.app `g [`ε])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`ε])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `g [`ε]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Complex.Basic.termℂ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Differentiable
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hR₀ []]
         [(Term.typeSpec ":" («term_<_» (num "0") "<" `R))]
         ":="
         (Term.app
          (Term.proj (Term.app `_root_.abs_nonneg [(Term.hole "_")]) "." `trans_lt)
          [`hzR]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `_root_.abs_nonneg [(Term.hole "_")]) "." `trans_lt) [`hzR])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hzR
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `_root_.abs_nonneg [(Term.hole "_")]) "." `trans_lt)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `_root_.abs_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `_root_.abs_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `_root_.abs_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<_» (num "0") "<" `R)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `R
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `R)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hzR)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hR)])
             [])]
           "⟩")])]
       [":"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders
          (Lean.unbracketedExplicitBinders
           [(Lean.binderIdent `R)]
           [":" (Data.Real.Basic.termℝ "ℝ")]))
         ","
         («term_∧_»
          («term_<_» («term|___|» (group "|") `z.re (group) "|") "<" `R)
          "∧"
          (Term.forall
           "∀"
           [`w]
           []
           ","
           (Term.arrow
            («term_=_» («term|___|» (group "|") (Term.app `re [`w]) (group) "|") "=" `R)
            "→"
            (Term.arrow
             («term_∈_»
              (Term.app `im [`w])
              "∈"
              (Term.app `Ioo [(«term_-_» `a "-" `b) («term_+_» `a "+" `b)]))
             "→"
             («term_≤_»
              (Analysis.Normed.Group.Basic.«term‖_‖»
               "‖"
               (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))
               "‖")
              "≤"
              `C))))))]
       [":="
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.proj
               (Term.app
                (Term.proj (Term.app `eventually_gt_at_top [(Term.hole "_")]) "." `And)
                [(Term.hole "_")])
               "."
               `exists))
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `hO.exists_pos)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "⟨"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `A)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA₀)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA)])
                     [])]
                   "⟩")])
                [])])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `is_O_with_iff)
                ","
                (Tactic.simpLemma [] [] `eventually_inf_principal)
                ","
                (Tactic.simpLemma [] [] `eventually_comap)
                ","
                (Tactic.simpLemma [] [] `mem_Ioo)
                ","
                (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `abs_lt)
                ","
                (Tactic.simpLemma [] [] `mem_preimage)
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                ","
                (Tactic.simpLemma [] [] `Real.norm_eq_abs)
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app `abs_of_pos [(Term.app `Real.exp_pos [(Term.hole "_")])]))]
               "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`hA] []))])
             []
             (Tactic.tacticSuffices_
              "suffices"
              (Term.sufficesDecl
               []
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`R]
                   []
                   "=>"
                   (Term.app
                    (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                    [(«term_+_»
                      («term_+_»
                       («term_*_»
                        `δ
                        "*"
                        (Term.app
                         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                         [(«term_*_» `d "*" `R)]))
                       "+"
                       («term_*_»
                        `B
                        "*"
                        (Term.app
                         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                         [(«term_*_» `c "*" `R)])))
                      "+"
                      (Term.app `Real.log [`A]))])))
                 `at_top
                 (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])
               (Term.byTactic'
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.filterUpwards
                    "filter_upwards"
                    [(Tactic.termList
                      "["
                      [(Term.app `this.eventually [(Term.app `ge_mem_nhds [`hC₀])]) "," `hA]
                      "]")]
                    ["with" [`R `hR `Hle `w `hre `him]]
                    [])
                   []
                   (calcTactic
                    "calc"
                    (calcStep
                     («term_≤_»
                      (Analysis.Normed.Group.Basic.«term‖_‖»
                       "‖"
                       (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))
                       "‖")
                      "≤"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_+_»
                         («term_+_»
                          («term_*_»
                           `δ
                           "*"
                           (Term.app
                            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                            [(«term_*_» `d "*" `R)]))
                          "+"
                          («term_*_»
                           `B
                           "*"
                           (Term.app
                            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                            [(«term_*_» `c "*" `R)])))
                         "+"
                         (Term.app `Real.log [`A]))]))
                     ":="
                     (Term.hole "_"))
                    [(calcStep («term_≤_» (Term.hole "_") "≤" `C) ":=" `hR)])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `norm_smul)
                      ","
                      (Tactic.rwRule [] `Real.exp_add)
                      ","
                      (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hre)
                      ","
                      (Tactic.rwRule [] `Real.exp_add)
                      ","
                      (Tactic.rwRule [] (Term.app `Real.exp_log [`hA₀]))
                      ","
                      (Tactic.rwRule [] `mul_assoc)
                      ","
                      (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `A]))]
                     "]")
                    [])
                   []
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `mul_le_mul
                     [(«term_<|_» `hδ "<|" (Term.app `Ioo_subset_Icc_self [`him]))
                      (Term.app `Hle [(Term.hole "_") `hre `him])
                      (Term.app `norm_nonneg [(Term.hole "_")])
                      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])))))
             []
             (Tactic.refine' "refine'" (Term.app `real.tendsto_exp_at_bot.comp [(Term.hole "_")]))
             []
             (Mathlib.Tactic.tacticSuffices_
              "suffices"
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `tendsto
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`R]
                    []
                    "=>"
                    («term_+_»
                     `δ
                     "+"
                     («term_*_»
                      `B
                      "*"
                      («term_⁻¹»
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
                       "⁻¹")))))
                  `at_top
                  (Term.app
                   (TopologicalSpace.Topology.Basic.nhds "𝓝")
                   [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `mul_zero) "," (Tactic.rwRule [] `add_zero)]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
               []
               (Tactic.refine'
                "refine'"
                (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds]))
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest
                 []
                 []
                 ["only"]
                 [(Tactic.simpArgs
                   "["
                   [(Tactic.simpLemma [] [] `id)
                    ","
                    (Tactic.simpLemma
                     []
                     []
                     (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                    ","
                    (Tactic.simpLemma [] [] `add_mul)
                    ","
                    (Tactic.simpLemma [] [] `mul_assoc)
                    ","
                    (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `div_eq_inv_mul)
                    ","
                    (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_sub)
                    ","
                    (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `sub_mul)
                    ","
                    (Tactic.simpLemma [] [] `sub_sub_cancel)]
                   "]")]
                 ["using"
                  (Term.app
                   `H.neg_mul_at_top
                   [`δ₀
                    («term_<|_»
                     `real.tendsto_exp_at_top.comp
                     "<|"
                     (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])]))])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `tendsto_const_nhds.add
               [(Term.app `tendsto_const_nhds.mul [(Term.hole "_")])]))
             []
             (Tactic.exact
              "exact"
              (Term.app
               `tendsto_inv_at_top_zero.comp
               [(«term_<|_»
                 `real.tendsto_exp_at_top.comp
                 "<|"
                 (Term.app
                  `tendsto_const_nhds.mul_at_top
                  [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd])
                   `tendsto_id]))]))])))]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.proj
            (Term.app
             (Term.proj (Term.app `eventually_gt_at_top [(Term.hole "_")]) "." `And)
             [(Term.hole "_")])
            "."
            `exists))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `hO.exists_pos)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `A)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA₀)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hA)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `is_O_with_iff)
             ","
             (Tactic.simpLemma [] [] `eventually_inf_principal)
             ","
             (Tactic.simpLemma [] [] `eventually_comap)
             ","
             (Tactic.simpLemma [] [] `mem_Ioo)
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `abs_lt)
             ","
             (Tactic.simpLemma [] [] `mem_preimage)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
             ","
             (Tactic.simpLemma [] [] `Real.norm_eq_abs)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app `abs_of_pos [(Term.app `Real.exp_pos [(Term.hole "_")])]))]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hA] []))])
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Term.app
             `tendsto
             [(Term.fun
               "fun"
               (Term.basicFun
                [`R]
                []
                "=>"
                (Term.app
                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                 [(«term_+_»
                   («term_+_»
                    («term_*_»
                     `δ
                     "*"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_» `d "*" `R)]))
                    "+"
                    («term_*_»
                     `B
                     "*"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_» `c "*" `R)])))
                   "+"
                   (Term.app `Real.log [`A]))])))
              `at_top
              (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.filterUpwards
                 "filter_upwards"
                 [(Tactic.termList
                   "["
                   [(Term.app `this.eventually [(Term.app `ge_mem_nhds [`hC₀])]) "," `hA]
                   "]")]
                 ["with" [`R `hR `Hle `w `hre `him]]
                 [])
                []
                (calcTactic
                 "calc"
                 (calcStep
                  («term_≤_»
                   (Analysis.Normed.Group.Basic.«term‖_‖»
                    "‖"
                    (Algebra.Group.Defs.«term_•_» (Term.app `g [`ε `w]) " • " (Term.app `f [`w]))
                    "‖")
                   "≤"
                   (Term.app
                    (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                    [(«term_+_»
                      («term_+_»
                       («term_*_»
                        `δ
                        "*"
                        (Term.app
                         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                         [(«term_*_» `d "*" `R)]))
                       "+"
                       («term_*_»
                        `B
                        "*"
                        (Term.app
                         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                         [(«term_*_» `c "*" `R)])))
                      "+"
                      (Term.app `Real.log [`A]))]))
                  ":="
                  (Term.hole "_"))
                 [(calcStep («term_≤_» (Term.hole "_") "≤" `C) ":=" `hR)])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `norm_smul)
                   ","
                   (Tactic.rwRule [] `Real.exp_add)
                   ","
                   (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hre)
                   ","
                   (Tactic.rwRule [] `Real.exp_add)
                   ","
                   (Tactic.rwRule [] (Term.app `Real.exp_log [`hA₀]))
                   ","
                   (Tactic.rwRule [] `mul_assoc)
                   ","
                   (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `A]))]
                  "]")
                 [])
                []
                (Tactic.exact
                 "exact"
                 (Term.app
                  `mul_le_mul
                  [(«term_<|_» `hδ "<|" (Term.app `Ioo_subset_Icc_self [`him]))
                   (Term.app `Hle [(Term.hole "_") `hre `him])
                   (Term.app `norm_nonneg [(Term.hole "_")])
                   (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])))))
          []
          (Tactic.refine' "refine'" (Term.app `real.tendsto_exp_at_bot.comp [(Term.hole "_")]))
          []
          (Mathlib.Tactic.tacticSuffices_
           "suffices"
           [`H []]
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`R]
                 []
                 "=>"
                 («term_+_»
                  `δ
                  "+"
                  («term_*_»
                   `B
                   "*"
                   («term_⁻¹»
                    (Term.app
                     (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                     [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
                    "⁻¹")))))
               `at_top
               (Term.app
                (TopologicalSpace.Topology.Basic.nhds "𝓝")
                [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `mul_zero) "," (Tactic.rwRule [] `add_zero)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
            []
            (Tactic.refine'
             "refine'"
             (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds]))
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs
                "["
                [(Tactic.simpLemma [] [] `id)
                 ","
                 (Tactic.simpLemma
                  []
                  []
                  (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                 ","
                 (Tactic.simpLemma [] [] `add_mul)
                 ","
                 (Tactic.simpLemma [] [] `mul_assoc)
                 ","
                 (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `div_eq_inv_mul)
                 ","
                 (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_sub)
                 ","
                 (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `sub_mul)
                 ","
                 (Tactic.simpLemma [] [] `sub_sub_cancel)]
                "]")]
              ["using"
               (Term.app
                `H.neg_mul_at_top
                [`δ₀
                 («term_<|_»
                  `real.tendsto_exp_at_top.comp
                  "<|"
                  (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])]))])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `tendsto_const_nhds.add
            [(Term.app `tendsto_const_nhds.mul [(Term.hole "_")])]))
          []
          (Tactic.exact
           "exact"
           (Term.app
            `tendsto_inv_at_top_zero.comp
            [(«term_<|_»
              `real.tendsto_exp_at_top.comp
              "<|"
              (Term.app
               `tendsto_const_nhds.mul_at_top
               [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd]) `tendsto_id]))]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `tendsto_inv_at_top_zero.comp
        [(«term_<|_»
          `real.tendsto_exp_at_top.comp
          "<|"
          (Term.app
           `tendsto_const_nhds.mul_at_top
           [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd]) `tendsto_id]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto_inv_at_top_zero.comp
       [(«term_<|_»
         `real.tendsto_exp_at_top.comp
         "<|"
         (Term.app
          `tendsto_const_nhds.mul_at_top
          [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd]) `tendsto_id]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       `real.tendsto_exp_at_top.comp
       "<|"
       (Term.app
        `tendsto_const_nhds.mul_at_top
        [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd]) `tendsto_id]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto_const_nhds.mul_at_top
       [(Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd]) `tendsto_id])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_id
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hcd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_pos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_pos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_const_nhds.mul_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `real.tendsto_exp_at_top.comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `real.tendsto_exp_at_top.comp
      "<|"
      (Term.app
       `tendsto_const_nhds.mul_at_top
       [(Term.paren "(" (Term.app (Term.proj `sub_pos "." (fieldIdx "2")) [`hcd]) ")")
        `tendsto_id]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_inv_at_top_zero.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app `tendsto_const_nhds.add [(Term.app `tendsto_const_nhds.mul [(Term.hole "_")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_const_nhds.add [(Term.app `tendsto_const_nhds.mul [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_const_nhds.mul [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_const_nhds.mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `tendsto_const_nhds.mul [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_const_nhds.add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_zero) "," (Tactic.rwRule [] `add_zero)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
        []
        (Tactic.refine'
         "refine'"
         (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds]))
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          ["only"]
          [(Tactic.simpArgs
            "["
            [(Tactic.simpLemma [] [] `id)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
             ","
             (Tactic.simpLemma [] [] `add_mul)
             ","
             (Tactic.simpLemma [] [] `mul_assoc)
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `div_eq_inv_mul)
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_sub)
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `sub_mul)
             ","
             (Tactic.simpLemma [] [] `sub_sub_cancel)]
            "]")]
          ["using"
           (Term.app
            `H.neg_mul_at_top
            [`δ₀
             («term_<|_»
              `real.tendsto_exp_at_top.comp
              "<|"
              (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma [] [] `id)
           ","
           (Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
           ","
           (Tactic.simpLemma [] [] `add_mul)
           ","
           (Tactic.simpLemma [] [] `mul_assoc)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `div_eq_inv_mul)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_sub)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `sub_mul)
           ","
           (Tactic.simpLemma [] [] `sub_sub_cancel)]
          "]")]
        ["using"
         (Term.app
          `H.neg_mul_at_top
          [`δ₀
           («term_<|_»
            `real.tendsto_exp_at_top.comp
            "<|"
            (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `H.neg_mul_at_top
       [`δ₀
        («term_<|_»
         `real.tendsto_exp_at_top.comp
         "<|"
         (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       `real.tendsto_exp_at_top.comp
       "<|"
       (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_id
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_const_nhds.mul_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `real.tendsto_exp_at_top.comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `real.tendsto_exp_at_top.comp
      "<|"
      (Term.app `tendsto_const_nhds.mul_at_top [`hd₀ `tendsto_id]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `δ₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `H.neg_mul_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_sub_cancel
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_sub
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div_eq_inv_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `id
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto.at_bot_add [(Term.hole "_") `tendsto_const_nhds])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_const_nhds
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto.at_bot_add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_zero) "," (Tactic.rwRule [] `add_zero)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticSuffices_
       "suffices"
       [`H []]
       [(Term.typeSpec
         ":"
         (Term.app
          `tendsto
          [(Term.fun
            "fun"
            (Term.basicFun
             [`R]
             []
             "=>"
             («term_+_»
              `δ
              "+"
              («term_*_»
               `B
               "*"
               («term_⁻¹»
                (Term.app
                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                 [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
                "⁻¹")))))
           `at_top
           (Term.app
            (TopologicalSpace.Topology.Basic.nhds "𝓝")
            [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`R]
          []
          "=>"
          («term_+_»
           `δ
           "+"
           («term_*_»
            `B
            "*"
            («term_⁻¹»
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
             "⁻¹")))))
        `at_top
        (Term.app
         (TopologicalSpace.Topology.Basic.nhds "𝓝")
         [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (TopologicalSpace.Topology.Basic.nhds "𝓝")
       [(«term_+_» `δ "+" («term_*_» `B "*" (num "0")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `δ "+" («term_*_» `B "*" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `δ
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `δ "+" («term_*_» `B "*" (num "0")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
      [(Term.paren "(" («term_+_» `δ "+" («term_*_» `B "*" (num "0"))) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`R]
        []
        "=>"
        («term_+_»
         `δ
         "+"
         («term_*_»
          `B
          "*"
          («term_⁻¹»
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
           "⁻¹")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_»
       `δ
       "+"
       («term_*_»
        `B
        "*"
        («term_⁻¹»
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
         "⁻¹")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B
       "*"
       («term_⁻¹»
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
        "⁻¹"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_⁻¹»
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
       "⁻¹")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» («term_-_» `d "-" `c) "*" `R)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» («term_-_» `d "-" `c) "*" `R)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `R
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_-_» `d "-" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 66, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `d "-" `c) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» (Term.paren "(" («term_-_» `d "-" `c) ")") "*" `R)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < im z < b}`.
    Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable on `U` and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some `c < π / (b - a)`;
    * `‖f z‖` is bounded from above by a constant `C` on the boundary of `U`.
    
    Then `‖f z‖` is bounded by the same constant on the closed strip
    `{z : ℂ | a ≤ im z ≤ b}`. Moreover, it suffices to verify the second assumption
    only for sufficiently large values of `|re z|`.
    -/
  theorem
    horizontal_strip
    ( hfd : DiffContOnCl ℂ f im ⁻¹' Ioo a b )
        (
          hB
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                f
                  =O[
                  comap Abs.abs ∘ re atTop ⊓ 𝓟 im ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . re |
          )
        ( hle_a : ∀ z : ℂ , im z = a → ‖ f z ‖ ≤ C )
        ( hle_b : ∀ z , im z = b → ‖ f z ‖ ≤ C )
        ( hza : a ≤ im z )
        ( hzb : im z ≤ b )
      : ‖ f z ‖ ≤ C
    :=
      by
        rw [ le_iff_eq_or_lt ] at hza hzb
          cases' hza with hza hza
          · exact hle_a _ hza.symm
          cases' hzb with hzb hzb
          · exact hle_b _ hzb
          suffices
            ∀
                C'
                : ℝ
                ,
                0 < C'
                  →
                  ∀ w : ℂ , im w = a → ‖ f w ‖ ≤ C'
                    →
                    ∀ w : ℂ , im w = b → ‖ f w ‖ ≤ C' → ‖ f z ‖ ≤ C'
              by
                refine' le_of_forall_le_of_dense fun C' hC' => this C' _ fun w hw => _ fun w hw => _
                  ·
                    refine' norm_nonneg f a * I . trans hle_a _ _ . trans_lt hC'
                      rw [ mul_I_im , of_real_re ]
                  exacts [ hle_a _ hw . trans hC'.le , hle_b _ hw . trans hC'.le ]
          clear! C
          intro C hC₀ hle_a hle_b
          obtain
            ⟨ a , b , rfl , rfl ⟩
            : ∃ a' b' , a = a' - b' ∧ b = a' + b'
            := ⟨ a + b / 2 , b - a / 2 , by ring , by ring ⟩
          have hab : a - b < a + b := hza.trans hzb
          have
            hb
              : 0 < b
              :=
              by simpa only [ sub_eq_add_neg , add_lt_add_iff_left , neg_lt_self_iff ] using hab
          rw [ add_sub_sub_cancel , ← two_mul , div_mul_eq_div_div ] at hB
          have hπb : 0 < π / 2 / b := div_pos Real.pi_div_two_pos hb
          rcases hB with ⟨ c , hc , B , hO ⟩
          obtain
            ⟨ d , ⟨ hcd , hd₀ ⟩ , hd ⟩
            : ∃ d , c < d ∧ 0 < d ∧ d < π / 2 / b
            := by simpa only [ max_lt_iff ] using exists_between max_lt hc hπb
          have hb' : d * b < π / 2 := lt_div_iff hb . 1 hd
          set aff : ℂ → ℂ := fun w => d * w - a * I
          set g : ℝ → ℂ → ℂ := fun ε w => exp ε * exp aff w + exp - aff w
          suffices
            ∀ᶠ ε : ℝ in 𝓝[<] 0 , ‖ g ε z • f z ‖ ≤ C
              by
                refine' le_of_tendsto tendsto.mono_left _ nhds_within_le_nhds this
                  apply
                    continuous_of_real.mul continuous_const . cexp . smul continuous_const . norm
                      .
                      tendsto'
                  simp
                  infer_instance
          filter_upwards [ self_mem_nhds_within ] with ε ε₀
          change ε < 0 at ε₀
          obtain
            ⟨ δ , δ₀ , hδ ⟩
            :
              ∃
                δ : ℝ
                ,
                δ < 0 ∧ ∀ ⦃ w ⦄ , im w ∈ Icc a - b a + b → abs g ε w ≤ expR δ * expR d * | re w |
            :=
              by
                refine'
                    ⟨
                      ε * Real.cos d * b
                        ,
                        mul_neg_of_neg_of_pos
                          ε₀
                            Real.cos_pos_of_mem_Ioo
                              <|
                              abs_lt . 1 <| abs_of_pos mul_pos hd₀ hb . symm ▸ hb'
                        ,
                        fun w hw => _
                      ⟩
                  replace hw : | im aff w | ≤ d * b
                  ·
                    rw [ ← Real.closed_ball_eq_Icc ] at hw
                      rwa
                        [
                          of_real_mul_im
                            ,
                            sub_im
                            ,
                            mul_I_im
                            ,
                            of_real_re
                            ,
                            _root_.abs_mul
                            ,
                            abs_of_pos hd₀
                            ,
                            mul_le_mul_left hd₀
                          ]
                  simpa
                    only
                      [
                        of_real_mul_re
                          ,
                          _root_.abs_mul
                          ,
                          abs_of_pos hd₀
                          ,
                          sub_re
                          ,
                          mul_I_re
                          ,
                          of_real_im
                          ,
                          zero_mul
                          ,
                          neg_zero
                          ,
                          sub_zero
                        ]
                      using abs_exp_mul_exp_add_exp_neg_le_of_abs_im_le ε₀.le hw hb'.le
          have
            hg₁
              : ∀ w , im w = a - b ∨ im w = a + b → abs g ε w ≤ 1
              :=
              by
                refine' fun w hw => hδ <| hw . byCases _ _ . trans Real.exp_le_one_iff . 2 _
                  exacts
                    [
                    fun h => h . symm ▸ left_mem_Icc . 2 hab.le
                      ,
                      fun h => h . symm ▸ right_mem_Icc . 2 hab.le
                      ,
                      mul_nonpos_of_nonpos_of_nonneg δ₀.le Real.exp_pos _ . le
                    ]
          obtain
            ⟨ R , hzR , hR ⟩
            :
              ∃
                R : ℝ
                ,
                | z.re | < R ∧ ∀ w , | re w | = R → im w ∈ Ioo a - b a + b → ‖ g ε w • f w ‖ ≤ C
            :=
              by
                refine' eventually_gt_at_top _ . And _ . exists
                  rcases hO.exists_pos with ⟨ A , hA₀ , hA ⟩
                  simp
                    only
                    [
                      is_O_with_iff
                        ,
                        eventually_inf_principal
                        ,
                        eventually_comap
                        ,
                        mem_Ioo
                        ,
                        ← abs_lt
                        ,
                        mem_preimage
                        ,
                        ( · ∘ · )
                        ,
                        Real.norm_eq_abs
                        ,
                        abs_of_pos Real.exp_pos _
                      ]
                    at hA
                  suffices
                    tendsto fun R => expR δ * expR d * R + B * expR c * R + Real.log A at_top 𝓝 0
                      by
                        filter_upwards
                            [ this.eventually ge_mem_nhds hC₀ , hA ]
                            with R hR Hle w hre him
                          calc
                            ‖ g ε w • f w ‖ ≤ expR δ * expR d * R + B * expR c * R + Real.log A := _
                            _ ≤ C := hR
                          rw
                            [
                              norm_smul
                                ,
                                Real.exp_add
                                ,
                                ← hre
                                ,
                                Real.exp_add
                                ,
                                Real.exp_log hA₀
                                ,
                                mul_assoc
                                ,
                                mul_comm _ A
                              ]
                          exact
                            mul_le_mul
                              hδ <| Ioo_subset_Icc_self him
                                Hle _ hre him
                                norm_nonneg _
                                Real.exp_pos _ . le
                  refine' real.tendsto_exp_at_bot.comp _
                  suffices H : tendsto fun R => δ + B * expR d - c * R ⁻¹ at_top 𝓝 δ + B * 0
                  ·
                    rw [ mul_zero , add_zero ] at H
                      refine' tendsto.at_bot_add _ tendsto_const_nhds
                      simpa
                        only
                          [
                            id
                              ,
                              ( · ∘ · )
                              ,
                              add_mul
                              ,
                              mul_assoc
                              ,
                              ← div_eq_inv_mul
                              ,
                              ← Real.exp_sub
                              ,
                              ← sub_mul
                              ,
                              sub_sub_cancel
                            ]
                          using
                            H.neg_mul_at_top
                              δ₀
                                real.tendsto_exp_at_top.comp
                                  <|
                                  tendsto_const_nhds.mul_at_top hd₀ tendsto_id
                  refine' tendsto_const_nhds.add tendsto_const_nhds.mul _
                  exact
                    tendsto_inv_at_top_zero.comp
                      real.tendsto_exp_at_top.comp
                        <|
                        tendsto_const_nhds.mul_at_top sub_pos . 2 hcd tendsto_id
          have hR₀ : 0 < R := _root_.abs_nonneg _ . trans_lt hzR
          have
            hgd
              : Differentiable ℂ g ε
              :=
              differentiable_id.sub_const _ . const_mul _ . cexp . add
                      differentiable_id.sub_const _ . const_mul _ . neg . cexp
                    .
                    const_mul
                  _
                .
                cexp
          replace hd : DiffContOnCl ℂ fun w => g ε w • f w Ioo - R R ×ℂ Ioo a - b a + b
          exact hgd.diff_cont_on_cl.smul hfd . mono inter_subset_right _ _
          convert
            norm_le_of_forall_mem_frontier_norm_le
              bounded_Ioo _ _ . reProdIm bounded_Ioo _ _ hd fun w hw => _ _
          ·
            have hwc := frontier_subset_closure hw
              rw
                [
                  frontier_re_prod_im
                    ,
                    closure_Ioo neg_lt_self hR₀ . Ne
                    ,
                    frontier_Ioo hab
                    ,
                    closure_Ioo hab.ne
                    ,
                    frontier_Ioo neg_lt_self hR₀
                  ]
                at hw
              by_cases him : w.im = a - b ∨ w.im = a + b
              ·
                rw [ closure_re_prod_im , closure_Ioo neg_lt_self hR₀ . Ne ] at hwc
                  rw [ norm_smul , ← one_mul C ]
                  exact mul_le_mul hg₁ _ him him.by_cases hle_a _ hle_b _ norm_nonneg _ zero_le_one
              ·
                replace hw : w ∈ { - R , R } ×ℂ Icc a - b a + b
                  exact hw.resolve_left fun h => him h . 2
                  have hw' := eq_endpoints_or_mem_Ioo_of_mem_Icc hw . 2
                  rw [ ← or_assoc ] at hw'
                  exact hR _ abs_eq hR₀.le . 2 hw . 1 . symm hw'.resolve_left him
          ·
            rw [ closure_re_prod_im , closure_Ioo hab.ne , closure_Ioo neg_lt_self hR₀ . Ne ]
              exact ⟨ abs_le . 1 hzR.le , ⟨ hza.le , hzb.le ⟩ ⟩
#align phragmen_lindelof.horizontal_strip PhragmenLindelof.horizontal_strip

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < im z < b}`.\nLet `f : ℂ → E` be a function such that\n\n* `f` is differentiable on `U` and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some `c < π / (b - a)`;\n* `f z = 0` on the boundary of `U`.\n\nThen `f` is equal to zero on the closed strip `{z : ℂ | a ≤ im z ≤ b}`.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_horizontal_strip [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`ha]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.proj `z "." `im) "=" `a)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (num "0"))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hb]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.proj `z "." `im) "=" `b)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (num "0"))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f (num "0") (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
          "<|"
          (Term.app
           `horizontal_strip
           [`hd
            `hB
            (Term.fun
             "fun"
             (Term.basicFun
              [`z `hz]
              []
              "=>"
              (Term.subst
               (Term.proj (Term.app `ha [`z `hz]) "." `symm)
               "▸"
               [(Term.proj `norm_zero "." `le)])))
            (Term.fun
             "fun"
             (Term.basicFun
              [`z `hz]
              []
              "=>"
              (Term.subst
               (Term.proj (Term.app `hb [`z `hz]) "." `symm)
               "▸"
               [(Term.proj `norm_zero "." `le)])))
            (Term.proj `hz "." (fieldIdx "1"))
            (Term.proj `hz "." (fieldIdx "2"))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
         "<|"
         (Term.app
          `horizontal_strip
          [`hd
           `hB
           (Term.fun
            "fun"
            (Term.basicFun
             [`z `hz]
             []
             "=>"
             (Term.subst
              (Term.proj (Term.app `ha [`z `hz]) "." `symm)
              "▸"
              [(Term.proj `norm_zero "." `le)])))
           (Term.fun
            "fun"
            (Term.basicFun
             [`z `hz]
             []
             "=>"
             (Term.subst
              (Term.proj (Term.app `hb [`z `hz]) "." `symm)
              "▸"
              [(Term.proj `norm_zero "." `le)])))
           (Term.proj `hz "." (fieldIdx "1"))
           (Term.proj `hz "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
       "<|"
       (Term.app
        `horizontal_strip
        [`hd
         `hB
         (Term.fun
          "fun"
          (Term.basicFun
           [`z `hz]
           []
           "=>"
           (Term.subst
            (Term.proj (Term.app `ha [`z `hz]) "." `symm)
            "▸"
            [(Term.proj `norm_zero "." `le)])))
         (Term.fun
          "fun"
          (Term.basicFun
           [`z `hz]
           []
           "=>"
           (Term.subst
            (Term.proj (Term.app `hb [`z `hz]) "." `symm)
            "▸"
            [(Term.proj `norm_zero "." `le)])))
         (Term.proj `hz "." (fieldIdx "1"))
         (Term.proj `hz "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `horizontal_strip
       [`hd
        `hB
        (Term.fun
         "fun"
         (Term.basicFun
          [`z `hz]
          []
          "=>"
          (Term.subst
           (Term.proj (Term.app `ha [`z `hz]) "." `symm)
           "▸"
           [(Term.proj `norm_zero "." `le)])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`z `hz]
          []
          "=>"
          (Term.subst
           (Term.proj (Term.app `hb [`z `hz]) "." `symm)
           "▸"
           [(Term.proj `norm_zero "." `le)])))
        (Term.proj `hz "." (fieldIdx "1"))
        (Term.proj `hz "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        (Term.subst
         (Term.proj (Term.app `hb [`z `hz]) "." `symm)
         "▸"
         [(Term.proj `norm_zero "." `le)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst
       (Term.proj (Term.app `hb [`z `hz]) "." `symm)
       "▸"
       [(Term.proj `norm_zero "." `le)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `norm_zero "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      (Term.proj (Term.app `hb [`z `hz]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hb [`z `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hb [`z `hz]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`z `hz]
       []
       "=>"
       (Term.subst
        (Term.proj (Term.paren "(" (Term.app `hb [`z `hz]) ")") "." `symm)
        "▸"
        [(Term.proj `norm_zero "." `le)])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        (Term.subst
         (Term.proj (Term.app `ha [`z `hz]) "." `symm)
         "▸"
         [(Term.proj `norm_zero "." `le)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst
       (Term.proj (Term.app `ha [`z `hz]) "." `symm)
       "▸"
       [(Term.proj `norm_zero "." `le)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `norm_zero "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      (Term.proj (Term.app `ha [`z `hz]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `ha [`z `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `ha [`z `hz]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`z `hz]
       []
       "=>"
       (Term.subst
        (Term.proj (Term.paren "(" (Term.app `ha [`z `hz]) ")") "." `symm)
        "▸"
        [(Term.proj `norm_zero "." `le)])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `horizontal_strip
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f (num "0") (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `im
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.proj `z "." `im) "=" `b)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.proj `z "." `im) "=" `b)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.proj `z "." `im) "=" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.proj `z "." `im) "=" `a)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.proj `z "." `im) "=" `a)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.proj `z "." `im) "=" `a)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        («term_/_»
         (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
         "/"
         («term_-_» `b "-" `a)))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_»
                 `c
                 "*"
                 («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `c
                "*"
                («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `c
               "*"
               («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_»
         `B
         "*"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B
       "*"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.proj `z "." `re) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < im z < b}`.
    Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable on `U` and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some `c < π / (b - a)`;
    * `f z = 0` on the boundary of `U`.
    
    Then `f` is equal to zero on the closed strip `{z : ℂ | a ≤ im z ≤ b}`.
    -/
  theorem
    eq_zero_on_horizontal_strip
    ( hd : DiffContOnCl ℂ f im ⁻¹' Ioo a b )
        (
          hB
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                f
                  =O[
                  comap Abs.abs ∘ re atTop ⊓ 𝓟 im ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . re |
          )
        ( ha : ∀ z : ℂ , z . im = a → f z = 0 )
        ( hb : ∀ z : ℂ , z . im = b → f z = 0 )
      : EqOn f 0 im ⁻¹' Icc a b
    :=
      fun
        z hz
          =>
          norm_le_zero_iff . 1
            <|
            horizontal_strip
              hd
                hB
                fun z hz => ha z hz . symm ▸ norm_zero . le
                fun z hz => hb z hz . symm ▸ norm_zero . le
                hz . 1
                hz . 2
#align phragmen_lindelof.eq_zero_on_horizontal_strip PhragmenLindelof.eq_zero_on_horizontal_strip

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < im z < b}`.\nLet `f g : ℂ → E` be functions such that\n\n* `f` and `g` are differentiable on `U` and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some\n  `c < π / (b - a)`;\n* `f z = g z` on the boundary of `U`.\n\nThen `f` is equal to `g` on the closed strip `{z : ℂ | a ≤ im z ≤ b}`.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_horizontal_strip [])
      (Command.declSig
       [(Term.implicitBinder "{" [`g] [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)] "}")
        (Term.explicitBinder
         "("
         [`hdf]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hdg]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`ha]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.proj `z "." `im) "=" `a)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hb]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.proj `z "." `im) "=" `b)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f `g (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         (Term.app
          (Term.proj `sub_eq_zero "." (fieldIdx "1"))
          [(Term.app
            `eq_zero_on_horizontal_strip
            [(Term.app (Term.proj `hdf "." `sub) [`hdg])
             (Term.app `is_O_sub_exp_exp [`hBf `hBg])
             (Term.fun
              "fun"
              (Term.basicFun
               [`w `hw]
               []
               "=>"
               (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
             (Term.fun
              "fun"
              (Term.basicFun
               [`w `hw]
               []
               "=>"
               (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
             `hz])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        (Term.app
         (Term.proj `sub_eq_zero "." (fieldIdx "1"))
         [(Term.app
           `eq_zero_on_horizontal_strip
           [(Term.app (Term.proj `hdf "." `sub) [`hdg])
            (Term.app `is_O_sub_exp_exp [`hBf `hBg])
            (Term.fun
             "fun"
             (Term.basicFun
              [`w `hw]
              []
              "=>"
              (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
            (Term.fun
             "fun"
             (Term.basicFun
              [`w `hw]
              []
              "=>"
              (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
            `hz])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `sub_eq_zero "." (fieldIdx "1"))
       [(Term.app
         `eq_zero_on_horizontal_strip
         [(Term.app (Term.proj `hdf "." `sub) [`hdg])
          (Term.app `is_O_sub_exp_exp [`hBf `hBg])
          (Term.fun
           "fun"
           (Term.basicFun
            [`w `hw]
            []
            "=>"
            (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
          (Term.fun
           "fun"
           (Term.basicFun
            [`w `hw]
            []
            "=>"
            (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
          `hz])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eq_zero_on_horizontal_strip
       [(Term.app (Term.proj `hdf "." `sub) [`hdg])
        (Term.app `is_O_sub_exp_exp [`hBf `hBg])
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
        `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`w `hw]
        []
        "=>"
        (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hb [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hb [`w `hw]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`w `hw]
       []
       "=>"
       (Term.app
        (Term.proj `sub_eq_zero "." (fieldIdx "2"))
        [(Term.paren "(" (Term.app `hb [`w `hw]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`w `hw]
        []
        "=>"
        (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `ha [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `ha [`w `hw]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`w `hw]
       []
       "=>"
       (Term.app
        (Term.proj `sub_eq_zero "." (fieldIdx "2"))
        [(Term.paren "(" (Term.app `ha [`w `hw]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_O_sub_exp_exp [`hBf `hBg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_sub_exp_exp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O_sub_exp_exp [`hBf `hBg])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `hdf "." `sub) [`hdg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hdg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hdf "." `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hdf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `hdf "." `sub) [`hdg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_zero_on_horizontal_strip
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `eq_zero_on_horizontal_strip
      [(Term.paren "(" (Term.app (Term.proj `hdf "." `sub) [`hdg]) ")")
       (Term.paren "(" (Term.app `is_O_sub_exp_exp [`hBf `hBg]) ")")
       (Term.paren
        "("
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app
           (Term.proj `sub_eq_zero "." (fieldIdx "2"))
           [(Term.paren "(" (Term.app `ha [`w `hw]) ")")])))
        ")")
       (Term.paren
        "("
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app
           (Term.proj `sub_eq_zero "." (fieldIdx "2"))
           [(Term.paren "(" (Term.app `hb [`w `hw]) ")")])))
        ")")
       `hz])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app `EqOn [`f `g (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `im
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Icc [`a `b]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.proj `z "." `im) "=" `b)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.proj `z "." `im) "=" `b)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.proj `z "." `im) "=" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.proj `z "." `im) "=" `a)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.proj `z "." `im) "=" `a)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.proj `z "." `im) "=" `a)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        («term_/_»
         (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
         "/"
         («term_-_» `b "-" `a)))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `g
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_»
                 `c
                 "*"
                 («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `g
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `c
                "*"
                («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `g
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `c
               "*"
               («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_»
         `B
         "*"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B
       "*"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.proj `z "." `re) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `re) (group) "|"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < im z < b}`.
    Let `f g : ℂ → E` be functions such that
    
    * `f` and `g` are differentiable on `U` and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some
      `c < π / (b - a)`;
    * `f z = g z` on the boundary of `U`.
    
    Then `f` is equal to `g` on the closed strip `{z : ℂ | a ≤ im z ≤ b}`.
    -/
  theorem
    eq_on_horizontal_strip
    { g : ℂ → E }
        ( hdf : DiffContOnCl ℂ f im ⁻¹' Ioo a b )
        (
          hBf
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                f
                  =O[
                  comap Abs.abs ∘ re atTop ⊓ 𝓟 im ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . re |
          )
        ( hdg : DiffContOnCl ℂ g im ⁻¹' Ioo a b )
        (
          hBg
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                g
                  =O[
                  comap Abs.abs ∘ re atTop ⊓ 𝓟 im ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . re |
          )
        ( ha : ∀ z : ℂ , z . im = a → f z = g z )
        ( hb : ∀ z : ℂ , z . im = b → f z = g z )
      : EqOn f g im ⁻¹' Icc a b
    :=
      fun
        z hz
          =>
          sub_eq_zero . 1
            eq_zero_on_horizontal_strip
              hdf . sub hdg
                is_O_sub_exp_exp hBf hBg
                fun w hw => sub_eq_zero . 2 ha w hw
                fun w hw => sub_eq_zero . 2 hb w hw
                hz
#align phragmen_lindelof.eq_on_horizontal_strip PhragmenLindelof.eq_on_horizontal_strip

/-!
### Phragmen-Lindelöf principle in a vertical strip
-/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < re z < b}`.\nLet `f : ℂ → E` be a function such that\n\n* `f` is differentiable on `U` and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * exp(c * |im z|))` on `U` for some `c < π / (b - a)`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of `U`.\n\nThen `‖f z‖` is bounded by the same constant on the closed strip\n`{z : ℂ | a ≤ re z ≤ b}`. Moreover, it suffices to verify the second assumption\nonly for sufficiently large values of `|im z|`.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `vertical_strip [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hfd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hle_a]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.app `re [`z]) "=" `a)
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hle_b]
         [":"
          (Term.forall
           "∀"
           [`z]
           []
           ","
           (Term.arrow
            («term_=_» (Term.app `re [`z]) "=" `b)
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder "(" [`hza] [":" («term_≤_» `a "≤" (Term.app `re [`z]))] [] ")")
        (Term.explicitBinder "(" [`hzb] [":" («term_≤_» (Term.app `re [`z]) "≤" `b)] [] ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             («term_≤_»
              (Analysis.Normed.Group.Basic.«term‖_‖»
               "‖"
               (Term.app
                (Term.fun
                 "fun"
                 (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
                [(«term_*_» `z "*" `I)])
               "‖")
              "≤"
              `C)
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   []
                   [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `mul_assoc)] "]")]
                   ["using" `this]))])))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `maps_to
                 [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
                  (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
                  (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`z `hz])
                  []
                  (Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `horizontal_strip
             [(Term.app
               `hfd.comp
               [(Term.proj
                 (Term.app `differentiable_id.mul_const [(Term.hole "_")])
                 "."
                 `DiffContOnCl)
                `H])
              (Term.hole "_")
              (Term.fun
               "fun"
               (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])))
              (Term.fun
               "fun"
               (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])))
              (Term.hole "_")
              (Term.hole "_")]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.refine'
              "refine'"
              (Term.app
               `Exists₃Cat.imp
               [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `tendsto
                   [(Term.fun
                     "fun"
                     (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
                    (Order.Basic.«term_⊓_»
                     (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
                     " ⊓ "
                     (Term.app
                      (Filter.Order.Filter.Basic.filter.principal "𝓟")
                      [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
                    (Order.Basic.«term_⊓_»
                     (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
                     " ⊓ "
                     (Term.app
                      (Filter.Order.Filter.Basic.filter.principal "𝓟")
                      [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.refine'
                     "refine'"
                     (Term.app
                      (Term.proj
                       (Term.app
                        (Term.proj `tendsto_comap_iff "." (fieldIdx "2"))
                        [(Term.hole "_")])
                       "."
                       `inf)
                      [`H.tendsto]))
                    []
                    (Std.Tactic.Simpa.simpa
                     "simpa"
                     []
                     []
                     (Std.Tactic.Simpa.simpaArgsRest
                      []
                      []
                      []
                      [(Tactic.simpArgs
                        "["
                        [(Tactic.simpLemma
                          []
                          []
                          (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
                        "]")]
                      ["using" `tendsto_comap]))]))))))
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               []
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
                 "]")]
               ["using" (Term.app `hO.comp_tendsto [`this])]))])
           []
           (Tactic.allGoals
            "all_goals"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] []))])))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖»
              "‖"
              (Term.app
               (Term.fun
                "fun"
                (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
               [(«term_*_» `z "*" `I)])
              "‖")
             "≤"
             `C)
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  []
                  [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `mul_assoc)] "]")]
                  ["using" `this]))])))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`H []]
             [(Term.typeSpec
               ":"
               (Term.app
                `maps_to
                [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
                 (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
                 (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`z `hz])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `horizontal_strip
            [(Term.app
              `hfd.comp
              [(Term.proj
                (Term.app `differentiable_id.mul_const [(Term.hole "_")])
                "."
                `DiffContOnCl)
               `H])
             (Term.hole "_")
             (Term.fun
              "fun"
              (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])))
             (Term.fun
              "fun"
              (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])))
             (Term.hole "_")
             (Term.hole "_")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              `Exists₃Cat.imp
              [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `tendsto
                  [(Term.fun
                    "fun"
                    (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
                   (Order.Basic.«term_⊓_»
                    (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
                    " ⊓ "
                    (Term.app
                     (Filter.Order.Filter.Basic.filter.principal "𝓟")
                     [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
                   (Order.Basic.«term_⊓_»
                    (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
                    " ⊓ "
                    (Term.app
                     (Filter.Order.Filter.Basic.filter.principal "𝓟")
                     [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.refine'
                    "refine'"
                    (Term.app
                     (Term.proj
                      (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
                      "."
                      `inf)
                     [`H.tendsto]))
                   []
                   (Std.Tactic.Simpa.simpa
                    "simpa"
                    []
                    []
                    (Std.Tactic.Simpa.simpaArgsRest
                     []
                     []
                     []
                     [(Tactic.simpArgs
                       "["
                       [(Tactic.simpLemma
                         []
                         []
                         (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
                       "]")]
                     ["using" `tendsto_comap]))]))))))
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              []
              [(Tactic.simpArgs
                "["
                [(Tactic.simpLemma
                  []
                  []
                  (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
                "]")]
              ["using" (Term.app `hO.comp_tendsto [`this])]))])
          []
          (Tactic.allGoals
           "all_goals"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Std.Tactic.Simpa.simpa
               "simpa"
               []
               []
               (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] []))])))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.allGoals
       "all_goals"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.Simpa.simpa "simpa" [] [] (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] []))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa "simpa" [] [] (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] []))
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          `Exists₃Cat.imp
          [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
               (Order.Basic.«term_⊓_»
                (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
                " ⊓ "
                (Term.app
                 (Filter.Order.Filter.Basic.filter.principal "𝓟")
                 [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
               (Order.Basic.«term_⊓_»
                (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
                " ⊓ "
                (Term.app
                 (Filter.Order.Filter.Basic.filter.principal "𝓟")
                 [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj
                  (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
                  "."
                  `inf)
                 [`H.tendsto]))
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest
                 []
                 []
                 []
                 [(Tactic.simpArgs
                   "["
                   [(Tactic.simpLemma
                     []
                     []
                     (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
                   "]")]
                 ["using" `tendsto_comap]))]))))))
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          []
          [(Tactic.simpArgs
            "["
            [(Tactic.simpLemma
              []
              []
              (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
            "]")]
          ["using" (Term.app `hO.comp_tendsto [`this])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
          "]")]
        ["using" (Term.app `hO.comp_tendsto [`this])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hO.comp_tendsto [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hO.comp_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj
                (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
                "."
                `inf)
               [`H.tendsto]))
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               []
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
                 "]")]
               ["using" `tendsto_comap]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj
             (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
             "."
             `inf)
            [`H.tendsto]))
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            []
            [(Tactic.simpArgs
              "["
              [(Tactic.simpLemma
                []
                []
                (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
              "]")]
            ["using" `tendsto_comap]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))]
          "]")]
        ["using" `tendsto_comap]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_comap
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
         "."
         `inf)
        [`H.tendsto]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
        "."
        `inf)
       [`H.tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H.tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
       "."
       `inf)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `tendsto_comap_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `tendsto_comap_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `tendsto_comap_iff "." (fieldIdx "2")) [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.Basic.«term_⊓_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.Basic.«term_⊓_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Order.Basic.«term_⊓_»
       (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
       " ⊓ "
       (Term.app
        (Filter.Order.Filter.Basic.filter.principal "𝓟")
        [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Filter.Order.Filter.Basic.filter.principal "𝓟")
       [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioo [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Filter.Order.Filter.Basic.filter.principal "𝓟")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 69, term))
      (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `at_top])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_∘_» `Abs.abs "∘" `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `im
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `Abs.abs
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∘_» `Abs.abs "∘" `im) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `comap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 69 >? 1022, (some 1023, term) <=? (some 69, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 69, (some 70, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Order.Basic.«term_⊓_»
      (Term.app `comap [(Term.paren "(" («term_∘_» `Abs.abs "∘" `im) ")") `at_top])
      " ⊓ "
      (Term.app
       (Filter.Order.Filter.Basic.filter.principal "𝓟")
       [(Term.paren "(" (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b])) ")")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.Basic.«term_⊓_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.Basic.«term_⊓_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Order.Basic.«term_⊓_»
       (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
       " ⊓ "
       (Term.app
        (Filter.Order.Filter.Basic.filter.principal "𝓟")
        [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Filter.Order.Filter.Basic.filter.principal "𝓟")
       [(Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioo [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `im
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Filter.Order.Filter.Basic.filter.principal "𝓟")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 69, term))
      (Term.app `comap [(«term_∘_» `Abs.abs "∘" `re) `at_top])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_∘_» `Abs.abs "∘" `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `re
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `Abs.abs
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∘_» `Abs.abs "∘" `re) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `comap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 69 >? 1022, (some 1023, term) <=? (some 69, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 69, (some 70, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Order.Basic.«term_⊓_»
      (Term.app `comap [(Term.paren "(" («term_∘_» `Abs.abs "∘" `re) ")") `at_top])
      " ⊓ "
      (Term.app
       (Filter.Order.Filter.Basic.filter.principal "𝓟")
       [(Term.paren "(" (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b])) ")")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `z "*" («term-_» "-" `I))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `Exists₃Cat.imp
        [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Exists₃Cat.imp
       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Exists₃Cat.imp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `horizontal_strip
        [(Term.app
          `hfd.comp
          [(Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl)
           `H])
         (Term.hole "_")
         (Term.fun
          "fun"
          (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])))
         (Term.fun
          "fun"
          (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])))
         (Term.hole "_")
         (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `horizontal_strip
       [(Term.app
         `hfd.comp
         [(Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl)
          `H])
        (Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])))
        (Term.fun
         "fun"
         (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])))
        (Term.hole "_")
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun
       "fun"
       (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle_b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_b [(Term.hole "_") (Term.hole "_")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle_a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun [`z `hz] [] "=>" (Term.app `hle_a [(Term.hole "_") (Term.hole "_")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app
       `hfd.comp
       [(Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl) `H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `differentiable_id.mul_const [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `differentiable_id.mul_const
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `differentiable_id.mul_const [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hfd.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hfd.comp
      [(Term.proj
        (Term.paren "(" (Term.app `differentiable_id.mul_const [(Term.hole "_")]) ")")
        "."
        `DiffContOnCl)
       `H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `horizontal_strip
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         [(Term.typeSpec
           ":"
           (Term.app
            `maps_to
            [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
             (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
             (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`z `hz])
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`z `hz])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`z `hz])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `maps_to
       [(Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
        (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
        (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioo [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioo [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `im
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `im " ⁻¹' " (Term.app `Ioo [`a `b]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `z "*" («term-_» "-" `I))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`z] [] "=>" («term_*_» `z "*" («term-_» "-" `I))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `maps_to
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticSuffices_
       "suffices"
       (Term.sufficesDecl
        []
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖»
          "‖"
          (Term.app
           (Term.fun
            "fun"
            (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
           [(«term_*_» `z "*" `I)])
          "‖")
         "≤"
         `C)
        (Term.byTactic'
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              []
              [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `mul_assoc)] "]")]
              ["using" `this]))])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `mul_assoc)] "]")]
        ["using" `this]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖»
        "‖"
        (Term.app
         (Term.fun
          "fun"
          (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
         [(«term_*_» `z "*" `I)])
        "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖»
       "‖"
       (Term.app
        (Term.fun
         "fun"
         (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
        [(«term_*_» `z "*" `I)])
       "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.fun
        "fun"
        (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
       [(«term_*_» `z "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `z "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `z "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.fun
       "fun"
       (Term.basicFun [`z] [] "=>" (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_*_» `z "*" («term-_» "-" `I))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `z "*" («term-_» "-" `I))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `z "*" («term-_» "-" `I))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`z]
       []
       "=>"
       (Term.app `f [(Term.paren "(" («term_*_» `z "*" («term-_» "-" `I)) ")")])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.app `re [`z]) "≤" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» `a "≤" (Term.app `re [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       []
       ","
       (Term.arrow
        («term_=_» (Term.app `re [`z]) "=" `b)
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.app `re [`z]) "=" `b)
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.app `re [`z]) "=" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.app `re [`z]) "=" `a)
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.app `re [`z]) "=" `a)
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.app `re [`z]) "=" `a)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        («term_/_»
         (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
         "/"
         («term_-_» `b "-" `a)))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_»
                 `c
                 "*"
                 («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `c
                "*"
                («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `c
               "*"
               («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_»
         `B
         "*"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B
       "*"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.proj `z "." `im) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < re z < b}`.
    Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable on `U` and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * exp(c * |im z|))` on `U` for some `c < π / (b - a)`;
    * `‖f z‖` is bounded from above by a constant `C` on the boundary of `U`.
    
    Then `‖f z‖` is bounded by the same constant on the closed strip
    `{z : ℂ | a ≤ re z ≤ b}`. Moreover, it suffices to verify the second assumption
    only for sufficiently large values of `|im z|`.
    -/
  theorem
    vertical_strip
    ( hfd : DiffContOnCl ℂ f re ⁻¹' Ioo a b )
        (
          hB
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                f
                  =O[
                  comap Abs.abs ∘ im atTop ⊓ 𝓟 re ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . im |
          )
        ( hle_a : ∀ z : ℂ , re z = a → ‖ f z ‖ ≤ C )
        ( hle_b : ∀ z , re z = b → ‖ f z ‖ ≤ C )
        ( hza : a ≤ re z )
        ( hzb : re z ≤ b )
      : ‖ f z ‖ ≤ C
    :=
      by
        suffices ‖ fun z => f z * - I z * I ‖ ≤ C by simpa [ mul_assoc ] using this
          have
            H
              : maps_to fun z => z * - I im ⁻¹' Ioo a b re ⁻¹' Ioo a b
              :=
              by intro z hz simpa using hz
          refine'
            horizontal_strip
              hfd.comp differentiable_id.mul_const _ . DiffContOnCl H
                _
                fun z hz => hle_a _ _
                fun z hz => hle_b _ _
                _
                _
          ·
            refine' Exists₃Cat.imp fun c hc B hO => _ hB
              have
                :
                    tendsto
                      fun z => z * - I
                        comap Abs.abs ∘ re at_top ⊓ 𝓟 im ⁻¹' Ioo a b
                        comap Abs.abs ∘ im at_top ⊓ 𝓟 re ⁻¹' Ioo a b
                  :=
                  by
                    refine' tendsto_comap_iff . 2 _ . inf H.tendsto
                      simpa [ ( · ∘ · ) ] using tendsto_comap
              simpa [ ( · ∘ · ) ] using hO.comp_tendsto this
          all_goals simpa
#align phragmen_lindelof.vertical_strip PhragmenLindelof.vertical_strip

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < re z < b}`.\nLet `f : ℂ → E` be a function such that\n\n* `f` is differentiable on `U` and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * exp(c * |im z|))` on `U` for some `c < π / (b - a)`;\n* `f z = 0` on the boundary of `U`.\n\nThen `f` is equal to zero on the closed strip `{z : ℂ | a ≤ re z ≤ b}`.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_vertical_strip [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`ha]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.app `re [`z]) "=" `a)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (num "0"))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hb]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.app `re [`z]) "=" `b)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (num "0"))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f (num "0") (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
          "<|"
          (Term.app
           `vertical_strip
           [`hd
            `hB
            (Term.fun
             "fun"
             (Term.basicFun
              [`z `hz]
              []
              "=>"
              (Term.subst
               (Term.proj (Term.app `ha [`z `hz]) "." `symm)
               "▸"
               [(Term.proj `norm_zero "." `le)])))
            (Term.fun
             "fun"
             (Term.basicFun
              [`z `hz]
              []
              "=>"
              (Term.subst
               (Term.proj (Term.app `hb [`z `hz]) "." `symm)
               "▸"
               [(Term.proj `norm_zero "." `le)])))
            (Term.proj `hz "." (fieldIdx "1"))
            (Term.proj `hz "." (fieldIdx "2"))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
         "<|"
         (Term.app
          `vertical_strip
          [`hd
           `hB
           (Term.fun
            "fun"
            (Term.basicFun
             [`z `hz]
             []
             "=>"
             (Term.subst
              (Term.proj (Term.app `ha [`z `hz]) "." `symm)
              "▸"
              [(Term.proj `norm_zero "." `le)])))
           (Term.fun
            "fun"
            (Term.basicFun
             [`z `hz]
             []
             "=>"
             (Term.subst
              (Term.proj (Term.app `hb [`z `hz]) "." `symm)
              "▸"
              [(Term.proj `norm_zero "." `le)])))
           (Term.proj `hz "." (fieldIdx "1"))
           (Term.proj `hz "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
       "<|"
       (Term.app
        `vertical_strip
        [`hd
         `hB
         (Term.fun
          "fun"
          (Term.basicFun
           [`z `hz]
           []
           "=>"
           (Term.subst
            (Term.proj (Term.app `ha [`z `hz]) "." `symm)
            "▸"
            [(Term.proj `norm_zero "." `le)])))
         (Term.fun
          "fun"
          (Term.basicFun
           [`z `hz]
           []
           "=>"
           (Term.subst
            (Term.proj (Term.app `hb [`z `hz]) "." `symm)
            "▸"
            [(Term.proj `norm_zero "." `le)])))
         (Term.proj `hz "." (fieldIdx "1"))
         (Term.proj `hz "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `vertical_strip
       [`hd
        `hB
        (Term.fun
         "fun"
         (Term.basicFun
          [`z `hz]
          []
          "=>"
          (Term.subst
           (Term.proj (Term.app `ha [`z `hz]) "." `symm)
           "▸"
           [(Term.proj `norm_zero "." `le)])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`z `hz]
          []
          "=>"
          (Term.subst
           (Term.proj (Term.app `hb [`z `hz]) "." `symm)
           "▸"
           [(Term.proj `norm_zero "." `le)])))
        (Term.proj `hz "." (fieldIdx "1"))
        (Term.proj `hz "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        (Term.subst
         (Term.proj (Term.app `hb [`z `hz]) "." `symm)
         "▸"
         [(Term.proj `norm_zero "." `le)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst
       (Term.proj (Term.app `hb [`z `hz]) "." `symm)
       "▸"
       [(Term.proj `norm_zero "." `le)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `norm_zero "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      (Term.proj (Term.app `hb [`z `hz]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hb [`z `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hb [`z `hz]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`z `hz]
       []
       "=>"
       (Term.subst
        (Term.proj (Term.paren "(" (Term.app `hb [`z `hz]) ")") "." `symm)
        "▸"
        [(Term.proj `norm_zero "." `le)])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        (Term.subst
         (Term.proj (Term.app `ha [`z `hz]) "." `symm)
         "▸"
         [(Term.proj `norm_zero "." `le)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst
       (Term.proj (Term.app `ha [`z `hz]) "." `symm)
       "▸"
       [(Term.proj `norm_zero "." `le)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `norm_zero "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      (Term.proj (Term.app `ha [`z `hz]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `ha [`z `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `ha [`z `hz]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`z `hz]
       []
       "=>"
       (Term.subst
        (Term.proj (Term.paren "(" (Term.app `ha [`z `hz]) ")") "." `symm)
        "▸"
        [(Term.proj `norm_zero "." `le)])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `vertical_strip
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f (num "0") (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.app `re [`z]) "=" `b)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.app `re [`z]) "=" `b)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.app `re [`z]) "=" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.app `re [`z]) "=" `a)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.app `re [`z]) "=" `a)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.app `re [`z]) "=" `a)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        («term_/_»
         (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
         "/"
         («term_-_» `b "-" `a)))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_»
                 `c
                 "*"
                 («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `c
                "*"
                («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `c
               "*"
               («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_»
         `B
         "*"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B
       "*"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.proj `z "." `im) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < re z < b}`.
    Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable on `U` and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * exp(c * |im z|))` on `U` for some `c < π / (b - a)`;
    * `f z = 0` on the boundary of `U`.
    
    Then `f` is equal to zero on the closed strip `{z : ℂ | a ≤ re z ≤ b}`.
    -/
  theorem
    eq_zero_on_vertical_strip
    ( hd : DiffContOnCl ℂ f re ⁻¹' Ioo a b )
        (
          hB
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                f
                  =O[
                  comap Abs.abs ∘ im atTop ⊓ 𝓟 re ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . im |
          )
        ( ha : ∀ z : ℂ , re z = a → f z = 0 )
        ( hb : ∀ z : ℂ , re z = b → f z = 0 )
      : EqOn f 0 re ⁻¹' Icc a b
    :=
      fun
        z hz
          =>
          norm_le_zero_iff . 1
            <|
            vertical_strip
              hd
                hB
                fun z hz => ha z hz . symm ▸ norm_zero . le
                fun z hz => hb z hz . symm ▸ norm_zero . le
                hz . 1
                hz . 2
#align phragmen_lindelof.eq_zero_on_vertical_strip PhragmenLindelof.eq_zero_on_vertical_strip

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < re z < b}`.\nLet `f g : ℂ → E` be functions such that\n\n* `f` and `g` are differentiable on `U` and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * exp(c * |im z|))` on `U` for some\n  `c < π / (b - a)`;\n* `f z = g z` on the boundary of `U`.\n\nThen `f` is equal to `g` on the closed strip `{z : ℂ | a ≤ re z ≤ b}`.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_vertical_strip [])
      (Command.declSig
       [(Term.implicitBinder "{" [`g] [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)] "}")
        (Term.explicitBinder
         "("
         [`hdf]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hdg]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            («term_/_»
             (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
             "/"
             («term_-_» `b "-" `a)))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_»
                  `B
                  "*"
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_»
                     `c
                     "*"
                     («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`ha]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.app `re [`z]) "=" `a)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hb]
         [":"
          (Term.forall
           "∀"
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           ","
           (Term.arrow
            («term_=_» (Term.app `re [`z]) "=" `b)
            "→"
            («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f `g (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         (Term.app
          (Term.proj `sub_eq_zero "." (fieldIdx "1"))
          [(Term.app
            `eq_zero_on_vertical_strip
            [(Term.app (Term.proj `hdf "." `sub) [`hdg])
             (Term.app `is_O_sub_exp_exp [`hBf `hBg])
             (Term.fun
              "fun"
              (Term.basicFun
               [`w `hw]
               []
               "=>"
               (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
             (Term.fun
              "fun"
              (Term.basicFun
               [`w `hw]
               []
               "=>"
               (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
             `hz])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        (Term.app
         (Term.proj `sub_eq_zero "." (fieldIdx "1"))
         [(Term.app
           `eq_zero_on_vertical_strip
           [(Term.app (Term.proj `hdf "." `sub) [`hdg])
            (Term.app `is_O_sub_exp_exp [`hBf `hBg])
            (Term.fun
             "fun"
             (Term.basicFun
              [`w `hw]
              []
              "=>"
              (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
            (Term.fun
             "fun"
             (Term.basicFun
              [`w `hw]
              []
              "=>"
              (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
            `hz])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `sub_eq_zero "." (fieldIdx "1"))
       [(Term.app
         `eq_zero_on_vertical_strip
         [(Term.app (Term.proj `hdf "." `sub) [`hdg])
          (Term.app `is_O_sub_exp_exp [`hBf `hBg])
          (Term.fun
           "fun"
           (Term.basicFun
            [`w `hw]
            []
            "=>"
            (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
          (Term.fun
           "fun"
           (Term.basicFun
            [`w `hw]
            []
            "=>"
            (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
          `hz])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eq_zero_on_vertical_strip
       [(Term.app (Term.proj `hdf "." `sub) [`hdg])
        (Term.app `is_O_sub_exp_exp [`hBf `hBg])
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
        `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`w `hw]
        []
        "=>"
        (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `hb [`w `hw])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hb [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hb [`w `hw]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`w `hw]
       []
       "=>"
       (Term.app
        (Term.proj `sub_eq_zero "." (fieldIdx "2"))
        [(Term.paren "(" (Term.app `hb [`w `hw]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`w `hw]
        []
        "=>"
        (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `sub_eq_zero "." (fieldIdx "2")) [(Term.app `ha [`w `hw])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `ha [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `ha [`w `hw]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`w `hw]
       []
       "=>"
       (Term.app
        (Term.proj `sub_eq_zero "." (fieldIdx "2"))
        [(Term.paren "(" (Term.app `ha [`w `hw]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_O_sub_exp_exp [`hBf `hBg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_sub_exp_exp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O_sub_exp_exp [`hBf `hBg])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `hdf "." `sub) [`hdg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hdg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hdf "." `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hdf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `hdf "." `sub) [`hdg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_zero_on_vertical_strip
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `eq_zero_on_vertical_strip
      [(Term.paren "(" (Term.app (Term.proj `hdf "." `sub) [`hdg]) ")")
       (Term.paren "(" (Term.app `is_O_sub_exp_exp [`hBf `hBg]) ")")
       (Term.paren
        "("
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app
           (Term.proj `sub_eq_zero "." (fieldIdx "2"))
           [(Term.paren "(" (Term.app `ha [`w `hw]) ")")])))
        ")")
       (Term.paren
        "("
        (Term.fun
         "fun"
         (Term.basicFun
          [`w `hw]
          []
          "=>"
          (Term.app
           (Term.proj `sub_eq_zero "." (fieldIdx "2"))
           [(Term.paren "(" (Term.app `hb [`w `hw]) ")")])))
        ")")
       `hz])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app `EqOn [`f `g (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Icc [`a `b]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.app `re [`z]) "=" `b)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.app `re [`z]) "=" `b)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.app `re [`z]) "=" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_=_» (Term.app `re [`z]) "=" `a)
        "→"
        («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_=_» (Term.app `re [`z]) "=" `a)
       "→"
       («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`z]) "=" (Term.app `g [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_=_» (Term.app `re [`z]) "=" `a)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `re [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        («term_/_»
         (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
         "/"
         («term_-_» `b "-" `a)))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `g
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_»
              `B
              "*"
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(«term_*_»
                 `c
                 "*"
                 («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `g
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_»
             `B
             "*"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_»
                `c
                "*"
                («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `g
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [(«term_∘_» `Abs.abs "∘" `im) `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Set.Data.Set.Image.«term_⁻¹'_» `re " ⁻¹' " (Term.app `Ioo [`a `b]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_»
            `B
            "*"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_»
               `c
               "*"
               («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_»
           `B
           "*"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_»
         `B
         "*"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `B
       "*"
       (Term.app
        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
        [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.proj `z "." `im) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `c "*" («term|___|» (group "|") (Term.proj `z "." `im) (group) "|"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in a strip `U = {z : ℂ | a < re z < b}`.
    Let `f g : ℂ → E` be functions such that
    
    * `f` and `g` are differentiable on `U` and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * exp(c * |im z|))` on `U` for some
      `c < π / (b - a)`;
    * `f z = g z` on the boundary of `U`.
    
    Then `f` is equal to `g` on the closed strip `{z : ℂ | a ≤ re z ≤ b}`.
    -/
  theorem
    eq_on_vertical_strip
    { g : ℂ → E }
        ( hdf : DiffContOnCl ℂ f re ⁻¹' Ioo a b )
        (
          hBf
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                f
                  =O[
                  comap Abs.abs ∘ im atTop ⊓ 𝓟 re ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . im |
          )
        ( hdg : DiffContOnCl ℂ g re ⁻¹' Ioo a b )
        (
          hBg
          :
            ∃
              c
              < π / b - a
              ,
              ∃
                B
                ,
                g
                  =O[
                  comap Abs.abs ∘ im atTop ⊓ 𝓟 re ⁻¹' Ioo a b
                  ]
                  fun z => expR B * expR c * | z . im |
          )
        ( ha : ∀ z : ℂ , re z = a → f z = g z )
        ( hb : ∀ z : ℂ , re z = b → f z = g z )
      : EqOn f g re ⁻¹' Icc a b
    :=
      fun
        z hz
          =>
          sub_eq_zero . 1
            eq_zero_on_vertical_strip
              hdf . sub hdg
                is_O_sub_exp_exp hBf hBg
                fun w hw => sub_eq_zero . 2 ha w hw
                fun w hw => sub_eq_zero . 2 hb w hw
                hz
#align phragmen_lindelof.eq_on_vertical_strip PhragmenLindelof.eq_on_vertical_strip

/-!
### Phragmen-Lindelöf principle in coordinate quadrants
-/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the first quadrant.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed first quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `quadrant_I [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_re]
         [":" («term_≤_» (num "0") "≤" (Term.proj `z "." `re))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_im]
         [":" («term_≤_» (num "0") "≤" (Term.proj `z "." `im))]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] (Term.app `eq_or_ne [`z (num "0")]))]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.paren
                 "("
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed
                   [(Std.Tactic.RCases.rcasesPat.one `rfl)
                    "|"
                    (Std.Tactic.RCases.rcasesPat.one `hzne)])
                  [])
                 ")")])
              [])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.exact "exact" (Term.app `hre [(num "0") `le_rfl]))])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ζ)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hζ)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders
               (Lean.unbracketedExplicitBinders
                [(Lean.binderIdent `ζ)]
                [":" (Data.Complex.Basic.termℂ "ℂ")]))
              ","
              («term_∧_»
               («term_∈_»
                (Term.proj `ζ "." `im)
                "∈"
                (Term.app
                 `Icc
                 [(num "0")
                  («term_/_»
                   (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                   "/"
                   (num "2"))]))
               "∧"
               («term_=_» (Term.app `exp [`ζ]) "=" `z)))]
            [":="
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.refine'
                   "refine'"
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.app `log [`z]) "," (Term.hole "_") "," (Term.app `exp_log [`hzne])]
                    "⟩"))
                  []
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `log_im)] "]") [])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
                     ","
                     (Term.app
                      (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
                      [(Term.app `Or.inl [`hz_re])])]
                    "⟩"))])))]])
           []
           (Tactic.clear "clear" [`hz_re `hz_im `hzne])
           []
           (Tactic.change
            "change"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `exp) [`ζ]) "‖")
             "≤"
             `C)
            [])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `maps_to
                 [`exp
                  (Set.Data.Set.Image.«term_⁻¹'_»
                   `im
                   " ⁻¹' "
                   (Term.app
                    `Ioo
                    [(num "0")
                     («term_/_»
                      (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                      "/"
                      (num "2"))]))
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Ioi [(num "0")])
                   " ×ℂ "
                   (Term.app `Ioi [(num "0")]))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`z `hz])
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `mem_re_prod_im)
                     ","
                     (Tactic.rwRule [] `exp_re)
                     ","
                     (Tactic.rwRule [] `exp_im)
                     ","
                     (Tactic.rwRule [] `mem_Ioi)
                     ","
                     (Tactic.rwRule [] `mem_Ioi)]
                    "]")
                   [])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.app
                      `mul_pos
                      [(Term.app `Real.exp_pos [(Term.hole "_")])
                       (Term.app
                        `Real.cos_pos_of_mem_Ioo
                        [(Term.anonymousCtor
                          "⟨"
                          [(Term.app
                            (Term.proj
                             («term_<|_»
                              (Term.proj `neg_lt_zero "." (fieldIdx "2"))
                              "<|"
                              (Term.app `div_pos [`Real.pi_pos `two_pos]))
                             "."
                             `trans)
                            [(Term.proj `hz "." (fieldIdx "1"))])
                           ","
                           (Term.proj `hz "." (fieldIdx "2"))]
                          "⟩")])])
                     ","
                     (Term.app
                      `mul_pos
                      [(Term.app `Real.exp_pos [(Term.hole "_")])
                       (Term.app
                        `Real.sin_pos_of_mem_Ioo
                        [(Term.anonymousCtor
                          "⟨"
                          [(Term.proj `hz "." (fieldIdx "1"))
                           ","
                           (Term.app
                            (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
                            [(Term.app `half_lt_self [`Real.pi_pos])])]
                          "⟩")])])]
                    "⟩"))]))))))
           []
           (Tactic.«tactic_<;>_»
            (Tactic.refine'
             "refine'"
             (Term.app
              `horizontal_strip
              [(Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
               (Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.proj `hζ "." (fieldIdx "1"))
               (Term.proj `hζ "." (fieldIdx "2"))]))
            "<;>"
            (Tactic.clear "clear" [`hζ `ζ]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `sub_zero)
                ","
                (Tactic.rwRule [] (Term.app `div_div_cancel' [`real.pi_pos.ne']))]
               "]")
              [])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `hB)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "⟨"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                     [])]
                   "⟩")])
                [])])
             []
             (Tactic.refine'
              "refine'"
              (Term.anonymousCtor
               "⟨"
               [`c "," `hc "," (Term.app `max [`B (num "0")]) "," (Term.hole "_")]
               "⟩"))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `comap_comap)
                ","
                (Tactic.rwRule [] `comap_abs_at_top)
                ","
                (Tactic.rwRule [] `comap_sup)
                ","
                (Tactic.rwRule [] `inf_sup_right)]
               "]")
              [])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `is_O.sup
               [(Term.hole "_")
                («term_<|_»
                 (Term.proj
                  («term_<|_»
                   `hO.comp_tendsto
                   "<|"
                   (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
                  "."
                  `trans)
                 "<|"
                 (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))]))
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hc []]
                  [(Term.typeSpec
                    ":"
                    (Term.app
                     `ContinuousWithinAt
                     [`f
                      (Complex.Data.Complex.Basic.«term_×ℂ_»
                       (Term.app `Ioi [(num "0")])
                       " ×ℂ "
                       (Term.app `Ioi [(num "0")]))
                      (num "0")]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.refine'
                       "refine'"
                       (Term.app
                        (Term.proj
                         (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")])
                         "."
                         `mono)
                        [`subset_closure]))
                      []
                      (Tactic.simp
                       "simp"
                       []
                       []
                       []
                       ["["
                        [(Tactic.simpLemma [] [] `closure_re_prod_im)
                         ","
                         (Tactic.simpLemma [] [] `mem_re_prod_im)]
                        "]"]
                       [])]))))))
               []
               (Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.proj
                    («term_<|_»
                     `hc.tendsto.comp
                     "<|"
                     (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
                    "."
                    `is_O_one)
                   [(Data.Real.Basic.termℝ "ℝ")])
                  "."
                  `trans)
                 [(Term.app
                   `is_O_of_le
                   [(Term.hole "_")
                    (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])]))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `norm_one)
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app
                    `Real.norm_of_nonneg
                    [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
                  ","
                  (Tactic.rwRule [] `Real.one_le_exp_iff)]
                 "]")
                [])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `mul_nonneg
                 [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
                  (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `eventually_inf_principal)
                  ","
                  (Tactic.simpLemma [] [] `eventually_comap)
                  ","
                  (Tactic.simpLemma [] [] `comp_app)
                  ","
                  (Tactic.simpLemma [] [] `one_mul)
                  ","
                  (Tactic.simpLemma
                   []
                   []
                   (Term.app
                    `Real.norm_of_nonneg
                    [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
                  ","
                  (Tactic.simpLemma [] [] `abs_exp)
                  ","
                  (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_mul)
                  ","
                  (Tactic.simpLemma [] [] `Real.exp_le_exp)]
                 "]"]
                [])
               []
               (Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
                 [(Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))]))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `hz)
                  ","
                  (Tactic.rwRule [] (Term.app `_root_.abs_of_nonneg [`hx]))
                  ","
                  (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `c]))]
                 "]")
                [])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `mul_le_mul_of_nonneg_right
                 [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
                  (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.intro "intro" [`ζ `hζ])
             []
             (Tactic.lift "lift" `ζ "to" (Data.Real.Basic.termℝ "ℝ") ["using" `hζ] [])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `hre
               [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.intro "intro" [`ζ `hζ])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `re_add_im [`ζ]))
                ","
                (Tactic.rwRule [] `hζ)
                ","
                (Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [] `exp_add_mul_I)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_cos)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_sin)
                ","
                (Tactic.rwRule [] `Real.cos_pi_div_two)
                ","
                (Tactic.rwRule [] `Real.sin_pi_div_two)
                ","
                (Tactic.rwRule [] `of_real_zero)
                ","
                (Tactic.rwRule [] `of_real_one)
                ","
                (Tactic.rwRule [] `one_mul)
                ","
                (Tactic.rwRule [] `zero_add)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `him
               [(Term.hole "_")
                (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] (Term.app `eq_or_ne [`z (num "0")]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.paren
                "("
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.one `rfl)
                   "|"
                   (Std.Tactic.RCases.rcasesPat.one `hzne)])
                 [])
                ")")])
             [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact "exact" (Term.app `hre [(num "0") `le_rfl]))])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ζ)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hζ)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders
              (Lean.unbracketedExplicitBinders
               [(Lean.binderIdent `ζ)]
               [":" (Data.Complex.Basic.termℂ "ℂ")]))
             ","
             («term_∧_»
              («term_∈_»
               (Term.proj `ζ "." `im)
               "∈"
               (Term.app
                `Icc
                [(num "0")
                 («term_/_»
                  (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                  "/"
                  (num "2"))]))
              "∧"
              («term_=_» (Term.app `exp [`ζ]) "=" `z)))]
           [":="
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.anonymousCtor
                   "⟨"
                   [(Term.app `log [`z]) "," (Term.hole "_") "," (Term.app `exp_log [`hzne])]
                   "⟩"))
                 []
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `log_im)] "]") [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.anonymousCtor
                   "⟨"
                   [(Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
                    ","
                    (Term.app
                     (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
                     [(Term.app `Or.inl [`hz_re])])]
                   "⟩"))])))]])
          []
          (Tactic.clear "clear" [`hz_re `hz_im `hzne])
          []
          (Tactic.change
           "change"
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `exp) [`ζ]) "‖")
            "≤"
            `C)
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`H []]
             [(Term.typeSpec
               ":"
               (Term.app
                `maps_to
                [`exp
                 (Set.Data.Set.Image.«term_⁻¹'_»
                  `im
                  " ⁻¹' "
                  (Term.app
                   `Ioo
                   [(num "0")
                    («term_/_»
                     (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                     "/"
                     (num "2"))]))
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Ioi [(num "0")])
                  " ×ℂ "
                  (Term.app `Ioi [(num "0")]))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`z `hz])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `mem_re_prod_im)
                    ","
                    (Tactic.rwRule [] `exp_re)
                    ","
                    (Tactic.rwRule [] `exp_im)
                    ","
                    (Tactic.rwRule [] `mem_Ioi)
                    ","
                    (Tactic.rwRule [] `mem_Ioi)]
                   "]")
                  [])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.anonymousCtor
                   "⟨"
                   [(Term.app
                     `mul_pos
                     [(Term.app `Real.exp_pos [(Term.hole "_")])
                      (Term.app
                       `Real.cos_pos_of_mem_Ioo
                       [(Term.anonymousCtor
                         "⟨"
                         [(Term.app
                           (Term.proj
                            («term_<|_»
                             (Term.proj `neg_lt_zero "." (fieldIdx "2"))
                             "<|"
                             (Term.app `div_pos [`Real.pi_pos `two_pos]))
                            "."
                            `trans)
                           [(Term.proj `hz "." (fieldIdx "1"))])
                          ","
                          (Term.proj `hz "." (fieldIdx "2"))]
                         "⟩")])])
                    ","
                    (Term.app
                     `mul_pos
                     [(Term.app `Real.exp_pos [(Term.hole "_")])
                      (Term.app
                       `Real.sin_pos_of_mem_Ioo
                       [(Term.anonymousCtor
                         "⟨"
                         [(Term.proj `hz "." (fieldIdx "1"))
                          ","
                          (Term.app
                           (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
                           [(Term.app `half_lt_self [`Real.pi_pos])])]
                         "⟩")])])]
                   "⟩"))]))))))
          []
          (Tactic.«tactic_<;>_»
           (Tactic.refine'
            "refine'"
            (Term.app
             `horizontal_strip
             [(Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
              (Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.proj `hζ "." (fieldIdx "1"))
              (Term.proj `hζ "." (fieldIdx "2"))]))
           "<;>"
           (Tactic.clear "clear" [`hζ `ζ]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `sub_zero)
               ","
               (Tactic.rwRule [] (Term.app `div_div_cancel' [`real.pi_pos.ne']))]
              "]")
             [])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `hB)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                    [])]
                  "⟩")])
               [])])
            []
            (Tactic.refine'
             "refine'"
             (Term.anonymousCtor
              "⟨"
              [`c "," `hc "," (Term.app `max [`B (num "0")]) "," (Term.hole "_")]
              "⟩"))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `comap_comap)
               ","
               (Tactic.rwRule [] `comap_abs_at_top)
               ","
               (Tactic.rwRule [] `comap_sup)
               ","
               (Tactic.rwRule [] `inf_sup_right)]
              "]")
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `is_O.sup
              [(Term.hole "_")
               («term_<|_»
                (Term.proj
                 («term_<|_»
                  `hO.comp_tendsto
                  "<|"
                  (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
                 "."
                 `trans)
                "<|"
                (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))]))
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`hc []]
                 [(Term.typeSpec
                   ":"
                   (Term.app
                    `ContinuousWithinAt
                    [`f
                     (Complex.Data.Complex.Basic.«term_×ℂ_»
                      (Term.app `Ioi [(num "0")])
                      " ×ℂ "
                      (Term.app `Ioi [(num "0")]))
                     (num "0")]))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.refine'
                      "refine'"
                      (Term.app
                       (Term.proj
                        (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")])
                        "."
                        `mono)
                       [`subset_closure]))
                     []
                     (Tactic.simp
                      "simp"
                      []
                      []
                      []
                      ["["
                       [(Tactic.simpLemma [] [] `closure_re_prod_im)
                        ","
                        (Tactic.simpLemma [] [] `mem_re_prod_im)]
                       "]"]
                      [])]))))))
              []
              (Tactic.refine'
               "refine'"
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj
                   («term_<|_»
                    `hc.tendsto.comp
                    "<|"
                    (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
                   "."
                   `is_O_one)
                  [(Data.Real.Basic.termℝ "ℝ")])
                 "."
                 `trans)
                [(Term.app
                  `is_O_of_le
                  [(Term.hole "_")
                   (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])]))
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `norm_one)
                 ","
                 (Tactic.rwRule
                  []
                  (Term.app
                   `Real.norm_of_nonneg
                   [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
                 ","
                 (Tactic.rwRule [] `Real.one_le_exp_iff)]
                "]")
               [])
              []
              (Tactic.exact
               "exact"
               (Term.app
                `mul_nonneg
                [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
                 (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.simp
               "simp"
               []
               []
               ["only"]
               ["["
                [(Tactic.simpLemma [] [] `eventually_inf_principal)
                 ","
                 (Tactic.simpLemma [] [] `eventually_comap)
                 ","
                 (Tactic.simpLemma [] [] `comp_app)
                 ","
                 (Tactic.simpLemma [] [] `one_mul)
                 ","
                 (Tactic.simpLemma
                  []
                  []
                  (Term.app
                   `Real.norm_of_nonneg
                   [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
                 ","
                 (Tactic.simpLemma [] [] `abs_exp)
                 ","
                 (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_mul)
                 ","
                 (Tactic.simpLemma [] [] `Real.exp_le_exp)]
                "]"]
               [])
              []
              (Tactic.refine'
               "refine'"
               (Term.app
                (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
                [(Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))]))
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `hz)
                 ","
                 (Tactic.rwRule [] (Term.app `_root_.abs_of_nonneg [`hx]))
                 ","
                 (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `c]))]
                "]")
               [])
              []
              (Tactic.exact
               "exact"
               (Term.app
                `mul_le_mul_of_nonneg_right
                [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
                 (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.intro "intro" [`ζ `hζ])
            []
            (Tactic.lift "lift" `ζ "to" (Data.Real.Basic.termℝ "ℝ") ["using" `hζ] [])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hre
              [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.intro "intro" [`ζ `hζ])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `re_add_im [`ζ]))
               ","
               (Tactic.rwRule [] `hζ)
               ","
               (Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [] `exp_add_mul_I)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_cos)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_sin)
               ","
               (Tactic.rwRule [] `Real.cos_pi_div_two)
               ","
               (Tactic.rwRule [] `Real.sin_pi_div_two)
               ","
               (Tactic.rwRule [] `of_real_zero)
               ","
               (Tactic.rwRule [] `of_real_one)
               ","
               (Tactic.rwRule [] `one_mul)
               ","
               (Tactic.rwRule [] `zero_add)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `him
              [(Term.hole "_")
               (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`ζ `hζ])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `re_add_im [`ζ]))
           ","
           (Tactic.rwRule [] `hζ)
           ","
           (Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [] `exp_add_mul_I)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_cos)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_sin)
           ","
           (Tactic.rwRule [] `Real.cos_pi_div_two)
           ","
           (Tactic.rwRule [] `Real.sin_pi_div_two)
           ","
           (Tactic.rwRule [] `of_real_zero)
           ","
           (Tactic.rwRule [] `of_real_one)
           ","
           (Tactic.rwRule [] `one_mul)
           ","
           (Tactic.rwRule [] `zero_add)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `him
          [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `him
        [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `him
       [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `re_add_im [`ζ]))
         ","
         (Tactic.rwRule [] `hζ)
         ","
         (Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [] `exp_add_mul_I)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_cos)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_sin)
         ","
         (Tactic.rwRule [] `Real.cos_pi_div_two)
         ","
         (Tactic.rwRule [] `Real.sin_pi_div_two)
         ","
         (Tactic.rwRule [] `of_real_zero)
         ","
         (Tactic.rwRule [] `of_real_one)
         ","
         (Tactic.rwRule [] `one_mul)
         ","
         (Tactic.rwRule [] `zero_add)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.sin_pi_div_two
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.cos_pi_div_two
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_sin
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_cos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `exp_add_mul_I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `re_add_im [`ζ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re_add_im
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`ζ `hζ])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`ζ `hζ])
        []
        (Tactic.lift "lift" `ζ "to" (Data.Real.Basic.termℝ "ℝ") ["using" `hζ] [])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hre
          [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hre
        [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hre
       [(Term.hole "_") (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.lift "lift" `ζ "to" (Data.Real.Basic.termℝ "ℝ") ["using" `hζ] [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`ζ `hζ])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `sub_zero)
           ","
           (Tactic.rwRule [] (Term.app `div_div_cancel' [`real.pi_pos.ne']))]
          "]")
         [])
        []
        (Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `hB)]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "⟨"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                [])]
              "⟩")])
           [])])
        []
        (Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "⟨"
          [`c "," `hc "," (Term.app `max [`B (num "0")]) "," (Term.hole "_")]
          "⟩"))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `comap_comap)
           ","
           (Tactic.rwRule [] `comap_abs_at_top)
           ","
           (Tactic.rwRule [] `comap_sup)
           ","
           (Tactic.rwRule [] `inf_sup_right)]
          "]")
         [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          `is_O.sup
          [(Term.hole "_")
           («term_<|_»
            (Term.proj
             («term_<|_»
              `hO.comp_tendsto
              "<|"
              (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
             "."
             `trans)
            "<|"
            (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))]))
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hc []]
             [(Term.typeSpec
               ":"
               (Term.app
                `ContinuousWithinAt
                [`f
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Ioi [(num "0")])
                  " ×ℂ "
                  (Term.app `Ioi [(num "0")]))
                 (num "0")]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   (Term.proj
                    (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")])
                    "."
                    `mono)
                   [`subset_closure]))
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma [] [] `closure_re_prod_im)
                    ","
                    (Tactic.simpLemma [] [] `mem_re_prod_im)]
                   "]"]
                  [])]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj
             (Term.app
              (Term.proj
               («term_<|_»
                `hc.tendsto.comp
                "<|"
                (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
               "."
               `is_O_one)
              [(Data.Real.Basic.termℝ "ℝ")])
             "."
             `trans)
            [(Term.app
              `is_O_of_le
              [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])]))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `norm_one)
             ","
             (Tactic.rwRule
              []
              (Term.app
               `Real.norm_of_nonneg
               [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
             ","
             (Tactic.rwRule [] `Real.one_le_exp_iff)]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mul_nonneg
            [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
             (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `eventually_inf_principal)
             ","
             (Tactic.simpLemma [] [] `eventually_comap)
             ","
             (Tactic.simpLemma [] [] `comp_app)
             ","
             (Tactic.simpLemma [] [] `one_mul)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app
               `Real.norm_of_nonneg
               [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
             ","
             (Tactic.simpLemma [] [] `abs_exp)
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_mul)
             ","
             (Tactic.simpLemma [] [] `Real.exp_le_exp)]
            "]"]
           [])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
            [(Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))]))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `hz)
             ","
             (Tactic.rwRule [] (Term.app `_root_.abs_of_nonneg [`hx]))
             ","
             (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `c]))]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul_of_nonneg_right
            [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `eventually_inf_principal)
           ","
           (Tactic.simpLemma [] [] `eventually_comap)
           ","
           (Tactic.simpLemma [] [] `comp_app)
           ","
           (Tactic.simpLemma [] [] `one_mul)
           ","
           (Tactic.simpLemma
            []
            []
            (Term.app
             `Real.norm_of_nonneg
             [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
           ","
           (Tactic.simpLemma [] [] `abs_exp)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_mul)
           ","
           (Tactic.simpLemma [] [] `Real.exp_le_exp)]
          "]"]
         [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
          [(Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `hz)
           ","
           (Tactic.rwRule [] (Term.app `_root_.abs_of_nonneg [`hx]))
           ","
           (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `c]))]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `mul_le_mul_of_nonneg_right
          [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
           (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul_of_nonneg_right
        [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
         (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul_of_nonneg_right
       [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul_of_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hz)
         ","
         (Tactic.rwRule [] (Term.app `_root_.abs_of_nonneg [`hx]))
         ","
         (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `c]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_comm [(Term.hole "_") `c])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `_root_.abs_of_nonneg [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `_root_.abs_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
        [(Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
       [(Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`x `hx `z `hz `hz'] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `eventually_ge_at_top [(num "0")]) "." `mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `eventually_ge_at_top [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eventually_ge_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `eventually_ge_at_top [(num "0")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `eventually_inf_principal)
         ","
         (Tactic.simpLemma [] [] `eventually_comap)
         ","
         (Tactic.simpLemma [] [] `comp_app)
         ","
         (Tactic.simpLemma [] [] `one_mul)
         ","
         (Tactic.simpLemma
          []
          []
          (Term.app
           `Real.norm_of_nonneg
           [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
         ","
         (Tactic.simpLemma [] [] `abs_exp)
         ","
         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_mul)
         ","
         (Tactic.simpLemma [] [] `Real.exp_le_exp)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_le_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `abs_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.norm_of_nonneg
       [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.norm_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eventually_comap
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eventually_inf_principal
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hc []]
           [(Term.typeSpec
             ":"
             (Term.app
              `ContinuousWithinAt
              [`f
               (Complex.Data.Complex.Basic.«term_×ℂ_»
                (Term.app `Ioi [(num "0")])
                " ×ℂ "
                (Term.app `Ioi [(num "0")]))
               (num "0")]))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj
                  (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")])
                  "."
                  `mono)
                 [`subset_closure]))
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["["
                 [(Tactic.simpLemma [] [] `closure_re_prod_im)
                  ","
                  (Tactic.simpLemma [] [] `mem_re_prod_im)]
                 "]"]
                [])]))))))
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj
           (Term.app
            (Term.proj
             («term_<|_»
              `hc.tendsto.comp
              "<|"
              (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
             "."
             `is_O_one)
            [(Data.Real.Basic.termℝ "ℝ")])
           "."
           `trans)
          [(Term.app
            `is_O_of_le
            [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `norm_one)
           ","
           (Tactic.rwRule
            []
            (Term.app
             `Real.norm_of_nonneg
             [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
           ","
           (Tactic.rwRule [] `Real.one_le_exp_iff)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `mul_nonneg
          [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
           (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_nonneg
        [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
         (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_nonneg
       [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
        (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `norm_one)
         ","
         (Tactic.rwRule
          []
          (Term.app
           `Real.norm_of_nonneg
           [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
         ","
         (Tactic.rwRule [] `Real.one_le_exp_iff)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.one_le_exp_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.norm_of_nonneg
       [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.norm_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj
           («term_<|_»
            `hc.tendsto.comp
            "<|"
            (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
           "."
           `is_O_one)
          [(Data.Real.Basic.termℝ "ℝ")])
         "."
         `trans)
        [(Term.app
          `is_O_of_le
          [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj
          («term_<|_»
           `hc.tendsto.comp
           "<|"
           (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
          "."
          `is_O_one)
         [(Data.Real.Basic.termℝ "ℝ")])
        "."
        `trans)
       [(Term.app
         `is_O_of_le
         [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_O_of_le
       [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `is_O_of_le
      [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`w] [] "=>" (Term.hole "_")))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.proj
         («term_<|_» `hc.tendsto.comp "<|" (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
         "."
         `is_O_one)
        [(Data.Real.Basic.termℝ "ℝ")])
       "."
       `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        («term_<|_» `hc.tendsto.comp "<|" (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
        "."
        `is_O_one)
       [(Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       («term_<|_» `hc.tendsto.comp "<|" (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
       "."
       `is_O_one)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_» `hc.tendsto.comp "<|" (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H.tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_exp_comap_re_at_bot.inf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hc.tendsto.comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hc.tendsto.comp "<|" (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        («term_<|_» `hc.tendsto.comp "<|" (Term.app `tendsto_exp_comap_re_at_bot.inf [`H.tendsto]))
        ")")
       "."
       `is_O_one)
      [(Data.Real.Basic.termℝ "ℝ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hc []]
         [(Term.typeSpec
           ":"
           (Term.app
            `ContinuousWithinAt
            [`f
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Ioi [(num "0")])
              " ×ℂ "
              (Term.app `Ioi [(num "0")]))
             (num "0")]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")]) "." `mono)
               [`subset_closure]))
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `closure_re_prod_im)
                ","
                (Tactic.simpLemma [] [] `mem_re_prod_im)]
               "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")]) "." `mono)
            [`subset_closure]))
          []
          (Tactic.simp
           "simp"
           []
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `closure_re_prod_im)
             ","
             (Tactic.simpLemma [] [] `mem_re_prod_im)]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [] `closure_re_prod_im) "," (Tactic.simpLemma [] [] `mem_re_prod_im)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `closure_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")]) "." `mono)
        [`subset_closure]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")]) "." `mono)
       [`subset_closure])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `subset_closure
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")]) "." `mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.continuous_on
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hd.continuous_on [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `ContinuousWithinAt
       [`f
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Ioi [(num "0")])
         " ×ℂ "
         (Term.app `Ioi [(num "0")]))
        (num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Ioi [(num "0")])
       " ×ℂ "
       (Term.app `Ioi [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Ioi [(num "0")])
      " ×ℂ "
      (Term.app `Ioi [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ContinuousWithinAt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `is_O.sup
        [(Term.hole "_")
         («term_<|_»
          (Term.proj
           («term_<|_»
            `hO.comp_tendsto
            "<|"
            (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
           "."
           `trans)
          "<|"
          (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_O.sup
       [(Term.hole "_")
        («term_<|_»
         (Term.proj
          («term_<|_»
           `hO.comp_tendsto
           "<|"
           (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
          "."
          `trans)
         "<|"
         (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj
        («term_<|_» `hO.comp_tendsto "<|" (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
        "."
        `trans)
       "<|"
       (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_O.of_bound [(num "1") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O.of_bound
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj
       («term_<|_» `hO.comp_tendsto "<|" (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
       "."
       `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_» `hO.comp_tendsto "<|" (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H.tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_exp_comap_re_at_top.inf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hO.comp_tendsto
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hO.comp_tendsto "<|" (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.proj
       (Term.paren
        "("
        («term_<|_» `hO.comp_tendsto "<|" (Term.app `tendsto_exp_comap_re_at_top.inf [`H.tendsto]))
        ")")
       "."
       `trans)
      "<|"
      (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O.sup
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `comap_comap)
         ","
         (Tactic.rwRule [] `comap_abs_at_top)
         ","
         (Tactic.rwRule [] `comap_sup)
         ","
         (Tactic.rwRule [] `inf_sup_right)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inf_sup_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comap_sup
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comap_abs_at_top
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comap_comap
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [`c "," `hc "," (Term.app `max [`B (num "0")]) "," (Term.hole "_")]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [`c "," `hc "," (Term.app `max [`B (num "0")]) "," (Term.hole "_")]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`B (num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hB)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `sub_zero)
         ","
         (Tactic.rwRule [] (Term.app `div_div_cancel' [`real.pi_pos.ne']))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `div_div_cancel' [`real.pi_pos.ne'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `real.pi_pos.ne'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_div_cancel'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.«tactic_<;>_»
       (Tactic.refine'
        "refine'"
        (Term.app
         `horizontal_strip
         [(Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
          (Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.proj `hζ "." (fieldIdx "1"))
          (Term.proj `hζ "." (fieldIdx "2"))]))
       "<;>"
       (Tactic.clear "clear" [`hζ `ζ]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.clear "clear" [`hζ `ζ])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 2 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
      (Tactic.refine'
       "refine'"
       (Term.app
        `horizontal_strip
        [(Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
         (Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")
         (Term.proj `hζ "." (fieldIdx "1"))
         (Term.proj `hζ "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `horizontal_strip
       [(Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
        (Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.proj `hζ "." (fieldIdx "1"))
        (Term.proj `hζ "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hζ "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hζ "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hζ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `differentiable_exp.diff_cont_on_cl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hd.comp [`differentiable_exp.diff_cont_on_cl `H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `horizontal_strip
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         [(Term.typeSpec
           ":"
           (Term.app
            `maps_to
            [`exp
             (Set.Data.Set.Image.«term_⁻¹'_»
              `im
              " ⁻¹' "
              (Term.app
               `Ioo
               [(num "0")
                («term_/_»
                 (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
                 "/"
                 (num "2"))]))
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Ioi [(num "0")])
              " ×ℂ "
              (Term.app `Ioi [(num "0")]))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`z `hz])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `mem_re_prod_im)
                ","
                (Tactic.rwRule [] `exp_re)
                ","
                (Tactic.rwRule [] `exp_im)
                ","
                (Tactic.rwRule [] `mem_Ioi)
                ","
                (Tactic.rwRule [] `mem_Ioi)]
               "]")
              [])
             []
             (Tactic.refine'
              "refine'"
              (Term.anonymousCtor
               "⟨"
               [(Term.app
                 `mul_pos
                 [(Term.app `Real.exp_pos [(Term.hole "_")])
                  (Term.app
                   `Real.cos_pos_of_mem_Ioo
                   [(Term.anonymousCtor
                     "⟨"
                     [(Term.app
                       (Term.proj
                        («term_<|_»
                         (Term.proj `neg_lt_zero "." (fieldIdx "2"))
                         "<|"
                         (Term.app `div_pos [`Real.pi_pos `two_pos]))
                        "."
                        `trans)
                       [(Term.proj `hz "." (fieldIdx "1"))])
                      ","
                      (Term.proj `hz "." (fieldIdx "2"))]
                     "⟩")])])
                ","
                (Term.app
                 `mul_pos
                 [(Term.app `Real.exp_pos [(Term.hole "_")])
                  (Term.app
                   `Real.sin_pos_of_mem_Ioo
                   [(Term.anonymousCtor
                     "⟨"
                     [(Term.proj `hz "." (fieldIdx "1"))
                      ","
                      (Term.app
                       (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
                       [(Term.app `half_lt_self [`Real.pi_pos])])]
                     "⟩")])])]
               "⟩"))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`z `hz])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `mem_re_prod_im)
             ","
             (Tactic.rwRule [] `exp_re)
             ","
             (Tactic.rwRule [] `exp_im)
             ","
             (Tactic.rwRule [] `mem_Ioi)
             ","
             (Tactic.rwRule [] `mem_Ioi)]
            "]")
           [])
          []
          (Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "⟨"
            [(Term.app
              `mul_pos
              [(Term.app `Real.exp_pos [(Term.hole "_")])
               (Term.app
                `Real.cos_pos_of_mem_Ioo
                [(Term.anonymousCtor
                  "⟨"
                  [(Term.app
                    (Term.proj
                     («term_<|_»
                      (Term.proj `neg_lt_zero "." (fieldIdx "2"))
                      "<|"
                      (Term.app `div_pos [`Real.pi_pos `two_pos]))
                     "."
                     `trans)
                    [(Term.proj `hz "." (fieldIdx "1"))])
                   ","
                   (Term.proj `hz "." (fieldIdx "2"))]
                  "⟩")])])
             ","
             (Term.app
              `mul_pos
              [(Term.app `Real.exp_pos [(Term.hole "_")])
               (Term.app
                `Real.sin_pos_of_mem_Ioo
                [(Term.anonymousCtor
                  "⟨"
                  [(Term.proj `hz "." (fieldIdx "1"))
                   ","
                   (Term.app
                    (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
                    [(Term.app `half_lt_self [`Real.pi_pos])])]
                  "⟩")])])]
            "⟩"))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(Term.app
          `mul_pos
          [(Term.app `Real.exp_pos [(Term.hole "_")])
           (Term.app
            `Real.cos_pos_of_mem_Ioo
            [(Term.anonymousCtor
              "⟨"
              [(Term.app
                (Term.proj
                 («term_<|_»
                  (Term.proj `neg_lt_zero "." (fieldIdx "2"))
                  "<|"
                  (Term.app `div_pos [`Real.pi_pos `two_pos]))
                 "."
                 `trans)
                [(Term.proj `hz "." (fieldIdx "1"))])
               ","
               (Term.proj `hz "." (fieldIdx "2"))]
              "⟩")])])
         ","
         (Term.app
          `mul_pos
          [(Term.app `Real.exp_pos [(Term.hole "_")])
           (Term.app
            `Real.sin_pos_of_mem_Ioo
            [(Term.anonymousCtor
              "⟨"
              [(Term.proj `hz "." (fieldIdx "1"))
               ","
               (Term.app
                (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
                [(Term.app `half_lt_self [`Real.pi_pos])])]
              "⟩")])])]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app
         `mul_pos
         [(Term.app `Real.exp_pos [(Term.hole "_")])
          (Term.app
           `Real.cos_pos_of_mem_Ioo
           [(Term.anonymousCtor
             "⟨"
             [(Term.app
               (Term.proj
                («term_<|_»
                 (Term.proj `neg_lt_zero "." (fieldIdx "2"))
                 "<|"
                 (Term.app `div_pos [`Real.pi_pos `two_pos]))
                "."
                `trans)
               [(Term.proj `hz "." (fieldIdx "1"))])
              ","
              (Term.proj `hz "." (fieldIdx "2"))]
             "⟩")])])
        ","
        (Term.app
         `mul_pos
         [(Term.app `Real.exp_pos [(Term.hole "_")])
          (Term.app
           `Real.sin_pos_of_mem_Ioo
           [(Term.anonymousCtor
             "⟨"
             [(Term.proj `hz "." (fieldIdx "1"))
              ","
              (Term.app
               (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
               [(Term.app `half_lt_self [`Real.pi_pos])])]
             "⟩")])])]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_pos
       [(Term.app `Real.exp_pos [(Term.hole "_")])
        (Term.app
         `Real.sin_pos_of_mem_Ioo
         [(Term.anonymousCtor
           "⟨"
           [(Term.proj `hz "." (fieldIdx "1"))
            ","
            (Term.app
             (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
             [(Term.app `half_lt_self [`Real.pi_pos])])]
           "⟩")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.sin_pos_of_mem_Ioo
       [(Term.anonymousCtor
         "⟨"
         [(Term.proj `hz "." (fieldIdx "1"))
          ","
          (Term.app
           (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
           [(Term.app `half_lt_self [`Real.pi_pos])])]
         "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.proj `hz "." (fieldIdx "1"))
        ","
        (Term.app
         (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
         [(Term.app `half_lt_self [`Real.pi_pos])])]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
       [(Term.app `half_lt_self [`Real.pi_pos])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `half_lt_self [`Real.pi_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.pi_pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `half_lt_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `half_lt_self [`Real.pi_pos])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.sin_pos_of_mem_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Real.sin_pos_of_mem_Ioo
      [(Term.anonymousCtor
        "⟨"
        [(Term.proj `hz "." (fieldIdx "1"))
         ","
         (Term.app
          (Term.proj (Term.proj `hz "." (fieldIdx "2")) "." `trans)
          [(Term.paren "(" (Term.app `half_lt_self [`Real.pi_pos]) ")")])]
        "⟩")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_pos
       [(Term.app `Real.exp_pos [(Term.hole "_")])
        (Term.app
         `Real.cos_pos_of_mem_Ioo
         [(Term.anonymousCtor
           "⟨"
           [(Term.app
             (Term.proj
              («term_<|_»
               (Term.proj `neg_lt_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `div_pos [`Real.pi_pos `two_pos]))
              "."
              `trans)
             [(Term.proj `hz "." (fieldIdx "1"))])
            ","
            (Term.proj `hz "." (fieldIdx "2"))]
           "⟩")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.cos_pos_of_mem_Ioo
       [(Term.anonymousCtor
         "⟨"
         [(Term.app
           (Term.proj
            («term_<|_»
             (Term.proj `neg_lt_zero "." (fieldIdx "2"))
             "<|"
             (Term.app `div_pos [`Real.pi_pos `two_pos]))
            "."
            `trans)
           [(Term.proj `hz "." (fieldIdx "1"))])
          ","
          (Term.proj `hz "." (fieldIdx "2"))]
         "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app
         (Term.proj
          («term_<|_»
           (Term.proj `neg_lt_zero "." (fieldIdx "2"))
           "<|"
           (Term.app `div_pos [`Real.pi_pos `two_pos]))
          "."
          `trans)
         [(Term.proj `hz "." (fieldIdx "1"))])
        ","
        (Term.proj `hz "." (fieldIdx "2"))]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        («term_<|_»
         (Term.proj `neg_lt_zero "." (fieldIdx "2"))
         "<|"
         (Term.app `div_pos [`Real.pi_pos `two_pos]))
        "."
        `trans)
       [(Term.proj `hz "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       («term_<|_»
        (Term.proj `neg_lt_zero "." (fieldIdx "2"))
        "<|"
        (Term.app `div_pos [`Real.pi_pos `two_pos]))
       "."
       `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_»
       (Term.proj `neg_lt_zero "." (fieldIdx "2"))
       "<|"
       (Term.app `div_pos [`Real.pi_pos `two_pos]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `div_pos [`Real.pi_pos `two_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `two_pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Real.pi_pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `neg_lt_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `neg_lt_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.proj `neg_lt_zero "." (fieldIdx "2"))
      "<|"
      (Term.app `div_pos [`Real.pi_pos `two_pos]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.cos_pos_of_mem_Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Real.cos_pos_of_mem_Ioo
      [(Term.anonymousCtor
        "⟨"
        [(Term.app
          (Term.proj
           (Term.paren
            "("
            («term_<|_»
             (Term.proj `neg_lt_zero "." (fieldIdx "2"))
             "<|"
             (Term.app `div_pos [`Real.pi_pos `two_pos]))
            ")")
           "."
           `trans)
          [(Term.proj `hz "." (fieldIdx "1"))])
         ","
         (Term.proj `hz "." (fieldIdx "2"))]
        "⟩")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `mem_re_prod_im)
         ","
         (Tactic.rwRule [] `exp_re)
         ","
         (Tactic.rwRule [] `exp_im)
         ","
         (Tactic.rwRule [] `mem_Ioi)
         ","
         (Tactic.rwRule [] `mem_Ioi)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_Ioi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_Ioi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `exp_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `exp_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`z `hz])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `maps_to
       [`exp
        (Set.Data.Set.Image.«term_⁻¹'_»
         `im
         " ⁻¹' "
         (Term.app
          `Ioo
          [(num "0")
           («term_/_»
            (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
            "/"
            (num "2"))]))
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Ioi [(num "0")])
         " ×ℂ "
         (Term.app `Ioi [(num "0")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Ioi [(num "0")])
       " ×ℂ "
       (Term.app `Ioi [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Ioi [(num "0")])
      " ×ℂ "
      (Term.app `Ioi [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Set.Data.Set.Image.«term_⁻¹'_»
       `im
       " ⁻¹' "
       (Term.app
        `Ioo
        [(num "0")
         («term_/_»
          (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
          "/"
          (num "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Ioo
       [(num "0")
        («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioo
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `im
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_»
      `im
      " ⁻¹' "
      (Term.app
       `Ioo
       [(num "0")
        (Term.paren
         "("
         («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))
         ")")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `exp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `maps_to
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.change
       "change"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `exp) [`ζ]) "‖")
        "≤"
        `C)
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `exp) [`ζ]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `exp) [`ζ]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app («term_∘_» `f "∘" `exp) [`ζ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      («term_∘_» `f "∘" `exp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `exp
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 90, (some 90, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∘_» `f "∘" `exp) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.clear "clear" [`hz_re `hz_im `hzne])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hzne
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ζ)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hζ)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
             [])]
           "⟩")])]
       [":"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders
          (Lean.unbracketedExplicitBinders
           [(Lean.binderIdent `ζ)]
           [":" (Data.Complex.Basic.termℂ "ℂ")]))
         ","
         («term_∧_»
          («term_∈_»
           (Term.proj `ζ "." `im)
           "∈"
           (Term.app
            `Icc
            [(num "0")
             («term_/_»
              (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
              "/"
              (num "2"))]))
          "∧"
          («term_=_» (Term.app `exp [`ζ]) "=" `z)))]
       [":="
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.anonymousCtor
               "⟨"
               [(Term.app `log [`z]) "," (Term.hole "_") "," (Term.app `exp_log [`hzne])]
               "⟩"))
             []
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `log_im)] "]") [])
             []
             (Tactic.exact
              "exact"
              (Term.anonymousCtor
               "⟨"
               [(Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
                ","
                (Term.app
                 (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
                 [(Term.app `Or.inl [`hz_re])])]
               "⟩"))])))]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "⟨"
            [(Term.app `log [`z]) "," (Term.hole "_") "," (Term.app `exp_log [`hzne])]
            "⟩"))
          []
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `log_im)] "]") [])
          []
          (Tactic.exact
           "exact"
           (Term.anonymousCtor
            "⟨"
            [(Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
             ","
             (Term.app
              (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
              [(Term.app `Or.inl [`hz_re])])]
            "⟩"))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor
        "⟨"
        [(Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
         ","
         (Term.app
          (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
          [(Term.app `Or.inl [`hz_re])])]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
        ","
        (Term.app
         (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
         [(Term.app `Or.inl [`hz_re])])]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2")) [(Term.app `Or.inl [`hz_re])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Or.inl [`hz_re])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Or.inl
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Or.inl [`hz_re]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `arg_le_pi_div_two_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `arg_le_pi_div_two_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `arg_nonneg_iff "." (fieldIdx "2")) [`hz_im])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `arg_nonneg_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `arg_nonneg_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `log_im)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `log_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(Term.app `log [`z]) "," (Term.hole "_") "," (Term.app `exp_log [`hzne])]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app `log [`z]) "," (Term.hole "_") "," (Term.app `exp_log [`hzne])]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `exp_log [`hzne])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hzne
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exp_log
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `log [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `log
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders
        (Lean.unbracketedExplicitBinders
         [(Lean.binderIdent `ζ)]
         [":" (Data.Complex.Basic.termℂ "ℂ")]))
       ","
       («term_∧_»
        («term_∈_»
         (Term.proj `ζ "." `im)
         "∈"
         (Term.app
          `Icc
          [(num "0")
           («term_/_»
            (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
            "/"
            (num "2"))]))
        "∧"
        («term_=_» (Term.app `exp [`ζ]) "=" `z)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_∈_»
        (Term.proj `ζ "." `im)
        "∈"
        (Term.app
         `Icc
         [(num "0")
          («term_/_»
           (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
           "/"
           (num "2"))]))
       "∧"
       («term_=_» (Term.app `exp [`ζ]) "=" `z))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `exp [`ζ]) "=" `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `exp [`ζ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_∈_»
       (Term.proj `ζ "." `im)
       "∈"
       (Term.app
        `Icc
        [(num "0")
         («term_/_»
          (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
          "/"
          (num "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Icc
       [(num "0")
        («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_/_» (Real.Analysis.SpecialFunctions.Trigonometric.Basic.real.pi "π") "/" (num "2"))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `ζ "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ζ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact "exact" (Term.app `hre [(num "0") `le_rfl]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `hre [(num "0") `le_rfl]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [(num "0") `le_rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] (Term.app `eq_or_ne [`z (num "0")]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.one `rfl) "|" (Std.Tactic.RCases.rcasesPat.one `hzne)])
             [])
            ")")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_or_ne [`z (num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_or_ne
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `im))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
         "≤"
         `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
        "≤"
        `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioi [(num "0")])
            " ×ℂ "
            (Term.app `Ioi [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Ioi [(num "0")])
           " ×ℂ "
           (Term.app `Ioi [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open first quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant `C` on the boundary of the first quadrant.
    
    Then `‖f z‖` is bounded from above by the same constant on the closed first quadrant. -/
  theorem
    quadrant_I
    ( hd : DiffContOnCl ℂ f Ioi 0 ×ℂ Ioi 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , 0 ≤ x → ‖ f x ‖ ≤ C )
        ( him : ∀ x : ℝ , 0 ≤ x → ‖ f x * I ‖ ≤ C )
        ( hz_re : 0 ≤ z . re )
        ( hz_im : 0 ≤ z . im )
      : ‖ f z ‖ ≤ C
    :=
      by
        rcases eq_or_ne z 0 with ( rfl | hzne )
          · exact hre 0 le_rfl
          obtain
            ⟨ ζ , hζ , rfl ⟩
            : ∃ ζ : ℂ , ζ . im ∈ Icc 0 π / 2 ∧ exp ζ = z
            :=
              by
                refine' ⟨ log z , _ , exp_log hzne ⟩
                  rw [ log_im ]
                  exact ⟨ arg_nonneg_iff . 2 hz_im , arg_le_pi_div_two_iff . 2 Or.inl hz_re ⟩
          clear hz_re hz_im hzne
          change ‖ f ∘ exp ζ ‖ ≤ C
          have
            H
              : maps_to exp im ⁻¹' Ioo 0 π / 2 Ioi 0 ×ℂ Ioi 0
              :=
              by
                intro z hz
                  rw [ mem_re_prod_im , exp_re , exp_im , mem_Ioi , mem_Ioi ]
                  refine'
                    ⟨
                      mul_pos
                          Real.exp_pos _
                            Real.cos_pos_of_mem_Ioo
                              ⟨
                                neg_lt_zero . 2 <| div_pos Real.pi_pos two_pos . trans hz . 1
                                  ,
                                  hz . 2
                                ⟩
                        ,
                        mul_pos
                          Real.exp_pos _
                            Real.sin_pos_of_mem_Ioo
                              ⟨ hz . 1 , hz . 2 . trans half_lt_self Real.pi_pos ⟩
                      ⟩
          refine' horizontal_strip hd.comp differentiable_exp.diff_cont_on_cl H _ _ _ hζ . 1 hζ . 2
            <;>
            clear hζ ζ
          ·
            rw [ sub_zero , div_div_cancel' real.pi_pos.ne' ]
              rcases hB with ⟨ c , hc , B , hO ⟩
              refine' ⟨ c , hc , max B 0 , _ ⟩
              rw [ ← comap_comap , comap_abs_at_top , comap_sup , inf_sup_right ]
              refine'
                is_O.sup
                  _
                    hO.comp_tendsto <| tendsto_exp_comap_re_at_top.inf H.tendsto . trans
                      <|
                      is_O.of_bound 1 _
              ·
                have
                    hc
                      : ContinuousWithinAt f Ioi 0 ×ℂ Ioi 0 0
                      :=
                      by
                        refine' hd.continuous_on _ _ . mono subset_closure
                          simp [ closure_re_prod_im , mem_re_prod_im ]
                  refine'
                    hc.tendsto.comp <| tendsto_exp_comap_re_at_bot.inf H.tendsto . is_O_one ℝ
                        .
                        trans
                      is_O_of_le _ fun w => _
                  rw [ norm_one , Real.norm_of_nonneg Real.exp_pos _ . le , Real.one_le_exp_iff ]
                  exact mul_nonneg le_max_right _ _ Real.exp_pos _ . le
              ·
                simp
                    only
                    [
                      eventually_inf_principal
                        ,
                        eventually_comap
                        ,
                        comp_app
                        ,
                        one_mul
                        ,
                        Real.norm_of_nonneg Real.exp_pos _ . le
                        ,
                        abs_exp
                        ,
                        ← Real.exp_mul
                        ,
                        Real.exp_le_exp
                      ]
                  refine' eventually_ge_at_top 0 . mono fun x hx z hz hz' => _
                  rw [ hz , _root_.abs_of_nonneg hx , mul_comm _ c ]
                  exact mul_le_mul_of_nonneg_right le_max_left _ _ Real.exp_pos _ . le
          ·
            intro ζ hζ
              lift ζ to ℝ using hζ
              rw [ comp_app , ← of_real_exp ]
              exact hre _ Real.exp_pos _ . le
          ·
            intro ζ hζ
              rw
                [
                  ← re_add_im ζ
                    ,
                    hζ
                    ,
                    comp_app
                    ,
                    exp_add_mul_I
                    ,
                    ← of_real_cos
                    ,
                    ← of_real_sin
                    ,
                    Real.cos_pi_div_two
                    ,
                    Real.sin_pi_div_two
                    ,
                    of_real_zero
                    ,
                    of_real_one
                    ,
                    one_mul
                    ,
                    zero_add
                    ,
                    ← of_real_exp
                  ]
              exact him _ Real.exp_pos _ . le
#align phragmen_lindelof.quadrant_I PhragmenLindelof.quadrant_I

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open first quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the first quadrant.\n\nThen `f` is equal to zero on the closed first quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_quadrant_I [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_» (Term.app `f [`x]) "=" (num "0"))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          (num "0")
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
            "∧"
            («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
          "<|"
          (Term.app
           `quadrant_I
           [`hd
            `hB
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            (Term.proj `hz "." (fieldIdx "1"))
            (Term.proj `hz "." (fieldIdx "2"))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
         "<|"
         (Term.app
          `quadrant_I
          [`hd
           `hB
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           (Term.proj `hz "." (fieldIdx "1"))
           (Term.proj `hz "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
       "<|"
       (Term.app
        `quadrant_I
        [`hd
         `hB
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `him [`x `hx]))))
         (Term.proj `hz "." (fieldIdx "1"))
         (Term.proj `hz "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_I
       [`hd
        `hB
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `him [`x `hx]))))
        (Term.proj `hz "." (fieldIdx "1"))
        (Term.proj `hz "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        (num "0")
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
          "∧"
          («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
        "∧"
        («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
       "∧"
       («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `im))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioi [(num "0")])
            " ×ℂ "
            (Term.app `Ioi [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Ioi [(num "0")])
           " ×ℂ "
           (Term.app `Ioi [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the first quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open first quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant
      for some `A`, `B`, and `c < 2`;
    * `f` is equal to zero on the boundary of the first quadrant.
    
    Then `f` is equal to zero on the closed first quadrant. -/
  theorem
    eq_zero_on_quadrant_I
    ( hd : DiffContOnCl ℂ f Ioi 0 ×ℂ Ioi 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , 0 ≤ x → f x = 0 )
        ( him : ∀ x : ℝ , 0 ≤ x → f x * I = 0 )
      : EqOn f 0 { z | 0 ≤ z . re ∧ 0 ≤ z . im }
    :=
      fun
        z hz
          =>
          norm_le_zero_iff . 1
            <|
            quadrant_I
              hd
                hB
                fun x hx => norm_le_zero_iff . 2 <| hre x hx
                fun x hx => norm_le_zero_iff . 2 <| him x hx
                hz . 1
                hz . 2
#align phragmen_lindelof.eq_zero_on_quadrant_I PhragmenLindelof.eq_zero_on_quadrant_I

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the first quadrant. Let `f g : ℂ → E` be functions such that\n\n* `f` and `g` are differentiable in the open first quadrant and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open first\n  quadrant for some `A`, `B`, and `c < 2`;\n* `f` is equal to `g` on the boundary of the first quadrant.\n\nThen `f` is equal to `g` on the closed first quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_quadrant_I [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hdf]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hdg]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_»
             (Term.app `f [(«term_*_» `x "*" `I)])
             "="
             (Term.app `g [(«term_*_» `x "*" `I)]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          `g
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
            "∧"
            («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `sub_eq_zero "." (fieldIdx "1"))
          "<|"
          (Term.app
           `eq_zero_on_quadrant_I
           [(Term.app (Term.proj `hdf "." `sub) [`hdg])
            (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            `hz]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `sub_eq_zero "." (fieldIdx "1"))
         "<|"
         (Term.app
          `eq_zero_on_quadrant_I
          [(Term.app (Term.proj `hdf "." `sub) [`hdg])
           (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           `hz]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `sub_eq_zero "." (fieldIdx "1"))
       "<|"
       (Term.app
        `eq_zero_on_quadrant_I
        [(Term.app (Term.proj `hdf "." `sub) [`hdg])
         (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
         `hz]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eq_zero_on_quadrant_I
       [(Term.app (Term.proj `hdf "." `sub) [`hdg])
        (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
        `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_sub_exp_rpow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `hdf "." `sub) [`hdg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hdg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hdf "." `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hdf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `hdf "." `sub) [`hdg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_zero_on_quadrant_I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        `g
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
          "∧"
          («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
        "∧"
        («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
       "∧"
       («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `im))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_=_»
         (Term.app `f [(«term_*_» `x "*" `I)])
         "="
         (Term.app `g [(«term_*_» `x "*" `I)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `g
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `g
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioi [(num "0")])
            " ×ℂ "
            (Term.app `Ioi [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `g
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Ioi [(num "0")])
           " ×ℂ "
           (Term.app `Ioi [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the first quadrant. Let `f g : ℂ → E` be functions such that
    
    * `f` and `g` are differentiable in the open first quadrant and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open first
      quadrant for some `A`, `B`, and `c < 2`;
    * `f` is equal to `g` on the boundary of the first quadrant.
    
    Then `f` is equal to `g` on the closed first quadrant. -/
  theorem
    eq_on_quadrant_I
    ( hdf : DiffContOnCl ℂ f Ioi 0 ×ℂ Ioi 0 )
        (
          hBf
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hdg : DiffContOnCl ℂ g Ioi 0 ×ℂ Ioi 0 )
        (
          hBg
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , g =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , 0 ≤ x → f x = g x )
        ( him : ∀ x : ℝ , 0 ≤ x → f x * I = g x * I )
      : EqOn f g { z | 0 ≤ z . re ∧ 0 ≤ z . im }
    :=
      fun
        z hz
          =>
          sub_eq_zero . 1
            <|
            eq_zero_on_quadrant_I
              hdf . sub hdg
                is_O_sub_exp_rpow hBf hBg
                fun x hx => sub_eq_zero . 2 <| hre x hx
                fun x hx => sub_eq_zero . 2 <| him x hx
                hz
#align phragmen_lindelof.eq_on_quadrant_I PhragmenLindelof.eq_on_quadrant_I

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the second quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open second quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open second quadrant\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the second quadrant.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed second quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `quadrant_II [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_re]
         [":" («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_im]
         [":" («term_≤_» (num "0") "≤" (Term.proj `z "." `im))]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
              ","
              («term_=_» («term_*_» `z' "*" `I) "=" `z))]
            [])
           []
           (Tactic.exact
            "exact"
            (Term.anonymousCtor
             "⟨"
             [(«term_/_» `z "/" `I) "," (Term.app `div_mul_cancel [(Term.hole "_") `I_ne_zero])]
             "⟩"))
           []
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma [] [] `mul_I_re)
              ","
              (Tactic.simpLemma [] [] `mul_I_im)
              ","
              (Tactic.simpLemma [] [] `neg_nonpos)]
             "]"]
            [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
           []
           (Tactic.change
            "change"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖»
              "‖"
              (Term.app
               («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")"))
               [`z])
              "‖")
             "≤"
             `C)
            [])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `maps_to
                 [(Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Ioi [(num "0")])
                   " ×ℂ "
                   (Term.app `Ioi [(num "0")]))
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Iio [(num "0")])
                   " ×ℂ "
                   (Term.app `Ioi [(num "0")]))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`w `hw])
                  []
                  (Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs
                      "["
                      [(Tactic.simpLemma [] [] `mem_re_prod_im)
                       ","
                       (Tactic.simpLemma [] [] `mul_I_re)
                       ","
                       (Tactic.simpLemma [] [] `mul_I_im)
                       ","
                       (Tactic.simpLemma [] [] `neg_lt_zero)
                       ","
                       (Tactic.simpLemma [] [] `mem_Iio)]
                      "]")]
                    ["using" `hw.symm]))]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `quadrant_I
             [(Term.app
               `hd.comp
               [(Term.proj
                 (Term.app `differentiable_id.mul_const [(Term.hole "_")])
                 "."
                 `DiffContOnCl)
                `H])
              (Term.app
               `Exists₃Cat.imp
               [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
              `him
              (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
              `hz_im
              `hz_re]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                  ","
                  (Tactic.simpLemma [] [] `map_mul)
                  ","
                  (Tactic.simpLemma [] [] `abs_I)
                  ","
                  (Tactic.simpLemma [] [] `mul_one)]
                 "]")]
               ["using"
                (Term.app
                 `hO.comp_tendsto
                 [(Term.app
                   (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
                   [`H.tendsto])])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [] `mul_assoc)
                ","
                (Tactic.rwRule [] `I_mul_I)
                ","
                (Tactic.rwRule [] `mul_neg_one)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `hre
               [(Term.hole "_") (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
             ","
             («term_=_» («term_*_» `z' "*" `I) "=" `z))]
           [])
          []
          (Tactic.exact
           "exact"
           (Term.anonymousCtor
            "⟨"
            [(«term_/_» `z "/" `I) "," (Term.app `div_mul_cancel [(Term.hole "_") `I_ne_zero])]
            "⟩"))
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `mul_I_re)
             ","
             (Tactic.simpLemma [] [] `mul_I_im)
             ","
             (Tactic.simpLemma [] [] `neg_nonpos)]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
          []
          (Tactic.change
           "change"
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖»
             "‖"
             (Term.app
              («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")"))
              [`z])
             "‖")
            "≤"
            `C)
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`H []]
             [(Term.typeSpec
               ":"
               (Term.app
                `maps_to
                [(Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Ioi [(num "0")])
                  " ×ℂ "
                  (Term.app `Ioi [(num "0")]))
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Iio [(num "0")])
                  " ×ℂ "
                  (Term.app `Ioi [(num "0")]))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`w `hw])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `mem_re_prod_im)
                      ","
                      (Tactic.simpLemma [] [] `mul_I_re)
                      ","
                      (Tactic.simpLemma [] [] `mul_I_im)
                      ","
                      (Tactic.simpLemma [] [] `neg_lt_zero)
                      ","
                      (Tactic.simpLemma [] [] `mem_Iio)]
                     "]")]
                   ["using" `hw.symm]))]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `quadrant_I
            [(Term.app
              `hd.comp
              [(Term.proj
                (Term.app `differentiable_id.mul_const [(Term.hole "_")])
                "."
                `DiffContOnCl)
               `H])
             (Term.app
              `Exists₃Cat.imp
              [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
             `him
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
             `hz_im
             `hz_re]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs
                "["
                [(Tactic.simpLemma
                  []
                  []
                  (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                 ","
                 (Tactic.simpLemma [] [] `map_mul)
                 ","
                 (Tactic.simpLemma [] [] `abs_I)
                 ","
                 (Tactic.simpLemma [] [] `mul_one)]
                "]")]
              ["using"
               (Term.app
                `hO.comp_tendsto
                [(Term.app
                  (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
                  [`H.tendsto])])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [] `mul_assoc)
               ","
               (Tactic.rwRule [] `I_mul_I)
               ","
               (Tactic.rwRule [] `mul_neg_one)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hre
              [(Term.hole "_") (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [] `mul_assoc)
           ","
           (Tactic.rwRule [] `I_mul_I)
           ","
           (Tactic.rwRule [] `mul_neg_one)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hre
          [(Term.hole "_") (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hre
        [(Term.hole "_") (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [(Term.hole "_") (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `neg_nonpos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [] `mul_assoc)
         ","
         (Tactic.rwRule [] `I_mul_I)
         ","
         (Tactic.rwRule [] `mul_neg_one)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_neg_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I_mul_I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          ["only"]
          [(Tactic.simpArgs
            "["
            [(Tactic.simpLemma
              []
              []
              (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
             ","
             (Tactic.simpLemma [] [] `map_mul)
             ","
             (Tactic.simpLemma [] [] `abs_I)
             ","
             (Tactic.simpLemma [] [] `mul_one)]
            "]")]
          ["using"
           (Term.app
            `hO.comp_tendsto
            [(Term.app
              (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
              [`H.tendsto])])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
           ","
           (Tactic.simpLemma [] [] `map_mul)
           ","
           (Tactic.simpLemma [] [] `abs_I)
           ","
           (Tactic.simpLemma [] [] `mul_one)]
          "]")]
        ["using"
         (Term.app
          `hO.comp_tendsto
          [(Term.app
            (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
            [`H.tendsto])])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hO.comp_tendsto
       [(Term.app
         (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
         [`H.tendsto])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
       [`H.tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H.tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) "." `inf)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `tendsto_mul_right_cobounded [`I_ne_zero])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_mul_right_cobounded
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `tendsto_mul_right_cobounded [`I_ne_zero])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `tendsto_mul_right_cobounded [`I_ne_zero]) ")") "." `inf)
      [`H.tendsto])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hO.comp_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `abs_I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `quadrant_I
        [(Term.app
          `hd.comp
          [(Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl)
           `H])
         (Term.app
          `Exists₃Cat.imp
          [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
         `him
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
         `hz_im
         `hz_re]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_I
       [(Term.app
         `hd.comp
         [(Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl)
          `H])
        (Term.app
         `Exists₃Cat.imp
         [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
        `him
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
        `hz_im
        `hz_re])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Exists₃Cat.imp
       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Exists₃Cat.imp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Exists₃Cat.imp
      [(Term.paren "(" (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) ")")
       `hB])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `hd.comp
       [(Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl) `H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `differentiable_id.mul_const [(Term.hole "_")]) "." `DiffContOnCl)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `differentiable_id.mul_const [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `differentiable_id.mul_const
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `differentiable_id.mul_const [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hd.comp
      [(Term.proj
        (Term.paren "(" (Term.app `differentiable_id.mul_const [(Term.hole "_")]) ")")
        "."
        `DiffContOnCl)
       `H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         [(Term.typeSpec
           ":"
           (Term.app
            `maps_to
            [(Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Ioi [(num "0")])
              " ×ℂ "
              (Term.app `Ioi [(num "0")]))
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Iio [(num "0")])
              " ×ℂ "
              (Term.app `Ioi [(num "0")]))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`w `hw])
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma [] [] `mem_re_prod_im)
                  ","
                  (Tactic.simpLemma [] [] `mul_I_re)
                  ","
                  (Tactic.simpLemma [] [] `mul_I_im)
                  ","
                  (Tactic.simpLemma [] [] `neg_lt_zero)
                  ","
                  (Tactic.simpLemma [] [] `mem_Iio)]
                 "]")]
               ["using" `hw.symm]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`w `hw])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            ["only"]
            [(Tactic.simpArgs
              "["
              [(Tactic.simpLemma [] [] `mem_re_prod_im)
               ","
               (Tactic.simpLemma [] [] `mul_I_re)
               ","
               (Tactic.simpLemma [] [] `mul_I_im)
               ","
               (Tactic.simpLemma [] [] `neg_lt_zero)
               ","
               (Tactic.simpLemma [] [] `mem_Iio)]
              "]")]
            ["using" `hw.symm]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma [] [] `mem_re_prod_im)
           ","
           (Tactic.simpLemma [] [] `mul_I_re)
           ","
           (Tactic.simpLemma [] [] `mul_I_im)
           ","
           (Tactic.simpLemma [] [] `neg_lt_zero)
           ","
           (Tactic.simpLemma [] [] `mem_Iio)]
          "]")]
        ["using" `hw.symm]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw.symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_Iio
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_lt_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_I_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_I_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `maps_to
       [(Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Ioi [(num "0")])
         " ×ℂ "
         (Term.app `Ioi [(num "0")]))
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Iio [(num "0")])
         " ×ℂ "
         (Term.app `Ioi [(num "0")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Iio [(num "0")])
       " ×ℂ "
       (Term.app `Ioi [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Iio [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Iio [(num "0")])
      " ×ℂ "
      (Term.app `Ioi [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Ioi [(num "0")])
       " ×ℂ "
       (Term.app `Ioi [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Ioi [(num "0")])
      " ×ℂ "
      (Term.app `Ioi [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» (Term.cdot "·") "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `maps_to
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.change
       "change"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖»
         "‖"
         (Term.app («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")) [`z])
         "‖")
        "≤"
        `C)
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖»
        "‖"
        (Term.app («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")) [`z])
        "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖»
       "‖"
       (Term.app («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")) [`z])
       "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")) [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» (Term.cdot "·") "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 90, (some 90, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_∘_» `f "∘" (Term.paren "(" («term_*_» (Term.cdot "·") "*" `I) ")"))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `mul_I_re)
         ","
         (Tactic.simpLemma [] [] `mul_I_im)
         ","
         (Tactic.simpLemma [] [] `neg_nonpos)]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_I_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_I_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor
        "⟨"
        [(«term_/_» `z "/" `I) "," (Term.app `div_mul_cancel [(Term.hole "_") `I_ne_zero])]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(«term_/_» `z "/" `I) "," (Term.app `div_mul_cancel [(Term.hole "_") `I_ne_zero])]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `div_mul_cancel [(Term.hole "_") `I_ne_zero])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_mul_cancel
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_/_» `z "/" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
             [])]
           "⟩")])]
       [":"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
         ","
         («term_=_» («term_*_» `z' "*" `I) "=" `z))]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
       ","
       («term_=_» («term_*_» `z' "*" `I) "=" `z))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» («term_*_» `z' "*" `I) "=" `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_*_» `z' "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z'
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `im))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
         "≤"
         `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
        "≤"
        `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Iio [(num "0")])
            " ×ℂ "
            (Term.app `Ioi [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Iio [(num "0")])
           " ×ℂ "
           (Term.app `Ioi [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the second quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open second quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open second quadrant
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant `C` on the boundary of the second quadrant.
    
    Then `‖f z‖` is bounded from above by the same constant on the closed second quadrant. -/
  theorem
    quadrant_II
    ( hd : DiffContOnCl ℂ f Iio 0 ×ℂ Ioi 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , x ≤ 0 → ‖ f x ‖ ≤ C )
        ( him : ∀ x : ℝ , 0 ≤ x → ‖ f x * I ‖ ≤ C )
        ( hz_re : z . re ≤ 0 )
        ( hz_im : 0 ≤ z . im )
      : ‖ f z ‖ ≤ C
    :=
      by
        obtain ⟨ z , rfl ⟩ : ∃ z' , z' * I = z
          exact ⟨ z / I , div_mul_cancel _ I_ne_zero ⟩
          simp only [ mul_I_re , mul_I_im , neg_nonpos ] at hz_re hz_im
          change ‖ f ∘ ( · * I ) z ‖ ≤ C
          have
            H
              : maps_to ( · * I ) Ioi 0 ×ℂ Ioi 0 Iio 0 ×ℂ Ioi 0
              :=
              by
                intro w hw
                  simpa
                    only
                      [ mem_re_prod_im , mul_I_re , mul_I_im , neg_lt_zero , mem_Iio ]
                      using hw.symm
          refine'
            quadrant_I
              hd.comp differentiable_id.mul_const _ . DiffContOnCl H
                Exists₃Cat.imp fun c hc B hO => _ hB
                him
                fun x hx => _
                hz_im
                hz_re
          ·
            simpa
              only
                [ ( · ∘ · ) , map_mul , abs_I , mul_one ]
                using hO.comp_tendsto tendsto_mul_right_cobounded I_ne_zero . inf H.tendsto
          ·
            rw [ comp_app , mul_assoc , I_mul_I , mul_neg_one , ← of_real_neg ]
              exact hre _ neg_nonpos . 2 hx
#align phragmen_lindelof.quadrant_II PhragmenLindelof.quadrant_II

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the second quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open second quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open second quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the second quadrant.\n\nThen `f` is equal to zero on the closed second quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_quadrant_II [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_» (Term.app `f [`x]) "=" (num "0"))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          (num "0")
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
            "∧"
            («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
          "<|"
          (Term.app
           `quadrant_II
           [`hd
            `hB
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            (Term.proj `hz "." (fieldIdx "1"))
            (Term.proj `hz "." (fieldIdx "2"))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
         "<|"
         (Term.app
          `quadrant_II
          [`hd
           `hB
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           (Term.proj `hz "." (fieldIdx "1"))
           (Term.proj `hz "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
       "<|"
       (Term.app
        `quadrant_II
        [`hd
         `hB
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `him [`x `hx]))))
         (Term.proj `hz "." (fieldIdx "1"))
         (Term.proj `hz "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_II
       [`hd
        `hB
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `him [`x `hx]))))
        (Term.proj `hz "." (fieldIdx "1"))
        (Term.proj `hz "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_II
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        (num "0")
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
          "∧"
          («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
        "∧"
        («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
       "∧"
       («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `im))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow («term_≤_» `x "≤" (num "0")) "→" («term_=_» (Term.app `f [`x]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow («term_≤_» `x "≤" (num "0")) "→" («term_=_» (Term.app `f [`x]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Iio [(num "0")])
            " ×ℂ "
            (Term.app `Ioi [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Iio [(num "0")])
           " ×ℂ "
           (Term.app `Ioi [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the second quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open second quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open second quadrant
      for some `A`, `B`, and `c < 2`;
    * `f` is equal to zero on the boundary of the second quadrant.
    
    Then `f` is equal to zero on the closed second quadrant. -/
  theorem
    eq_zero_on_quadrant_II
    ( hd : DiffContOnCl ℂ f Iio 0 ×ℂ Ioi 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , x ≤ 0 → f x = 0 )
        ( him : ∀ x : ℝ , 0 ≤ x → f x * I = 0 )
      : EqOn f 0 { z | z . re ≤ 0 ∧ 0 ≤ z . im }
    :=
      fun
        z hz
          =>
          norm_le_zero_iff . 1
            <|
            quadrant_II
              hd
                hB
                fun x hx => norm_le_zero_iff . 2 <| hre x hx
                fun x hx => norm_le_zero_iff . 2 <| him x hx
                hz . 1
                hz . 2
#align phragmen_lindelof.eq_zero_on_quadrant_II PhragmenLindelof.eq_zero_on_quadrant_II

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the second quadrant. Let `f g : ℂ → E` be functions such that\n\n* `f` and `g` are differentiable in the open second quadrant and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open second\n  quadrant for some `A`, `B`, and `c < 2`;\n* `f` is equal to `g` on the boundary of the second quadrant.\n\nThen `f` is equal to `g` on the closed second quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_quadrant_II [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hdf]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hdg]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Ioi [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_»
             (Term.app `f [(«term_*_» `x "*" `I)])
             "="
             (Term.app `g [(«term_*_» `x "*" `I)]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          `g
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
            "∧"
            («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `sub_eq_zero "." (fieldIdx "1"))
          "<|"
          (Term.app
           `eq_zero_on_quadrant_II
           [(Term.app (Term.proj `hdf "." `sub) [`hdg])
            (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            `hz]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `sub_eq_zero "." (fieldIdx "1"))
         "<|"
         (Term.app
          `eq_zero_on_quadrant_II
          [(Term.app (Term.proj `hdf "." `sub) [`hdg])
           (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           `hz]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `sub_eq_zero "." (fieldIdx "1"))
       "<|"
       (Term.app
        `eq_zero_on_quadrant_II
        [(Term.app (Term.proj `hdf "." `sub) [`hdg])
         (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
         `hz]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eq_zero_on_quadrant_II
       [(Term.app (Term.proj `hdf "." `sub) [`hdg])
        (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
        `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_sub_exp_rpow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `hdf "." `sub) [`hdg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hdg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hdf "." `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hdf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `hdf "." `sub) [`hdg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_zero_on_quadrant_II
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        `g
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
          "∧"
          («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
        "∧"
        («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
       "∧"
       («term_≤_» (num "0") "≤" (Term.proj `z "." `im)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `im))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_=_»
         (Term.app `f [(«term_*_» `x "*" `I)])
         "="
         (Term.app `g [(«term_*_» `x "*" `I)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `g
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Ioi [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `g
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Iio [(num "0")])
            " ×ℂ "
            (Term.app `Ioi [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `g
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Iio [(num "0")])
           " ×ℂ "
           (Term.app `Ioi [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the second quadrant. Let `f g : ℂ → E` be functions such that
    
    * `f` and `g` are differentiable in the open second quadrant and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open second
      quadrant for some `A`, `B`, and `c < 2`;
    * `f` is equal to `g` on the boundary of the second quadrant.
    
    Then `f` is equal to `g` on the closed second quadrant. -/
  theorem
    eq_on_quadrant_II
    ( hdf : DiffContOnCl ℂ f Iio 0 ×ℂ Ioi 0 )
        (
          hBf
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hdg : DiffContOnCl ℂ g Iio 0 ×ℂ Ioi 0 )
        (
          hBg
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , g =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Ioi 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , x ≤ 0 → f x = g x )
        ( him : ∀ x : ℝ , 0 ≤ x → f x * I = g x * I )
      : EqOn f g { z | z . re ≤ 0 ∧ 0 ≤ z . im }
    :=
      fun
        z hz
          =>
          sub_eq_zero . 1
            <|
            eq_zero_on_quadrant_II
              hdf . sub hdg
                is_O_sub_exp_rpow hBf hBg
                fun x hx => sub_eq_zero . 2 <| hre x hx
                fun x hx => sub_eq_zero . 2 <| him x hx
                hz
#align phragmen_lindelof.eq_on_quadrant_II PhragmenLindelof.eq_on_quadrant_II

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp (B * (abs z) ^ c)` on the open third quadrant\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the third quadrant.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed third quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `quadrant_III [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_re]
         [":" («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_im]
         [":" («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
              ","
              («term_=_» («term-_» "-" `z') "=" `z))]
            [])
           []
           (Tactic.exact
            "exact"
            (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩"))
           []
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma [] [] `neg_re)
              ","
              (Tactic.simpLemma [] [] `neg_im)
              ","
              (Tactic.simpLemma [] [] `neg_nonpos)]
             "]"]
            [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
           []
           (Tactic.change
            "change"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖»
              "‖"
              (Term.app («term_∘_» `f "∘" `Neg.neg) [`z])
              "‖")
             "≤"
             `C)
            [])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `maps_to
                 [`Neg.neg
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Ioi [(num "0")])
                   " ×ℂ "
                   (Term.app `Ioi [(num "0")]))
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Iio [(num "0")])
                   " ×ℂ "
                   (Term.app `Iio [(num "0")]))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`w `hw])
                  []
                  (Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs
                      "["
                      [(Tactic.simpLemma [] [] `mem_re_prod_im)
                       ","
                       (Tactic.simpLemma [] [] `neg_re)
                       ","
                       (Tactic.simpLemma [] [] `neg_im)
                       ","
                       (Tactic.simpLemma [] [] `neg_lt_zero)
                       ","
                       (Tactic.simpLemma [] [] `mem_Iio)]
                      "]")]
                    ["using" `hw]))]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `quadrant_I
             [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
              (Term.hole "_")
              (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
              (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
              `hz_re
              `hz_im]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.refine'
              "refine'"
              (Term.app
               `Exists₃Cat.imp
               [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                  ","
                  (Tactic.simpLemma [] [] `complex.abs.map_neg)]
                 "]")]
               ["using"
                (Term.app
                 `hO.comp_tendsto
                 [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `hre
               [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `him
               [(«term-_» "-" `x)
                (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
             ","
             («term_=_» («term-_» "-" `z') "=" `z))]
           [])
          []
          (Tactic.exact
           "exact"
           (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩"))
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `neg_re)
             ","
             (Tactic.simpLemma [] [] `neg_im)
             ","
             (Tactic.simpLemma [] [] `neg_nonpos)]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
          []
          (Tactic.change
           "change"
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖»
             "‖"
             (Term.app («term_∘_» `f "∘" `Neg.neg) [`z])
             "‖")
            "≤"
            `C)
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`H []]
             [(Term.typeSpec
               ":"
               (Term.app
                `maps_to
                [`Neg.neg
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Ioi [(num "0")])
                  " ×ℂ "
                  (Term.app `Ioi [(num "0")]))
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Iio [(num "0")])
                  " ×ℂ "
                  (Term.app `Iio [(num "0")]))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`w `hw])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `mem_re_prod_im)
                      ","
                      (Tactic.simpLemma [] [] `neg_re)
                      ","
                      (Tactic.simpLemma [] [] `neg_im)
                      ","
                      (Tactic.simpLemma [] [] `neg_lt_zero)
                      ","
                      (Tactic.simpLemma [] [] `mem_Iio)]
                     "]")]
                   ["using" `hw]))]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `quadrant_I
            [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
             (Term.hole "_")
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
             `hz_re
             `hz_im]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              `Exists₃Cat.imp
              [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs
                "["
                [(Tactic.simpLemma
                  []
                  []
                  (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                 ","
                 (Tactic.simpLemma [] [] `complex.abs.map_neg)]
                "]")]
              ["using"
               (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hre
              [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `him
              [(«term-_» "-" `x)
               (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `him
          [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `him
        [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `him
       [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `neg_nonpos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term-_» "-" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" `x) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hre
          [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hre
        [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hre
       [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `neg_nonpos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term-_» "-" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" `x) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          `Exists₃Cat.imp
          [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          ["only"]
          [(Tactic.simpArgs
            "["
            [(Tactic.simpLemma
              []
              []
              (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
             ","
             (Tactic.simpLemma [] [] `complex.abs.map_neg)]
            "]")]
          ["using"
           (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
           ","
           (Tactic.simpLemma [] [] `complex.abs.map_neg)]
          "]")]
        ["using" (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_neg_cobounded.inf [`H.tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H.tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_neg_cobounded.inf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `tendsto_neg_cobounded.inf [`H.tendsto])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hO.comp_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `complex.abs.map_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `Exists₃Cat.imp
        [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Exists₃Cat.imp
       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Exists₃Cat.imp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `quadrant_I
        [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
         (Term.hole "_")
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
         `hz_re
         `hz_im]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_I
       [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
        (Term.hole "_")
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
        `hz_re
        `hz_im])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `differentiable_neg.diff_cont_on_cl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         [(Term.typeSpec
           ":"
           (Term.app
            `maps_to
            [`Neg.neg
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Ioi [(num "0")])
              " ×ℂ "
              (Term.app `Ioi [(num "0")]))
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Iio [(num "0")])
              " ×ℂ "
              (Term.app `Iio [(num "0")]))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`w `hw])
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma [] [] `mem_re_prod_im)
                  ","
                  (Tactic.simpLemma [] [] `neg_re)
                  ","
                  (Tactic.simpLemma [] [] `neg_im)
                  ","
                  (Tactic.simpLemma [] [] `neg_lt_zero)
                  ","
                  (Tactic.simpLemma [] [] `mem_Iio)]
                 "]")]
               ["using" `hw]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`w `hw])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            ["only"]
            [(Tactic.simpArgs
              "["
              [(Tactic.simpLemma [] [] `mem_re_prod_im)
               ","
               (Tactic.simpLemma [] [] `neg_re)
               ","
               (Tactic.simpLemma [] [] `neg_im)
               ","
               (Tactic.simpLemma [] [] `neg_lt_zero)
               ","
               (Tactic.simpLemma [] [] `mem_Iio)]
              "]")]
            ["using" `hw]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma [] [] `mem_re_prod_im)
           ","
           (Tactic.simpLemma [] [] `neg_re)
           ","
           (Tactic.simpLemma [] [] `neg_im)
           ","
           (Tactic.simpLemma [] [] `neg_lt_zero)
           ","
           (Tactic.simpLemma [] [] `mem_Iio)]
          "]")]
        ["using" `hw]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_Iio
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_lt_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `maps_to
       [`Neg.neg
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Ioi [(num "0")])
         " ×ℂ "
         (Term.app `Ioi [(num "0")]))
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Iio [(num "0")])
         " ×ℂ "
         (Term.app `Iio [(num "0")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Iio [(num "0")])
       " ×ℂ "
       (Term.app `Iio [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Iio [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Iio [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Iio [(num "0")])
      " ×ℂ "
      (Term.app `Iio [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Ioi [(num "0")])
       " ×ℂ "
       (Term.app `Ioi [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Ioi [(num "0")])
      " ×ℂ "
      (Term.app `Ioi [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Neg.neg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `maps_to
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.change
       "change"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `Neg.neg) [`z]) "‖")
        "≤"
        `C)
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `Neg.neg) [`z]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `Neg.neg) [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app («term_∘_» `f "∘" `Neg.neg) [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      («term_∘_» `f "∘" `Neg.neg)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Neg.neg
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 90, (some 90, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∘_» `f "∘" `Neg.neg) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `neg_re)
         ","
         (Tactic.simpLemma [] [] `neg_im)
         ","
         (Tactic.simpLemma [] [] `neg_nonpos)]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `neg_neg [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `neg_neg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
             [])]
           "⟩")])]
       [":"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
         ","
         («term_=_» («term-_» "-" `z') "=" `z))]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
       ","
       («term_=_» («term-_» "-" `z') "=" `z))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» («term-_» "-" `z') "=" `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term-_» "-" `z')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z'
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 75, (some 75, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
         "≤"
         `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
        "≤"
        `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Iio [(num "0")])
            " ×ℂ "
            (Term.app `Iio [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Iio [(num "0")])
           " ×ℂ "
           (Term.app `Iio [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open third quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp (B * (abs z) ^ c)` on the open third quadrant
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant `C` on the boundary of the third quadrant.
    
    Then `‖f z‖` is bounded from above by the same constant on the closed third quadrant. -/
  theorem
    quadrant_III
    ( hd : DiffContOnCl ℂ f Iio 0 ×ℂ Iio 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , x ≤ 0 → ‖ f x ‖ ≤ C )
        ( him : ∀ x : ℝ , x ≤ 0 → ‖ f x * I ‖ ≤ C )
        ( hz_re : z . re ≤ 0 )
        ( hz_im : z . im ≤ 0 )
      : ‖ f z ‖ ≤ C
    :=
      by
        obtain ⟨ z , rfl ⟩ : ∃ z' , - z' = z
          exact ⟨ - z , neg_neg z ⟩
          simp only [ neg_re , neg_im , neg_nonpos ] at hz_re hz_im
          change ‖ f ∘ Neg.neg z ‖ ≤ C
          have
            H
              : maps_to Neg.neg Ioi 0 ×ℂ Ioi 0 Iio 0 ×ℂ Iio 0
              :=
              by
                intro w hw
                  simpa only [ mem_re_prod_im , neg_re , neg_im , neg_lt_zero , mem_Iio ] using hw
          refine'
            quadrant_I
              hd.comp differentiable_neg.diff_cont_on_cl H _ fun x hx => _ fun x hx => _ hz_re hz_im
          ·
            refine' Exists₃Cat.imp fun c hc B hO => _ hB
              simpa
                only
                  [ ( · ∘ · ) , complex.abs.map_neg ]
                  using hO.comp_tendsto tendsto_neg_cobounded.inf H.tendsto
          · rw [ comp_app , ← of_real_neg ] exact hre - x neg_nonpos . 2 hx
          · rw [ comp_app , ← neg_mul , ← of_real_neg ] exact him - x neg_nonpos . 2 hx
#align phragmen_lindelof.quadrant_III PhragmenLindelof.quadrant_III

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open third quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the third quadrant.\n\nThen `f` is equal to zero on the closed third quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_quadrant_III [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_» (Term.app `f [`x]) "=" (num "0"))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          (num "0")
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
            "∧"
            («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
          "<|"
          (Term.app
           `quadrant_III
           [`hd
            `hB
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            (Term.proj `hz "." (fieldIdx "1"))
            (Term.proj `hz "." (fieldIdx "2"))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
         "<|"
         (Term.app
          `quadrant_III
          [`hd
           `hB
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           (Term.proj `hz "." (fieldIdx "1"))
           (Term.proj `hz "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
       "<|"
       (Term.app
        `quadrant_III
        [`hd
         `hB
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `him [`x `hx]))))
         (Term.proj `hz "." (fieldIdx "1"))
         (Term.proj `hz "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_III
       [`hd
        `hB
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `him [`x `hx]))))
        (Term.proj `hz "." (fieldIdx "1"))
        (Term.proj `hz "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_III
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        (num "0")
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
          "∧"
          («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
        "∧"
        («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
       "∧"
       («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow («term_≤_» `x "≤" (num "0")) "→" («term_=_» (Term.app `f [`x]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow («term_≤_» `x "≤" (num "0")) "→" («term_=_» (Term.app `f [`x]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Iio [(num "0")])
            " ×ℂ "
            (Term.app `Iio [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Iio [(num "0")])
           " ×ℂ "
           (Term.app `Iio [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the third quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open third quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant
      for some `A`, `B`, and `c < 2`;
    * `f` is equal to zero on the boundary of the third quadrant.
    
    Then `f` is equal to zero on the closed third quadrant. -/
  theorem
    eq_zero_on_quadrant_III
    ( hd : DiffContOnCl ℂ f Iio 0 ×ℂ Iio 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , x ≤ 0 → f x = 0 )
        ( him : ∀ x : ℝ , x ≤ 0 → f x * I = 0 )
      : EqOn f 0 { z | z . re ≤ 0 ∧ z . im ≤ 0 }
    :=
      fun
        z hz
          =>
          norm_le_zero_iff . 1
            <|
            quadrant_III
              hd
                hB
                fun x hx => norm_le_zero_iff . 2 <| hre x hx
                fun x hx => norm_le_zero_iff . 2 <| him x hx
                hz . 1
                hz . 2
#align phragmen_lindelof.eq_zero_on_quadrant_III PhragmenLindelof.eq_zero_on_quadrant_III

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the third quadrant. Let `f g : ℂ → E` be functions such that\n\n* `f` and `g` are differentiable in the open third quadrant and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open third\n  quadrant for some `A`, `B`, and `c < 2`;\n* `f` is equal to `g` on the boundary of the third quadrant.\n\nThen `f` is equal to `g` on the closed third quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_quadrant_III [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hdf]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hdg]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Iio [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_»
             (Term.app `f [(«term_*_» `x "*" `I)])
             "="
             (Term.app `g [(«term_*_» `x "*" `I)]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          `g
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
            "∧"
            («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `sub_eq_zero "." (fieldIdx "1"))
          "<|"
          (Term.app
           `eq_zero_on_quadrant_III
           [(Term.app (Term.proj `hdf "." `sub) [`hdg])
            (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            `hz]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `sub_eq_zero "." (fieldIdx "1"))
         "<|"
         (Term.app
          `eq_zero_on_quadrant_III
          [(Term.app (Term.proj `hdf "." `sub) [`hdg])
           (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           `hz]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `sub_eq_zero "." (fieldIdx "1"))
       "<|"
       (Term.app
        `eq_zero_on_quadrant_III
        [(Term.app (Term.proj `hdf "." `sub) [`hdg])
         (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
         `hz]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eq_zero_on_quadrant_III
       [(Term.app (Term.proj `hdf "." `sub) [`hdg])
        (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
        `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_sub_exp_rpow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `hdf "." `sub) [`hdg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hdg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hdf "." `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hdf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `hdf "." `sub) [`hdg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_zero_on_quadrant_III
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        `g
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
          "∧"
          («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
        "∧"
        («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
       "∧"
       («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (Term.proj `z "." `re) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_=_»
         (Term.app `f [(«term_*_» `x "*" `I)])
         "="
         (Term.app `g [(«term_*_» `x "*" `I)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `g
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Iio [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `g
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Iio [(num "0")])
            " ×ℂ "
            (Term.app `Iio [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `g
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Iio [(num "0")])
           " ×ℂ "
           (Term.app `Iio [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the third quadrant. Let `f g : ℂ → E` be functions such that
    
    * `f` and `g` are differentiable in the open third quadrant and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open third
      quadrant for some `A`, `B`, and `c < 2`;
    * `f` is equal to `g` on the boundary of the third quadrant.
    
    Then `f` is equal to `g` on the closed third quadrant. -/
  theorem
    eq_on_quadrant_III
    ( hdf : DiffContOnCl ℂ f Iio 0 ×ℂ Iio 0 )
        (
          hBf
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hdg : DiffContOnCl ℂ g Iio 0 ×ℂ Iio 0 )
        (
          hBg
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , g =O[ comap Complex.abs atTop ⊓ 𝓟 Iio 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , x ≤ 0 → f x = g x )
        ( him : ∀ x : ℝ , x ≤ 0 → f x * I = g x * I )
      : EqOn f g { z | z . re ≤ 0 ∧ z . im ≤ 0 }
    :=
      fun
        z hz
          =>
          sub_eq_zero . 1
            <|
            eq_zero_on_quadrant_III
              hdf . sub hdg
                is_O_sub_exp_rpow hBf hBg
                fun x hx => sub_eq_zero . 2 <| hre x hx
                fun x hx => sub_eq_zero . 2 <| him x hx
                hz
#align phragmen_lindelof.eq_on_quadrant_III PhragmenLindelof.eq_on_quadrant_III

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the fourth quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open fourth quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the boundary of the fourth quadrant.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed fourth quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `quadrant_IV [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_re]
         [":" («term_≤_» (num "0") "≤" (Term.proj `z "." `re))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz_im]
         [":" («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
              ","
              («term_=_» («term-_» "-" `z') "=" `z))]
            [])
           []
           (Tactic.exact
            "exact"
            (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩"))
           []
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma [] [] `neg_re)
              ","
              (Tactic.simpLemma [] [] `neg_im)
              ","
              (Tactic.simpLemma [] [] `neg_nonpos)
              ","
              (Tactic.simpLemma [] [] `neg_nonneg)]
             "]"]
            [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
           []
           (Tactic.change
            "change"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖»
              "‖"
              (Term.app («term_∘_» `f "∘" `Neg.neg) [`z])
              "‖")
             "≤"
             `C)
            [])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `maps_to
                 [`Neg.neg
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Iio [(num "0")])
                   " ×ℂ "
                   (Term.app `Ioi [(num "0")]))
                  (Complex.Data.Complex.Basic.«term_×ℂ_»
                   (Term.app `Ioi [(num "0")])
                   " ×ℂ "
                   (Term.app `Iio [(num "0")]))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`w `hw])
                  []
                  (Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs
                      "["
                      [(Tactic.simpLemma [] [] `mem_re_prod_im)
                       ","
                       (Tactic.simpLemma [] [] `neg_re)
                       ","
                       (Tactic.simpLemma [] [] `neg_im)
                       ","
                       (Tactic.simpLemma [] [] `neg_lt_zero)
                       ","
                       (Tactic.simpLemma [] [] `neg_pos)
                       ","
                       (Tactic.simpLemma [] [] `mem_Ioi)
                       ","
                       (Tactic.simpLemma [] [] `mem_Iio)]
                      "]")]
                    ["using" `hw]))]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `quadrant_II
             [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
              (Term.hole "_")
              (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
              (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
              `hz_re
              `hz_im]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.refine'
              "refine'"
              (Term.app
               `Exists₃Cat.imp
               [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                  ","
                  (Tactic.simpLemma [] [] `complex.abs.map_neg)]
                 "]")]
               ["using"
                (Term.app
                 `hO.comp_tendsto
                 [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `hre
               [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `comp_app)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `him
               [(«term-_» "-" `x)
                (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
             ","
             («term_=_» («term-_» "-" `z') "=" `z))]
           [])
          []
          (Tactic.exact
           "exact"
           (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩"))
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `neg_re)
             ","
             (Tactic.simpLemma [] [] `neg_im)
             ","
             (Tactic.simpLemma [] [] `neg_nonpos)
             ","
             (Tactic.simpLemma [] [] `neg_nonneg)]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
          []
          (Tactic.change
           "change"
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖»
             "‖"
             (Term.app («term_∘_» `f "∘" `Neg.neg) [`z])
             "‖")
            "≤"
            `C)
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`H []]
             [(Term.typeSpec
               ":"
               (Term.app
                `maps_to
                [`Neg.neg
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Iio [(num "0")])
                  " ×ℂ "
                  (Term.app `Ioi [(num "0")]))
                 (Complex.Data.Complex.Basic.«term_×ℂ_»
                  (Term.app `Ioi [(num "0")])
                  " ×ℂ "
                  (Term.app `Iio [(num "0")]))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`w `hw])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `mem_re_prod_im)
                      ","
                      (Tactic.simpLemma [] [] `neg_re)
                      ","
                      (Tactic.simpLemma [] [] `neg_im)
                      ","
                      (Tactic.simpLemma [] [] `neg_lt_zero)
                      ","
                      (Tactic.simpLemma [] [] `neg_pos)
                      ","
                      (Tactic.simpLemma [] [] `mem_Ioi)
                      ","
                      (Tactic.simpLemma [] [] `mem_Iio)]
                     "]")]
                   ["using" `hw]))]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `quadrant_II
            [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
             (Term.hole "_")
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
             `hz_re
             `hz_im]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              `Exists₃Cat.imp
              [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs
                "["
                [(Tactic.simpLemma
                  []
                  []
                  (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                 ","
                 (Tactic.simpLemma [] [] `complex.abs.map_neg)]
                "]")]
              ["using"
               (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hre
              [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `comp_app)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
              "]")
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `him
              [(«term-_» "-" `x)
               (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `him
          [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `him
        [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `him
       [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `neg_nonpos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `neg_nonpos "." (fieldIdx "2")) [`hx])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term-_» "-" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" `x) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `neg_mul)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `comp_app)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
          "]")
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hre
          [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hre
        [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hre
       [(«term-_» "-" `x) (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `neg_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `neg_nonneg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `neg_nonneg "." (fieldIdx "2")) [`hx])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term-_» "-" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" `x) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `comp_app)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_neg)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `comp_app
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          `Exists₃Cat.imp
          [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          ["only"]
          [(Tactic.simpArgs
            "["
            [(Tactic.simpLemma
              []
              []
              (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
             ","
             (Tactic.simpLemma [] [] `complex.abs.map_neg)]
            "]")]
          ["using"
           (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
           ","
           (Tactic.simpLemma [] [] `complex.abs.map_neg)]
          "]")]
        ["using" (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hO.comp_tendsto [(Term.app `tendsto_neg_cobounded.inf [`H.tendsto])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_neg_cobounded.inf [`H.tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H.tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_neg_cobounded.inf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `tendsto_neg_cobounded.inf [`H.tendsto])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hO.comp_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `complex.abs.map_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `Exists₃Cat.imp
        [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Exists₃Cat.imp
       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hB])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Exists₃Cat.imp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `quadrant_II
        [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
         (Term.hole "_")
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
         `hz_re
         `hz_im]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_II
       [(Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
        (Term.hole "_")
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
        `hz_re
        `hz_im])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `differentiable_neg.diff_cont_on_cl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hd.comp [`differentiable_neg.diff_cont_on_cl `H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_II
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         [(Term.typeSpec
           ":"
           (Term.app
            `maps_to
            [`Neg.neg
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Iio [(num "0")])
              " ×ℂ "
              (Term.app `Ioi [(num "0")]))
             (Complex.Data.Complex.Basic.«term_×ℂ_»
              (Term.app `Ioi [(num "0")])
              " ×ℂ "
              (Term.app `Iio [(num "0")]))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`w `hw])
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma [] [] `mem_re_prod_im)
                  ","
                  (Tactic.simpLemma [] [] `neg_re)
                  ","
                  (Tactic.simpLemma [] [] `neg_im)
                  ","
                  (Tactic.simpLemma [] [] `neg_lt_zero)
                  ","
                  (Tactic.simpLemma [] [] `neg_pos)
                  ","
                  (Tactic.simpLemma [] [] `mem_Ioi)
                  ","
                  (Tactic.simpLemma [] [] `mem_Iio)]
                 "]")]
               ["using" `hw]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`w `hw])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            ["only"]
            [(Tactic.simpArgs
              "["
              [(Tactic.simpLemma [] [] `mem_re_prod_im)
               ","
               (Tactic.simpLemma [] [] `neg_re)
               ","
               (Tactic.simpLemma [] [] `neg_im)
               ","
               (Tactic.simpLemma [] [] `neg_lt_zero)
               ","
               (Tactic.simpLemma [] [] `neg_pos)
               ","
               (Tactic.simpLemma [] [] `mem_Ioi)
               ","
               (Tactic.simpLemma [] [] `mem_Iio)]
              "]")]
            ["using" `hw]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma [] [] `mem_re_prod_im)
           ","
           (Tactic.simpLemma [] [] `neg_re)
           ","
           (Tactic.simpLemma [] [] `neg_im)
           ","
           (Tactic.simpLemma [] [] `neg_lt_zero)
           ","
           (Tactic.simpLemma [] [] `neg_pos)
           ","
           (Tactic.simpLemma [] [] `mem_Ioi)
           ","
           (Tactic.simpLemma [] [] `mem_Iio)]
          "]")]
        ["using" `hw]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_Iio
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_Ioi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_pos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_lt_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_re_prod_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `maps_to
       [`Neg.neg
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Iio [(num "0")])
         " ×ℂ "
         (Term.app `Ioi [(num "0")]))
        (Complex.Data.Complex.Basic.«term_×ℂ_»
         (Term.app `Ioi [(num "0")])
         " ×ℂ "
         (Term.app `Iio [(num "0")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Ioi [(num "0")])
       " ×ℂ "
       (Term.app `Iio [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Iio [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Ioi [(num "0")])
      " ×ℂ "
      (Term.app `Iio [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Complex.Data.Complex.Basic.«term_×ℂ_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Complex.Data.Complex.Basic.«term_×ℂ_»
       (Term.app `Iio [(num "0")])
       " ×ℂ "
       (Term.app `Ioi [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioi [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 72, term))
      (Term.app `Iio [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 72 >? 1022, (some 1023, term) <=? (some 72, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 72, (some 73, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Complex.Data.Complex.Basic.«term_×ℂ_»
      (Term.app `Iio [(num "0")])
      " ×ℂ "
      (Term.app `Ioi [(num "0")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Neg.neg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `maps_to
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.change
       "change"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `Neg.neg) [`z]) "‖")
        "≤"
        `C)
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `Neg.neg) [`z]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app («term_∘_» `f "∘" `Neg.neg) [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app («term_∘_» `f "∘" `Neg.neg) [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      («term_∘_» `f "∘" `Neg.neg)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Neg.neg
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 90, (some 90, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∘_» `f "∘" `Neg.neg) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `neg_re)
         ","
         (Tactic.simpLemma [] [] `neg_im)
         ","
         (Tactic.simpLemma [] [] `neg_nonpos)
         ","
         (Tactic.simpLemma [] [] `neg_nonneg)]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`hz_re `hz_im] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz_im
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz_re
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_nonneg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_nonpos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_im
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "⟨" [(«term-_» "-" `z) "," (Term.app `neg_neg [`z])] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `neg_neg [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `neg_neg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
             [])]
           "⟩")])]
       [":"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
         ","
         («term_=_» («term-_» "-" `z') "=" `z))]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `z')] []))
       ","
       («term_=_» («term-_» "-" `z') "=" `z))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» («term-_» "-" `z') "=" `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term-_» "-" `z')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z'
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 75, (some 75, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
         "≤"
         `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
        "≤"
        `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioi [(num "0")])
            " ×ℂ "
            (Term.app `Iio [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Ioi [(num "0")])
           " ×ℂ "
           (Term.app `Iio [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the fourth quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open fourth quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant `C` on the boundary of the fourth quadrant.
    
    Then `‖f z‖` is bounded from above by the same constant on the closed fourth quadrant. -/
  theorem
    quadrant_IV
    ( hd : DiffContOnCl ℂ f Ioi 0 ×ℂ Iio 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , 0 ≤ x → ‖ f x ‖ ≤ C )
        ( him : ∀ x : ℝ , x ≤ 0 → ‖ f x * I ‖ ≤ C )
        ( hz_re : 0 ≤ z . re )
        ( hz_im : z . im ≤ 0 )
      : ‖ f z ‖ ≤ C
    :=
      by
        obtain ⟨ z , rfl ⟩ : ∃ z' , - z' = z
          exact ⟨ - z , neg_neg z ⟩
          simp only [ neg_re , neg_im , neg_nonpos , neg_nonneg ] at hz_re hz_im
          change ‖ f ∘ Neg.neg z ‖ ≤ C
          have
            H
              : maps_to Neg.neg Iio 0 ×ℂ Ioi 0 Ioi 0 ×ℂ Iio 0
              :=
              by
                intro w hw
                  simpa
                    only
                      [
                        mem_re_prod_im , neg_re , neg_im , neg_lt_zero , neg_pos , mem_Ioi , mem_Iio
                        ]
                      using hw
          refine'
            quadrant_II
              hd.comp differentiable_neg.diff_cont_on_cl H _ fun x hx => _ fun x hx => _ hz_re hz_im
          ·
            refine' Exists₃Cat.imp fun c hc B hO => _ hB
              simpa
                only
                  [ ( · ∘ · ) , complex.abs.map_neg ]
                  using hO.comp_tendsto tendsto_neg_cobounded.inf H.tendsto
          · rw [ comp_app , ← of_real_neg ] exact hre - x neg_nonneg . 2 hx
          · rw [ comp_app , ← neg_mul , ← of_real_neg ] exact him - x neg_nonpos . 2 hx
#align phragmen_lindelof.quadrant_IV PhragmenLindelof.quadrant_IV

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the fourth quadrant. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open fourth quadrant and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant\n  for some `A`, `B`, and `c < 2`;\n* `f` is equal to zero on the boundary of the fourth quadrant.\n\nThen `f` is equal to zero on the closed fourth quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_quadrant_IV [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hB]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_» (Term.app `f [`x]) "=" (num "0"))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          (num "0")
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
            "∧"
            («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
          "<|"
          (Term.app
           `quadrant_IV
           [`hd
            `hB
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            (Term.proj `hz "." (fieldIdx "1"))
            (Term.proj `hz "." (fieldIdx "2"))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
         "<|"
         (Term.app
          `quadrant_IV
          [`hd
           `hB
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           (Term.proj `hz "." (fieldIdx "1"))
           (Term.proj `hz "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
       "<|"
       (Term.app
        `quadrant_IV
        [`hd
         `hB
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
            "<|"
            (Term.app `him [`x `hx]))))
         (Term.proj `hz "." (fieldIdx "1"))
         (Term.proj `hz "." (fieldIdx "2"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_IV
       [`hd
        `hB
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
           "<|"
           (Term.app `him [`x `hx]))))
        (Term.proj `hz "." (fieldIdx "1"))
        (Term.proj `hz "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hz "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `hz "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
         "<|"
         (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `norm_le_zero_iff "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_IV
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `norm_le_zero_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `norm_le_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        (num "0")
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
          "∧"
          («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
        "∧"
        («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
       "∧"
       («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioi [(num "0")])
            " ×ℂ "
            (Term.app `Iio [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Ioi [(num "0")])
           " ×ℂ "
           (Term.app `Iio [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the fourth quadrant. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open fourth quadrant and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant
      for some `A`, `B`, and `c < 2`;
    * `f` is equal to zero on the boundary of the fourth quadrant.
    
    Then `f` is equal to zero on the closed fourth quadrant. -/
  theorem
    eq_zero_on_quadrant_IV
    ( hd : DiffContOnCl ℂ f Ioi 0 ×ℂ Iio 0 )
        (
          hB
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , 0 ≤ x → f x = 0 )
        ( him : ∀ x : ℝ , x ≤ 0 → f x * I = 0 )
      : EqOn f 0 { z | 0 ≤ z . re ∧ z . im ≤ 0 }
    :=
      fun
        z hz
          =>
          norm_le_zero_iff . 1
            <|
            quadrant_IV
              hd
                hB
                fun x hx => norm_le_zero_iff . 2 <| hre x hx
                fun x hx => norm_le_zero_iff . 2 <| him x hx
                hz . 1
                hz . 2
#align phragmen_lindelof.eq_zero_on_quadrant_IV PhragmenLindelof.eq_zero_on_quadrant_IV

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the fourth quadrant. Let `f g : ℂ → E` be functions such that\n\n* `f` and `g` are differentiable in the open fourth quadrant and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth\n  quadrant for some `A`, `B`, and `c < 2`;\n* `f` is equal to `g` on the boundary of the fourth quadrant.\n\nThen `f` is equal to `g` on the closed fourth quadrant. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_quadrant_IV [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hdf]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBf]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hdg]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hBg]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Complex.Data.Complex.Basic.«term_×ℂ_»
                 (Term.app `Ioi [(num "0")])
                 " ×ℂ "
                 (Term.app `Iio [(num "0")]))]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `x)
            "→"
            («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» `x "≤" (num "0"))
            "→"
            («term_=_»
             (Term.app `f [(«term_*_» `x "*" `I)])
             "="
             (Term.app `g [(«term_*_» `x "*" `I)]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          `g
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_∧_»
            («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
            "∧"
            («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`z `hz]
         []
         "=>"
         («term_<|_»
          (Term.proj `sub_eq_zero "." (fieldIdx "1"))
          "<|"
          (Term.app
           `eq_zero_on_quadrant_IV
           [(Term.app (Term.proj `hdf "." `sub) [`hdg])
            (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `hre [`x `hx]))))
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `hx]
              []
              "=>"
              («term_<|_»
               (Term.proj `sub_eq_zero "." (fieldIdx "2"))
               "<|"
               (Term.app `him [`x `hx]))))
            `hz]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z `hz]
        []
        "=>"
        («term_<|_»
         (Term.proj `sub_eq_zero "." (fieldIdx "1"))
         "<|"
         (Term.app
          `eq_zero_on_quadrant_IV
          [(Term.app (Term.proj `hdf "." `sub) [`hdg])
           (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `hre [`x `hx]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj `sub_eq_zero "." (fieldIdx "2"))
              "<|"
              (Term.app `him [`x `hx]))))
           `hz]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `sub_eq_zero "." (fieldIdx "1"))
       "<|"
       (Term.app
        `eq_zero_on_quadrant_IV
        [(Term.app (Term.proj `hdf "." `sub) [`hdg])
         (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
         `hz]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eq_zero_on_quadrant_IV
       [(Term.app (Term.proj `hdf "." `sub) [`hdg])
        (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
        `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `him [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_» (Term.proj `sub_eq_zero "." (fieldIdx "2")) "<|" (Term.app `hre [`x `hx]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O_sub_exp_rpow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O_sub_exp_rpow [`hBf `hBg])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `hdf "." `sub) [`hdg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hdg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hdf "." `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hdf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `hdf "." `sub) [`hdg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_zero_on_quadrant_IV
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_eq_zero "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       `EqOn
       [`f
        `g
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_∧_»
          («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
          "∧"
          («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
         "}")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_∧_»
        («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
        "∧"
        («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
       "∧"
       («term_≤_» (Term.proj `z "." `im) "≤" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.proj `z "." `im) "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj `z "." `im)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 35 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 35, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `EqOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» `x "≤" (num "0"))
        "→"
        («term_=_»
         (Term.app `f [(«term_*_» `x "*" `I)])
         "="
         (Term.app `g [(«term_*_» `x "*" `I)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `x "≤" (num "0"))
       "→"
       («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [(«term_*_» `x "*" `I)]) "=" (Term.app `g [(«term_*_» `x "*" `I)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» `x "≤" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (Term.app `g [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `g
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Complex.Data.Complex.Basic.«term_×ℂ_»
             (Term.app `Ioi [(num "0")])
             " ×ℂ "
             (Term.app `Iio [(num "0")]))]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `g
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Complex.Data.Complex.Basic.«term_×ℂ_»
            (Term.app `Ioi [(num "0")])
            " ×ℂ "
            (Term.app `Iio [(num "0")]))]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `g
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Complex.Data.Complex.Basic.«term_×ℂ_»
           (Term.app `Ioi [(num "0")])
           " ×ℂ "
           (Term.app `Iio [(num "0")]))]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the fourth quadrant. Let `f g : ℂ → E` be functions such that
    
    * `f` and `g` are differentiable in the open fourth quadrant and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth
      quadrant for some `A`, `B`, and `c < 2`;
    * `f` is equal to `g` on the boundary of the fourth quadrant.
    
    Then `f` is equal to `g` on the closed fourth quadrant. -/
  theorem
    eq_on_quadrant_IV
    ( hdf : DiffContOnCl ℂ f Ioi 0 ×ℂ Iio 0 )
        (
          hBf
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , f =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hdg : DiffContOnCl ℂ g Ioi 0 ×ℂ Iio 0 )
        (
          hBg
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃ B , g =O[ comap Complex.abs atTop ⊓ 𝓟 Ioi 0 ×ℂ Iio 0 ] fun z => expR B * abs z ^ c
          )
        ( hre : ∀ x : ℝ , 0 ≤ x → f x = g x )
        ( him : ∀ x : ℝ , x ≤ 0 → f x * I = g x * I )
      : EqOn f g { z | 0 ≤ z . re ∧ z . im ≤ 0 }
    :=
      fun
        z hz
          =>
          sub_eq_zero . 1
            <|
            eq_zero_on_quadrant_IV
              hdf . sub hdg
                is_O_sub_exp_rpow hBf hBg
                fun x hx => sub_eq_zero . 2 <| hre x hx
                fun x hx => sub_eq_zero . 2 <| him x hx
                hz
#align phragmen_lindelof.eq_on_quadrant_IV PhragmenLindelof.eq_on_quadrant_IV

/-!
### Phragmen-Lindelöf principle in the right half-plane
-/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the right half-plane. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open right half-plane and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the imaginary axis;\n* `f x → 0` as `x : ℝ` tends to infinity.\n\nThen `‖f z‖` is bounded from above by the same constant on the closed right half-plane.\nSee also `phragmen_lindelof.right_half_plane_of_bounded_on_real` for a stronger version. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `right_half_plane_of_tendsto_zero_on_real [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.«term{_|_}»
             "{"
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
             "|"
             («term_<_» (num "0") "<" (Term.proj `z "." `re))
             "}")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hexp]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.«term{_|_}»
                 "{"
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                 "|"
                 («term_<_» (num "0") "<" (Term.proj `z "." `re))
                 "}")]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.app
           `Tendsto
           [(Term.fun
             "fun"
             (Term.basicFun
              [`x]
              [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
              "=>"
              (Term.app `f [`x])))
            `atTop
            (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
            "≤"
            `C))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz]
         [":" («term_≤_» (num "0") "≤" (Term.proj `z "." `re))]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.revert "revert" [`z])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hle []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`C']
                 []
                 ","
                 (Term.arrow
                  (Term.forall
                   "∀"
                   [`x]
                   [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                   ","
                   (Term.arrow
                    («term_≤_» (num "0") "≤" `x)
                    "→"
                    («term_≤_»
                     (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
                     "≤"
                     `C')))
                  "→"
                  (Term.forall
                   "∀"
                   [`z]
                   [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                   ","
                   (Term.arrow
                    («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
                    "→"
                    («term_≤_»
                     (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
                     "≤"
                     (Term.app `max [`C `C'])))))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`C' `hC' `z `hz])
                  []
                  (Tactic.cases
                   "cases"
                   [(Tactic.casesTarget [] (Term.app `le_total [`z.im (num "0")]))]
                   []
                   [])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.refine'
                     "refine'"
                     (Term.app
                      `quadrant_IV
                      [(Term.app
                        `hd.mono
                        [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
                       (Term.app
                        `Exists₃Cat.imp
                        [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
                         `hexp])
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`x `hx]
                         []
                         "=>"
                         («term_<|_»
                          (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                          "<|"
                          (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`x `hx]
                         []
                         "=>"
                         (Term.app
                          (Term.proj (Term.app `him [`x]) "." `trans)
                          [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
                       `hz
                       `h]))
                    []
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `hO.mono
                      [(«term_<|_»
                        (Term.app `inf_le_inf_left [(Term.hole "_")])
                        "<|"
                        (Term.app
                         (Term.proj `principal_mono "." (fieldIdx "2"))
                         [(Term.fun
                           "fun"
                           (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.refine'
                     "refine'"
                     (Term.app
                      `quadrant_I
                      [(Term.app
                        `hd.mono
                        [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
                       (Term.app
                        `Exists₃Cat.imp
                        [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
                         `hexp])
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`x `hx]
                         []
                         "=>"
                         («term_<|_»
                          (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                          "<|"
                          (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`x `hx]
                         []
                         "=>"
                         (Term.app
                          (Term.proj (Term.app `him [`x]) "." `trans)
                          [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
                       `hz
                       `h]))
                    []
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `hO.mono
                      [(«term_<|_»
                        (Term.app `inf_le_inf_left [(Term.hole "_")])
                        "<|"
                        (Term.app
                         (Term.proj `principal_mono "." (fieldIdx "2"))
                         [(Term.fun
                           "fun"
                           (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])]))))))
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hmax)])
                  [])]
                "⟩")])]
            [":"
             («term∃_,_»
              "∃"
              (Lean.explicitBinders
               (Lean.unbracketedExplicitBinders
                [(Lean.binderIdent `x)]
                [":" (Data.Real.Basic.termℝ "ℝ")]))
              ","
              («term_∧_»
               («term_≤_» (num "0") "≤" `x)
               "∧"
               (Term.forall
                "∀"
                [`y]
                [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                ","
                (Term.arrow
                 («term_≤_» (num "0") "≤" `y)
                 "→"
                 («term_≤_»
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
                  "≤"
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖"))))))]
            [":="
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hfc []]
                     [(Term.typeSpec
                       ":"
                       (Term.app
                        `ContinuousOn
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [`x]
                           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                           "=>"
                           (Term.app `f [`x])))
                         (Term.app `Ici [(num "0")])]))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(Tactic.refine'
                          "refine'"
                          (Term.app
                           `hd.continuous_on.comp
                           [`continuous_of_real.continuous_on
                            (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
                         []
                         (Std.Tactic.tacticRwa__
                          "rwa"
                          (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
                          [])]))))))
                  []
                  (Classical.«tacticBy_cases_:_»
                   "by_cases"
                   [`h₀ ":"]
                   (Term.forall
                    "∀"
                    [`x]
                    [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                    ","
                    (Term.arrow
                     («term_≤_» (num "0") "≤" `x)
                     "→"
                     («term_=_» (Term.app `f [`x]) "=" (num "0")))))
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.refine'
                     "refine'"
                     (Term.anonymousCtor
                      "⟨"
                      [(num "0")
                       ","
                       `le_rfl
                       ","
                       (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
                      "⟩"))
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] (Term.app `h₀ [`y `hy]))
                       ","
                       (Tactic.rwRule [] (Term.app `h₀ [(num "0") `le_rfl]))]
                      "]")
                     [])])
                  []
                  (Mathlib.Tactic.PushNeg.tacticPush_neg__
                   "push_neg"
                   [(Tactic.location "at" (Tactic.locationHyp [`h₀] []))])
                  []
                  (Std.Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget [] `h₀)]
                   ["with"
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.tuple
                        "⟨"
                        [(Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hne)])
                          [])]
                        "⟩")])
                     [])])
                  []
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hlt []]
                     [(Term.typeSpec
                       ":"
                       («term_<_»
                        (Analysis.Normed.Group.Basic.«term‖_‖»
                         "‖"
                         (Term.typeAscription "(" (num "0") ":" [`E] ")")
                         "‖")
                        "<"
                        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(Std.Tactic.tacticRwa__
                          "rwa"
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
                           "]")
                          [])]))))))
                  []
                  (Tactic.tacticSuffices_
                   "suffices"
                   (Term.sufficesDecl
                    []
                    (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                     "∀ᶠ"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder
                       (Lean.binderIdent `x)
                       [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
                     " in "
                     (Order.Basic.«term_⊓_»
                      (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
                      " ⊓ "
                      (Term.app
                       (Filter.Order.Filter.Basic.filter.principal "𝓟")
                       [(Term.app `Ici [(num "0")])]))
                     ", "
                     («term_≤_»
                      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
                      "≤"
                      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))
                    (Term.byTactic'
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Std.Tactic.Simpa.simpa
                         "simpa"
                         []
                         []
                         (Std.Tactic.Simpa.simpaArgsRest
                          []
                          []
                          ["only"]
                          [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `exists_prop)] "]")]
                          ["using"
                           (Term.app
                            `hfc.norm.exists_forall_ge'
                            [`is_closed_Ici `hx₀ `this])]))])))))
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `Real.cocompact_eq)
                     ","
                     (Tactic.rwRule [] `inf_sup_right)
                     ","
                     (Tactic.rwRule
                      []
                      (Term.proj
                       (Term.app
                        `disjoint_at_bot_principal_Ici
                        [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
                       "."
                       `eq_bot))
                     ","
                     (Tactic.rwRule [] `bot_sup_eq)]
                    "]")
                   [])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    (Term.proj
                     («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
                     "."
                     `filter_mono)
                    [`inf_le_left]))])))]])
           []
           (Tactic.cases
            "cases"
            [(Tactic.casesTarget
              []
              (Term.app
               `le_or_lt
               [(Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖") `C]))]
            []
            [])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               ["only"]
               [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_left [`h]))] "]")]
               ["using" (Term.app `hle [(Term.hole "_") `hmax])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Mathlib.Tactic.replace'
              "replace"
              [`hmax []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `IsMaxOn
                 [(«term_∘_» `norm "∘" `f)
                  (Set.«term{_|_}»
                   "{"
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                   "|"
                   («term_<_» (num "0") "<" (Term.proj `z "." `re))
                   "}")
                  `x₀]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Std.Tactic.rintro
                "rintro"
                [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `z))
                 (Std.Tactic.RCases.rintroPat.one
                  (Std.Tactic.RCases.rcasesPat.paren
                   "("
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
                    [":" («term_<_» (num "0") "<" `z.re)])
                   ")"))]
                [])
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest
                 []
                 []
                 []
                 [(Tactic.simpArgs
                   "["
                   [(Tactic.simpLemma [] [] (Term.app `max_eq_right [`h.le]))]
                   "]")]
                 ["using" (Term.app `hle [(Term.hole "_") `hmax (Term.hole "_") `hz.le])]))])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(num "0")]) "‖")
                   "="
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.apply
                     "apply"
                     (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax]))
                    []
                    (Tactic.intro "intro" [`z `hz])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `mem_ball)
                       ","
                       (Tactic.rwRule [] `dist_zero_left)
                       ","
                       (Tactic.rwRule [] `dist_eq)
                       ","
                       (Tactic.rwRule [] `norm_eq_abs)
                       ","
                       (Tactic.rwRule [] (Term.app `Complex.abs_of_nonneg [`hx₀]))]
                      "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_set_of_eq)] "]")
                     [])
                    []
                    (Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`hz []])
                    []
                    (calcTactic
                     "calc"
                     (calcStep
                      («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
                      ":="
                      (Term.app
                       (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
                       [`hz]))
                     [(calcStep
                       («term_≤_»
                        (Term.hole "_")
                        "≤"
                        («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
                       ":="
                       (Term.app `le_abs_self [(Term.hole "_")]))
                      (calcStep
                       («term_=_»
                        (Term.hole "_")
                        "="
                        («term|___|»
                         (group "|")
                         (Term.proj («term_-_» `z "-" `x₀) "." `re)
                         (group)
                         "|"))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] `sub_re)
                              ","
                              (Tactic.rwRule [] `of_real_re)
                              ","
                              (Tactic.rwRule [] `_root_.abs_sub_comm)]
                             "]")
                            [])]))))
                      (calcStep
                       («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
                       ":="
                       (Term.app `abs_re_le_abs [(Term.hole "_")]))])]))))))
             []
             (Tactic.refine'
              "refine'"
              (Term.proj
               («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")]))
               "."
               `elim))
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               []
               []
               ["using" (Term.app `him [(num "0")])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.revert "revert" [`z])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hle []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`C']
                []
                ","
                (Term.arrow
                 (Term.forall
                  "∀"
                  [`x]
                  [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                  ","
                  (Term.arrow
                   («term_≤_» (num "0") "≤" `x)
                   "→"
                   («term_≤_»
                    (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
                    "≤"
                    `C')))
                 "→"
                 (Term.forall
                  "∀"
                  [`z]
                  [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                  ","
                  (Term.arrow
                   («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
                   "→"
                   («term_≤_»
                    (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
                    "≤"
                    (Term.app `max [`C `C'])))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`C' `hC' `z `hz])
                 []
                 (Tactic.cases
                  "cases"
                  [(Tactic.casesTarget [] (Term.app `le_total [`z.im (num "0")]))]
                  []
                  [])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.refine'
                    "refine'"
                    (Term.app
                     `quadrant_IV
                     [(Term.app
                       `hd.mono
                       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
                      (Term.app
                       `Exists₃Cat.imp
                       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
                        `hexp])
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`x `hx]
                        []
                        "=>"
                        («term_<|_»
                         (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                         "<|"
                         (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`x `hx]
                        []
                        "=>"
                        (Term.app
                         (Term.proj (Term.app `him [`x]) "." `trans)
                         [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
                      `hz
                      `h]))
                   []
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `hO.mono
                     [(«term_<|_»
                       (Term.app `inf_le_inf_left [(Term.hole "_")])
                       "<|"
                       (Term.app
                        (Term.proj `principal_mono "." (fieldIdx "2"))
                        [(Term.fun
                          "fun"
                          (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.refine'
                    "refine'"
                    (Term.app
                     `quadrant_I
                     [(Term.app
                       `hd.mono
                       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
                      (Term.app
                       `Exists₃Cat.imp
                       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
                        `hexp])
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`x `hx]
                        []
                        "=>"
                        («term_<|_»
                         (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                         "<|"
                         (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`x `hx]
                        []
                        "=>"
                        (Term.app
                         (Term.proj (Term.app `him [`x]) "." `trans)
                         [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
                      `hz
                      `h]))
                   []
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `hO.mono
                     [(«term_<|_»
                       (Term.app `inf_le_inf_left [(Term.hole "_")])
                       "<|"
                       (Term.app
                        (Term.proj `principal_mono "." (fieldIdx "2"))
                        [(Term.fun
                          "fun"
                          (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])]))))))
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hmax)])
                 [])]
               "⟩")])]
           [":"
            («term∃_,_»
             "∃"
             (Lean.explicitBinders
              (Lean.unbracketedExplicitBinders
               [(Lean.binderIdent `x)]
               [":" (Data.Real.Basic.termℝ "ℝ")]))
             ","
             («term_∧_»
              («term_≤_» (num "0") "≤" `x)
              "∧"
              (Term.forall
               "∀"
               [`y]
               [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
               ","
               (Term.arrow
                («term_≤_» (num "0") "≤" `y)
                "→"
                («term_≤_»
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
                 "≤"
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖"))))))]
           [":="
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hfc []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `ContinuousOn
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [`x]
                          [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                          "=>"
                          (Term.app `f [`x])))
                        (Term.app `Ici [(num "0")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.refine'
                         "refine'"
                         (Term.app
                          `hd.continuous_on.comp
                          [`continuous_of_real.continuous_on
                           (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
                        []
                        (Std.Tactic.tacticRwa__
                         "rwa"
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
                         [])]))))))
                 []
                 (Classical.«tacticBy_cases_:_»
                  "by_cases"
                  [`h₀ ":"]
                  (Term.forall
                   "∀"
                   [`x]
                   [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                   ","
                   (Term.arrow
                    («term_≤_» (num "0") "≤" `x)
                    "→"
                    («term_=_» (Term.app `f [`x]) "=" (num "0")))))
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.refine'
                    "refine'"
                    (Term.anonymousCtor
                     "⟨"
                     [(num "0")
                      ","
                      `le_rfl
                      ","
                      (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
                     "⟩"))
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] (Term.app `h₀ [`y `hy]))
                      ","
                      (Tactic.rwRule [] (Term.app `h₀ [(num "0") `le_rfl]))]
                     "]")
                    [])])
                 []
                 (Mathlib.Tactic.PushNeg.tacticPush_neg__
                  "push_neg"
                  [(Tactic.location "at" (Tactic.locationHyp [`h₀] []))])
                 []
                 (Std.Tactic.rcases
                  "rcases"
                  [(Tactic.casesTarget [] `h₀)]
                  ["with"
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.tuple
                       "⟨"
                       [(Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hne)])
                         [])]
                       "⟩")])
                    [])])
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hlt []]
                    [(Term.typeSpec
                      ":"
                      («term_<_»
                       (Analysis.Normed.Group.Basic.«term‖_‖»
                        "‖"
                        (Term.typeAscription "(" (num "0") ":" [`E] ")")
                        "‖")
                       "<"
                       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Std.Tactic.tacticRwa__
                         "rwa"
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
                          "]")
                         [])]))))))
                 []
                 (Tactic.tacticSuffices_
                  "suffices"
                  (Term.sufficesDecl
                   []
                   (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                    "∀ᶠ"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder
                      (Lean.binderIdent `x)
                      [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
                    " in "
                    (Order.Basic.«term_⊓_»
                     (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
                     " ⊓ "
                     (Term.app
                      (Filter.Order.Filter.Basic.filter.principal "𝓟")
                      [(Term.app `Ici [(num "0")])]))
                    ", "
                    («term_≤_»
                     (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
                     "≤"
                     (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))
                   (Term.byTactic'
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Std.Tactic.Simpa.simpa
                        "simpa"
                        []
                        []
                        (Std.Tactic.Simpa.simpaArgsRest
                         []
                         []
                         ["only"]
                         [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `exists_prop)] "]")]
                         ["using"
                          (Term.app
                           `hfc.norm.exists_forall_ge'
                           [`is_closed_Ici `hx₀ `this])]))])))))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `Real.cocompact_eq)
                    ","
                    (Tactic.rwRule [] `inf_sup_right)
                    ","
                    (Tactic.rwRule
                     []
                     (Term.proj
                      (Term.app
                       `disjoint_at_bot_principal_Ici
                       [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
                      "."
                      `eq_bot))
                    ","
                    (Tactic.rwRule [] `bot_sup_eq)]
                   "]")
                  [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   (Term.proj
                    («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
                    "."
                    `filter_mono)
                   [`inf_le_left]))])))]])
          []
          (Tactic.cases
           "cases"
           [(Tactic.casesTarget
             []
             (Term.app
              `le_or_lt
              [(Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖") `C]))]
           []
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_left [`h]))] "]")]
              ["using" (Term.app `hle [(Term.hole "_") `hmax])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Mathlib.Tactic.replace'
             "replace"
             [`hmax []]
             [(Term.typeSpec
               ":"
               (Term.app
                `IsMaxOn
                [(«term_∘_» `norm "∘" `f)
                 (Set.«term{_|_}»
                  "{"
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                  "|"
                  («term_<_» (num "0") "<" (Term.proj `z "." `re))
                  "}")
                 `x₀]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Std.Tactic.rintro
               "rintro"
               [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `z))
                (Std.Tactic.RCases.rintroPat.one
                 (Std.Tactic.RCases.rcasesPat.paren
                  "("
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
                   [":" («term_<_» (num "0") "<" `z.re)])
                  ")"))]
               [])
              []
              (Std.Tactic.Simpa.simpa
               "simpa"
               []
               []
               (Std.Tactic.Simpa.simpaArgsRest
                []
                []
                []
                [(Tactic.simpArgs
                  "["
                  [(Tactic.simpLemma [] [] (Term.app `max_eq_right [`h.le]))]
                  "]")]
                ["using" (Term.app `hle [(Term.hole "_") `hmax (Term.hole "_") `hz.le])]))])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(num "0")]) "‖")
                  "="
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.apply
                    "apply"
                    (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax]))
                   []
                   (Tactic.intro "intro" [`z `hz])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `mem_ball)
                      ","
                      (Tactic.rwRule [] `dist_zero_left)
                      ","
                      (Tactic.rwRule [] `dist_eq)
                      ","
                      (Tactic.rwRule [] `norm_eq_abs)
                      ","
                      (Tactic.rwRule [] (Term.app `Complex.abs_of_nonneg [`hx₀]))]
                     "]")
                    [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_set_of_eq)] "]")
                    [])
                   []
                   (Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`hz []])
                   []
                   (calcTactic
                    "calc"
                    (calcStep
                     («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
                     ":="
                     (Term.app
                      (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
                      [`hz]))
                    [(calcStep
                      («term_≤_»
                       (Term.hole "_")
                       "≤"
                       («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
                      ":="
                      (Term.app `le_abs_self [(Term.hole "_")]))
                     (calcStep
                      («term_=_»
                       (Term.hole "_")
                       "="
                       («term|___|»
                        (group "|")
                        (Term.proj («term_-_» `z "-" `x₀) "." `re)
                        (group)
                        "|"))
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule [] `sub_re)
                             ","
                             (Tactic.rwRule [] `of_real_re)
                             ","
                             (Tactic.rwRule [] `_root_.abs_sub_comm)]
                            "]")
                           [])]))))
                     (calcStep
                      («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
                      ":="
                      (Term.app `abs_re_le_abs [(Term.hole "_")]))])]))))))
            []
            (Tactic.refine'
             "refine'"
             (Term.proj
              («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")]))
              "."
              `elim))
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              []
              []
              ["using" (Term.app `him [(num "0")])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Mathlib.Tactic.replace'
         "replace"
         [`hmax []]
         [(Term.typeSpec
           ":"
           (Term.app
            `IsMaxOn
            [(«term_∘_» `norm "∘" `f)
             (Set.«term{_|_}»
              "{"
              (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
              "|"
              («term_<_» (num "0") "<" (Term.proj `z "." `re))
              "}")
             `x₀]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `z))
            (Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.paren
              "("
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
               [":" («term_<_» (num "0") "<" `z.re)])
              ")"))]
           [])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            []
            [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_right [`h.le]))] "]")]
            ["using" (Term.app `hle [(Term.hole "_") `hmax (Term.hole "_") `hz.le])]))])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             («term_=_»
              (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(num "0")]) "‖")
              "="
              (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.apply
                "apply"
                (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax]))
               []
               (Tactic.intro "intro" [`z `hz])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `mem_ball)
                  ","
                  (Tactic.rwRule [] `dist_zero_left)
                  ","
                  (Tactic.rwRule [] `dist_eq)
                  ","
                  (Tactic.rwRule [] `norm_eq_abs)
                  ","
                  (Tactic.rwRule [] (Term.app `Complex.abs_of_nonneg [`hx₀]))]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_set_of_eq)] "]")
                [])
               []
               (Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`hz []])
               []
               (calcTactic
                "calc"
                (calcStep
                 («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
                 ":="
                 (Term.app
                  (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
                  [`hz]))
                [(calcStep
                  («term_≤_»
                   (Term.hole "_")
                   "≤"
                   («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
                  ":="
                  (Term.app `le_abs_self [(Term.hole "_")]))
                 (calcStep
                  («term_=_»
                   (Term.hole "_")
                   "="
                   («term|___|» (group "|") (Term.proj («term_-_» `z "-" `x₀) "." `re) (group) "|"))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] `sub_re)
                         ","
                         (Tactic.rwRule [] `of_real_re)
                         ","
                         (Tactic.rwRule [] `_root_.abs_sub_comm)]
                        "]")
                       [])]))))
                 (calcStep
                  («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
                  ":="
                  (Term.app `abs_re_le_abs [(Term.hole "_")]))])]))))))
        []
        (Tactic.refine'
         "refine'"
         (Term.proj («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")])) "." `elim))
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `him [(num "0")])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `him [(num "0")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.proj («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")])) "." `elim))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")])) "." `elim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst `this "▸" [(Term.hole "_")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `h.not_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `h.not_le "<|" (Term.subst `this "▸" [(Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           («term_=_»
            (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(num "0")]) "‖")
            "="
            (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.apply "apply" (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax]))
             []
             (Tactic.intro "intro" [`z `hz])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `mem_ball)
                ","
                (Tactic.rwRule [] `dist_zero_left)
                ","
                (Tactic.rwRule [] `dist_eq)
                ","
                (Tactic.rwRule [] `norm_eq_abs)
                ","
                (Tactic.rwRule [] (Term.app `Complex.abs_of_nonneg [`hx₀]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_set_of_eq)] "]")
              [])
             []
             (Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`hz []])
             []
             (calcTactic
              "calc"
              (calcStep
               («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
               ":="
               (Term.app
                (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
                [`hz]))
              [(calcStep
                («term_≤_»
                 (Term.hole "_")
                 "≤"
                 («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
                ":="
                (Term.app `le_abs_self [(Term.hole "_")]))
               (calcStep
                («term_=_»
                 (Term.hole "_")
                 "="
                 («term|___|» (group "|") (Term.proj («term_-_» `z "-" `x₀) "." `re) (group) "|"))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `sub_re)
                       ","
                       (Tactic.rwRule [] `of_real_re)
                       ","
                       (Tactic.rwRule [] `_root_.abs_sub_comm)]
                      "]")
                     [])]))))
               (calcStep
                («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
                ":="
                (Term.app `abs_re_le_abs [(Term.hole "_")]))])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.apply "apply" (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax]))
          []
          (Tactic.intro "intro" [`z `hz])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `mem_ball)
             ","
             (Tactic.rwRule [] `dist_zero_left)
             ","
             (Tactic.rwRule [] `dist_eq)
             ","
             (Tactic.rwRule [] `norm_eq_abs)
             ","
             (Tactic.rwRule [] (Term.app `Complex.abs_of_nonneg [`hx₀]))]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
          []
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_set_of_eq)] "]") [])
          []
          (Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`hz []])
          []
          (calcTactic
           "calc"
           (calcStep
            («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
            ":="
            (Term.app
             (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
             [`hz]))
           [(calcStep
             («term_≤_»
              (Term.hole "_")
              "≤"
              («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
             ":="
             (Term.app `le_abs_self [(Term.hole "_")]))
            (calcStep
             («term_=_»
              (Term.hole "_")
              "="
              («term|___|» (group "|") (Term.proj («term_-_» `z "-" `x₀) "." `re) (group) "|"))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `sub_re)
                    ","
                    (Tactic.rwRule [] `of_real_re)
                    ","
                    (Tactic.rwRule [] `_root_.abs_sub_comm)]
                   "]")
                  [])]))))
            (calcStep
             («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
             ":="
             (Term.app `abs_re_le_abs [(Term.hole "_")]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
        ":="
        (Term.app
         (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
         [`hz]))
       [(calcStep
         («term_≤_»
          (Term.hole "_")
          "≤"
          («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
         ":="
         (Term.app `le_abs_self [(Term.hole "_")]))
        (calcStep
         («term_=_»
          (Term.hole "_")
          "="
          («term|___|» (group "|") (Term.proj («term_-_» `z "-" `x₀) "." `re) (group) "|"))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `sub_re)
                ","
                (Tactic.rwRule [] `of_real_re)
                ","
                (Tactic.rwRule [] `_root_.abs_sub_comm)]
               "]")
              [])]))))
        (calcStep
         («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
         ":="
         (Term.app `abs_re_le_abs [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs_re_le_abs [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs_re_le_abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.hole "_") "≤" (Term.app `abs [(«term_-_» `z "-" `x₀)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs [(«term_-_» `z "-" `x₀)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `z "-" `x₀)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `z "-" `x₀) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `sub_re)
             ","
             (Tactic.rwRule [] `of_real_re)
             ","
             (Tactic.rwRule [] `_root_.abs_sub_comm)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `sub_re)
         ","
         (Tactic.rwRule [] `of_real_re)
         ","
         (Tactic.rwRule [] `_root_.abs_sub_comm)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.abs_sub_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       («term|___|» (group "|") (Term.proj («term_-_» `z "-" `x₀) "." `re) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") (Term.proj («term_-_» `z "-" `x₀) "." `re) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj («term_-_» `z "-" `x₀) "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_-_» `z "-" `x₀)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `z "-" `x₀) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app `le_abs_self [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_abs_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Term.hole "_")
       "≤"
       («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term|___|» (group "|") («term_-_» `x₀ "-" `z.re) (group) "|")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `x₀ "-" `z.re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z.re
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2")) [`hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `le_sub_self_iff [(Term.hole "_")]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_sub_self_iff [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_sub_self_iff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_sub_self_iff [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» `x₀ "≤" («term_-_» `x₀ "-" `z.re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `x₀ "-" `z.re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z.re
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`hz []])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mem_set_of_eq)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_set_of_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `mem_ball)
         ","
         (Tactic.rwRule [] `dist_zero_left)
         ","
         (Tactic.rwRule [] `dist_eq)
         ","
         (Tactic.rwRule [] `norm_eq_abs)
         ","
         (Tactic.rwRule [] (Term.app `Complex.abs_of_nonneg [`hx₀]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Complex.abs_of_nonneg [`hx₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Complex.abs_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_eq_abs
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_zero_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_ball
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`z `hz])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_eq_norm_of_is_max_on_of_ball_subset [`hd `hmax])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hmax
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_eq_norm_of_is_max_on_of_ball_subset
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(num "0")]) "‖")
       "="
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(num "0")]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `z))
          (Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
             [":" («term_<_» (num "0") "<" `z.re)])
            ")"))]
         [])
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          []
          [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_right [`h.le]))] "]")]
          ["using" (Term.app `hle [(Term.hole "_") `hmax (Term.hole "_") `hz.le])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_right [`h.le]))] "]")]
        ["using" (Term.app `hle [(Term.hole "_") `hmax (Term.hole "_") `hz.le])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hle [(Term.hole "_") `hmax (Term.hole "_") `hz.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hmax
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_eq_right [`h.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_eq_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `z))
        (Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.paren
          "("
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
           [":" («term_<_» (num "0") "<" `z.re)])
          ")"))]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<_» (num "0") "<" `z.re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z.re
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.replace'
       "replace"
       [`hmax []]
       [(Term.typeSpec
         ":"
         (Term.app
          `IsMaxOn
          [(«term_∘_» `norm "∘" `f)
           (Set.«term{_|_}»
            "{"
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
            "|"
            («term_<_» (num "0") "<" (Term.proj `z "." `re))
            "}")
           `x₀]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `IsMaxOn
       [(«term_∘_» `norm "∘" `f)
        (Set.«term{_|_}»
         "{"
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
         "|"
         («term_<_» (num "0") "<" (Term.proj `z "." `re))
         "}")
        `x₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.«term{_|_}»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Set.«term{_|_}»
       "{"
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
       "|"
       («term_<_» (num "0") "<" (Term.proj `z "." `re))
       "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<_» (num "0") "<" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      («term_∘_» `norm "∘" `f)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `f
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      `norm
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∘_» `norm "∘" `f) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsMaxOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          ["only"]
          [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_left [`h]))] "]")]
          ["using" (Term.app `hle [(Term.hole "_") `hmax])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] (Term.app `max_eq_left [`h]))] "]")]
        ["using" (Term.app `hle [(Term.hole "_") `hmax])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hle [(Term.hole "_") `hmax])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hmax
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_eq_left [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_eq_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.cases
       "cases"
       [(Tactic.casesTarget
         []
         (Term.app
          `le_or_lt
          [(Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖") `C]))]
       []
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_or_lt [(Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖") `C])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.«term‖_‖»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.«term‖_‖»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_or_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hmax)])
             [])]
           "⟩")])]
       [":"
        («term∃_,_»
         "∃"
         (Lean.explicitBinders
          (Lean.unbracketedExplicitBinders
           [(Lean.binderIdent `x)]
           [":" (Data.Real.Basic.termℝ "ℝ")]))
         ","
         («term_∧_»
          («term_≤_» (num "0") "≤" `x)
          "∧"
          (Term.forall
           "∀"
           [`y]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           (Term.arrow
            («term_≤_» (num "0") "≤" `y)
            "→"
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
             "≤"
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖"))))))]
       [":="
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hfc []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `ContinuousOn
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`x]
                      [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                      "=>"
                      (Term.app `f [`x])))
                    (Term.app `Ici [(num "0")])]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.refine'
                     "refine'"
                     (Term.app
                      `hd.continuous_on.comp
                      [`continuous_of_real.continuous_on
                       (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
                    []
                    (Std.Tactic.tacticRwa__
                     "rwa"
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
                     [])]))))))
             []
             (Classical.«tacticBy_cases_:_»
              "by_cases"
              [`h₀ ":"]
              (Term.forall
               "∀"
               [`x]
               [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
               ","
               (Term.arrow
                («term_≤_» (num "0") "≤" `x)
                "→"
                («term_=_» (Term.app `f [`x]) "=" (num "0")))))
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.refine'
                "refine'"
                (Term.anonymousCtor
                 "⟨"
                 [(num "0")
                  ","
                  `le_rfl
                  ","
                  (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
                 "⟩"))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] (Term.app `h₀ [`y `hy]))
                  ","
                  (Tactic.rwRule [] (Term.app `h₀ [(num "0") `le_rfl]))]
                 "]")
                [])])
             []
             (Mathlib.Tactic.PushNeg.tacticPush_neg__
              "push_neg"
              [(Tactic.location "at" (Tactic.locationHyp [`h₀] []))])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `h₀)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "⟨"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hne)])
                     [])]
                   "⟩")])
                [])])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hlt []]
                [(Term.typeSpec
                  ":"
                  («term_<_»
                   (Analysis.Normed.Group.Basic.«term‖_‖»
                    "‖"
                    (Term.typeAscription "(" (num "0") ":" [`E] ")")
                    "‖")
                   "<"
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Std.Tactic.tacticRwa__
                     "rwa"
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
                      "]")
                     [])]))))))
             []
             (Tactic.tacticSuffices_
              "suffices"
              (Term.sufficesDecl
               []
               (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                "∀ᶠ"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder
                  (Lean.binderIdent `x)
                  [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
                " in "
                (Order.Basic.«term_⊓_»
                 (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
                 " ⊓ "
                 (Term.app
                  (Filter.Order.Filter.Basic.filter.principal "𝓟")
                  [(Term.app `Ici [(num "0")])]))
                ", "
                («term_≤_»
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
                 "≤"
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))
               (Term.byTactic'
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Std.Tactic.Simpa.simpa
                    "simpa"
                    []
                    []
                    (Std.Tactic.Simpa.simpaArgsRest
                     []
                     []
                     ["only"]
                     [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `exists_prop)] "]")]
                     ["using"
                      (Term.app `hfc.norm.exists_forall_ge' [`is_closed_Ici `hx₀ `this])]))])))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `Real.cocompact_eq)
                ","
                (Tactic.rwRule [] `inf_sup_right)
                ","
                (Tactic.rwRule
                 []
                 (Term.proj
                  (Term.app
                   `disjoint_at_bot_principal_Ici
                   [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
                  "."
                  `eq_bot))
                ","
                (Tactic.rwRule [] `bot_sup_eq)]
               "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               (Term.proj
                («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
                "."
                `filter_mono)
               [`inf_le_left]))])))]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hfc []]
             [(Term.typeSpec
               ":"
               (Term.app
                `ContinuousOn
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`x]
                   [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                   "=>"
                   (Term.app `f [`x])))
                 (Term.app `Ici [(num "0")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `hd.continuous_on.comp
                   [`continuous_of_real.continuous_on
                    (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
                 []
                 (Std.Tactic.tacticRwa__
                  "rwa"
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
                  [])]))))))
          []
          (Classical.«tacticBy_cases_:_»
           "by_cases"
           [`h₀ ":"]
           (Term.forall
            "∀"
            [`x]
            [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
            ","
            (Term.arrow
             («term_≤_» (num "0") "≤" `x)
             "→"
             («term_=_» (Term.app `f [`x]) "=" (num "0")))))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.anonymousCtor
              "⟨"
              [(num "0")
               ","
               `le_rfl
               ","
               (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
              "⟩"))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `h₀ [`y `hy]))
               ","
               (Tactic.rwRule [] (Term.app `h₀ [(num "0") `le_rfl]))]
              "]")
             [])])
          []
          (Mathlib.Tactic.PushNeg.tacticPush_neg__
           "push_neg"
           [(Tactic.location "at" (Tactic.locationHyp [`h₀] []))])
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `h₀)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hne)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hlt []]
             [(Term.typeSpec
               ":"
               («term_<_»
                (Analysis.Normed.Group.Basic.«term‖_‖»
                 "‖"
                 (Term.typeAscription "(" (num "0") ":" [`E] ")")
                 "‖")
                "<"
                (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.tacticRwa__
                  "rwa"
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
                   "]")
                  [])]))))))
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
             "∀ᶠ"
             (Std.ExtendedBinder.extBinders
              (Std.ExtendedBinder.extBinder
               (Lean.binderIdent `x)
               [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
             " in "
             (Order.Basic.«term_⊓_»
              (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Term.app `Ici [(num "0")])]))
             ", "
             («term_≤_»
              (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
              "≤"
              (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  ["only"]
                  [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `exists_prop)] "]")]
                  ["using"
                   (Term.app `hfc.norm.exists_forall_ge' [`is_closed_Ici `hx₀ `this])]))])))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `Real.cocompact_eq)
             ","
             (Tactic.rwRule [] `inf_sup_right)
             ","
             (Tactic.rwRule
              []
              (Term.proj
               (Term.app
                `disjoint_at_bot_principal_Ici
                [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
               "."
               `eq_bot))
             ","
             (Tactic.rwRule [] `bot_sup_eq)]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            (Term.proj
             («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
             "."
             `filter_mono)
            [`inf_le_left]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj
         («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
         "."
         `filter_mono)
        [`inf_le_left]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
        "."
        `filter_mono)
       [`inf_le_left])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inf_le_left
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
       "."
       `filter_mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `ge_mem_nhds [`hlt])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hlt
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ge_mem_nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hre.norm.eventually
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hre.norm.eventually "<|" (Term.app `ge_mem_nhds [`hlt]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Real.cocompact_eq)
         ","
         (Tactic.rwRule [] `inf_sup_right)
         ","
         (Tactic.rwRule
          []
          (Term.proj
           (Term.app
            `disjoint_at_bot_principal_Ici
            [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
           "."
           `eq_bot))
         ","
         (Tactic.rwRule [] `bot_sup_eq)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `bot_sup_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `disjoint_at_bot_principal_Ici
        [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
       "."
       `eq_bot)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `disjoint_at_bot_principal_Ici
       [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `disjoint_at_bot_principal_Ici
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `disjoint_at_bot_principal_Ici
      [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inf_sup_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.cocompact_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticSuffices_
       "suffices"
       (Term.sufficesDecl
        []
        (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
         "∀ᶠ"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder
           (Lean.binderIdent `x)
           [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
         " in "
         (Order.Basic.«term_⊓_»
          (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
          " ⊓ "
          (Term.app (Filter.Order.Filter.Basic.filter.principal "𝓟") [(Term.app `Ici [(num "0")])]))
         ", "
         («term_≤_»
          (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
          "≤"
          (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))
        (Term.byTactic'
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `exists_prop)] "]")]
              ["using" (Term.app `hfc.norm.exists_forall_ge' [`is_closed_Ici `hx₀ `this])]))])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `exists_prop)] "]")]
        ["using" (Term.app `hfc.norm.exists_forall_ge' [`is_closed_Ici `hx₀ `this])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hfc.norm.exists_forall_ge' [`is_closed_Ici `hx₀ `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `is_closed_Ici
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hfc.norm.exists_forall_ge'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `exists_prop
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
       "∀ᶠ"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `x)
         [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
       " in "
       (Order.Basic.«term_⊓_»
        (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
        " ⊓ "
        (Term.app (Filter.Order.Filter.Basic.filter.principal "𝓟") [(Term.app `Ici [(num "0")])]))
       ", "
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
        "≤"
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
       "≤"
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Order.Basic.«term_⊓_»
       (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
       " ⊓ "
       (Term.app (Filter.Order.Filter.Basic.filter.principal "𝓟") [(Term.app `Ici [(num "0")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Filter.Order.Filter.Basic.filter.principal "𝓟") [(Term.app `Ici [(num "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ici [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ici
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Ici [(num "0")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Filter.Order.Filter.Basic.filter.principal "𝓟")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 69, term))
      (Term.app `cocompact [(Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `cocompact
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 69 >? 1022, (some 1023, term) <=? (some 69, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 69, (some 70, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hlt []]
         [(Term.typeSpec
           ":"
           («term_<_»
            (Analysis.Normed.Group.Basic.«term‖_‖»
             "‖"
             (Term.typeAscription "(" (num "0") ":" [`E] ")")
             "‖")
            "<"
            (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Std.Tactic.tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
               "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRwa__
       "rwa"
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `norm_zero) "," (Tactic.rwRule [] `norm_pos_iff)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_pos_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<_»
       (Analysis.Normed.Group.Basic.«term‖_‖»
        "‖"
        (Term.typeAscription "(" (num "0") ":" [`E] ")")
        "‖")
       "<"
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x₀]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x₀])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖»
       "‖"
       (Term.typeAscription "(" (num "0") ":" [`E] ")")
       "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "0") ":" [`E] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `E
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `h₀)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x₀)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx₀)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hne)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h₀
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.PushNeg.tacticPush_neg__
       "push_neg"
       [(Tactic.location "at" (Tactic.locationHyp [`h₀] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h₀
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "⟨"
          [(num "0")
           ","
           `le_rfl
           ","
           (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
          "⟩"))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] (Term.app `h₀ [`y `hy]))
           ","
           (Tactic.rwRule [] (Term.app `h₀ [(num "0") `le_rfl]))]
          "]")
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] (Term.app `h₀ [`y `hy]))
         ","
         (Tactic.rwRule [] (Term.app `h₀ [(num "0") `le_rfl]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h₀ [(num "0") `le_rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h₀
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h₀ [`y `hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h₀
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(num "0")
         ","
         `le_rfl
         ","
         (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(num "0") "," `le_rfl "," (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`y `hy] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Classical.«tacticBy_cases_:_»
       "by_cases"
       [`h₀ ":"]
       (Term.forall
        "∀"
        [`x]
        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
        ","
        (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow («term_≤_» (num "0") "≤" `x) "→" («term_=_» (Term.app `f [`x]) "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `f [`x]) "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hfc []]
         [(Term.typeSpec
           ":"
           (Term.app
            `ContinuousOn
            [(Term.fun
              "fun"
              (Term.basicFun
               [`x]
               [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
               "=>"
               (Term.app `f [`x])))
             (Term.app `Ici [(num "0")])]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.app
               `hd.continuous_on.comp
               [`continuous_of_real.continuous_on
                (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
             []
             (Std.Tactic.tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `hd.continuous_on.comp
            [`continuous_of_real.continuous_on
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
          []
          (Std.Tactic.tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRwa__
       "rwa"
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `closure_set_of_lt_re)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `closure_set_of_lt_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `hd.continuous_on.comp
        [`continuous_of_real.continuous_on
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hd.continuous_on.comp
       [`continuous_of_real.continuous_on
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `continuous_of_real.continuous_on
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.continuous_on.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `ContinuousOn
       [(Term.fun
         "fun"
         (Term.basicFun
          [`x]
          [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
          "=>"
          (Term.app `f [`x])))
        (Term.app `Ici [(num "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ici [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ici
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Ici [(num "0")]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
        "=>"
        (Term.app `f [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       "=>"
       (Term.app `f [`x])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ContinuousOn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders
        (Lean.unbracketedExplicitBinders [(Lean.binderIdent `x)] [":" (Data.Real.Basic.termℝ "ℝ")]))
       ","
       («term_∧_»
        («term_≤_» (num "0") "≤" `x)
        "∧"
        (Term.forall
         "∀"
         [`y]
         [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
         ","
         (Term.arrow
          («term_≤_» (num "0") "≤" `y)
          "→"
          («term_≤_»
           (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
           "≤"
           (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∧_»
       («term_≤_» (num "0") "≤" `x)
       "∧"
       (Term.forall
        "∀"
        [`y]
        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
        ","
        (Term.arrow
         («term_≤_» (num "0") "≤" `y)
         "→"
         («term_≤_»
          (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
          "≤"
          (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`y]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `y)
        "→"
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
         "≤"
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `y)
       "→"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
        "≤"
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
       "≤"
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`y]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `y)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 35 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 35, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 36 >? 50, (some 51, term) <=? (some 35, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 35, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hle []]
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [`C']
            []
            ","
            (Term.arrow
             (Term.forall
              "∀"
              [`x]
              [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
              ","
              (Term.arrow
               («term_≤_» (num "0") "≤" `x)
               "→"
               («term_≤_»
                (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
                "≤"
                `C')))
             "→"
             (Term.forall
              "∀"
              [`z]
              [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
              ","
              (Term.arrow
               («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
               "→"
               («term_≤_»
                (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
                "≤"
                (Term.app `max [`C `C'])))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`C' `hC' `z `hz])
             []
             (Tactic.cases
              "cases"
              [(Tactic.casesTarget [] (Term.app `le_total [`z.im (num "0")]))]
              []
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.refine'
                "refine'"
                (Term.app
                 `quadrant_IV
                 [(Term.app
                   `hd.mono
                   [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
                  (Term.app
                   `Exists₃Cat.imp
                   [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`x `hx]
                    []
                    "=>"
                    («term_<|_»
                     (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                     "<|"
                     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`x `hx]
                    []
                    "=>"
                    (Term.app
                     (Term.proj (Term.app `him [`x]) "." `trans)
                     [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
                  `hz
                  `h]))
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `hO.mono
                 [(«term_<|_»
                   (Term.app `inf_le_inf_left [(Term.hole "_")])
                   "<|"
                   (Term.app
                    (Term.proj `principal_mono "." (fieldIdx "2"))
                    [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.refine'
                "refine'"
                (Term.app
                 `quadrant_I
                 [(Term.app
                   `hd.mono
                   [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
                  (Term.app
                   `Exists₃Cat.imp
                   [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`x `hx]
                    []
                    "=>"
                    («term_<|_»
                     (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                     "<|"
                     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`x `hx]
                    []
                    "=>"
                    (Term.app
                     (Term.proj (Term.app `him [`x]) "." `trans)
                     [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
                  `hz
                  `h]))
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `hO.mono
                 [(«term_<|_»
                   (Term.app `inf_le_inf_left [(Term.hole "_")])
                   "<|"
                   (Term.app
                    (Term.proj `principal_mono "." (fieldIdx "2"))
                    [(Term.fun
                      "fun"
                      (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`C' `hC' `z `hz])
          []
          (Tactic.cases
           "cases"
           [(Tactic.casesTarget [] (Term.app `le_total [`z.im (num "0")]))]
           []
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              `quadrant_IV
              [(Term.app
                `hd.mono
                [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
               (Term.app
                `Exists₃Cat.imp
                [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `hx]
                 []
                 "=>"
                 («term_<|_»
                  (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                  "<|"
                  (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `hx]
                 []
                 "=>"
                 (Term.app
                  (Term.proj (Term.app `him [`x]) "." `trans)
                  [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
               `hz
               `h]))
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hO.mono
              [(«term_<|_»
                (Term.app `inf_le_inf_left [(Term.hole "_")])
                "<|"
                (Term.app
                 (Term.proj `principal_mono "." (fieldIdx "2"))
                 [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              `quadrant_I
              [(Term.app
                `hd.mono
                [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
               (Term.app
                `Exists₃Cat.imp
                [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `hx]
                 []
                 "=>"
                 («term_<|_»
                  (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
                  "<|"
                  (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `hx]
                 []
                 "=>"
                 (Term.app
                  (Term.proj (Term.app `him [`x]) "." `trans)
                  [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
               `hz
               `h]))
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hO.mono
              [(«term_<|_»
                (Term.app `inf_le_inf_left [(Term.hole "_")])
                "<|"
                (Term.app
                 (Term.proj `principal_mono "." (fieldIdx "2"))
                 [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          `quadrant_I
          [(Term.app
            `hd.mono
            [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
           (Term.app
            `Exists₃Cat.imp
            [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
              "<|"
              (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             (Term.app
              (Term.proj (Term.app `him [`x]) "." `trans)
              [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
           `hz
           `h]))
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hO.mono
          [(«term_<|_»
            (Term.app `inf_le_inf_left [(Term.hole "_")])
            "<|"
            (Term.app
             (Term.proj `principal_mono "." (fieldIdx "2"))
             [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hO.mono
        [(«term_<|_»
          (Term.app `inf_le_inf_left [(Term.hole "_")])
          "<|"
          (Term.app
           (Term.proj `principal_mono "." (fieldIdx "2"))
           [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hO.mono
       [(«term_<|_»
         (Term.app `inf_le_inf_left [(Term.hole "_")])
         "<|"
         (Term.app
          (Term.proj `principal_mono "." (fieldIdx "2"))
          [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.app `inf_le_inf_left [(Term.hole "_")])
       "<|"
       (Term.app
        (Term.proj `principal_mono "." (fieldIdx "2"))
        [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `principal_mono "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `And.left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `principal_mono "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `principal_mono
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.app `inf_le_inf_left [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inf_le_inf_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.app `inf_le_inf_left [(Term.hole "_")])
      "<|"
      (Term.app
       (Term.proj `principal_mono "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hO.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `quadrant_I
        [(Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
         (Term.app
          `Exists₃Cat.imp
          [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
            "<|"
            (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           (Term.app
            (Term.proj (Term.app `him [`x]) "." `trans)
            [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
         `hz
         `h]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_I
       [(Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
        (Term.app
         `Exists₃Cat.imp
         [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
           "<|"
           (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          (Term.app
           (Term.proj (Term.app `him [`x]) "." `trans)
           [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
        `hz
        `h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        (Term.app
         (Term.proj (Term.app `him [`x]) "." `trans)
         [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `him [`x]) "." `trans)
       [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `him [`x]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `him [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `him [`x]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       (Term.app
        (Term.proj (Term.paren "(" (Term.app `him [`x]) ")") "." `trans)
        [(Term.paren "(" (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
         "<|"
         (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
       "<|"
       (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hC' [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hC'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hC' [`x `hx]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_»
        (Term.proj (Term.paren "(" (Term.app `hC' [`x `hx]) ")") "." `trans)
        "<|"
        (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Exists₃Cat.imp
       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hexp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Exists₃Cat.imp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Exists₃Cat.imp
      [(Term.paren "(" (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) ")")
       `hexp])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `And.left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          `quadrant_IV
          [(Term.app
            `hd.mono
            [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
           (Term.app
            `Exists₃Cat.imp
            [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             («term_<|_»
              (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
              "<|"
              (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             (Term.app
              (Term.proj (Term.app `him [`x]) "." `trans)
              [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
           `hz
           `h]))
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hO.mono
          [(«term_<|_»
            (Term.app `inf_le_inf_left [(Term.hole "_")])
            "<|"
            (Term.app
             (Term.proj `principal_mono "." (fieldIdx "2"))
             [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hO.mono
        [(«term_<|_»
          (Term.app `inf_le_inf_left [(Term.hole "_")])
          "<|"
          (Term.app
           (Term.proj `principal_mono "." (fieldIdx "2"))
           [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hO.mono
       [(«term_<|_»
         (Term.app `inf_le_inf_left [(Term.hole "_")])
         "<|"
         (Term.app
          (Term.proj `principal_mono "." (fieldIdx "2"))
          [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.app `inf_le_inf_left [(Term.hole "_")])
       "<|"
       (Term.app
        (Term.proj `principal_mono "." (fieldIdx "2"))
        [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `principal_mono "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `And.left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `principal_mono "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `principal_mono
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.app `inf_le_inf_left [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inf_le_inf_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.app `inf_le_inf_left [(Term.hole "_")])
      "<|"
      (Term.app
       (Term.proj `principal_mono "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hO.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `quadrant_IV
        [(Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
         (Term.app
          `Exists₃Cat.imp
          [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           («term_<|_»
            (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
            "<|"
            (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           (Term.app
            (Term.proj (Term.app `him [`x]) "." `trans)
            [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
         `hz
         `h]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `quadrant_IV
       [(Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
        (Term.app
         `Exists₃Cat.imp
         [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          («term_<|_»
           (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
           "<|"
           (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          (Term.app
           (Term.proj (Term.app `him [`x]) "." `trans)
           [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
        `hz
        `h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        (Term.app
         (Term.proj (Term.app `him [`x]) "." `trans)
         [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `him [`x]) "." `trans)
       [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `him [`x]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `him [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `him [`x]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       (Term.app
        (Term.proj (Term.paren "(" (Term.app `him [`x]) ")") "." `trans)
        [(Term.paren "(" (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        («term_<|_»
         (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
         "<|"
         (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
       "<|"
       (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj (Term.app `hC' [`x `hx]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hC' [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hC'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hC' [`x `hx]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       («term_<|_»
        (Term.proj (Term.paren "(" (Term.app `hC' [`x `hx]) ")") "." `trans)
        "<|"
        (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Exists₃Cat.imp
       [(Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) `hexp])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hexp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Exists₃Cat.imp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Exists₃Cat.imp
      [(Term.paren "(" (Term.fun "fun" (Term.basicFun [`c `hc `B `hO] [] "=>" (Term.hole "_"))) ")")
       `hexp])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `And.left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hd.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hd.mono [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `And.left))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `quadrant_IV
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.cases "cases" [(Tactic.casesTarget [] (Term.app `le_total [`z.im (num "0")]))] [] [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_total [`z.im (num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z.im
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_total
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`C' `hC' `z `hz])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hC'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `C'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`C']
       []
       ","
       (Term.arrow
        (Term.forall
         "∀"
         [`x]
         [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
         ","
         (Term.arrow
          («term_≤_» (num "0") "≤" `x)
          "→"
          («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C')))
        "→"
        (Term.forall
         "∀"
         [`z]
         [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
         ","
         (Term.arrow
          («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
          "→"
          («term_≤_»
           (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
           "≤"
           (Term.app `max [`C `C']))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       (Term.forall
        "∀"
        [`x]
        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
        ","
        (Term.arrow
         («term_≤_» (num "0") "≤" `x)
         "→"
         («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C')))
       "→"
       (Term.forall
        "∀"
        [`z]
        [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
        ","
        (Term.arrow
         («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
         "→"
         («term_≤_»
          (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
          "≤"
          (Term.app `max [`C `C'])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`z]
       [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
        "→"
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
         "≤"
         (Term.app `max [`C `C']))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
       "→"
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
        "≤"
        (Term.app `max [`C `C'])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
       "≤"
       (Term.app `max [`C `C']))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`C `C'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       (Term.arrow
        («term_≤_» (num "0") "≤" `x)
        "→"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C')))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C'))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C'
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_» (num "0") "≤" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.forall
      "∀"
      [`x]
      [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
      ","
      (Term.arrow
       («term_≤_» (num "0") "≤" `x)
       "→"
       («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖") "≤" `C')))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.revert "revert" [`z])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       («term_≤_»
        (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
        "≤"
        `C))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
       "≤"
       `C)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_*_» `x "*" `I)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `x "*" `I)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `x "*" `I) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`x]
          [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
          "=>"
          (Term.app `f [`x])))
        `atTop
        (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `atTop
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
        "=>"
        (Term.app `f [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       "=>"
       (Term.app `f [`x])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `c)
       (Std.ExtendedBinder.«binderTerm<_»
        "<"
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
       ","
       («term∃_,_»
        "∃"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
        ","
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         `f
         " =O["
         (Order.Basic.«term_⊓_»
          (Term.app `comap [`Complex.abs `atTop])
          " ⊓ "
          (Term.app
           (Filter.Order.Filter.Basic.filter.principal "𝓟")
           [(Set.«term{_|_}»
             "{"
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
             "|"
             («term_<_» (num "0") "<" (Term.proj `z "." `re))
             "}")]))
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
       ","
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        `f
        " =O["
        (Order.Basic.«term_⊓_»
         (Term.app `comap [`Complex.abs `atTop])
         " ⊓ "
         (Term.app
          (Filter.Order.Filter.Basic.filter.principal "𝓟")
          [(Set.«term{_|_}»
            "{"
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
            "|"
            («term_<_» (num "0") "<" (Term.proj `z "." `re))
            "}")]))
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       `f
       " =O["
       (Order.Basic.«term_⊓_»
        (Term.app `comap [`Complex.abs `atTop])
        " ⊓ "
        (Term.app
         (Filter.Order.Filter.Basic.filter.principal "𝓟")
         [(Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
           "|"
           («term_<_» (num "0") "<" (Term.proj `z "." `re))
           "}")]))
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the right half-plane. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open right half-plane and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant `C` on the imaginary axis;
    * `f x → 0` as `x : ℝ` tends to infinity.
    
    Then `‖f z‖` is bounded from above by the same constant on the closed right half-plane.
    See also `phragmen_lindelof.right_half_plane_of_bounded_on_real` for a stronger version. -/
  theorem
    right_half_plane_of_tendsto_zero_on_real
    ( hd : DiffContOnCl ℂ f { z | 0 < z . re } )
        (
          hexp
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃
                B
                ,
                f =O[ comap Complex.abs atTop ⊓ 𝓟 { z | 0 < z . re } ] fun z => expR B * abs z ^ c
          )
        ( hre : Tendsto fun x : ℝ => f x atTop 𝓝 0 )
        ( him : ∀ x : ℝ , ‖ f x * I ‖ ≤ C )
        ( hz : 0 ≤ z . re )
      : ‖ f z ‖ ≤ C
    :=
      by
        revert z
          have
            hle
              : ∀ C' , ∀ x : ℝ , 0 ≤ x → ‖ f x ‖ ≤ C' → ∀ z : ℂ , 0 ≤ z . re → ‖ f z ‖ ≤ max C C'
              :=
              by
                intro C' hC' z hz
                  cases le_total z.im 0
                  ·
                    refine'
                        quadrant_IV
                          hd.mono fun _ => And.left
                            Exists₃Cat.imp fun c hc B hO => _ hexp
                            fun x hx => hC' x hx . trans <| le_max_right _ _
                            fun x hx => him x . trans le_max_left _ _
                            hz
                            h
                      exact hO.mono inf_le_inf_left _ <| principal_mono . 2 fun _ => And.left
                  ·
                    refine'
                        quadrant_I
                          hd.mono fun _ => And.left
                            Exists₃Cat.imp fun c hc B hO => _ hexp
                            fun x hx => hC' x hx . trans <| le_max_right _ _
                            fun x hx => him x . trans le_max_left _ _
                            hz
                            h
                      exact hO.mono inf_le_inf_left _ <| principal_mono . 2 fun _ => And.left
          obtain
            ⟨ x₀ , hx₀ , hmax ⟩
            : ∃ x : ℝ , 0 ≤ x ∧ ∀ y : ℝ , 0 ≤ y → ‖ f y ‖ ≤ ‖ f x ‖
            :=
              by
                have
                    hfc
                      : ContinuousOn fun x : ℝ => f x Ici 0
                      :=
                      by
                        refine' hd.continuous_on.comp continuous_of_real.continuous_on fun x hx => _
                          rwa [ closure_set_of_lt_re ]
                  by_cases h₀ : ∀ x : ℝ , 0 ≤ x → f x = 0
                  · refine' ⟨ 0 , le_rfl , fun y hy => _ ⟩ rw [ h₀ y hy , h₀ 0 le_rfl ]
                  push_neg at h₀
                  rcases h₀ with ⟨ x₀ , hx₀ , hne ⟩
                  have hlt : ‖ ( 0 : E ) ‖ < ‖ f x₀ ‖ := by rwa [ norm_zero , norm_pos_iff ]
                  suffices
                    ∀ᶠ x : ℝ in cocompact ℝ ⊓ 𝓟 Ici 0 , ‖ f x ‖ ≤ ‖ f x₀ ‖
                      by
                        simpa
                          only
                            [ exists_prop ]
                            using hfc.norm.exists_forall_ge' is_closed_Ici hx₀ this
                  rw
                    [
                      Real.cocompact_eq
                        ,
                        inf_sup_right
                        ,
                        disjoint_at_bot_principal_Ici ( 0 : ℝ ) . eq_bot
                        ,
                        bot_sup_eq
                      ]
                  exact hre.norm.eventually <| ge_mem_nhds hlt . filter_mono inf_le_left
          cases le_or_lt ‖ f x₀ ‖ C
          · simpa only [ max_eq_left h ] using hle _ hmax
          ·
            replace hmax : IsMaxOn norm ∘ f { z | 0 < z . re } x₀
              · rintro z ( hz : 0 < z.re ) simpa [ max_eq_right h.le ] using hle _ hmax _ hz.le
              have
                : ‖ f 0 ‖ = ‖ f x₀ ‖
                  :=
                  by
                    apply norm_eq_norm_of_is_max_on_of_ball_subset hd hmax
                      intro z hz
                      rw
                        [
                          mem_ball
                            ,
                            dist_zero_left
                            ,
                            dist_eq
                            ,
                            norm_eq_abs
                            ,
                            Complex.abs_of_nonneg hx₀
                          ]
                        at hz
                      rw [ mem_set_of_eq ]
                      contrapose! hz
                      calc
                        x₀ ≤ x₀ - z.re := le_sub_self_iff _ . 2 hz
                        _ ≤ | x₀ - z.re | := le_abs_self _
                          _ = | z - x₀ . re | := by rw [ sub_re , of_real_re , _root_.abs_sub_comm ]
                          _ ≤ abs z - x₀ := abs_re_le_abs _
              refine' h.not_le <| this ▸ _ . elim
              simpa using him 0
#align
  phragmen_lindelof.right_half_plane_of_tendsto_zero_on_real PhragmenLindelof.right_half_plane_of_tendsto_zero_on_real

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the right half-plane. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open right half-plane and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant `C` on the imaginary axis;\n* `‖f x‖` is bounded from above by a constant for large real values of `x`.\n\nThen `‖f z‖` is bounded from above by `C` on the closed right half-plane.\nSee also `phragmen_lindelof.right_half_plane_of_tendsto_zero_on_real` for a weaker version. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `right_half_plane_of_bounded_on_real [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.«term{_|_}»
             "{"
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
             "|"
             («term_<_» (num "0") "<" (Term.proj `z "." `re))
             "}")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hexp]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.«term{_|_}»
                 "{"
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                 "|"
                 («term_<_» (num "0") "<" (Term.proj `z "." `re))
                 "}")]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.app
           `IsBoundedUnder
           [(Term.paren "(" («term_≤_» (Term.cdot "·") "≤" (Term.cdot "·")) ")")
            `atTop
            (Term.fun
             "fun"
             (Term.basicFun
              [`x]
              [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
              "=>"
              (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          (Term.forall
           "∀"
           [`x]
           [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
           ","
           («term_≤_»
            (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
            "≤"
            `C))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hz]
         [":" («term_≤_» (num "0") "≤" (Term.proj `z "." `re))]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖") "≤" `C)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
              "∀ᶠ"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder
                (Lean.binderIdent `ε)
                [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
              " in "
              (TopologicalSpace.Topology.Basic.nhds_within.lt "𝓝[<] " (num "0"))
              ", "
              («term_≤_»
               (Analysis.Normed.Group.Basic.«term‖_‖»
                "‖"
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `exp [(«term_*_» `ε "*" `z)])
                 " • "
                 (Term.app `f [`z]))
                "‖")
               "≤"
               `C))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `le_of_tendsto
                   [(Term.app `tendsto.mono_left [(Term.hole "_") `nhds_within_le_nhds]) `this]))
                 []
                 (Tactic.apply
                  "apply"
                  (Term.proj
                   (Term.proj
                    (Term.app
                     (Term.proj
                      (Term.proj (Term.app `continuous_of_real.mul [`continuous_const]) "." `cexp)
                      "."
                      `smul)
                     [`continuous_const])
                    "."
                    `norm)
                   "."
                   `tendsto'))
                 []
                 (Tactic.simp "simp" [] [] [] [] [])
                 []
                 (Tactic.tacticInfer_instance "infer_instance")])))))
           []
           (Tactic.filterUpwards
            "filter_upwards"
            [(Tactic.termList "[" [`self_mem_nhds_within] "]")]
            ["with" [`ε `ε₀]]
            [])
           []
           (Tactic.change
            "change"
            («term_<_» `ε "<" (num "0"))
            [(Tactic.location "at" (Tactic.locationHyp [`ε₀] []))])
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `g
             [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Algebra.Group.Defs.«term_•_»
                (Term.app `exp [(«term_*_» `ε "*" `z)])
                " • "
                (Term.app `f [`z]))))
             []))
           []
           (Tactic.change
            "change"
            («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`z]) "‖") "≤" `C)
            [])
           []
           (Mathlib.Tactic.replace'
            "replace"
            [`hd []]
            [(Term.typeSpec
              ":"
              (Term.app
               `DiffContOnCl
               [(Data.Complex.Basic.termℂ "ℂ")
                `g
                (Set.«term{_|_}»
                 "{"
                 (Std.ExtendedBinder.extBinder
                  (Lean.binderIdent `z)
                  [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
                 "|"
                 («term_<_» (num "0") "<" (Term.proj `z "." `re))
                 "}")]))])
           []
           (Tactic.exact
            "exact"
            (Term.app
             (Term.proj
              (Term.proj
               (Term.proj (Term.app `differentiable_id.const_mul [(Term.hole "_")]) "." `cexp)
               "."
               `DiffContOnCl)
              "."
              `smul)
             [`hd]))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hgn []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`z]
                 []
                 ","
                 («term_=_»
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`z]) "‖")
                  "="
                  («term_*_»
                   (Term.app
                    (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                    [(«term_*_» `ε "*" (Term.proj `z "." `re))])
                   "*"
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`z])
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `norm_smul)
                     ","
                     (Tactic.rwRule [] `norm_eq_abs)
                     ","
                     (Tactic.rwRule [] `abs_exp)
                     ","
                     (Tactic.rwRule [] `of_real_mul_re)]
                    "]")
                   [])]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `right_half_plane_of_tendsto_zero_on_real
             [`hd
              (Term.hole "_")
              (Term.hole "_")
              (Term.fun "fun" (Term.basicFun [`y] [] "=>" (Term.hole "_")))
              `hz]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.refine'
              "refine'"
              (Term.app
               `Exists₃Cat.imp
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [`c `hc `B `hO]
                  []
                  "=>"
                  (Term.app
                   (Term.proj (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]) "." `trans)
                   [`hO])))
                `hexp]))
             []
             (Tactic.refine'
              "refine'"
              («term_<|_»
               (Term.proj `eventually_inf_principal "." (fieldIdx "2"))
               "<|"
               (Term.app
                `eventually_of_forall
                [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hgn) "," (Tactic.rwRule [] `one_mul)] "]")
              [])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `mul_le_of_le_one_left
               [(Term.app `norm_nonneg [(Term.hole "_")])
                (Term.app (Term.proj `Real.exp_le_one_iff "." (fieldIdx "2")) [(Term.hole "_")])]))
             []
             (Tactic.exact
              "exact"
              (Term.app `mul_nonpos_of_nonpos_of_nonneg [`ε₀.le (Term.app `le_of_lt [`hz])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Mathlib.Tactic.tacticSimp_rw__
              "simp_rw"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `g)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_mul)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)
                ","
                (Tactic.rwRule [] `coe_smul)]
               "]")
              [])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h₀ []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `tendsto
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`x]
                      [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                      "=>"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_» `ε "*" `x)])))
                    `at_top
                    (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])]))]
                ":="
                (Term.app
                 `real.tendsto_exp_at_bot.comp
                 [(Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])]))))
             []
             (Tactic.exact "exact" (Term.app `h₀.zero_smul_is_bounded_under_le [`hre]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `hgn)
                ","
                (Tactic.rwRule [] `of_real_mul_re)
                ","
                (Tactic.rwRule [] `I_re)
                ","
                (Tactic.rwRule [] `mul_zero)
                ","
                (Tactic.rwRule [] `mul_zero)
                ","
                (Tactic.rwRule [] `Real.exp_zero)
                ","
                (Tactic.rwRule [] `one_mul)]
               "]")
              [])
             []
             (Tactic.exact "exact" (Term.app `him [`y]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
             "∀ᶠ"
             (Std.ExtendedBinder.extBinders
              (Std.ExtendedBinder.extBinder
               (Lean.binderIdent `ε)
               [(group ":" (Data.Real.Basic.termℝ "ℝ"))]))
             " in "
             (TopologicalSpace.Topology.Basic.nhds_within.lt "𝓝[<] " (num "0"))
             ", "
             («term_≤_»
              (Analysis.Normed.Group.Basic.«term‖_‖»
               "‖"
               (Algebra.Group.Defs.«term_•_»
                (Term.app `exp [(«term_*_» `ε "*" `z)])
                " • "
                (Term.app `f [`z]))
               "‖")
              "≤"
              `C))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.refine'
                 "refine'"
                 (Term.app
                  `le_of_tendsto
                  [(Term.app `tendsto.mono_left [(Term.hole "_") `nhds_within_le_nhds]) `this]))
                []
                (Tactic.apply
                 "apply"
                 (Term.proj
                  (Term.proj
                   (Term.app
                    (Term.proj
                     (Term.proj (Term.app `continuous_of_real.mul [`continuous_const]) "." `cexp)
                     "."
                     `smul)
                    [`continuous_const])
                   "."
                   `norm)
                  "."
                  `tendsto'))
                []
                (Tactic.simp "simp" [] [] [] [] [])
                []
                (Tactic.tacticInfer_instance "infer_instance")])))))
          []
          (Tactic.filterUpwards
           "filter_upwards"
           [(Tactic.termList "[" [`self_mem_nhds_within] "]")]
           ["with" [`ε `ε₀]]
           [])
          []
          (Tactic.change
           "change"
           («term_<_» `ε "<" (num "0"))
           [(Tactic.location "at" (Tactic.locationHyp [`ε₀] []))])
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `g
            [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`z]
              []
              "=>"
              (Algebra.Group.Defs.«term_•_»
               (Term.app `exp [(«term_*_» `ε "*" `z)])
               " • "
               (Term.app `f [`z]))))
            []))
          []
          (Tactic.change
           "change"
           («term_≤_» (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`z]) "‖") "≤" `C)
           [])
          []
          (Mathlib.Tactic.replace'
           "replace"
           [`hd []]
           [(Term.typeSpec
             ":"
             (Term.app
              `DiffContOnCl
              [(Data.Complex.Basic.termℂ "ℂ")
               `g
               (Set.«term{_|_}»
                "{"
                (Std.ExtendedBinder.extBinder
                 (Lean.binderIdent `z)
                 [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
                "|"
                («term_<_» (num "0") "<" (Term.proj `z "." `re))
                "}")]))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            (Term.proj
             (Term.proj
              (Term.proj (Term.app `differentiable_id.const_mul [(Term.hole "_")]) "." `cexp)
              "."
              `DiffContOnCl)
             "."
             `smul)
            [`hd]))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hgn []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`z]
                []
                ","
                («term_=_»
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`z]) "‖")
                 "="
                 («term_*_»
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(«term_*_» `ε "*" (Term.proj `z "." `re))])
                  "*"
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`z])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `norm_smul)
                    ","
                    (Tactic.rwRule [] `norm_eq_abs)
                    ","
                    (Tactic.rwRule [] `abs_exp)
                    ","
                    (Tactic.rwRule [] `of_real_mul_re)]
                   "]")
                  [])]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `right_half_plane_of_tendsto_zero_on_real
            [`hd
             (Term.hole "_")
             (Term.hole "_")
             (Term.fun "fun" (Term.basicFun [`y] [] "=>" (Term.hole "_")))
             `hz]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              `Exists₃Cat.imp
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`c `hc `B `hO]
                 []
                 "=>"
                 (Term.app
                  (Term.proj (Term.app `is_O.of_bound [(num "1") (Term.hole "_")]) "." `trans)
                  [`hO])))
               `hexp]))
            []
            (Tactic.refine'
             "refine'"
             («term_<|_»
              (Term.proj `eventually_inf_principal "." (fieldIdx "2"))
              "<|"
              (Term.app
               `eventually_of_forall
               [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hgn) "," (Tactic.rwRule [] `one_mul)] "]")
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `mul_le_of_le_one_left
              [(Term.app `norm_nonneg [(Term.hole "_")])
               (Term.app (Term.proj `Real.exp_le_one_iff "." (fieldIdx "2")) [(Term.hole "_")])]))
            []
            (Tactic.exact
             "exact"
             (Term.app `mul_nonpos_of_nonpos_of_nonneg [`ε₀.le (Term.app `le_of_lt [`hz])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Mathlib.Tactic.tacticSimp_rw__
             "simp_rw"
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `g)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_mul)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)
               ","
               (Tactic.rwRule [] `coe_smul)]
              "]")
             [])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h₀ []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `tendsto
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`x]
                     [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                     "=>"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_» `ε "*" `x)])))
                   `at_top
                   (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])]))]
               ":="
               (Term.app
                `real.tendsto_exp_at_bot.comp
                [(Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])]))))
            []
            (Tactic.exact "exact" (Term.app `h₀.zero_smul_is_bounded_under_le [`hre]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hgn)
               ","
               (Tactic.rwRule [] `of_real_mul_re)
               ","
               (Tactic.rwRule [] `I_re)
               ","
               (Tactic.rwRule [] `mul_zero)
               ","
               (Tactic.rwRule [] `mul_zero)
               ","
               (Tactic.rwRule [] `Real.exp_zero)
               ","
               (Tactic.rwRule [] `one_mul)]
              "]")
             [])
            []
            (Tactic.exact "exact" (Term.app `him [`y]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `hgn)
           ","
           (Tactic.rwRule [] `of_real_mul_re)
           ","
           (Tactic.rwRule [] `I_re)
           ","
           (Tactic.rwRule [] `mul_zero)
           ","
           (Tactic.rwRule [] `mul_zero)
           ","
           (Tactic.rwRule [] `Real.exp_zero)
           ","
           (Tactic.rwRule [] `one_mul)]
          "]")
         [])
        []
        (Tactic.exact "exact" (Term.app `him [`y]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `him [`y]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `him [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `him
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hgn)
         ","
         (Tactic.rwRule [] `of_real_mul_re)
         ","
         (Tactic.rwRule [] `I_re)
         ","
         (Tactic.rwRule [] `mul_zero)
         ","
         (Tactic.rwRule [] `mul_zero)
         ","
         (Tactic.rwRule [] `Real.exp_zero)
         ","
         (Tactic.rwRule [] `one_mul)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_mul_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hgn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Mathlib.Tactic.tacticSimp_rw__
         "simp_rw"
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `g)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_mul)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `of_real_exp)
           ","
           (Tactic.rwRule [] `coe_smul)]
          "]")
         [])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h₀ []]
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`x]
                 [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                 "=>"
                 (Term.app
                  (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                  [(«term_*_» `ε "*" `x)])))
               `at_top
               (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])]))]
           ":="
           (Term.app
            `real.tendsto_exp_at_bot.comp
            [(Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])]))))
        []
        (Tactic.exact "exact" (Term.app `h₀.zero_smul_is_bounded_under_le [`hre]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `h₀.zero_smul_is_bounded_under_le [`hre]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h₀.zero_smul_is_bounded_under_le [`hre])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h₀.zero_smul_is_bounded_under_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h₀ []]
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`x]
               [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `ε "*" `x)])))
             `at_top
             (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])]))]
         ":="
         (Term.app
          `real.tendsto_exp_at_bot.comp
          [(Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `real.tendsto_exp_at_bot.comp
       [(Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_id
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ε₀
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_const_nhds.neg_mul_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `tendsto_const_nhds.neg_mul_at_top [`ε₀ `tendsto_id])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `real.tendsto_exp_at_bot.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`x]
          [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
          "=>"
          (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(«term_*_» `ε "*" `x)])))
        `at_top
        (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [(num "0")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
        "=>"
        (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(«term_*_» `ε "*" `x)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(«term_*_» `ε "*" `x)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `ε "*" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `ε "*" `x) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the right half-plane. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open right half-plane and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant `C` on the imaginary axis;
    * `‖f x‖` is bounded from above by a constant for large real values of `x`.
    
    Then `‖f z‖` is bounded from above by `C` on the closed right half-plane.
    See also `phragmen_lindelof.right_half_plane_of_tendsto_zero_on_real` for a weaker version. -/
  theorem
    right_half_plane_of_bounded_on_real
    ( hd : DiffContOnCl ℂ f { z | 0 < z . re } )
        (
          hexp
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃
                B
                ,
                f =O[ comap Complex.abs atTop ⊓ 𝓟 { z | 0 < z . re } ] fun z => expR B * abs z ^ c
          )
        ( hre : IsBoundedUnder ( · ≤ · ) atTop fun x : ℝ => ‖ f x ‖ )
        ( him : ∀ x : ℝ , ‖ f x * I ‖ ≤ C )
        ( hz : 0 ≤ z . re )
      : ‖ f z ‖ ≤ C
    :=
      by
        suffices
            ∀ᶠ ε : ℝ in 𝓝[<] 0 , ‖ exp ε * z • f z ‖ ≤ C
              by
                refine' le_of_tendsto tendsto.mono_left _ nhds_within_le_nhds this
                  apply
                    continuous_of_real.mul continuous_const . cexp . smul continuous_const . norm
                      .
                      tendsto'
                  simp
                  infer_instance
          filter_upwards [ self_mem_nhds_within ] with ε ε₀
          change ε < 0 at ε₀
          set g : ℂ → E := fun z => exp ε * z • f z
          change ‖ g z ‖ ≤ C
          replace hd : DiffContOnCl ℂ g { z : ℂ | 0 < z . re }
          exact differentiable_id.const_mul _ . cexp . DiffContOnCl . smul hd
          have
            hgn
              : ∀ z , ‖ g z ‖ = expR ε * z . re * ‖ f z ‖
              :=
              by intro z rw [ norm_smul , norm_eq_abs , abs_exp , of_real_mul_re ]
          refine' right_half_plane_of_tendsto_zero_on_real hd _ _ fun y => _ hz
          ·
            refine' Exists₃Cat.imp fun c hc B hO => is_O.of_bound 1 _ . trans hO hexp
              refine' eventually_inf_principal . 2 <| eventually_of_forall fun z hz => _
              rw [ hgn , one_mul ]
              refine' mul_le_of_le_one_left norm_nonneg _ Real.exp_le_one_iff . 2 _
              exact mul_nonpos_of_nonpos_of_nonneg ε₀.le le_of_lt hz
          ·
            simp_rw [ g , ← of_real_mul , ← of_real_exp , coe_smul ]
              have
                h₀
                  : tendsto fun x : ℝ => expR ε * x at_top 𝓝 0
                  :=
                  real.tendsto_exp_at_bot.comp tendsto_const_nhds.neg_mul_at_top ε₀ tendsto_id
              exact h₀.zero_smul_is_bounded_under_le hre
          ·
            rw [ hgn , of_real_mul_re , I_re , mul_zero , mul_zero , Real.exp_zero , one_mul ]
              exact him y
#align
  phragmen_lindelof.right_half_plane_of_bounded_on_real PhragmenLindelof.right_half_plane_of_bounded_on_real

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the right half-plane. Let `f : ℂ → E` be a function such that\n\n* `f` is differentiable in the open right half-plane and is continuous on its closure;\n* `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane\n  for some `c < 2`;\n* `‖f z‖` is bounded from above by a constant on the imaginary axis;\n* `f x`, `x : ℝ`, tends to zero superexponentially fast as `x → ∞`:\n  for any natural `n`, `exp (n * x) * ‖f x‖` tends to zero as `x → ∞`.\n\nThen `f` is equal to zero on the closed right half-plane. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_on_right_half_plane_of_superexponential_decay [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.«term{_|_}»
             "{"
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
             "|"
             («term_<_» (num "0") "<" (Term.proj `z "." `re))
             "}")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hexp]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.«term{_|_}»
                 "{"
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                 "|"
                 («term_<_» (num "0") "<" (Term.proj `z "." `re))
                 "}")]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.app
           `SuperpolynomialDecay
           [`atTop
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            (Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`x]) "‖")))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`him]
         [":"
          («term∃_,_»
           "∃"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `C)] []))
           ","
           (Term.forall
            "∀"
            [`x]
            [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
            ","
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          (num "0")
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `z)
            [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
           "|"
           («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `him)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `C)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hC)])
                   [])]
                 "⟩")])
              [])])
           []
           (Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (Term.forall
              "∀"
              [`z]
              [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
              ","
              (Term.arrow
               («term_<_» (num "0") "<" (Term.proj `z "." `re))
               "→"
               («term_=_» (Term.app `f [`z]) "=" (num "0"))))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `closure_set_of_lt_re)] "]")]
                   ["using"
                    (Term.app
                     `eq_on.of_subset_closure
                     [`this
                      `hd.continuous_on
                      `continuous_on_const
                      `subset_closure
                      `subset.rfl])]))])))))
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `g
             [":" (Term.arrow (termℕ "ℕ") "→" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`n `z]
               []
               "=>"
               (Algebra.Group.Defs.«term_•_»
                («term_^_» (Term.app `exp [`z]) "^" `n)
                " • "
                (Term.app `f [`z]))))
             []))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hg []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`n `z]
                 []
                 ","
                 («term_=_»
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`n `z]) "‖")
                  "="
                  («term_*_»
                   («term_^_»
                    (Term.app
                     (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                     [(Term.proj `z "." `re)])
                    "^"
                    `n)
                   "*"
                   (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`n `z])
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `norm_smul)
                     ","
                     (Tactic.simpLemma [] [] `norm_eq_abs)
                     ","
                     (Tactic.simpLemma [] [] `Complex.abs_pow)
                     ","
                     (Tactic.simpLemma [] [] `abs_exp)]
                    "]"]
                   [])]))))))
           []
           (Tactic.intro "intro" [`z `hz])
           []
           (Mathlib.Tactic.tacticSuffices_
            "suffices"
            [`H []]
            [(Term.typeSpec
              ":"
              (Term.forall
               "∀"
               [`n]
               [(Term.typeSpec ":" (termℕ "ℕ"))]
               ","
               («term_≤_»
                (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`n `z]) "‖")
                "≤"
                `C)))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`H []])
             []
             (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
             []
             (Tactic.exact
              "exact"
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj
                   (Term.app
                    `tendsto_pow_at_top_at_top_of_one_lt
                    [(Term.app (Term.proj `Real.one_lt_exp_iff "." (fieldIdx "2")) [`hz])])
                   "."
                   `at_top_mul)
                  [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`H])
                   `tendsto_const_nhds])
                 "."
                 `Eventually)
                [(Term.app `eventually_gt_at_top [`C])])
               "."
               `exists))])
           []
           (Tactic.intro "intro" [`n])
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `right_half_plane_of_tendsto_zero_on_real
             [(Term.app
               (Term.proj
                (Term.proj (Term.app `differentiable_exp.pow [`n]) "." `DiffContOnCl)
                "."
                `smul)
               [`hd])
              (Term.hole "_")
              (Term.hole "_")
              (Term.fun "fun" (Term.basicFun [`y] [] "=>" (Term.hole "_")))
              `hz.le]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `hexp)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "⟨"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                     [])]
                   "⟩")])
                [])])
             []
             (Tactic.refine'
              "refine'"
              (Term.anonymousCtor
               "⟨"
               [(Term.app `max [`c (num "1")])
                ","
                (Term.app `max_lt [`hc `one_lt_two])
                ","
                («term_+_» `n "+" (Term.app `max [`B (num "0")]))
                ","
                (Term.app `is_O.of_norm_left [(Term.hole "_")])]
               "⟩"))
             []
             (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj
                (Term.app
                 (Term.proj
                  (Term.app
                   `is_O_refl
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`z]
                      [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                      "=>"
                      («term_^_»
                       (Term.app
                        (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                        [(Term.proj `z "." `re)])
                       "^"
                       `n)))
                    (Term.hole "_")])
                  "."
                  `mul)
                 [`hO.norm_left])
                "."
                `trans)
               [(Term.app `is_O.of_bound [(num "1") (Term.hole "_")])]))
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_nat_mul)
                ","
                (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_add)
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `Real.norm_of_nonneg
                  [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
                ","
                (Tactic.simpLemma [] [] `Real.exp_le_exp)
                ","
                (Tactic.simpLemma [] [] `add_mul)
                ","
                (Tactic.simpLemma [] [] `eventually_inf_principal)
                ","
                (Tactic.simpLemma [] [] `eventually_comap)
                ","
                (Tactic.simpLemma [] [] `one_mul)]
               "]"]
              [])
             []
             (Tactic.filterUpwards
              "filter_upwards"
              [(Tactic.termList
                "["
                [(Term.app
                  `eventually_ge_at_top
                  [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])]
                "]")]
              ["with" [`r `hr `z `hzr `hre]]
              [])
             []
             (Tactic.subst "subst" [`r])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `add_le_add
               [(Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg])
                (Term.hole "_")]))
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(calcTactic
                "calc"
                (calcStep
                 («term_≤_» `z.re "≤" (Term.app `abs [`z]))
                 ":="
                 (Term.app `re_le_abs [(Term.hole "_")]))
                [(calcStep
                  («term_=_»
                   (Term.hole "_")
                   "="
                   («term_^_»
                    (Term.app `abs [`z])
                    "^"
                    (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")))
                  ":="
                  (Term.proj (Term.app `Real.rpow_one [(Term.hole "_")]) "." `symm))
                 (calcStep
                  («term_≤_»
                   (Term.hole "_")
                   "≤"
                   («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")])))
                  ":="
                  (Term.app
                   `Real.rpow_le_rpow_of_exponent_le
                   [`hr (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.app
                 `mul_le_mul
                 [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
                  (Term.app
                   `Real.rpow_le_rpow_of_exponent_le
                   [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
                  (Term.app
                   `Real.rpow_nonneg_of_nonneg
                   [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
                  (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_zero_iff_norm_tendsto_zero)] "]")
              [])
             []
             (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
             []
             (Tactic.exact "exact" (Term.app `hre [`n]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `hg)
                ","
                (Tactic.rwRule [] `of_real_mul_re)
                ","
                (Tactic.rwRule [] `I_re)
                ","
                (Tactic.rwRule [] `mul_zero)
                ","
                (Tactic.rwRule [] `Real.exp_zero)
                ","
                (Tactic.rwRule [] `one_pow)
                ","
                (Tactic.rwRule [] `one_mul)]
               "]")
              [])
             []
             (Tactic.exact "exact" (Term.app `hC [`y]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `him)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `C)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hC)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Term.forall
             "∀"
             [`z]
             [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
             ","
             (Term.arrow
              («term_<_» (num "0") "<" (Term.proj `z "." `re))
              "→"
              («term_=_» (Term.app `f [`z]) "=" (num "0"))))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  ["only"]
                  [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `closure_set_of_lt_re)] "]")]
                  ["using"
                   (Term.app
                    `eq_on.of_subset_closure
                    [`this
                     `hd.continuous_on
                     `continuous_on_const
                     `subset_closure
                     `subset.rfl])]))])))))
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `g
            [":" (Term.arrow (termℕ "ℕ") "→" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`n `z]
              []
              "=>"
              (Algebra.Group.Defs.«term_•_»
               («term_^_» (Term.app `exp [`z]) "^" `n)
               " • "
               (Term.app `f [`z]))))
            []))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hg []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`n `z]
                []
                ","
                («term_=_»
                 (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`n `z]) "‖")
                 "="
                 («term_*_»
                  («term_^_»
                   (Term.app
                    (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                    [(Term.proj `z "." `re)])
                   "^"
                   `n)
                  "*"
                  (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [`z]) "‖")))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`n `z])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `norm_smul)
                    ","
                    (Tactic.simpLemma [] [] `norm_eq_abs)
                    ","
                    (Tactic.simpLemma [] [] `Complex.abs_pow)
                    ","
                    (Tactic.simpLemma [] [] `abs_exp)]
                   "]"]
                  [])]))))))
          []
          (Tactic.intro "intro" [`z `hz])
          []
          (Mathlib.Tactic.tacticSuffices_
           "suffices"
           [`H []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "∀"
              [`n]
              [(Term.typeSpec ":" (termℕ "ℕ"))]
              ","
              («term_≤_»
               (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [`n `z]) "‖")
               "≤"
               `C)))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [`H []])
            []
            (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
            []
            (Tactic.exact
             "exact"
             (Term.proj
              (Term.app
               (Term.proj
                (Term.app
                 (Term.proj
                  (Term.app
                   `tendsto_pow_at_top_at_top_of_one_lt
                   [(Term.app (Term.proj `Real.one_lt_exp_iff "." (fieldIdx "2")) [`hz])])
                  "."
                  `at_top_mul)
                 [(Term.app (Term.proj `norm_pos_iff "." (fieldIdx "2")) [`H]) `tendsto_const_nhds])
                "."
                `Eventually)
               [(Term.app `eventually_gt_at_top [`C])])
              "."
              `exists))])
          []
          (Tactic.intro "intro" [`n])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `right_half_plane_of_tendsto_zero_on_real
            [(Term.app
              (Term.proj
               (Term.proj (Term.app `differentiable_exp.pow [`n]) "." `DiffContOnCl)
               "."
               `smul)
              [`hd])
             (Term.hole "_")
             (Term.hole "_")
             (Term.fun "fun" (Term.basicFun [`y] [] "=>" (Term.hole "_")))
             `hz.le]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `hexp)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                    [])]
                  "⟩")])
               [])])
            []
            (Tactic.refine'
             "refine'"
             (Term.anonymousCtor
              "⟨"
              [(Term.app `max [`c (num "1")])
               ","
               (Term.app `max_lt [`hc `one_lt_two])
               ","
               («term_+_» `n "+" (Term.app `max [`B (num "0")]))
               ","
               (Term.app `is_O.of_norm_left [(Term.hole "_")])]
              "⟩"))
            []
            (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.app
                  `is_O_refl
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`z]
                     [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                     "=>"
                     («term_^_»
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(Term.proj `z "." `re)])
                      "^"
                      `n)))
                   (Term.hole "_")])
                 "."
                 `mul)
                [`hO.norm_left])
               "."
               `trans)
              [(Term.app `is_O.of_bound [(num "1") (Term.hole "_")])]))
            []
            (Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_nat_mul)
               ","
               (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_add)
               ","
               (Tactic.simpLemma
                []
                []
                (Term.app
                 `Real.norm_of_nonneg
                 [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
               ","
               (Tactic.simpLemma [] [] `Real.exp_le_exp)
               ","
               (Tactic.simpLemma [] [] `add_mul)
               ","
               (Tactic.simpLemma [] [] `eventually_inf_principal)
               ","
               (Tactic.simpLemma [] [] `eventually_comap)
               ","
               (Tactic.simpLemma [] [] `one_mul)]
              "]"]
             [])
            []
            (Tactic.filterUpwards
             "filter_upwards"
             [(Tactic.termList
               "["
               [(Term.app
                 `eventually_ge_at_top
                 [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])]
               "]")]
             ["with" [`r `hr `z `hzr `hre]]
             [])
            []
            (Tactic.subst "subst" [`r])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `add_le_add
              [(Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg])
               (Term.hole "_")]))
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(calcTactic
               "calc"
               (calcStep
                («term_≤_» `z.re "≤" (Term.app `abs [`z]))
                ":="
                (Term.app `re_le_abs [(Term.hole "_")]))
               [(calcStep
                 («term_=_»
                  (Term.hole "_")
                  "="
                  («term_^_»
                   (Term.app `abs [`z])
                   "^"
                   (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")))
                 ":="
                 (Term.proj (Term.app `Real.rpow_one [(Term.hole "_")]) "." `symm))
                (calcStep
                 («term_≤_»
                  (Term.hole "_")
                  "≤"
                  («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")])))
                 ":="
                 (Term.app
                  `Real.rpow_le_rpow_of_exponent_le
                  [`hr (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.exact
               "exact"
               (Term.app
                `mul_le_mul
                [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
                 (Term.app
                  `Real.rpow_le_rpow_of_exponent_le
                  [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
                 (Term.app
                  `Real.rpow_nonneg_of_nonneg
                  [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
                 (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_zero_iff_norm_tendsto_zero)] "]")
             [])
            []
            (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
            []
            (Tactic.exact "exact" (Term.app `hre [`n]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hg)
               ","
               (Tactic.rwRule [] `of_real_mul_re)
               ","
               (Tactic.rwRule [] `I_re)
               ","
               (Tactic.rwRule [] `mul_zero)
               ","
               (Tactic.rwRule [] `Real.exp_zero)
               ","
               (Tactic.rwRule [] `one_pow)
               ","
               (Tactic.rwRule [] `one_mul)]
              "]")
             [])
            []
            (Tactic.exact "exact" (Term.app `hC [`y]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `hg)
           ","
           (Tactic.rwRule [] `of_real_mul_re)
           ","
           (Tactic.rwRule [] `I_re)
           ","
           (Tactic.rwRule [] `mul_zero)
           ","
           (Tactic.rwRule [] `Real.exp_zero)
           ","
           (Tactic.rwRule [] `one_pow)
           ","
           (Tactic.rwRule [] `one_mul)]
          "]")
         [])
        []
        (Tactic.exact "exact" (Term.app `hC [`y]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `hC [`y]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hC [`y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hC
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hg)
         ","
         (Tactic.rwRule [] `of_real_mul_re)
         ","
         (Tactic.rwRule [] `I_re)
         ","
         (Tactic.rwRule [] `mul_zero)
         ","
         (Tactic.rwRule [] `Real.exp_zero)
         ","
         (Tactic.rwRule [] `one_pow)
         ","
         (Tactic.rwRule [] `one_mul)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `of_real_mul_re
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_zero_iff_norm_tendsto_zero)] "]")
         [])
        []
        (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
        []
        (Tactic.exact "exact" (Term.app `hre [`n]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `hre [`n]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hre [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_zero_iff_norm_tendsto_zero)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_zero_iff_norm_tendsto_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `hexp)]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "⟨"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hc)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `B)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hO)])
                [])]
              "⟩")])
           [])])
        []
        (Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "⟨"
          [(Term.app `max [`c (num "1")])
           ","
           (Term.app `max_lt [`hc `one_lt_two])
           ","
           («term_+_» `n "+" (Term.app `max [`B (num "0")]))
           ","
           (Term.app `is_O.of_norm_left [(Term.hole "_")])]
          "⟩"))
        []
        (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hg)] "]"] [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj
           (Term.app
            (Term.proj
             (Term.app
              `is_O_refl
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`z]
                 [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
                 "=>"
                 («term_^_»
                  (Term.app
                   (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                   [(Term.proj `z "." `re)])
                  "^"
                  `n)))
               (Term.hole "_")])
             "."
             `mul)
            [`hO.norm_left])
           "."
           `trans)
          [(Term.app `is_O.of_bound [(num "1") (Term.hole "_")])]))
        []
        (Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_nat_mul)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_add)
           ","
           (Tactic.simpLemma
            []
            []
            (Term.app
             `Real.norm_of_nonneg
             [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
           ","
           (Tactic.simpLemma [] [] `Real.exp_le_exp)
           ","
           (Tactic.simpLemma [] [] `add_mul)
           ","
           (Tactic.simpLemma [] [] `eventually_inf_principal)
           ","
           (Tactic.simpLemma [] [] `eventually_comap)
           ","
           (Tactic.simpLemma [] [] `one_mul)]
          "]"]
         [])
        []
        (Tactic.filterUpwards
         "filter_upwards"
         [(Tactic.termList
           "["
           [(Term.app
             `eventually_ge_at_top
             [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])]
           "]")]
         ["with" [`r `hr `z `hzr `hre]]
         [])
        []
        (Tactic.subst "subst" [`r])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          `add_le_add
          [(Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg]) (Term.hole "_")]))
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(calcTactic
           "calc"
           (calcStep
            («term_≤_» `z.re "≤" (Term.app `abs [`z]))
            ":="
            (Term.app `re_le_abs [(Term.hole "_")]))
           [(calcStep
             («term_=_»
              (Term.hole "_")
              "="
              («term_^_»
               (Term.app `abs [`z])
               "^"
               (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")))
             ":="
             (Term.proj (Term.app `Real.rpow_one [(Term.hole "_")]) "." `symm))
            (calcStep
             («term_≤_»
              (Term.hole "_")
              "≤"
              («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")])))
             ":="
             (Term.app
              `Real.rpow_le_rpow_of_exponent_le
              [`hr (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul
            [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
             (Term.app
              `Real.rpow_le_rpow_of_exponent_le
              [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
             (Term.app
              `Real.rpow_nonneg_of_nonneg
              [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
             (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact
         "exact"
         (Term.app
          `mul_le_mul
          [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
           (Term.app
            `Real.rpow_le_rpow_of_exponent_le
            [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
           (Term.app
            `Real.rpow_nonneg_of_nonneg
            [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
           (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul
        [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
         (Term.app
          `Real.rpow_le_rpow_of_exponent_le
          [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
         (Term.app
          `Real.rpow_nonneg_of_nonneg
          [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
         (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul
       [(Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
        (Term.app
         `Real.rpow_le_rpow_of_exponent_le
         [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
        (Term.app
         `Real.rpow_nonneg_of_nonneg
         [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
        (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Real.rpow_nonneg_of_nonneg
       [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `complex.abs.nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `complex.abs.nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `complex.abs.nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_nonneg_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Real.rpow_nonneg_of_nonneg
      [(Term.paren "(" (Term.app `complex.abs.nonneg [(Term.hole "_")]) ")") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Real.rpow_le_rpow_of_exponent_le
       [`hr (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hr
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_le_rpow_of_exponent_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Real.rpow_le_rpow_of_exponent_le
      [`hr (Term.paren "(" (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(calcTactic
         "calc"
         (calcStep
          («term_≤_» `z.re "≤" (Term.app `abs [`z]))
          ":="
          (Term.app `re_le_abs [(Term.hole "_")]))
         [(calcStep
           («term_=_»
            (Term.hole "_")
            "="
            («term_^_»
             (Term.app `abs [`z])
             "^"
             (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")))
           ":="
           (Term.proj (Term.app `Real.rpow_one [(Term.hole "_")]) "." `symm))
          (calcStep
           («term_≤_»
            (Term.hole "_")
            "≤"
            («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")])))
           ":="
           (Term.app
            `Real.rpow_le_rpow_of_exponent_le
            [`hr (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_≤_» `z.re "≤" (Term.app `abs [`z]))
        ":="
        (Term.app `re_le_abs [(Term.hole "_")]))
       [(calcStep
         («term_=_»
          (Term.hole "_")
          "="
          («term_^_»
           (Term.app `abs [`z])
           "^"
           (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")))
         ":="
         (Term.proj (Term.app `Real.rpow_one [(Term.hole "_")]) "." `symm))
        (calcStep
         («term_≤_»
          (Term.hole "_")
          "≤"
          («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")])))
         ":="
         (Term.app
          `Real.rpow_le_rpow_of_exponent_le
          [`hr (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.rpow_le_rpow_of_exponent_le
       [`hr (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hr
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_le_rpow_of_exponent_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Term.hole "_")
       "≤"
       («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" (Term.app `max [`c (num "1")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`c (num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.proj (Term.app `Real.rpow_one [(Term.hole "_")]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.rpow_one [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.rpow_one [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       («term_^_»
        (Term.app `abs [`z])
        "^"
        (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_»
       (Term.app `abs [`z])
       "^"
       (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app `re_le_abs [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `re_le_abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» `z.re "≤" (Term.app `abs [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `z.re
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `add_le_add
        [(Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg]) (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `add_le_add
       [(Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n.cast_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `mul_le_mul_of_nonneg_left [(Term.hole "_") `n.cast_nonneg])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_le_add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.subst "subst" [`r])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `r
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.filterUpwards
       "filter_upwards"
       [(Tactic.termList
         "["
         [(Term.app
           `eventually_ge_at_top
           [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])]
         "]")]
       ["with" [`r `hr `z `hzr `hre]]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hre
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hzr
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hr
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `r
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `eventually_ge_at_top
       [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.termℝ "ℝ")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eventually_ge_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_nat_mul)
         ","
         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `Real.exp_add)
         ","
         (Tactic.simpLemma
          []
          []
          (Term.app
           `Real.norm_of_nonneg
           [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
         ","
         (Tactic.simpLemma [] [] `Real.exp_le_exp)
         ","
         (Tactic.simpLemma [] [] `add_mul)
         ","
         (Tactic.simpLemma [] [] `eventually_inf_principal)
         ","
         (Tactic.simpLemma [] [] `eventually_comap)
         ","
         (Tactic.simpLemma [] [] `one_mul)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eventually_comap
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eventually_inf_principal
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_le_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.norm_of_nonneg
       [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.norm_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_nat_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj
           (Term.app
            `is_O_refl
            [(Term.fun
              "fun"
              (Term.basicFun
               [`z]
               [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
               "=>"
               («term_^_»
                (Term.app
                 (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                 [(Term.proj `z "." `re)])
                "^"
                `n)))
             (Term.hole "_")])
           "."
           `mul)
          [`hO.norm_left])
         "."
         `trans)
        [(Term.app `is_O.of_bound [(num "1") (Term.hole "_")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           `is_O_refl
           [(Term.fun
             "fun"
             (Term.basicFun
              [`z]
              [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
              "=>"
              («term_^_»
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(Term.proj `z "." `re)])
               "^"
               `n)))
            (Term.hole "_")])
          "."
          `mul)
         [`hO.norm_left])
        "."
        `trans)
       [(Term.app `is_O.of_bound [(num "1") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_O.of_bound [(num "1") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O.of_bound
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_O.of_bound [(num "1") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          `is_O_refl
          [(Term.fun
            "fun"
            (Term.basicFun
             [`z]
             [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
             "=>"
             («term_^_»
              (Term.app
               (Analysis.Complex.PhragmenLindelof.termexpR "expR")
               [(Term.proj `z "." `re)])
              "^"
              `n)))
           (Term.hole "_")])
         "."
         `mul)
        [`hO.norm_left])
       "."
       `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.app
         `is_O_refl
         [(Term.fun
           "fun"
           (Term.basicFun
            [`z]
            [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
            "=>"
            («term_^_»
             (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(Term.proj `z "." `re)])
             "^"
             `n)))
          (Term.hole "_")])
        "."
        `mul)
       [`hO.norm_left])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hO.norm_left
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `is_O_refl
        [(Term.fun
          "fun"
          (Term.basicFun
           [`z]
           [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
           "=>"
           («term_^_»
            (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(Term.proj `z "." `re)])
            "^"
            `n)))
         (Term.hole "_")])
       "."
       `mul)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `is_O_refl
       [(Term.fun
         "fun"
         (Term.basicFun
          [`z]
          [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
          "=>"
          («term_^_»
           (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(Term.proj `z "." `re)])
           "^"
           `n)))
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        [(Term.typeSpec ":" (Data.Complex.Basic.termℂ "ℂ"))]
        "=>"
        («term_^_»
         (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(Term.proj `z "." `re)])
         "^"
         `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_»
       (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(Term.proj `z "." `re)])
       "^"
       `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app (Analysis.Complex.PhragmenLindelof.termexpR "expR") [(Term.proj `z "." `re)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `z "." `re)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the right half-plane. Let `f : ℂ → E` be a function such that
    
    * `f` is differentiable in the open right half-plane and is continuous on its closure;
    * `‖f z‖` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane
      for some `c < 2`;
    * `‖f z‖` is bounded from above by a constant on the imaginary axis;
    * `f x`, `x : ℝ`, tends to zero superexponentially fast as `x → ∞`:
      for any natural `n`, `exp (n * x) * ‖f x‖` tends to zero as `x → ∞`.
    
    Then `f` is equal to zero on the closed right half-plane. -/
  theorem
    eq_zero_on_right_half_plane_of_superexponential_decay
    ( hd : DiffContOnCl ℂ f { z | 0 < z . re } )
        (
          hexp
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃
                B
                ,
                f =O[ comap Complex.abs atTop ⊓ 𝓟 { z | 0 < z . re } ] fun z => expR B * abs z ^ c
          )
        ( hre : SuperpolynomialDecay atTop expR fun x => ‖ f x ‖ )
        ( him : ∃ C , ∀ x : ℝ , ‖ f x * I ‖ ≤ C )
      : EqOn f 0 { z : ℂ | 0 ≤ z . re }
    :=
      by
        rcases him with ⟨ C , hC ⟩
          suffices
            ∀ z : ℂ , 0 < z . re → f z = 0
              by
                simpa
                  only
                    [ closure_set_of_lt_re ]
                    using
                      eq_on.of_subset_closure
                        this hd.continuous_on continuous_on_const subset_closure subset.rfl
          set g : ℕ → ℂ → E := fun n z => exp z ^ n • f z
          have
            hg
              : ∀ n z , ‖ g n z ‖ = expR z . re ^ n * ‖ f z ‖
              :=
              by intro n z simp only [ norm_smul , norm_eq_abs , Complex.abs_pow , abs_exp ]
          intro z hz
          suffices H : ∀ n : ℕ , ‖ g n z ‖ ≤ C
          ·
            contrapose! H
              simp only [ hg ]
              exact
                tendsto_pow_at_top_at_top_of_one_lt Real.one_lt_exp_iff . 2 hz . at_top_mul
                        norm_pos_iff . 2 H tendsto_const_nhds
                      .
                      Eventually
                    eventually_gt_at_top C
                  .
                  exists
          intro n
          refine'
            right_half_plane_of_tendsto_zero_on_real
              differentiable_exp.pow n . DiffContOnCl . smul hd _ _ fun y => _ hz.le
          ·
            rcases hexp with ⟨ c , hc , B , hO ⟩
              refine' ⟨ max c 1 , max_lt hc one_lt_two , n + max B 0 , is_O.of_norm_left _ ⟩
              simp only [ hg ]
              refine'
                is_O_refl fun z : ℂ => expR z . re ^ n _ . mul hO.norm_left . trans
                  is_O.of_bound 1 _
              simp
                only
                [
                  ← Real.exp_nat_mul
                    ,
                    ← Real.exp_add
                    ,
                    Real.norm_of_nonneg Real.exp_pos _ . le
                    ,
                    Real.exp_le_exp
                    ,
                    add_mul
                    ,
                    eventually_inf_principal
                    ,
                    eventually_comap
                    ,
                    one_mul
                  ]
              filter_upwards [ eventually_ge_at_top ( 1 : ℝ ) ] with r hr z hzr hre
              subst r
              refine' add_le_add mul_le_mul_of_nonneg_left _ n.cast_nonneg _
              ·
                calc
                  z.re ≤ abs z := re_le_abs _
                  _ = abs z ^ ( 1 : ℝ ) := Real.rpow_one _ . symm
                    _ ≤ abs z ^ max c 1 := Real.rpow_le_rpow_of_exponent_le hr le_max_right _ _
              ·
                exact
                  mul_le_mul
                    le_max_left _ _
                      Real.rpow_le_rpow_of_exponent_le hr le_max_left _ _
                      Real.rpow_nonneg_of_nonneg complex.abs.nonneg _ _
                      le_max_right _ _
          · rw [ tendsto_zero_iff_norm_tendsto_zero ] simp only [ hg ] exact hre n
          ·
            rw [ hg , of_real_mul_re , I_re , mul_zero , Real.exp_zero , one_pow , one_mul ]
              exact hC y
#align
  phragmen_lindelof.eq_zero_on_right_half_plane_of_superexponential_decay PhragmenLindelof.eq_zero_on_right_half_plane_of_superexponential_decay

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Phragmen-Lindelöf principle** in the right half-plane. Let `f g : ℂ → E` be functions such\nthat\n\n* `f` and `g` are differentiable in the open right half-plane and are continuous on its closure;\n* `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open right\n  half-plane for some `c < 2`;\n* `‖f z‖` and `‖g z‖` are bounded from above by constants on the imaginary axis;\n* `f x - g x`, `x : ℝ`, tends to zero superexponentially fast as `x → ∞`:\n  for any natural `n`, `exp (n * x) * ‖f x - g x‖` tends to zero as `x → ∞`.\n\nThen `f` is equal to `g` on the closed right half-plane. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_on_right_half_plane_of_superexponential_decay [])
      (Command.declSig
       [(Term.implicitBinder "{" [`g] [":" (Term.arrow (Data.Complex.Basic.termℂ "ℂ") "→" `E)] "}")
        (Term.explicitBinder
         "("
         [`hfd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `f
            (Set.«term{_|_}»
             "{"
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
             "|"
             («term_<_» (num "0") "<" (Term.proj `z "." `re))
             "}")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hgd]
         [":"
          (Term.app
           `DiffContOnCl
           [(Data.Complex.Basic.termℂ "ℂ")
            `g
            (Set.«term{_|_}»
             "{"
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
             "|"
             («term_<_» (num "0") "<" (Term.proj `z "." `re))
             "}")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hfexp]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `f
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.«term{_|_}»
                 "{"
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                 "|"
                 («term_<_» (num "0") "<" (Term.proj `z "." `re))
                 "}")]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hgexp]
         [":"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `c)
           (Std.ExtendedBinder.«binderTerm<_»
            "<"
            (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.termℝ "ℝ")] ")"))
           ","
           («term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `B)] []))
            ","
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             `g
             " =O["
             (Order.Basic.«term_⊓_»
              (Term.app `comap [`Complex.abs `atTop])
              " ⊓ "
              (Term.app
               (Filter.Order.Filter.Basic.filter.principal "𝓟")
               [(Set.«term{_|_}»
                 "{"
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `z) [])
                 "|"
                 («term_<_» (num "0") "<" (Term.proj `z "." `re))
                 "}")]))
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B "*" («term_^_» (Term.app `abs [`z]) "^" `c))]))))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hre]
         [":"
          (Term.app
           `SuperpolynomialDecay
           [`atTop
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            (Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (Analysis.Normed.Group.Basic.«term‖_‖»
               "‖"
               («term_-_» (Term.app `f [`x]) "-" (Term.app `g [`x]))
               "‖")))])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hfim]
         [":"
          («term∃_,_»
           "∃"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `C)] []))
           ","
           (Term.forall
            "∀"
            [`x]
            [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
            ","
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `f [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hgim]
         [":"
          («term∃_,_»
           "∃"
           (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `C)] []))
           ","
           (Term.forall
            "∀"
            [`x]
            [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
            ","
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖» "‖" (Term.app `g [(«term_*_» `x "*" `I)]) "‖")
             "≤"
             `C)))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `EqOn
         [`f
          `g
          (Set.«term{_|_}»
           "{"
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `z)
            [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
           "|"
           («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
           "}")])))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (Term.app
              `eq_on
              [(«term_-_» `f "-" `g)
               (num "0")
               (Set.«term{_|_}»
                "{"
                (Std.ExtendedBinder.extBinder
                 (Lean.binderIdent `z)
                 [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
                "|"
                («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
                "}")])
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `eq_on)
                      ","
                      (Tactic.simpLemma [] [] `Pi.sub_apply)
                      ","
                      (Tactic.simpLemma [] [] `Pi.zero_apply)
                      ","
                      (Tactic.simpLemma [] [] `sub_eq_zero)]
                     "]")]
                   ["using" `this]))])))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `eq_zero_on_right_half_plane_of_superexponential_decay
             [(Term.app `hfd.sub [`hgd]) (Term.hole "_") `hre (Term.hole "_")]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Mathlib.Tactic.set
              "set"
              []
              (Mathlib.Tactic.setArgsRest
               `l
               [":" (Term.app `Filter [(Data.Complex.Basic.termℂ "ℂ")])]
               ":="
               (Order.Basic.«term_⊓_»
                (Term.app `comap [`Complex.abs `at_top])
                " ⊓ "
                (Term.app
                 (Filter.Order.Filter.Basic.filter.principal "𝓟")
                 [(Set.«term{_|_}»
                   "{"
                   (Std.ExtendedBinder.extBinder
                    (Lean.binderIdent `z)
                    [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
                   "|"
                   («term_<_» (num "0") "<" (Term.proj `z "." `re))
                   "}")]))
               []))
             []
             (Tactic.tacticSuffices_
              "suffices"
              (Term.sufficesDecl
               []
               (Term.forall
                "∀"
                [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
                []
                ","
                (Term.arrow
                 («term_≤_» `c₁ "≤" `c₂)
                 "→"
                 (Term.arrow
                  («term_≤_» `B₁ "≤" `B₂)
                  "→"
                  (Term.arrow
                   («term_≤_» (num "0") "≤" `B₂)
                   "→"
                   (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`z]
                      []
                      "=>"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
                    " =O["
                    `l
                    "] "
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`z]
                      []
                      "=>"
                      (Term.app
                       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                       [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))))
               (Term.byTactic'
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Std.Tactic.rcases
                    "rcases"
                    [(Tactic.casesTarget [] `hfexp)]
                    ["with"
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed
                       [(Std.Tactic.RCases.rcasesPat.tuple
                         "⟨"
                         [(Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                           [])]
                         "⟩")])
                      [])])
                   []
                   (Std.Tactic.rcases
                    "rcases"
                    [(Tactic.casesTarget [] `hgexp)]
                    ["with"
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed
                       [(Std.Tactic.RCases.rcasesPat.tuple
                         "⟨"
                         [(Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                           [])]
                         "⟩")])
                      [])])
                   []
                   (Tactic.refine'
                    "refine'"
                    (Term.anonymousCtor
                     "⟨"
                     [(Term.app `max [`cf `cg])
                      ","
                      (Term.app `max_lt [`hcf `hcg])
                      ","
                      (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
                      ","
                      (Term.hole "_")]
                     "⟩"))
                   []
                   (Tactic.«tactic_<;>_»
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `is_O.sub
                      [(«term_<|_»
                        `hOf.trans
                        "<|"
                        (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
                       («term_<|_»
                        `hOg.trans
                        "<|"
                        (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
                    "<;>"
                    (Tactic.simp "simp" [] [] [] [] []))])))))
             []
             (Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB `hB₂])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                   "∀ᶠ"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder
                     (Lean.binderIdent `z)
                     [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
                   " in "
                   `l
                   ", "
                   («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
                ":="
                (Term.app
                 (Term.proj
                  (Term.app
                   (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
                   [(Term.hole "_")])
                  "."
                  `filter_mono)
                 [`inf_le_left]))))
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `is_O.of_bound
               [(num "1")
                (Term.app
                 `this.mono
                 [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `Real.norm_of_nonneg
                  [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
                ","
                (Tactic.simpLemma [] [] `Real.exp_le_exp)
                ","
                (Tactic.simpLemma [] [] `one_mul)]
               "]"]
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `mul_le_mul
               [`hB
                (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
                (Term.app
                 `Real.rpow_nonneg_of_nonneg
                 [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
                `hB₂]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `hfim)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "⟨"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cf)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCf)])
                     [])]
                   "⟩")])
                [])])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `hgim)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "⟨"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cg)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCg)])
                     [])]
                   "⟩")])
                [])])
             []
             (Tactic.exact
              "exact"
              (Term.anonymousCtor
               "⟨"
               [(«term_+_» `Cf "+" `Cg)
                ","
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`x]
                  []
                  "=>"
                  (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])))]
               "⟩"))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Term.app
             `eq_on
             [(«term_-_» `f "-" `g)
              (num "0")
              (Set.«term{_|_}»
               "{"
               (Std.ExtendedBinder.extBinder
                (Lean.binderIdent `z)
                [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
               "|"
               («term_≤_» (num "0") "≤" (Term.proj `z "." `re))
               "}")])
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  ["only"]
                  [(Tactic.simpArgs
                    "["
                    [(Tactic.simpLemma [] [] `eq_on)
                     ","
                     (Tactic.simpLemma [] [] `Pi.sub_apply)
                     ","
                     (Tactic.simpLemma [] [] `Pi.zero_apply)
                     ","
                     (Tactic.simpLemma [] [] `sub_eq_zero)]
                    "]")]
                  ["using" `this]))])))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `eq_zero_on_right_half_plane_of_superexponential_decay
            [(Term.app `hfd.sub [`hgd]) (Term.hole "_") `hre (Term.hole "_")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Mathlib.Tactic.set
             "set"
             []
             (Mathlib.Tactic.setArgsRest
              `l
              [":" (Term.app `Filter [(Data.Complex.Basic.termℂ "ℂ")])]
              ":="
              (Order.Basic.«term_⊓_»
               (Term.app `comap [`Complex.abs `at_top])
               " ⊓ "
               (Term.app
                (Filter.Order.Filter.Basic.filter.principal "𝓟")
                [(Set.«term{_|_}»
                  "{"
                  (Std.ExtendedBinder.extBinder
                   (Lean.binderIdent `z)
                   [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
                  "|"
                  («term_<_» (num "0") "<" (Term.proj `z "." `re))
                  "}")]))
              []))
            []
            (Tactic.tacticSuffices_
             "suffices"
             (Term.sufficesDecl
              []
              (Term.forall
               "∀"
               [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
               []
               ","
               (Term.arrow
                («term_≤_» `c₁ "≤" `c₂)
                "→"
                (Term.arrow
                 («term_≤_» `B₁ "≤" `B₂)
                 "→"
                 (Term.arrow
                  («term_≤_» (num "0") "≤" `B₂)
                  "→"
                  (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`z]
                     []
                     "=>"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
                   " =O["
                   `l
                   "] "
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`z]
                     []
                     "=>"
                     (Term.app
                      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                      [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))))
              (Term.byTactic'
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Std.Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget [] `hfexp)]
                   ["with"
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.tuple
                        "⟨"
                        [(Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                          [])]
                        "⟩")])
                     [])])
                  []
                  (Std.Tactic.rcases
                   "rcases"
                   [(Tactic.casesTarget [] `hgexp)]
                   ["with"
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.tuple
                        "⟨"
                        [(Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                          [])]
                        "⟩")])
                     [])])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.app `max [`cf `cg])
                     ","
                     (Term.app `max_lt [`hcf `hcg])
                     ","
                     (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
                     ","
                     (Term.hole "_")]
                    "⟩"))
                  []
                  (Tactic.«tactic_<;>_»
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `is_O.sub
                     [(«term_<|_»
                       `hOf.trans
                       "<|"
                       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
                      («term_<|_»
                       `hOg.trans
                       "<|"
                       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
                   "<;>"
                   (Tactic.simp "simp" [] [] [] [] []))])))))
            []
            (Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB `hB₂])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
                  "∀ᶠ"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder
                    (Lean.binderIdent `z)
                    [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
                  " in "
                  `l
                  ", "
                  («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
               ":="
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
                  [(Term.hole "_")])
                 "."
                 `filter_mono)
                [`inf_le_left]))))
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `is_O.of_bound
              [(num "1")
               (Term.app
                `this.mono
                [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))
            []
            (Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma
                []
                []
                (Term.app
                 `Real.norm_of_nonneg
                 [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
               ","
               (Tactic.simpLemma [] [] `Real.exp_le_exp)
               ","
               (Tactic.simpLemma [] [] `one_mul)]
              "]"]
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `mul_le_mul
              [`hB
               (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
               (Term.app
                `Real.rpow_nonneg_of_nonneg
                [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
               `hB₂]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `hfim)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cf)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCf)])
                    [])]
                  "⟩")])
               [])])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `hgim)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cg)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCg)])
                    [])]
                  "⟩")])
               [])])
            []
            (Tactic.exact
             "exact"
             (Term.anonymousCtor
              "⟨"
              [(«term_+_» `Cf "+" `Cg)
               ","
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x]
                 []
                 "=>"
                 (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])))]
              "⟩"))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `hfim)]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "⟨"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cf)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCf)])
                [])]
              "⟩")])
           [])])
        []
        (Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `hgim)]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "⟨"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cg)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCg)])
                [])]
              "⟩")])
           [])])
        []
        (Tactic.exact
         "exact"
         (Term.anonymousCtor
          "⟨"
          [(«term_+_» `Cf "+" `Cg)
           ","
           (Term.fun
            "fun"
            (Term.basicFun
             [`x]
             []
             "=>"
             (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])))]
          "⟩"))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor
        "⟨"
        [(«term_+_» `Cf "+" `Cg)
         ","
         (Term.fun
          "fun"
          (Term.basicFun
           [`x]
           []
           "=>"
           (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])))]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(«term_+_» `Cf "+" `Cg)
        ","
        (Term.fun
         "fun"
         (Term.basicFun
          [`x]
          []
          "=>"
          (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])))]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        []
        "=>"
        (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_sub_le_of_le [(Term.app `hCf [`x]) (Term.app `hCg [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hCg [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hCg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hCg [`x]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hCf [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hCf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hCf [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_sub_le_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Cf "+" `Cg)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Cg
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Cf
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hgim)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCg)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hgim
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hfim)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Cf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hCf)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hfim
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Mathlib.Tactic.set
         "set"
         []
         (Mathlib.Tactic.setArgsRest
          `l
          [":" (Term.app `Filter [(Data.Complex.Basic.termℂ "ℂ")])]
          ":="
          (Order.Basic.«term_⊓_»
           (Term.app `comap [`Complex.abs `at_top])
           " ⊓ "
           (Term.app
            (Filter.Order.Filter.Basic.filter.principal "𝓟")
            [(Set.«term{_|_}»
              "{"
              (Std.ExtendedBinder.extBinder
               (Lean.binderIdent `z)
               [(group ":" (Data.Complex.Basic.termℂ "ℂ"))])
              "|"
              («term_<_» (num "0") "<" (Term.proj `z "." `re))
              "}")]))
          []))
        []
        (Tactic.tacticSuffices_
         "suffices"
         (Term.sufficesDecl
          []
          (Term.forall
           "∀"
           [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
           []
           ","
           (Term.arrow
            («term_≤_» `c₁ "≤" `c₂)
            "→"
            (Term.arrow
             («term_≤_» `B₁ "≤" `B₂)
             "→"
             (Term.arrow
              («term_≤_» (num "0") "≤" `B₂)
              "→"
              (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
               (Term.fun
                "fun"
                (Term.basicFun
                 [`z]
                 []
                 "=>"
                 (Term.app
                  (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                  [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
               " =O["
               `l
               "] "
               (Term.fun
                "fun"
                (Term.basicFun
                 [`z]
                 []
                 "=>"
                 (Term.app
                  (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                  [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))))
          (Term.byTactic'
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Std.Tactic.rcases
               "rcases"
               [(Tactic.casesTarget [] `hfexp)]
               ["with"
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "⟨"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                      [])]
                    "⟩")])
                 [])])
              []
              (Std.Tactic.rcases
               "rcases"
               [(Tactic.casesTarget [] `hgexp)]
               ["with"
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "⟨"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                      [])]
                    "⟩")])
                 [])])
              []
              (Tactic.refine'
               "refine'"
               (Term.anonymousCtor
                "⟨"
                [(Term.app `max [`cf `cg])
                 ","
                 (Term.app `max_lt [`hcf `hcg])
                 ","
                 (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
                 ","
                 (Term.hole "_")]
                "⟩"))
              []
              (Tactic.«tactic_<;>_»
               (Tactic.refine'
                "refine'"
                (Term.app
                 `is_O.sub
                 [(«term_<|_»
                   `hOf.trans
                   "<|"
                   (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
                  («term_<|_»
                   `hOg.trans
                   "<|"
                   (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
               "<;>"
               (Tactic.simp "simp" [] [] [] [] []))])))))
        []
        (Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB `hB₂])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
              "∀ᶠ"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder
                (Lean.binderIdent `z)
                [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
              " in "
              `l
              ", "
              («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
           ":="
           (Term.app
            (Term.proj
             (Term.app
              (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
              [(Term.hole "_")])
             "."
             `filter_mono)
            [`inf_le_left]))))
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          `is_O.of_bound
          [(num "1")
           (Term.app
            `this.mono
            [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))
        []
        (Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma
            []
            []
            (Term.app
             `Real.norm_of_nonneg
             [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
           ","
           (Tactic.simpLemma [] [] `Real.exp_le_exp)
           ","
           (Tactic.simpLemma [] [] `one_mul)]
          "]"]
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `mul_le_mul
          [`hB
           (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
           (Term.app
            `Real.rpow_nonneg_of_nonneg
            [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
           `hB₂]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul
        [`hB
         (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
         (Term.app
          `Real.rpow_nonneg_of_nonneg
          [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
         `hB₂]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul
       [`hB
        (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
        (Term.app
         `Real.rpow_nonneg_of_nonneg
         [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
        `hB₂])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB₂
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Real.rpow_nonneg_of_nonneg
       [(Term.app `complex.abs.nonneg [(Term.hole "_")]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `complex.abs.nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `complex.abs.nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `complex.abs.nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_nonneg_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Real.rpow_nonneg_of_nonneg
      [(Term.paren "(" (Term.app `complex.abs.nonneg [(Term.hole "_")]) ")") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.rpow_le_rpow_of_exponent_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.rpow_le_rpow_of_exponent_le [`hz `hc])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma
          []
          []
          (Term.app
           `Real.norm_of_nonneg
           [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)]))
         ","
         (Tactic.simpLemma [] [] `Real.exp_le_exp)
         ","
         (Tactic.simpLemma [] [] `one_mul)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.exp_le_exp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.norm_of_nonneg
       [(Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Real.exp_pos [(Term.hole "_")]) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Real.exp_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.exp_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Real.exp_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.norm_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `is_O.of_bound
        [(num "1")
         (Term.app
          `this.mono
          [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_O.of_bound
       [(num "1")
        (Term.app `this.mono [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this.mono [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `this.mono [(Term.fun "fun" (Term.basicFun [`z `hz] [] "=>" (Term.hole "_")))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O.of_bound
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
            "∀ᶠ"
            (Std.ExtendedBinder.extBinders
             (Std.ExtendedBinder.extBinder
              (Lean.binderIdent `z)
              [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
            " in "
            `l
            ", "
            («term_≤_» (num "1") "≤" (Term.app `abs [`z]))))]
         ":="
         (Term.app
          (Term.proj
           (Term.app
            (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
            [(Term.hole "_")])
           "."
           `filter_mono)
          [`inf_le_left]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
         [(Term.hole "_")])
        "."
        `filter_mono)
       [`inf_le_left])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inf_le_left
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
        [(Term.hole "_")])
       "."
       `filter_mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `eventually_ge_at_top [(num "1")]) "." `comap)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `eventually_ge_at_top [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eventually_ge_at_top
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `eventually_ge_at_top [(num "1")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `eventually_ge_at_top [(num "1")]) ")") "." `comap)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Filter.Order.Filter.Basic.«term∀ᶠ_in_,_»
       "∀ᶠ"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `z)
         [(group ":" (Data.Complex.Basic.termℂ "ℂ"))]))
       " in "
       `l
       ", "
       («term_≤_» (num "1") "≤" (Term.app `abs [`z])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (num "1") "≤" (Term.app `abs [`z]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `l
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Complex.Basic.termℂ "ℂ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`c₁ `c₂ `B₁ `B₂ `hc `hB `hB₂])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hB₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hB
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c₁
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticSuffices_
       "suffices"
       (Term.sufficesDecl
        []
        (Term.forall
         "∀"
         [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
         []
         ","
         (Term.arrow
          («term_≤_» `c₁ "≤" `c₂)
          "→"
          (Term.arrow
           («term_≤_» `B₁ "≤" `B₂)
           "→"
           (Term.arrow
            («term_≤_» (num "0") "≤" `B₂)
            "→"
            (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
             " =O["
             `l
             "] "
             (Term.fun
              "fun"
              (Term.basicFun
               [`z]
               []
               "=>"
               (Term.app
                (Analysis.Complex.PhragmenLindelof.termexpR "expR")
                [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))))
        (Term.byTactic'
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `hfexp)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
                    [])]
                  "⟩")])
               [])])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `hgexp)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
                    [])]
                  "⟩")])
               [])])
            []
            (Tactic.refine'
             "refine'"
             (Term.anonymousCtor
              "⟨"
              [(Term.app `max [`cf `cg])
               ","
               (Term.app `max_lt [`hcf `hcg])
               ","
               (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
               ","
               (Term.hole "_")]
              "⟩"))
            []
            (Tactic.«tactic_<;>_»
             (Tactic.refine'
              "refine'"
              (Term.app
               `is_O.sub
               [(«term_<|_»
                 `hOf.trans
                 "<|"
                 (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
                («term_<|_»
                 `hOg.trans
                 "<|"
                 (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
             "<;>"
             (Tactic.simp "simp" [] [] [] [] []))])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.«tactic_<;>_»
       (Tactic.refine'
        "refine'"
        (Term.app
         `is_O.sub
         [(«term_<|_»
           `hOf.trans
           "<|"
           (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
          («term_<|_»
           `hOg.trans
           "<|"
           (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
       "<;>"
       (Tactic.simp "simp" [] [] [] [] []))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 2 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
      (Tactic.refine'
       "refine'"
       (Term.app
        `is_O.sub
        [(«term_<|_»
          `hOf.trans
          "<|"
          (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
         («term_<|_»
          `hOg.trans
          "<|"
          (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_O.sub
       [(«term_<|_»
         `hOf.trans
         "<|"
         (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
        («term_<|_»
         `hOg.trans
         "<|"
         (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       `hOg.trans
       "<|"
       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hOg.trans
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hOg.trans "<|" (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_»
       `hOf.trans
       "<|"
       (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `hOf.trans
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `hOf.trans "<|" (Term.app `this [(Term.hole "_") (Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_O.sub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(Term.app `max [`cf `cg])
         ","
         (Term.app `max_lt [`hcf `hcg])
         ","
         (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
         ","
         (Term.hole "_")]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.app `max [`cf `cg])
        ","
        (Term.app `max_lt [`hcf `hcg])
        ","
        (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
        ","
        (Term.hole "_")]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [(num "0") (Term.app `max [`Bf `Bg])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`Bf `Bg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Bg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Bf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `max [`Bf `Bg]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_lt [`hcf `hcg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hcg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hcf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max [`cf `cg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `cf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hgexp)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bg)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOg)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hgexp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `hfexp)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `cf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hcf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Bf)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hOf)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hfexp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.forall
       "∀"
       [(Term.implicitBinder "{" [`c₁ `c₂ `B₁ `B₂] [":" (Data.Real.Basic.termℝ "ℝ")] "}")]
       []
       ","
       (Term.arrow
        («term_≤_» `c₁ "≤" `c₂)
        "→"
        (Term.arrow
         («term_≤_» `B₁ "≤" `B₂)
         "→"
         (Term.arrow
          («term_≤_» (num "0") "≤" `B₂)
          "→"
          (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
           (Term.fun
            "fun"
            (Term.basicFun
             [`z]
             []
             "=>"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
           " =O["
           `l
           "] "
           (Term.fun
            "fun"
            (Term.basicFun
             [`z]
             []
             "=>"
             (Term.app
              (Analysis.Complex.PhragmenLindelof.termexpR "expR")
              [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `c₁ "≤" `c₂)
       "→"
       (Term.arrow
        («term_≤_» `B₁ "≤" `B₂)
        "→"
        (Term.arrow
         («term_≤_» (num "0") "≤" `B₂)
         "→"
         (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
          (Term.fun
           "fun"
           (Term.basicFun
            [`z]
            []
            "=>"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
          " =O["
          `l
          "] "
          (Term.fun
           "fun"
           (Term.basicFun
            [`z]
            []
            "=>"
            (Term.app
             (Analysis.Complex.PhragmenLindelof.termexpR "expR")
             [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» `B₁ "≤" `B₂)
       "→"
       (Term.arrow
        («term_≤_» (num "0") "≤" `B₂)
        "→"
        (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
         " =O["
         `l
         "] "
         (Term.fun
          "fun"
          (Term.basicFun
           [`z]
           []
           "=>"
           (Term.app
            (Analysis.Complex.PhragmenLindelof.termexpR "expR")
            [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_» (num "0") "≤" `B₂)
       "→"
       (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
        " =O["
        `l
        "] "
        (Term.fun
         "fun"
         (Term.basicFun
          [`z]
          []
          "=>"
          (Term.app
           (Analysis.Complex.PhragmenLindelof.termexpR "expR")
           [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Asymptotics.Analysis.Asymptotics.Asymptotics.«term_=O[_]_»
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B₁ "*" («term_^_» (Term.app `abs [`z]) "^" `c₁))])))
       " =O["
       `l
       "] "
       (Term.fun
        "fun"
        (Term.basicFun
         [`z]
         []
         "=>"
         (Term.app
          (Analysis.Complex.PhragmenLindelof.termexpR "expR")
          [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`z]
        []
        "=>"
        (Term.app
         (Analysis.Complex.PhragmenLindelof.termexpR "expR")
         [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Analysis.Complex.PhragmenLindelof.termexpR "expR")
       [(«term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_*_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» (Term.app `abs [`z]) "^" `c₂)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c₂
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `abs [`z])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `B₂
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `B₂ "*" («term_^_» (Term.app `abs [`z]) "^" `c₂))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.Complex.PhragmenLindelof.termexpR "expR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Complex.PhragmenLindelof.termexpR', expected 'Analysis.Complex.PhragmenLindelof.termexpR._@.Analysis.Complex.PhragmenLindelof._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Phragmen-Lindelöf principle** in the right half-plane. Let `f g : ℂ → E` be functions such
    that
    
    * `f` and `g` are differentiable in the open right half-plane and are continuous on its closure;
    * `‖f z‖` and `‖g z‖` are bounded from above by `A * exp(B * (abs z) ^ c)` on the open right
      half-plane for some `c < 2`;
    * `‖f z‖` and `‖g z‖` are bounded from above by constants on the imaginary axis;
    * `f x - g x`, `x : ℝ`, tends to zero superexponentially fast as `x → ∞`:
      for any natural `n`, `exp (n * x) * ‖f x - g x‖` tends to zero as `x → ∞`.
    
    Then `f` is equal to `g` on the closed right half-plane. -/
  theorem
    eq_on_right_half_plane_of_superexponential_decay
    { g : ℂ → E }
        ( hfd : DiffContOnCl ℂ f { z | 0 < z . re } )
        ( hgd : DiffContOnCl ℂ g { z | 0 < z . re } )
        (
          hfexp
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃
                B
                ,
                f =O[ comap Complex.abs atTop ⊓ 𝓟 { z | 0 < z . re } ] fun z => expR B * abs z ^ c
          )
        (
          hgexp
          :
            ∃
              c
              < ( 2 : ℝ )
              ,
              ∃
                B
                ,
                g =O[ comap Complex.abs atTop ⊓ 𝓟 { z | 0 < z . re } ] fun z => expR B * abs z ^ c
          )
        ( hre : SuperpolynomialDecay atTop expR fun x => ‖ f x - g x ‖ )
        ( hfim : ∃ C , ∀ x : ℝ , ‖ f x * I ‖ ≤ C )
        ( hgim : ∃ C , ∀ x : ℝ , ‖ g x * I ‖ ≤ C )
      : EqOn f g { z : ℂ | 0 ≤ z . re }
    :=
      by
        suffices
            eq_on f - g 0 { z : ℂ | 0 ≤ z . re }
              by simpa only [ eq_on , Pi.sub_apply , Pi.zero_apply , sub_eq_zero ] using this
          refine' eq_zero_on_right_half_plane_of_superexponential_decay hfd.sub hgd _ hre _
          ·
            set l : Filter ℂ := comap Complex.abs at_top ⊓ 𝓟 { z : ℂ | 0 < z . re }
              suffices
                ∀
                    { c₁ c₂ B₁ B₂ : ℝ }
                    ,
                    c₁ ≤ c₂
                      →
                      B₁ ≤ B₂
                        →
                        0 ≤ B₂ → fun z => expR B₁ * abs z ^ c₁ =O[ l ] fun z => expR B₂ * abs z ^ c₂
                  by
                    rcases hfexp with ⟨ cf , hcf , Bf , hOf ⟩
                      rcases hgexp with ⟨ cg , hcg , Bg , hOg ⟩
                      refine' ⟨ max cf cg , max_lt hcf hcg , max 0 max Bf Bg , _ ⟩
                      refine' is_O.sub hOf.trans <| this _ _ _ hOg.trans <| this _ _ _ <;> simp
              intro c₁ c₂ B₁ B₂ hc hB hB₂
              have
                : ∀ᶠ z : ℂ in l , 1 ≤ abs z
                  :=
                  eventually_ge_at_top 1 . comap _ . filter_mono inf_le_left
              refine' is_O.of_bound 1 this.mono fun z hz => _
              simp only [ Real.norm_of_nonneg Real.exp_pos _ . le , Real.exp_le_exp , one_mul ]
              exact
                mul_le_mul
                  hB
                    Real.rpow_le_rpow_of_exponent_le hz hc
                    Real.rpow_nonneg_of_nonneg complex.abs.nonneg _ _
                    hB₂
          ·
            rcases hfim with ⟨ Cf , hCf ⟩
              rcases hgim with ⟨ Cg , hCg ⟩
              exact ⟨ Cf + Cg , fun x => norm_sub_le_of_le hCf x hCg x ⟩
#align
  phragmen_lindelof.eq_on_right_half_plane_of_superexponential_decay PhragmenLindelof.eq_on_right_half_plane_of_superexponential_decay

end PhragmenLindelof

