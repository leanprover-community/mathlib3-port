/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Fr√©d√©ric Dupuis, Heather Macbeth

! This file was ported from Lean 3 source module analysis.inner_product_space.projection
! leanprover-community/mathlib commit 26f081a2fb920140ed5bc5cc5344e84bcc7cb2b2
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Convex.Basic
import Mathbin.Analysis.InnerProductSpace.Symmetric
import Mathbin.Analysis.NormedSpace.IsROrC

/-!
# The orthogonal projection

Given a nonempty complete subspace `K` of an inner product space `E`, this file constructs
`orthogonal_projection K : E ‚ÜíL[ùïú] K`, the orthogonal projection of `E` onto `K`.  This map
satisfies: for any point `u` in `E`, the point `v = orthogonal_projection K u` in `K` minimizes the
distance `‚Äñu - v‚Äñ` to `u`.

Also a linear isometry equivalence `reflection K : E ‚âÉ‚Çó·µ¢[ùïú] E` is constructed, by choosing, for
each `u : E`, the point `reflection K u` to satisfy
`u + (reflection K u) = 2 ‚Ä¢ orthogonal_projection K u`.

Basic API for `orthogonal_projection` and `reflection` is developed.

Next, the orthogonal projection is used to prove a series of more subtle lemmas about the
the orthogonal complement of complete subspaces of `E` (the orthogonal complement itself was
defined in `analysis.inner_product_space.basic`); the lemma
`submodule.sup_orthogonal_of_is_complete`, stating that for a complete subspace `K` of `E` we have
`K ‚äî K·óÆ = ‚ä§`, is a typical example.

## References

The orthogonal projection construction is adapted from
*  [Cl√©ment & Martin, *The Lax-Milgram Theorem. A detailed proof to be formalized in Coq*]
*  [Cl√©ment & Martin, *A Coq formal proof of the Lax‚ÄìMilgram theorem*]

The Coq code is available at the following address: <http://www.lri.fr/~sboldo/elfic/index.html>
-/


noncomputable section

open IsROrC Real Filter

open LinearMap (ker range)

open BigOperators TopologicalSpace

variable {ùïú E F : Type _} [IsROrC ùïú]

variable [InnerProductSpace ùïú E] [InnerProductSpace ‚Ñù F]

-- mathport name: ¬´expr‚ü™ , ‚ü´¬ª
local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú _ _ x y

-- mathport name: exprabsR
local notation "absR" => Abs.abs

/-! ### Orthogonal projection in inner product spaces -/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Existence of minimizers\nLet `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.\nThen there exists a (unique) `v` in `K` that minimizes the distance `‚Äñu - v‚Äñ` to `u`.\n -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `exists_norm_eq_infi_of_complete_convex [])
      (Command.declSig
       [(Term.implicitBinder "{" [`K] [":" (Term.app `Set [`F])] "}")
        (Term.explicitBinder "(" [`ne] [":" (Term.proj `K "." `Nonempty)] [] ")")
        (Term.explicitBinder "(" [`h‚ÇÅ] [":" (Term.app `IsComplete [`K])] [] ")")
        (Term.explicitBinder
         "("
         [`h‚ÇÇ]
         [":" (Term.app `Convex [(Data.Real.Basic.term‚Ñù "‚Ñù") `K])]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.forall
         "‚àÄ"
         [`u]
         [(Term.typeSpec ":" `F)]
         ","
         (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
          "‚àÉ"
          (Lean.binderIdent `v)
          (¬´binderTerm‚àà_¬ª "‚àà" `K)
          ","
          (¬´term_=_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
           "="
           (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
            "‚®Ö"
            (Std.ExtendedBinder.extBinders
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
            ", "
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`u]
         []
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `Œ¥
                []
                []
                ":="
                (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                 "‚®Ö"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
                 ", "
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))
             []
             (Std.Tactic.tacticLetI_
              "letI"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
                ":="
                `ne.to_subtype)))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`zero_le_Œ¥ []]
                [(Term.typeSpec ":" (¬´term_‚â§_¬ª (num "0") "‚â§" `Œ¥))]
                ":="
                (Term.app
                 `le_cinf·µ¢
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.hole "_")]
                    []
                    "=>"
                    (Term.app `norm_nonneg [(Term.hole "_")])))]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`Œ¥_le []]
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "‚àÄ"
                   [`w]
                   [(Term.typeSpec ":" `K)]
                   ","
                   (¬´term_‚â§_¬ª
                    `Œ¥
                    "‚â§"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
                ":="
                (Term.app
                 `cinf·µ¢_le
                 [(Term.anonymousCtor
                   "‚ü®"
                   [(num "0")
                    ","
                    (Term.app
                     (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.hole "_")]
                        []
                        "=>"
                        (Term.app `norm_nonneg [(Term.hole "_")])))])]
                   "‚ü©")]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`Œ¥_le' []]
                [(Term.typeSpec
                  ":"
                  (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                   "‚àÄ"
                   (Lean.binderIdent `w)
                   (¬´binderTerm‚àà_¬ª "‚àà" `K)
                   ","
                   (¬´term_‚â§_¬ª
                    `Œ¥
                    "‚â§"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
                ":="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`w `hw]
                  []
                  "=>"
                  (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`exists_seq []]
                [(Term.typeSpec
                  ":"
                  (¬´term‚àÉ_,_¬ª
                   "‚àÉ"
                   (Lean.explicitBinders
                    (Lean.unbracketedExplicitBinders
                     [(Lean.binderIdent `w)]
                     [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
                   ","
                   (Term.forall
                    "‚àÄ"
                    [`n]
                    []
                    ","
                    (¬´term_<_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                      "‚Äñ")
                     "<"
                     (¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hŒ¥ []]
                       [(Term.typeSpec
                         ":"
                         (Term.forall
                          "‚àÄ"
                          [`n]
                          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                          ","
                          (¬´term_<_¬ª
                           `Œ¥
                           "<"
                           (¬´term_+_¬ª
                            `Œ¥
                            "+"
                            (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))))))]
                       ":="
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`n]
                         []
                         "=>"
                         (Term.app `lt_add_of_le_of_pos [`le_rfl `Nat.one_div_pos_of_nat]))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`h []]
                       []
                       ":="
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`n]
                         []
                         "=>"
                         (Term.app `exists_lt_of_cinf·µ¢_lt [(Term.app `hŒ¥ [`n])]))))))
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl
                      (Term.letIdDecl
                       `w
                       []
                       [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
                       ":="
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`n]
                         []
                         "=>"
                         (Term.app `Classical.choose [(Term.app `h [`n])]))))))
                    []
                    (Tactic.exact
                     "exact"
                     (Term.anonymousCtor
                      "‚ü®"
                      [`w
                       ","
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`n]
                         []
                         "=>"
                         (Term.app `Classical.choose_spec [(Term.app `h [`n])])))]
                      "‚ü©"))]))))))
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `exists_seq)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hw)])
                     [])]
                   "‚ü©")])
                [])])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`norm_tendsto []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `tendsto
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      []
                      "=>"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                       "‚Äñ")))
                    `at_top
                    (Term.app `nhds [`Œ¥])]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`h []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `tendsto
                          [(Term.fun
                            "fun"
                            (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" `Œ¥))
                           `at_top
                           (Term.app `nhds [`Œ¥])]))]
                       ":="
                       `tendsto_const_nhds)))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`h' []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `tendsto
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [`n]
                             [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                             "=>"
                             (¬´term_+_¬ª
                              `Œ¥
                              "+"
                              (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                           `at_top
                           (Term.app `nhds [`Œ¥])]))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(convert
                            "convert"
                            []
                            (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat])
                            [])
                           []
                           (Tactic.simp
                            "simp"
                            []
                            []
                            ["only"]
                            ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
                            [])]))))))
                    []
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `tendsto_of_tendsto_of_tendsto_of_le_of_le
                      [`h
                       `h'
                       (Term.fun
                        "fun"
                        (Term.basicFun [`x] [] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`x]
                         []
                         "=>"
                         (Term.app `le_of_lt [(Term.app `hw [(Term.hole "_")])])))]))]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`seq_is_cauchy []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `CauchySeq
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      []
                      "=>"
                      (Term.typeAscription "(" (Term.app `w [`n]) ":" [`F] ")")))]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]")
                     [])
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl
                      (Term.letIdDecl
                       `b
                       []
                       []
                       ":="
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`n]
                         [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                         "=>"
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª (num "8") "*" `Œ¥)
                           "*"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                          "+"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (num "4")
                            "*"
                            (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                           "*"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))))
                    []
                    (Mathlib.Tactic.¬´tacticUse_,,¬ª
                     "use"
                     [(Term.fun
                       "fun"
                       (Term.basicFun [`n] [] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
                    []
                    (Tactic.constructor "constructor")
                    []
                    (Tactic.intro "intro" [`n])
                    []
                    (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
                    []
                    (Tactic.constructor "constructor")
                    []
                    (Tactic.intro "intro" [`p `q `N `hp `hq])
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl
                      (Term.letIdDecl
                       `wp
                       []
                       []
                       ":="
                       (Term.typeAscription "(" (Term.app `w [`p]) ":" [`F] ")"))))
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl
                      (Term.letIdDecl
                       `wq
                       []
                       []
                       ":="
                       (Term.typeAscription "(" (Term.app `w [`q]) ":" [`F] ")"))))
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl (Term.letIdDecl `a [] [] ":=" (¬´term_-_¬ª `u "-" `wq))))
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl (Term.letIdDecl `b [] [] ":=" (¬´term_-_¬ª `u "-" `wp))))
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl
                      (Term.letIdDecl
                       `half
                       []
                       []
                       ":="
                       (¬´term_/_¬ª
                        (num "1")
                        "/"
                        (Term.typeAscription
                         "("
                         (num "2")
                         ":"
                         [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                         ")")))))
                    []
                    (Tactic.tacticLet_
                     "let"
                     (Term.letDecl
                      (Term.letIdDecl
                       `div
                       []
                       []
                       ":="
                       (¬´term_/_¬ª
                        (num "1")
                        "/"
                        (¬´term_+_¬ª
                         (Term.typeAscription "(" `N ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                         "+"
                         (num "1"))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (¬´term_*_¬ª
                             (num "4")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                              "‚Äñ"))
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ"))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª `wp "-" `wq)
                             "‚Äñ")))
                          "="
                          (¬´term_*_¬ª
                           (num "2")
                           "*"
                           (¬´term_+_¬ª
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                            "+"
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))))]
                       ":="
                       (calc
                        "calc"
                        (calcStep
                         (¬´term_=_¬ª
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (¬´term_*_¬ª
                             (num "4")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                              "‚Äñ"))
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ"))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª `wp "-" `wq)
                             "‚Äñ")))
                          "="
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (¬´term_*_¬ª
                             (num "2")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                              "‚Äñ"))
                            "*"
                            (¬´term_*_¬ª
                             (num "2")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                              "‚Äñ")))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª `wp "-" `wq)
                             "‚Äñ"))))
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
                        [(calcStep
                          (¬´term_=_¬ª
                           (Term.hole "_")
                           "="
                           (¬´term_+_¬ª
                            (¬´term_*_¬ª
                             (¬´term_*_¬ª
                              (Term.app
                               (Analysis.InnerProductSpace.Projection.termabsR "absR")
                               [(Term.typeAscription
                                 "("
                                 (num "2")
                                 ":"
                                 [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                 ")")])
                              "*"
                              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                               "‚Äñ"
                               (¬´term_-_¬ª
                                `u
                                "-"
                                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                               "‚Äñ"))
                             "*"
                             (¬´term_*_¬ª
                              (Term.app
                               (Analysis.InnerProductSpace.Projection.termabsR "absR")
                               [(Term.typeAscription
                                 "("
                                 (num "2")
                                 ":"
                                 [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                 ")")])
                              "*"
                              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                               "‚Äñ"
                               (¬´term_-_¬ª
                                `u
                                "-"
                                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                               "‚Äñ")))
                            "+"
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª `wp "-" `wq)
                              "‚Äñ"))))
                          ":="
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                               [])
                              []
                              (Tactic.exact "exact" `zero_le_two)]))))
                         (calcStep
                          (¬´term_=_¬ª
                           (Term.hole "_")
                           "="
                           (¬´term_+_¬ª
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                               (Term.typeAscription
                                "("
                                (num "2")
                                ":"
                                [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                ")")
                               " ‚Ä¢ "
                               (¬´term_-_¬ª
                                `u
                                "-"
                                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                              "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                               (Term.typeAscription
                                "("
                                (num "2")
                                ":"
                                [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                ")")
                               " ‚Ä¢ "
                               (¬´term_-_¬ª
                                `u
                                "-"
                                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                              "‚Äñ"))
                            "+"
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª `wp "-" `wq)
                              "‚Äñ"))))
                          ":="
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Tactic.simp
                               "simp"
                               []
                               []
                               []
                               ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"]
                               [])]))))
                         (calcStep
                          (¬´term_=_¬ª
                           (Term.hole "_")
                           "="
                           (¬´term_+_¬ª
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
                            "+"
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª `a "-" `b)
                              "‚Äñ"))))
                          ":="
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] `smul_sub)
                                 ","
                                 (Tactic.rwRule [] `smul_smul)
                                 ","
                                 (Tactic.rwRule
                                  []
                                  (Term.app
                                   `mul_one_div_cancel
                                   [(Term.typeAscription
                                     "("
                                     `_root_.two_ne_zero
                                     ":"
                                     [(¬´term_‚â†_¬ª
                                       (Term.typeAscription
                                        "("
                                        (num "2")
                                        ":"
                                        [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                        ")")
                                       "‚â†"
                                       (num "0"))]
                                     ")")]))
                                 ","
                                 (Tactic.rwRule
                                  [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                                  `one_add_one_eq_two)
                                 ","
                                 (Tactic.rwRule [] `add_smul)]
                                "]")
                               [])
                              []
                              (Tactic.simp
                               "simp"
                               []
                               []
                               ["only"]
                               ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"]
                               [])
                              []
                              (Tactic.tacticHave_
                               "have"
                               (Term.haveDecl
                                (Term.haveIdDecl
                                 [`eq‚ÇÅ []]
                                 [(Term.typeSpec
                                   ":"
                                   (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                                 ":="
                                 (Term.proj
                                  (Term.app
                                   `sub_sub_sub_cancel_left
                                   [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                  "."
                                  `symm))))
                              []
                              (Mathlib.Tactic.tacticHave_
                               "have"
                               [`eq‚ÇÇ []]
                               [(Term.typeSpec
                                 ":"
                                 (¬´term_=_¬ª
                                  (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                                  "="
                                  (¬´term_+_¬ª `a "+" `b)))])
                              []
                              (Tactic.tacticShow_
                               "show"
                               (¬´term_=_¬ª
                                (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                                "="
                                (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                              []
                              (Tactic.abel "abel" [] [])
                              []
                              (Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)]
                                "]")
                               [])]))))
                         (calcStep
                          (¬´term_=_¬ª
                           (Term.hole "_")
                           "="
                           (¬´term_*_¬ª
                            (num "2")
                            "*"
                            (¬´term_+_¬ª
                             (¬´term_*_¬ª
                              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                              "*"
                              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                             "+"
                             (¬´term_*_¬ª
                              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                              "*"
                              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
                          ":="
                          (Term.app
                           `parallelogram_law_with_norm
                           [(Term.hole "_") (Term.hole "_")]))]))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq []]
                       [(Term.typeSpec
                         ":"
                         (¬´term_‚â§_¬ª
                          `Œ¥
                          "‚â§"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ")))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]")
                            [])
                           []
                           (Tactic.apply "apply" `Œ¥_le')
                           []
                           (Tactic.apply "apply" `h‚ÇÇ)
                           []
                           (Std.Tactic.tacticRepeat'_
                            "repeat'"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
                           []
                           (Std.Tactic.tacticRepeat'_
                            "repeat'"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
                           []
                           (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))]))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq‚ÇÅ []]
                       [(Term.typeSpec
                         ":"
                         (¬´term_‚â§_¬ª
                          (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
                          "‚â§"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (num "4")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ"))
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                            "‚Äñ"))))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Mathlib.Tactic.tacticSimp_rw__
                            "simp_rw"
                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
                            [])
                           []
                           (Tactic.exact
                            "exact"
                            (Term.app
                             `mul_le_mul_of_nonneg_left
                             [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq])
                              `zero_le_four]))]))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq‚ÇÇ []]
                       [(Term.typeSpec
                         ":"
                         (¬´term_‚â§_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                          "‚â§"
                          (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                       ":="
                       (Term.app
                        `mul_self_le_mul_self
                        [(Term.app `norm_nonneg [(Term.hole "_")])
                         (Term.app
                          `le_trans
                          [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
                           (Term.app
                            `add_le_add_left
                            [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq‚ÇÇ' []]
                       [(Term.typeSpec
                         ":"
                         (¬´term_‚â§_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
                          "‚â§"
                          (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                       ":="
                       (Term.app
                        `mul_self_le_mul_self
                        [(Term.app `norm_nonneg [(Term.hole "_")])
                         (Term.app
                          `le_trans
                          [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
                           (Term.app
                            `add_le_add_left
                            [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]")
                     [])
                    []
                    (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                     [(Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]")
                     [])
                    []
                    (calcTactic
                     "calc"
                     (calcStep
                      (¬´term_=_¬ª
                       (¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
                       "="
                       (¬´term_-_¬ª
                        (¬´term_*_¬ª
                         (num "2")
                         "*"
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                          "+"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                        "-"
                        (¬´term_*_¬ª
                         (¬´term_*_¬ª
                          (num "4")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                          "‚Äñ"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                          "‚Äñ"))))
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq
                            "["
                            [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)]
                            "]")
                           [])
                          []
                          (Tactic.simp "simp" [] [] [] [] [])]))))
                     [(calcStep
                       (¬´term_‚â§_¬ª
                        (Term.hole "_")
                        "‚â§"
                        (¬´term_-_¬ª
                         (¬´term_*_¬ª
                          (num "2")
                          "*"
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                         "-"
                         (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                       ":="
                       (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
                      (calcStep
                       (¬´term_‚â§_¬ª
                        (Term.hole "_")
                        "‚â§"
                        (¬´term_-_¬ª
                         (¬´term_*_¬ª
                          (num "2")
                          "*"
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
                           "+"
                           (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
                         "-"
                         (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                       ":="
                       (Term.app
                        `sub_le_sub_right
                        [(Term.app
                          `mul_le_mul_of_nonneg_left
                          [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
                         (Term.hole "_")]))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
                         "+"
                         (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))])
                    []
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `add_nonneg
                      [(Term.app
                        `mul_nonneg
                        [(Term.app
                          `mul_nonneg
                          [(Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                           `zero_le_Œ¥])
                         (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
                       (Term.app
                        `mul_nonneg
                        [(Term.app
                          `mul_nonneg
                          [(Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                           `nat.one_div_pos_of_nat.le])
                         `nat.one_div_pos_of_nat.le])]))
                    []
                    (Tactic.apply "apply" `tendsto.comp)
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                     [(convert "convert" [] `continuous_sqrt.continuous_at [])
                      []
                      (Tactic.exact "exact" `sqrt_zero.symm)])
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq‚ÇÅ []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `tendsto
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [`n]
                             [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                             "=>"
                             (¬´term_*_¬ª
                              (¬´term_*_¬ª (num "8") "*" `Œ¥)
                              "*"
                              (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                           `at_top
                           (Term.app
                            `nhds
                            [(Term.typeAscription
                              "("
                              (num "0")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")])]))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(convert
                            "convert"
                            []
                            (Term.app
                             (Term.proj
                              (Term.app
                               (Term.explicit "@" `tendsto_const_nhds)
                               [(Term.hole "_")
                                (Term.hole "_")
                                (Term.hole "_")
                                (¬´term_*_¬ª (num "8") "*" `Œ¥)
                                (Term.hole "_")])
                              "."
                              `mul)
                             [`tendsto_one_div_add_at_top_nhds_0_nat])
                            [])
                           []
                           (Tactic.simp
                            "simp"
                            []
                            []
                            ["only"]
                            ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                            [])]))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `tendsto
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [`n]
                             [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                             "=>"
                             (¬´term_*_¬ª
                              (Term.typeAscription
                               "("
                               (num "4")
                               ":"
                               [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                               ")")
                              "*"
                              (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                           `at_top
                           (Term.app
                            `nhds
                            [(Term.typeAscription
                              "("
                              (num "0")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")])]))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(convert
                            "convert"
                            []
                            (Term.app
                             (Term.proj
                              (Term.app
                               (Term.explicit "@" `tendsto_const_nhds)
                               [(Term.hole "_")
                                (Term.hole "_")
                                (Term.hole "_")
                                (Term.typeAscription
                                 "("
                                 (num "4")
                                 ":"
                                 [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                 ")")
                                (Term.hole "_")])
                              "."
                              `mul)
                             [`tendsto_one_div_add_at_top_nhds_0_nat])
                            [])
                           []
                           (Tactic.simp
                            "simp"
                            []
                            []
                            ["only"]
                            ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                            [])]))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq‚ÇÇ []]
                       [(Term.typeSpec
                         ":"
                         (Term.app
                          `tendsto
                          [(Term.fun
                            "fun"
                            (Term.basicFun
                             [`n]
                             [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                             "=>"
                             (¬´term_*_¬ª
                              (¬´term_*_¬ª
                               (Term.typeAscription
                                "("
                                (num "4")
                                ":"
                                [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                ")")
                               "*"
                               (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                              "*"
                              (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                           `at_top
                           (Term.app
                            `nhds
                            [(Term.typeAscription
                              "("
                              (num "0")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")])]))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(convert
                            "convert"
                            []
                            (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
                            [])
                           []
                           (Tactic.simp
                            "simp"
                            []
                            []
                            ["only"]
                            ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                            [])]))))))
                    []
                    (convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["only"]
                     ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
                     [])]))))))
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget
                []
                (Term.app
                 `cauchy_seq_tendsto_of_is_complete
                 [`h‚ÇÅ
                  (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))
                  `seq_is_cauchy]))]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w_tendsto)])
                     [])]
                   "‚ü©")])
                [])])
             []
             (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`v])
             []
             (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`hv])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`h_cont []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `Continuous
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`v]
                      []
                      "=>"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")))]))]
                ":="
                (Term.app
                 `Continuous.comp
                 [`continuous_norm
                  (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
             []
             (Mathlib.Tactic.tacticHave_
              "have"
              []
              [(Term.typeSpec
                ":"
                (Term.app
                 `tendsto
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`n]
                    []
                    "=>"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                     "‚Äñ")))
                  `at_top
                  (Term.app
                   `nhds
                   [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])]))])
             []
             (convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) [])
             []
             (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto]))
             []
             (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`u]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `Œ¥
               []
               []
               ":="
               (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                "‚®Ö"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
                ", "
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))
            []
            (Std.Tactic.tacticLetI_
             "letI"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
               ":="
               `ne.to_subtype)))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`zero_le_Œ¥ []]
               [(Term.typeSpec ":" (¬´term_‚â§_¬ª (num "0") "‚â§" `Œ¥))]
               ":="
               (Term.app
                `le_cinf·µ¢
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.hole "_")]
                   []
                   "=>"
                   (Term.app `norm_nonneg [(Term.hole "_")])))]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`Œ¥_le []]
               [(Term.typeSpec
                 ":"
                 (Term.forall
                  "‚àÄ"
                  [`w]
                  [(Term.typeSpec ":" `K)]
                  ","
                  (¬´term_‚â§_¬ª
                   `Œ¥
                   "‚â§"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
               ":="
               (Term.app
                `cinf·µ¢_le
                [(Term.anonymousCtor
                  "‚ü®"
                  [(num "0")
                   ","
                   (Term.app
                    (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [(Term.hole "_")]
                       []
                       "=>"
                       (Term.app `norm_nonneg [(Term.hole "_")])))])]
                  "‚ü©")]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`Œ¥_le' []]
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                  "‚àÄ"
                  (Lean.binderIdent `w)
                  (¬´binderTerm‚àà_¬ª "‚àà" `K)
                  ","
                  (¬´term_‚â§_¬ª
                   `Œ¥
                   "‚â§"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [`w `hw]
                 []
                 "=>"
                 (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`exists_seq []]
               [(Term.typeSpec
                 ":"
                 (¬´term‚àÉ_,_¬ª
                  "‚àÉ"
                  (Lean.explicitBinders
                   (Lean.unbracketedExplicitBinders
                    [(Lean.binderIdent `w)]
                    [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
                  ","
                  (Term.forall
                   "‚àÄ"
                   [`n]
                   []
                   ","
                   (¬´term_<_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                     "‚Äñ")
                    "<"
                    (¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hŒ¥ []]
                      [(Term.typeSpec
                        ":"
                        (Term.forall
                         "‚àÄ"
                         [`n]
                         [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                         ","
                         (¬´term_<_¬ª
                          `Œ¥
                          "<"
                          (¬´term_+_¬ª
                           `Œ¥
                           "+"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))))))]
                      ":="
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`n]
                        []
                        "=>"
                        (Term.app `lt_add_of_le_of_pos [`le_rfl `Nat.one_div_pos_of_nat]))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h []]
                      []
                      ":="
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`n]
                        []
                        "=>"
                        (Term.app `exists_lt_of_cinf·µ¢_lt [(Term.app `hŒ¥ [`n])]))))))
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl
                     (Term.letIdDecl
                      `w
                      []
                      [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
                      ":="
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`n]
                        []
                        "=>"
                        (Term.app `Classical.choose [(Term.app `h [`n])]))))))
                   []
                   (Tactic.exact
                    "exact"
                    (Term.anonymousCtor
                     "‚ü®"
                     [`w
                      ","
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`n]
                        []
                        "=>"
                        (Term.app `Classical.choose_spec [(Term.app `h [`n])])))]
                     "‚ü©"))]))))))
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `exists_seq)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hw)])
                    [])]
                  "‚ü©")])
               [])])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`norm_tendsto []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `tendsto
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`n]
                     []
                     "=>"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                      "‚Äñ")))
                   `at_top
                   (Term.app `nhds [`Œ¥])]))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h []]
                      [(Term.typeSpec
                        ":"
                        (Term.app
                         `tendsto
                         [(Term.fun
                           "fun"
                           (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" `Œ¥))
                          `at_top
                          (Term.app `nhds [`Œ¥])]))]
                      ":="
                      `tendsto_const_nhds)))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`h' []]
                      [(Term.typeSpec
                        ":"
                        (Term.app
                         `tendsto
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [`n]
                            [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                            "=>"
                            (¬´term_+_¬ª
                             `Œ¥
                             "+"
                             (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                          `at_top
                          (Term.app `nhds [`Œ¥])]))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(convert
                           "convert"
                           []
                           (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat])
                           [])
                          []
                          (Tactic.simp
                           "simp"
                           []
                           []
                           ["only"]
                           ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
                           [])]))))))
                   []
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `tendsto_of_tendsto_of_tendsto_of_le_of_le
                     [`h
                      `h'
                      (Term.fun
                       "fun"
                       (Term.basicFun [`x] [] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`x]
                        []
                        "=>"
                        (Term.app `le_of_lt [(Term.app `hw [(Term.hole "_")])])))]))]))))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`seq_is_cauchy []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `CauchySeq
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`n]
                     []
                     "=>"
                     (Term.typeAscription "(" (Term.app `w [`n]) ":" [`F] ")")))]))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]")
                    [])
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl
                     (Term.letIdDecl
                      `b
                      []
                      []
                      ":="
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`n]
                        [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                        "=>"
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª
                          (¬´term_*_¬ª (num "8") "*" `Œ¥)
                          "*"
                          (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                         "+"
                         (¬´term_*_¬ª
                          (¬´term_*_¬ª
                           (num "4")
                           "*"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                          "*"
                          (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))))
                   []
                   (Mathlib.Tactic.¬´tacticUse_,,¬ª
                    "use"
                    [(Term.fun
                      "fun"
                      (Term.basicFun [`n] [] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
                   []
                   (Tactic.constructor "constructor")
                   []
                   (Tactic.intro "intro" [`n])
                   []
                   (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
                   []
                   (Tactic.constructor "constructor")
                   []
                   (Tactic.intro "intro" [`p `q `N `hp `hq])
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl
                     (Term.letIdDecl
                      `wp
                      []
                      []
                      ":="
                      (Term.typeAscription "(" (Term.app `w [`p]) ":" [`F] ")"))))
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl
                     (Term.letIdDecl
                      `wq
                      []
                      []
                      ":="
                      (Term.typeAscription "(" (Term.app `w [`q]) ":" [`F] ")"))))
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl (Term.letIdDecl `a [] [] ":=" (¬´term_-_¬ª `u "-" `wq))))
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl (Term.letIdDecl `b [] [] ":=" (¬´term_-_¬ª `u "-" `wp))))
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl
                     (Term.letIdDecl
                      `half
                      []
                      []
                      ":="
                      (¬´term_/_¬ª
                       (num "1")
                       "/"
                       (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")))))
                   []
                   (Tactic.tacticLet_
                    "let"
                    (Term.letDecl
                     (Term.letIdDecl
                      `div
                      []
                      []
                      ":="
                      (¬´term_/_¬ª
                       (num "1")
                       "/"
                       (¬´term_+_¬ª
                        (Term.typeAscription "(" `N ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                        "+"
                        (num "1"))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (¬´term_=_¬ª
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (num "4")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ"))
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                            "‚Äñ"))
                          "+"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                         "="
                         (¬´term_*_¬ª
                          (num "2")
                          "*"
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))))]
                      ":="
                      (calc
                       "calc"
                       (calcStep
                        (¬´term_=_¬ª
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (num "4")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ"))
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                            "‚Äñ"))
                          "+"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                         "="
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (num "2")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ"))
                           "*"
                           (¬´term_*_¬ª
                            (num "2")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                             "‚Äñ")))
                          "+"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª `wp "-" `wq)
                            "‚Äñ"))))
                        ":="
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
                       [(calcStep
                         (¬´term_=_¬ª
                          (Term.hole "_")
                          "="
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (¬´term_*_¬ª
                             (Term.app
                              (Analysis.InnerProductSpace.Projection.termabsR "absR")
                              [(Term.typeAscription
                                "("
                                (num "2")
                                ":"
                                [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                ")")])
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                              "‚Äñ"))
                            "*"
                            (¬´term_*_¬ª
                             (Term.app
                              (Analysis.InnerProductSpace.Projection.termabsR "absR")
                              [(Term.typeAscription
                                "("
                                (num "2")
                                ":"
                                [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                ")")])
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                              "‚Äñ"
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                              "‚Äñ")))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª `wp "-" `wq)
                             "‚Äñ"))))
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                              [])
                             []
                             (Tactic.exact "exact" `zero_le_two)]))))
                        (calcStep
                         (¬´term_=_¬ª
                          (Term.hole "_")
                          "="
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                              (Term.typeAscription
                               "("
                               (num "2")
                               ":"
                               [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                               ")")
                              " ‚Ä¢ "
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                             "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                              (Term.typeAscription
                               "("
                               (num "2")
                               ":"
                               [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                               ")")
                              " ‚Ä¢ "
                              (¬´term_-_¬ª
                               `u
                               "-"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                             "‚Äñ"))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª `wp "-" `wq)
                             "‚Äñ"))))
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(Tactic.simp
                              "simp"
                              []
                              []
                              []
                              ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"]
                              [])]))))
                        (calcStep
                         (¬´term_=_¬ª
                          (Term.hole "_")
                          "="
                          (¬´term_+_¬ª
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
                           "+"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `smul_sub)
                                ","
                                (Tactic.rwRule [] `smul_smul)
                                ","
                                (Tactic.rwRule
                                 []
                                 (Term.app
                                  `mul_one_div_cancel
                                  [(Term.typeAscription
                                    "("
                                    `_root_.two_ne_zero
                                    ":"
                                    [(¬´term_‚â†_¬ª
                                      (Term.typeAscription
                                       "("
                                       (num "2")
                                       ":"
                                       [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                       ")")
                                      "‚â†"
                                      (num "0"))]
                                    ")")]))
                                ","
                                (Tactic.rwRule
                                 [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                                 `one_add_one_eq_two)
                                ","
                                (Tactic.rwRule [] `add_smul)]
                               "]")
                              [])
                             []
                             (Tactic.simp
                              "simp"
                              []
                              []
                              ["only"]
                              ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"]
                              [])
                             []
                             (Tactic.tacticHave_
                              "have"
                              (Term.haveDecl
                               (Term.haveIdDecl
                                [`eq‚ÇÅ []]
                                [(Term.typeSpec
                                  ":"
                                  (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                                ":="
                                (Term.proj
                                 (Term.app
                                  `sub_sub_sub_cancel_left
                                  [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                                 "."
                                 `symm))))
                             []
                             (Mathlib.Tactic.tacticHave_
                              "have"
                              [`eq‚ÇÇ []]
                              [(Term.typeSpec
                                ":"
                                (¬´term_=_¬ª
                                 (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                                 "="
                                 (¬´term_+_¬ª `a "+" `b)))])
                             []
                             (Tactic.tacticShow_
                              "show"
                              (¬´term_=_¬ª
                               (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                               "="
                               (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                             []
                             (Tactic.abel "abel" [] [])
                             []
                             (Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)]
                               "]")
                              [])]))))
                        (calcStep
                         (¬´term_=_¬ª
                          (Term.hole "_")
                          "="
                          (¬´term_*_¬ª
                           (num "2")
                           "*"
                           (¬´term_+_¬ª
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                            "+"
                            (¬´term_*_¬ª
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                             "*"
                             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
                         ":="
                         (Term.app
                          `parallelogram_law_with_norm
                          [(Term.hole "_") (Term.hole "_")]))]))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`eq []]
                      [(Term.typeSpec
                        ":"
                        (¬´term_‚â§_¬ª
                         `Œ¥
                         "‚â§"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                          "‚Äñ"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                          "‚Äñ")))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(Tactic.rwSeq
                           "rw"
                           []
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]")
                           [])
                          []
                          (Tactic.apply "apply" `Œ¥_le')
                          []
                          (Tactic.apply "apply" `h‚ÇÇ)
                          []
                          (Std.Tactic.tacticRepeat'_
                           "repeat'"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
                          []
                          (Std.Tactic.tacticRepeat'_
                           "repeat'"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
                          []
                          (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))]))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`eq‚ÇÅ []]
                      [(Term.typeSpec
                        ":"
                        (¬´term_‚â§_¬ª
                         (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
                         "‚â§"
                         (¬´term_*_¬ª
                          (¬´term_*_¬ª
                           (num "4")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                            "‚Äñ"))
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ"))))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(Mathlib.Tactic.tacticSimp_rw__
                           "simp_rw"
                           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
                           [])
                          []
                          (Tactic.exact
                           "exact"
                           (Term.app
                            `mul_le_mul_of_nonneg_left
                            [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq])
                             `zero_le_four]))]))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`eq‚ÇÇ []]
                      [(Term.typeSpec
                        ":"
                        (¬´term_‚â§_¬ª
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                         "‚â§"
                         (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                      ":="
                      (Term.app
                       `mul_self_le_mul_self
                       [(Term.app `norm_nonneg [(Term.hole "_")])
                        (Term.app
                         `le_trans
                         [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
                          (Term.app
                           `add_le_add_left
                           [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`eq‚ÇÇ' []]
                      [(Term.typeSpec
                        ":"
                        (¬´term_‚â§_¬ª
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
                         "‚â§"
                         (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                      ":="
                      (Term.app
                       `mul_self_le_mul_self
                       [(Term.app `norm_nonneg [(Term.hole "_")])
                        (Term.app
                         `le_trans
                         [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
                          (Term.app
                           `add_le_add_left
                           [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]")
                    [])
                   []
                   (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                    [(Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]")
                    [])
                   []
                   (calcTactic
                    "calc"
                    (calcStep
                     (¬´term_=_¬ª
                      (¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
                      "="
                      (¬´term_-_¬ª
                       (¬´term_*_¬ª
                        (num "2")
                        "*"
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                         "+"
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                       "-"
                       (¬´term_*_¬ª
                        (¬´term_*_¬ª
                         (num "4")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                          "‚Äñ"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                          "‚Äñ"))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                         "‚Äñ"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                         "‚Äñ"))))
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)]
                           "]")
                          [])
                         []
                         (Tactic.simp "simp" [] [] [] [] [])]))))
                    [(calcStep
                      (¬´term_‚â§_¬ª
                       (Term.hole "_")
                       "‚â§"
                       (¬´term_-_¬ª
                        (¬´term_*_¬ª
                         (num "2")
                         "*"
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                          "+"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                        "-"
                        (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                      ":="
                      (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
                     (calcStep
                      (¬´term_‚â§_¬ª
                       (Term.hole "_")
                       "‚â§"
                       (¬´term_-_¬ª
                        (¬´term_*_¬ª
                         (num "2")
                         "*"
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
                          "+"
                          (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
                        "-"
                        (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                      ":="
                      (Term.app
                       `sub_le_sub_right
                       [(Term.app
                         `mul_le_mul_of_nonneg_left
                         [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
                        (Term.hole "_")]))
                     (calcStep
                      (¬´term_=_¬ª
                       (Term.hole "_")
                       "="
                       (¬´term_+_¬ª
                        (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
                        "+"
                        (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))])
                   []
                   (Tactic.exact
                    "exact"
                    (Term.app
                     `add_nonneg
                     [(Term.app
                       `mul_nonneg
                       [(Term.app
                         `mul_nonneg
                         [(Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                          `zero_le_Œ¥])
                        (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
                      (Term.app
                       `mul_nonneg
                       [(Term.app
                         `mul_nonneg
                         [(Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                          `nat.one_div_pos_of_nat.le])
                        `nat.one_div_pos_of_nat.le])]))
                   []
                   (Tactic.apply "apply" `tendsto.comp)
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                    [(convert "convert" [] `continuous_sqrt.continuous_at [])
                     []
                     (Tactic.exact "exact" `sqrt_zero.symm)])
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`eq‚ÇÅ []]
                      [(Term.typeSpec
                        ":"
                        (Term.app
                         `tendsto
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [`n]
                            [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                            "=>"
                            (¬´term_*_¬ª
                             (¬´term_*_¬ª (num "8") "*" `Œ¥)
                             "*"
                             (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                          `at_top
                          (Term.app
                           `nhds
                           [(Term.typeAscription
                             "("
                             (num "0")
                             ":"
                             [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                             ")")])]))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(convert
                           "convert"
                           []
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.explicit "@" `tendsto_const_nhds)
                              [(Term.hole "_")
                               (Term.hole "_")
                               (Term.hole "_")
                               (¬´term_*_¬ª (num "8") "*" `Œ¥)
                               (Term.hole "_")])
                             "."
                             `mul)
                            [`tendsto_one_div_add_at_top_nhds_0_nat])
                           [])
                          []
                          (Tactic.simp
                           "simp"
                           []
                           []
                           ["only"]
                           ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                           [])]))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec
                        ":"
                        (Term.app
                         `tendsto
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [`n]
                            [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                            "=>"
                            (¬´term_*_¬ª
                             (Term.typeAscription
                              "("
                              (num "4")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")
                             "*"
                             (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                          `at_top
                          (Term.app
                           `nhds
                           [(Term.typeAscription
                             "("
                             (num "0")
                             ":"
                             [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                             ")")])]))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(convert
                           "convert"
                           []
                           (Term.app
                            (Term.proj
                             (Term.app
                              (Term.explicit "@" `tendsto_const_nhds)
                              [(Term.hole "_")
                               (Term.hole "_")
                               (Term.hole "_")
                               (Term.typeAscription
                                "("
                                (num "4")
                                ":"
                                [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                ")")
                               (Term.hole "_")])
                             "."
                             `mul)
                            [`tendsto_one_div_add_at_top_nhds_0_nat])
                           [])
                          []
                          (Tactic.simp
                           "simp"
                           []
                           []
                           ["only"]
                           ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                           [])]))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`eq‚ÇÇ []]
                      [(Term.typeSpec
                        ":"
                        (Term.app
                         `tendsto
                         [(Term.fun
                           "fun"
                           (Term.basicFun
                            [`n]
                            [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                            "=>"
                            (¬´term_*_¬ª
                             (¬´term_*_¬ª
                              (Term.typeAscription
                               "("
                               (num "4")
                               ":"
                               [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                               ")")
                              "*"
                              (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                             "*"
                             (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                          `at_top
                          (Term.app
                           `nhds
                           [(Term.typeAscription
                             "("
                             (num "0")
                             ":"
                             [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                             ")")])]))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(convert
                           "convert"
                           []
                           (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
                           [])
                          []
                          (Tactic.simp
                           "simp"
                           []
                           []
                           ["only"]
                           ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                           [])]))))))
                   []
                   (convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
                   []
                   (Tactic.simp
                    "simp"
                    []
                    []
                    ["only"]
                    ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
                    [])]))))))
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget
               []
               (Term.app
                `cauchy_seq_tendsto_of_is_complete
                [`h‚ÇÅ
                 (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))
                 `seq_is_cauchy]))]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w_tendsto)])
                    [])]
                  "‚ü©")])
               [])])
            []
            (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`v])
            []
            (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`hv])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`h_cont []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `Continuous
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`v]
                     []
                     "=>"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")))]))]
               ":="
               (Term.app
                `Continuous.comp
                [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
            []
            (Mathlib.Tactic.tacticHave_
             "have"
             []
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   []
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                    "‚Äñ")))
                 `at_top
                 (Term.app
                  `nhds
                  [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])]))])
            []
            (convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) [])
            []
            (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto]))
            []
            (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `Œ¥
             []
             []
             ":="
             (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
              "‚®Ö"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
              ", "
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))
          []
          (Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
             ":="
             `ne.to_subtype)))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`zero_le_Œ¥ []]
             [(Term.typeSpec ":" (¬´term_‚â§_¬ª (num "0") "‚â§" `Œ¥))]
             ":="
             (Term.app
              `le_cinf·µ¢
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.hole "_")]
                 []
                 "=>"
                 (Term.app `norm_nonneg [(Term.hole "_")])))]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Œ¥_le []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                [`w]
                [(Term.typeSpec ":" `K)]
                ","
                (¬´term_‚â§_¬ª
                 `Œ¥
                 "‚â§"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
             ":="
             (Term.app
              `cinf·µ¢_le
              [(Term.anonymousCtor
                "‚ü®"
                [(num "0")
                 ","
                 (Term.app
                  (Term.proj `Set.forall_range_iff "." (fieldIdx "2"))
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.hole "_")]
                     []
                     "=>"
                     (Term.app `norm_nonneg [(Term.hole "_")])))])]
                "‚ü©")]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Œ¥_le' []]
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                "‚àÄ"
                (Lean.binderIdent `w)
                (¬´binderTerm‚àà_¬ª "‚àà" `K)
                ","
                (¬´term_‚â§_¬ª
                 `Œ¥
                 "‚â§"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`w `hw]
               []
               "=>"
               (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`exists_seq []]
             [(Term.typeSpec
               ":"
               (¬´term‚àÉ_,_¬ª
                "‚àÉ"
                (Lean.explicitBinders
                 (Lean.unbracketedExplicitBinders
                  [(Lean.binderIdent `w)]
                  [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K)]))
                ","
                (Term.forall
                 "‚àÄ"
                 [`n]
                 []
                 ","
                 (¬´term_<_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                   "‚Äñ")
                  "<"
                  (¬´term_+_¬ª `Œ¥ "+" (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hŒ¥ []]
                    [(Term.typeSpec
                      ":"
                      (Term.forall
                       "‚àÄ"
                       [`n]
                       [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                       ","
                       (¬´term_<_¬ª
                        `Œ¥
                        "<"
                        (¬´term_+_¬ª
                         `Œ¥
                         "+"
                         (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))))))]
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      []
                      "=>"
                      (Term.app `lt_add_of_le_of_pos [`le_rfl `Nat.one_div_pos_of_nat]))))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h []]
                    []
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      []
                      "=>"
                      (Term.app `exists_lt_of_cinf·µ¢_lt [(Term.app `hŒ¥ [`n])]))))))
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `w
                    []
                    [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `K))]
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      []
                      "=>"
                      (Term.app `Classical.choose [(Term.app `h [`n])]))))))
                 []
                 (Tactic.exact
                  "exact"
                  (Term.anonymousCtor
                   "‚ü®"
                   [`w
                    ","
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      []
                      "=>"
                      (Term.app `Classical.choose_spec [(Term.app `h [`n])])))]
                   "‚ü©"))]))))))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `exists_seq)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hw)])
                  [])]
                "‚ü©")])
             [])])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`norm_tendsto []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   []
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                    "‚Äñ")))
                 `at_top
                 (Term.app `nhds [`Œ¥])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" `Œ¥))
                        `at_top
                        (Term.app `nhds [`Œ¥])]))]
                    ":="
                    `tendsto_const_nhds)))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`h' []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [`n]
                          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                          "=>"
                          (¬´term_+_¬ª
                           `Œ¥
                           "+"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                        `at_top
                        (Term.app `nhds [`Œ¥])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(convert
                         "convert"
                         []
                         (Term.app `h.add [`tendsto_one_div_add_at_top_nhds_0_nat])
                         [])
                        []
                        (Tactic.simp
                         "simp"
                         []
                         []
                         ["only"]
                         ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
                         [])]))))))
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `tendsto_of_tendsto_of_tendsto_of_le_of_le
                   [`h
                    `h'
                    (Term.fun "fun" (Term.basicFun [`x] [] "=>" (Term.app `Œ¥_le [(Term.hole "_")])))
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`x]
                      []
                      "=>"
                      (Term.app `le_of_lt [(Term.app `hw [(Term.hole "_")])])))]))]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`seq_is_cauchy []]
             [(Term.typeSpec
               ":"
               (Term.app
                `CauchySeq
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   []
                   "=>"
                   (Term.typeAscription "(" (Term.app `w [`n]) ":" [`F] ")")))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]")
                  [])
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `b
                    []
                    []
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                      "=>"
                      (¬´term_+_¬ª
                       (¬´term_*_¬ª
                        (¬´term_*_¬ª (num "8") "*" `Œ¥)
                        "*"
                        (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                       "+"
                       (¬´term_*_¬ª
                        (¬´term_*_¬ª
                         (num "4")
                         "*"
                         (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                        "*"
                        (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))))
                 []
                 (Mathlib.Tactic.¬´tacticUse_,,¬ª
                  "use"
                  [(Term.fun
                    "fun"
                    (Term.basicFun [`n] [] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
                 []
                 (Tactic.constructor "constructor")
                 []
                 (Tactic.intro "intro" [`n])
                 []
                 (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
                 []
                 (Tactic.constructor "constructor")
                 []
                 (Tactic.intro "intro" [`p `q `N `hp `hq])
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `wp
                    []
                    []
                    ":="
                    (Term.typeAscription "(" (Term.app `w [`p]) ":" [`F] ")"))))
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `wq
                    []
                    []
                    ":="
                    (Term.typeAscription "(" (Term.app `w [`q]) ":" [`F] ")"))))
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl (Term.letIdDecl `a [] [] ":=" (¬´term_-_¬ª `u "-" `wq))))
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl (Term.letIdDecl `b [] [] ":=" (¬´term_-_¬ª `u "-" `wp))))
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `half
                    []
                    []
                    ":="
                    (¬´term_/_¬ª
                     (num "1")
                     "/"
                     (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")))))
                 []
                 (Tactic.tacticLet_
                  "let"
                  (Term.letDecl
                   (Term.letIdDecl
                    `div
                    []
                    []
                    ":="
                    (¬´term_/_¬ª
                     (num "1")
                     "/"
                     (¬´term_+_¬ª
                      (Term.typeAscription "(" `N ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                      "+"
                      (num "1"))))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (¬´term_=_¬ª
                       (¬´term_+_¬ª
                        (¬´term_*_¬ª
                         (¬´term_*_¬ª
                          (num "4")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                          "‚Äñ"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                          "‚Äñ"))
                        "+"
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                       "="
                       (¬´term_*_¬ª
                        (num "2")
                        "*"
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                         "+"
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))))]
                    ":="
                    (calc
                     "calc"
                     (calcStep
                      (¬´term_=_¬ª
                       (¬´term_+_¬ª
                        (¬´term_*_¬ª
                         (¬´term_*_¬ª
                          (num "4")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ"))
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                          "‚Äñ"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                          "‚Äñ"))
                        "+"
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                       "="
                       (¬´term_+_¬ª
                        (¬´term_*_¬ª
                         (¬´term_*_¬ª
                          (num "2")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ"))
                         "*"
                         (¬´term_*_¬ª
                          (num "2")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (¬´term_-_¬ª
                            `u
                            "-"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                           "‚Äñ")))
                        "+"
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
                     [(calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª
                          (¬´term_*_¬ª
                           (Term.app
                            (Analysis.InnerProductSpace.Projection.termabsR "absR")
                            [(Term.typeAscription
                              "("
                              (num "2")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")])
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                            "‚Äñ"))
                          "*"
                          (¬´term_*_¬ª
                           (Term.app
                            (Analysis.InnerProductSpace.Projection.termabsR "absR")
                            [(Term.typeAscription
                              "("
                              (num "2")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")])
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                            "‚Äñ")))
                         "+"
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                            [])
                           []
                           (Tactic.exact "exact" `zero_le_two)]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                            (Term.typeAscription
                             "("
                             (num "2")
                             ":"
                             [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                             ")")
                            " ‚Ä¢ "
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                           "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                           "‚Äñ"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                            (Term.typeAscription
                             "("
                             (num "2")
                             ":"
                             [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                             ")")
                            " ‚Ä¢ "
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                           "‚Äñ"))
                         "+"
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.simp
                            "simp"
                            []
                            []
                            []
                            ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"]
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_+_¬ª
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
                         "+"
                         (¬´term_*_¬ª
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
                          "*"
                          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] `smul_sub)
                              ","
                              (Tactic.rwRule [] `smul_smul)
                              ","
                              (Tactic.rwRule
                               []
                               (Term.app
                                `mul_one_div_cancel
                                [(Term.typeAscription
                                  "("
                                  `_root_.two_ne_zero
                                  ":"
                                  [(¬´term_‚â†_¬ª
                                    (Term.typeAscription
                                     "("
                                     (num "2")
                                     ":"
                                     [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                     ")")
                                    "‚â†"
                                    (num "0"))]
                                  ")")]))
                              ","
                              (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
                              ","
                              (Tactic.rwRule [] `add_smul)]
                             "]")
                            [])
                           []
                           (Tactic.simp
                            "simp"
                            []
                            []
                            ["only"]
                            ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"]
                            [])
                           []
                           (Tactic.tacticHave_
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              [`eq‚ÇÅ []]
                              [(Term.typeSpec
                                ":"
                                (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                              ":="
                              (Term.proj
                               (Term.app
                                `sub_sub_sub_cancel_left
                                [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                               "."
                               `symm))))
                           []
                           (Mathlib.Tactic.tacticHave_
                            "have"
                            [`eq‚ÇÇ []]
                            [(Term.typeSpec
                              ":"
                              (¬´term_=_¬ª
                               (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                               "="
                               (¬´term_+_¬ª `a "+" `b)))])
                           []
                           (Tactic.tacticShow_
                            "show"
                            (¬´term_=_¬ª
                             (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                             "="
                             (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                           []
                           (Tactic.abel "abel" [] [])
                           []
                           (Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)]
                             "]")
                            [])]))))
                      (calcStep
                       (¬´term_=_¬ª
                        (Term.hole "_")
                        "="
                        (¬´term_*_¬ª
                         (num "2")
                         "*"
                         (¬´term_+_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                          "+"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
                       ":="
                       (Term.app
                        `parallelogram_law_with_norm
                        [(Term.hole "_") (Term.hole "_")]))]))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       `Œ¥
                       "‚â§"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                        "‚Äñ"
                        (¬´term_-_¬ª
                         `u
                         "-"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                        "‚Äñ")))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]")
                         [])
                        []
                        (Tactic.apply "apply" `Œ¥_le')
                        []
                        (Tactic.apply "apply" `h‚ÇÇ)
                        []
                        (Std.Tactic.tacticRepeat'_
                         "repeat'"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
                        []
                        (Std.Tactic.tacticRepeat'_
                         "repeat'"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
                        []
                        (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))]))))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÅ []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
                       "‚â§"
                       (¬´term_*_¬ª
                        (¬´term_*_¬ª
                         (num "4")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                          "‚Äñ"
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                          "‚Äñ"))
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                         "‚Äñ"
                         (¬´term_-_¬ª
                          `u
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                         "‚Äñ"))))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Mathlib.Tactic.tacticSimp_rw__
                         "simp_rw"
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
                         [])
                        []
                        (Tactic.exact
                         "exact"
                         (Term.app
                          `mul_le_mul_of_nonneg_left
                          [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four]))]))))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÇ []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                       "‚â§"
                       (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                    ":="
                    (Term.app
                     `mul_self_le_mul_self
                     [(Term.app `norm_nonneg [(Term.hole "_")])
                      (Term.app
                       `le_trans
                       [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
                        (Term.app
                         `add_le_add_left
                         [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÇ' []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
                       "‚â§"
                       (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                    ":="
                    (Term.app
                     `mul_self_le_mul_self
                     [(Term.app `norm_nonneg [(Term.hole "_")])
                      (Term.app
                       `le_trans
                       [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
                        (Term.app
                         `add_le_add_left
                         [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]")
                  [])
                 []
                 (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                  [(Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]")
                  [])
                 []
                 (calcTactic
                  "calc"
                  (calcStep
                   (¬´term_=_¬ª
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
                    "="
                    (¬´term_-_¬ª
                     (¬´term_*_¬ª
                      (num "2")
                      "*"
                      (¬´term_+_¬ª
                       (¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                       "+"
                       (¬´term_*_¬ª
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                        "*"
                        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                     "-"
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª
                       (num "4")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                        "‚Äñ"
                        (¬´term_-_¬ª
                         `u
                         "-"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                        "‚Äñ"))
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (¬´term_-_¬ª
                        `u
                        "-"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                       "‚Äñ"))))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)]
                         "]")
                        [])
                       []
                       (Tactic.simp "simp" [] [] [] [] [])]))))
                  [(calcStep
                    (¬´term_‚â§_¬ª
                     (Term.hole "_")
                     "‚â§"
                     (¬´term_-_¬ª
                      (¬´term_*_¬ª
                       (num "2")
                       "*"
                       (¬´term_+_¬ª
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                        "+"
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                      "-"
                      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                    ":="
                    (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
                   (calcStep
                    (¬´term_‚â§_¬ª
                     (Term.hole "_")
                     "‚â§"
                     (¬´term_-_¬ª
                      (¬´term_*_¬ª
                       (num "2")
                       "*"
                       (¬´term_+_¬ª
                        (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
                        "+"
                        (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
                      "-"
                      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                    ":="
                    (Term.app
                     `sub_le_sub_right
                     [(Term.app
                       `mul_le_mul_of_nonneg_left
                       [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
                      (Term.hole "_")]))
                   (calcStep
                    (¬´term_=_¬ª
                     (Term.hole "_")
                     "="
                     (¬´term_+_¬ª
                      (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
                      "+"
                      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `add_nonneg
                   [(Term.app
                     `mul_nonneg
                     [(Term.app
                       `mul_nonneg
                       [(Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                        `zero_le_Œ¥])
                      (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
                    (Term.app
                     `mul_nonneg
                     [(Term.app
                       `mul_nonneg
                       [(Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                        `nat.one_div_pos_of_nat.le])
                      `nat.one_div_pos_of_nat.le])]))
                 []
                 (Tactic.apply "apply" `tendsto.comp)
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                  [(convert "convert" [] `continuous_sqrt.continuous_at [])
                   []
                   (Tactic.exact "exact" `sqrt_zero.symm)])
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÅ []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [`n]
                          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                          "=>"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª (num "8") "*" `Œ¥)
                           "*"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                        `at_top
                        (Term.app
                         `nhds
                         [(Term.typeAscription
                           "("
                           (num "0")
                           ":"
                           [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                           ")")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(convert
                         "convert"
                         []
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.explicit "@" `tendsto_const_nhds)
                            [(Term.hole "_")
                             (Term.hole "_")
                             (Term.hole "_")
                             (¬´term_*_¬ª (num "8") "*" `Œ¥)
                             (Term.hole "_")])
                           "."
                           `mul)
                          [`tendsto_one_div_add_at_top_nhds_0_nat])
                         [])
                        []
                        (Tactic.simp
                         "simp"
                         []
                         []
                         ["only"]
                         ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                         [])]))))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [`n]
                          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                          "=>"
                          (¬´term_*_¬ª
                           (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                           "*"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                        `at_top
                        (Term.app
                         `nhds
                         [(Term.typeAscription
                           "("
                           (num "0")
                           ":"
                           [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                           ")")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(convert
                         "convert"
                         []
                         (Term.app
                          (Term.proj
                           (Term.app
                            (Term.explicit "@" `tendsto_const_nhds)
                            [(Term.hole "_")
                             (Term.hole "_")
                             (Term.hole "_")
                             (Term.typeAscription
                              "("
                              (num "4")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")
                             (Term.hole "_")])
                           "."
                           `mul)
                          [`tendsto_one_div_add_at_top_nhds_0_nat])
                         [])
                        []
                        (Tactic.simp
                         "simp"
                         []
                         []
                         ["only"]
                         ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                         [])]))))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`eq‚ÇÇ []]
                    [(Term.typeSpec
                      ":"
                      (Term.app
                       `tendsto
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [`n]
                          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                          "=>"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (Term.typeAscription
                             "("
                             (num "4")
                             ":"
                             [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                             ")")
                            "*"
                            (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                           "*"
                           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                        `at_top
                        (Term.app
                         `nhds
                         [(Term.typeAscription
                           "("
                           (num "0")
                           ":"
                           [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                           ")")])]))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(convert
                         "convert"
                         []
                         (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
                         [])
                        []
                        (Tactic.simp
                         "simp"
                         []
                         []
                         ["only"]
                         ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                         [])]))))))
                 []
                 (convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
                  [])]))))))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget
             []
             (Term.app
              `cauchy_seq_tendsto_of_is_complete
              [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_"))) `seq_is_cauchy]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w_tendsto)])
                  [])]
                "‚ü©")])
             [])])
          []
          (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`v])
          []
          (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`hv])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h_cont []]
             [(Term.typeSpec
               ":"
               (Term.app
                `Continuous
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`v]
                   []
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")))]))]
             ":="
             (Term.app
              `Continuous.comp
              [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
          []
          (Mathlib.Tactic.tacticHave_
           "have"
           []
           [(Term.typeSpec
             ":"
             (Term.app
              `tendsto
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`n]
                 []
                 "=>"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                  "‚Äñ"
                  (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
                  "‚Äñ")))
               `at_top
               (Term.app
                `nhds
                [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])]))])
          []
          (convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) [])
          []
          (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto]))
          []
          (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Subtype.mem [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subtype.mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `tendsto_nhds_unique [`this `norm_tendsto]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto_nhds_unique [`this `norm_tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_nhds_unique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto]) [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `tendsto.comp [`h_cont.continuous_at `w_tendsto])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `h_cont.continuous_at
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticHave_
       "have"
       []
       [(Term.typeSpec
         ":"
         (Term.app
          `tendsto
          [(Term.fun
            "fun"
            (Term.basicFun
             [`n]
             []
             "=>"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚Äñ")))
           `at_top
           (Term.app
            `nhds
            [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          []
          "=>"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚Äñ")))
        `at_top
        (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nhds [(Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        []
        "=>"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Term.app `w [`n]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `w [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`n]
       []
       "=>"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" (Term.app `w [`n])) "‚Äñ")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h_cont []]
         [(Term.typeSpec
           ":"
           (Term.app
            `Continuous
            [(Term.fun
              "fun"
              (Term.basicFun
               [`v]
               []
               "=>"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")))]))]
         ":="
         (Term.app
          `Continuous.comp
          [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Continuous.comp
       [`continuous_norm (Term.app `Continuous.sub [`continuous_const `continuous_id])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Continuous.sub [`continuous_const `continuous_id])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `continuous_id
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `continuous_const
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Continuous.sub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Continuous.sub [`continuous_const `continuous_id])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `continuous_norm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Continuous.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Continuous
       [(Term.fun
         "fun"
         (Term.basicFun
          [`v]
          []
          "=>"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`v]
        []
        "=>"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Continuous
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`hv])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [`v])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget
         []
         (Term.app
          `cauchy_seq_tendsto_of_is_complete
          [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_"))) `seq_is_cauchy]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `w_tendsto)])
              [])]
            "‚ü©")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `cauchy_seq_tendsto_of_is_complete
       [`h‚ÇÅ (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_"))) `seq_is_cauchy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `seq_is_cauchy
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `h‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `cauchy_seq_tendsto_of_is_complete
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`seq_is_cauchy []]
         [(Term.typeSpec
           ":"
           (Term.app
            `CauchySeq
            [(Term.fun
              "fun"
              (Term.basicFun
               [`n]
               []
               "=>"
               (Term.typeAscription "(" (Term.app `w [`n]) ":" [`F] ")")))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]")
              [])
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `b
                []
                []
                ":="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`n]
                  [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                  "=>"
                  (¬´term_+_¬ª
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª (num "8") "*" `Œ¥)
                    "*"
                    (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                   "+"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª (num "4") "*" (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                    "*"
                    (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))))
             []
             (Mathlib.Tactic.¬´tacticUse_,,¬ª
              "use"
              [(Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
             []
             (Tactic.constructor "constructor")
             []
             (Tactic.intro "intro" [`n])
             []
             (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
             []
             (Tactic.constructor "constructor")
             []
             (Tactic.intro "intro" [`p `q `N `hp `hq])
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `wp
                []
                []
                ":="
                (Term.typeAscription "(" (Term.app `w [`p]) ":" [`F] ")"))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `wq
                []
                []
                ":="
                (Term.typeAscription "(" (Term.app `w [`q]) ":" [`F] ")"))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl (Term.letIdDecl `a [] [] ":=" (¬´term_-_¬ª `u "-" `wq))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl (Term.letIdDecl `b [] [] ":=" (¬´term_-_¬ª `u "-" `wp))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `half
                []
                []
                ":="
                (¬´term_/_¬ª
                 (num "1")
                 "/"
                 (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `div
                []
                []
                ":="
                (¬´term_/_¬ª
                 (num "1")
                 "/"
                 (¬´term_+_¬ª
                  (Term.typeAscription "(" `N ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                  "+"
                  (num "1"))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (¬´term_+_¬ª
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª
                      (num "4")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (¬´term_-_¬ª
                        `u
                        "-"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                       "‚Äñ"))
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª
                       `u
                       "-"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                      "‚Äñ"))
                    "+"
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                   "="
                   (¬´term_*_¬ª
                    (num "2")
                    "*"
                    (¬´term_+_¬ª
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                     "+"
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))))]
                ":="
                (calc
                 "calc"
                 (calcStep
                  (¬´term_=_¬ª
                   (¬´term_+_¬ª
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª
                      (num "4")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (¬´term_-_¬ª
                        `u
                        "-"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                       "‚Äñ"))
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª
                       `u
                       "-"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                      "‚Äñ"))
                    "+"
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                   "="
                   (¬´term_+_¬ª
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª
                      (num "2")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (¬´term_-_¬ª
                        `u
                        "-"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                       "‚Äñ"))
                     "*"
                     (¬´term_*_¬ª
                      (num "2")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (¬´term_-_¬ª
                        `u
                        "-"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                       "‚Äñ")))
                    "+"
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
                 [(calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (¬´term_+_¬ª
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª
                       (Term.app
                        (Analysis.InnerProductSpace.Projection.termabsR "absR")
                        [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                        "‚Äñ"
                        (¬´term_-_¬ª
                         `u
                         "-"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                        "‚Äñ"))
                      "*"
                      (¬´term_*_¬ª
                       (Term.app
                        (Analysis.InnerProductSpace.Projection.termabsR "absR")
                        [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                        "‚Äñ"
                        (¬´term_-_¬ª
                         `u
                         "-"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                        "‚Äñ")))
                     "+"
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                        [])
                       []
                       (Tactic.exact "exact" `zero_le_two)]))))
                  (calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (¬´term_+_¬ª
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                        " ‚Ä¢ "
                        (¬´term_-_¬ª
                         `u
                         "-"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                       "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                       "‚Äñ"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                        " ‚Ä¢ "
                        (¬´term_-_¬ª
                         `u
                         "-"
                         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                       "‚Äñ"))
                     "+"
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.simp
                        "simp"
                        []
                        []
                        []
                        ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"]
                        [])]))))
                  (calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (¬´term_+_¬ª
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
                     "+"
                     (¬´term_*_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
                      "*"
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `smul_sub)
                          ","
                          (Tactic.rwRule [] `smul_smul)
                          ","
                          (Tactic.rwRule
                           []
                           (Term.app
                            `mul_one_div_cancel
                            [(Term.typeAscription
                              "("
                              `_root_.two_ne_zero
                              ":"
                              [(¬´term_‚â†_¬ª
                                (Term.typeAscription
                                 "("
                                 (num "2")
                                 ":"
                                 [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                                 ")")
                                "‚â†"
                                (num "0"))]
                              ")")]))
                          ","
                          (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
                          ","
                          (Tactic.rwRule [] `add_smul)]
                         "]")
                        [])
                       []
                       (Tactic.simp
                        "simp"
                        []
                        []
                        ["only"]
                        ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"]
                        [])
                       []
                       (Tactic.tacticHave_
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          [`eq‚ÇÅ []]
                          [(Term.typeSpec
                            ":"
                            (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                          ":="
                          (Term.proj
                           (Term.app
                            `sub_sub_sub_cancel_left
                            [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                           "."
                           `symm))))
                       []
                       (Mathlib.Tactic.tacticHave_
                        "have"
                        [`eq‚ÇÇ []]
                        [(Term.typeSpec
                          ":"
                          (¬´term_=_¬ª
                           (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                           "="
                           (¬´term_+_¬ª `a "+" `b)))])
                       []
                       (Tactic.tacticShow_
                        "show"
                        (¬´term_=_¬ª
                         (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                         "="
                         (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                       []
                       (Tactic.abel "abel" [] [])
                       []
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)]
                         "]")
                        [])]))))
                  (calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (¬´term_*_¬ª
                     (num "2")
                     "*"
                     (¬´term_+_¬ª
                      (¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                      "+"
                      (¬´term_*_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                       "*"
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
                   ":="
                   (Term.app `parallelogram_law_with_norm [(Term.hole "_") (Term.hole "_")]))]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚â§_¬ª
                   `Œ¥
                   "‚â§"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                    "‚Äñ")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]")
                     [])
                    []
                    (Tactic.apply "apply" `Œ¥_le')
                    []
                    (Tactic.apply "apply" `h‚ÇÇ)
                    []
                    (Std.Tactic.tacticRepeat'_
                     "repeat'"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
                    []
                    (Std.Tactic.tacticRepeat'_
                     "repeat'"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
                    []
                    (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÅ []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚â§_¬ª
                   (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
                   "‚â§"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª
                     (num "4")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª
                       `u
                       "-"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                      "‚Äñ"))
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª
                      `u
                      "-"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                     "‚Äñ"))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Mathlib.Tactic.tacticSimp_rw__
                     "simp_rw"
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
                     [])
                    []
                    (Tactic.exact
                     "exact"
                     (Term.app
                      `mul_le_mul_of_nonneg_left
                      [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four]))]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÇ []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚â§_¬ª
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                   "‚â§"
                   (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                ":="
                (Term.app
                 `mul_self_le_mul_self
                 [(Term.app `norm_nonneg [(Term.hole "_")])
                  (Term.app
                   `le_trans
                   [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
                    (Term.app
                     `add_le_add_left
                     [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÇ' []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚â§_¬ª
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
                   "‚â§"
                   (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
                ":="
                (Term.app
                 `mul_self_le_mul_self
                 [(Term.app `norm_nonneg [(Term.hole "_")])
                  (Term.app
                   `le_trans
                   [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
                    (Term.app
                     `add_le_add_left
                     [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
             []
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") [])
             []
             (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]")
              [])
             []
             (calcTactic
              "calc"
              (calcStep
               (¬´term_=_¬ª
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
                "="
                (¬´term_-_¬ª
                 (¬´term_*_¬ª
                  (num "2")
                  "*"
                  (¬´term_+_¬ª
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                   "+"
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                 "-"
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª
                   (num "4")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                    "‚Äñ"))
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª
                    `u
                    "-"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                   "‚Äñ"))))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)]
                     "]")
                    [])
                   []
                   (Tactic.simp "simp" [] [] [] [] [])]))))
              [(calcStep
                (¬´term_‚â§_¬ª
                 (Term.hole "_")
                 "‚â§"
                 (¬´term_-_¬ª
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (¬´term_+_¬ª
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                    "+"
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
                  "-"
                  (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                ":="
                (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
               (calcStep
                (¬´term_‚â§_¬ª
                 (Term.hole "_")
                 "‚â§"
                 (¬´term_-_¬ª
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (¬´term_+_¬ª
                    (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
                    "+"
                    (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
                  "-"
                  (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
                ":="
                (Term.app
                 `sub_le_sub_right
                 [(Term.app
                   `mul_le_mul_of_nonneg_left
                   [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
                  (Term.hole "_")]))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_+_¬ª
                  (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
                  "+"
                  (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `add_nonneg
               [(Term.app
                 `mul_nonneg
                 [(Term.app
                   `mul_nonneg
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                    `zero_le_Œ¥])
                  (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
                (Term.app
                 `mul_nonneg
                 [(Term.app
                   `mul_nonneg
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                    `nat.one_div_pos_of_nat.le])
                  `nat.one_div_pos_of_nat.le])]))
             []
             (Tactic.apply "apply" `tendsto.comp)
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(convert "convert" [] `continuous_sqrt.continuous_at [])
               []
               (Tactic.exact "exact" `sqrt_zero.symm)])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÅ []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `tendsto
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                      "=>"
                      (¬´term_*_¬ª
                       (¬´term_*_¬ª (num "8") "*" `Œ¥)
                       "*"
                       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                    `at_top
                    (Term.app
                     `nhds
                     [(Term.typeAscription
                       "("
                       (num "0")
                       ":"
                       [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                       ")")])]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(convert
                     "convert"
                     []
                     (Term.app
                      (Term.proj
                       (Term.app
                        (Term.explicit "@" `tendsto_const_nhds)
                        [(Term.hole "_")
                         (Term.hole "_")
                         (Term.hole "_")
                         (¬´term_*_¬ª (num "8") "*" `Œ¥)
                         (Term.hole "_")])
                       "."
                       `mul)
                      [`tendsto_one_div_add_at_top_nhds_0_nat])
                     [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["only"]
                     ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                     [])]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `tendsto
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                      "=>"
                      (¬´term_*_¬ª
                       (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                       "*"
                       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                    `at_top
                    (Term.app
                     `nhds
                     [(Term.typeAscription
                       "("
                       (num "0")
                       ":"
                       [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                       ")")])]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(convert
                     "convert"
                     []
                     (Term.app
                      (Term.proj
                       (Term.app
                        (Term.explicit "@" `tendsto_const_nhds)
                        [(Term.hole "_")
                         (Term.hole "_")
                         (Term.hole "_")
                         (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                         (Term.hole "_")])
                       "."
                       `mul)
                      [`tendsto_one_div_add_at_top_nhds_0_nat])
                     [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["only"]
                     ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                     [])]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÇ []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `tendsto
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                      "=>"
                      (¬´term_*_¬ª
                       (¬´term_*_¬ª
                        (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                        "*"
                        (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                       "*"
                       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                    `at_top
                    (Term.app
                     `nhds
                     [(Term.typeAscription
                       "("
                       (num "0")
                       ":"
                       [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                       ")")])]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(convert
                     "convert"
                     []
                     (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
                     [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["only"]
                     ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                     [])]))))))
             []
             (convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `cauchy_seq_iff_le_tendsto_0)] "]")
           [])
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `b
             []
             []
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`n]
               [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
               "=>"
               (¬´term_+_¬ª
                (¬´term_*_¬ª
                 (¬´term_*_¬ª (num "8") "*" `Œ¥)
                 "*"
                 (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                "+"
                (¬´term_*_¬ª
                 (¬´term_*_¬ª (num "4") "*" (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                 "*"
                 (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))))))
          []
          (Mathlib.Tactic.¬´tacticUse_,,¬ª
           "use"
           [(Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.app `sqrt [(Term.app `b [`n])])))])
          []
          (Tactic.constructor "constructor")
          []
          (Tactic.intro "intro" [`n])
          []
          (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
          []
          (Tactic.constructor "constructor")
          []
          (Tactic.intro "intro" [`p `q `N `hp `hq])
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `wp
             []
             []
             ":="
             (Term.typeAscription "(" (Term.app `w [`p]) ":" [`F] ")"))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `wq
             []
             []
             ":="
             (Term.typeAscription "(" (Term.app `w [`q]) ":" [`F] ")"))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl (Term.letIdDecl `a [] [] ":=" (¬´term_-_¬ª `u "-" `wq))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl (Term.letIdDecl `b [] [] ":=" (¬´term_-_¬ª `u "-" `wp))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `half
             []
             []
             ":="
             (¬´term_/_¬ª
              (num "1")
              "/"
              (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `div
             []
             []
             ":="
             (¬´term_/_¬ª
              (num "1")
              "/"
              (¬´term_+_¬ª
               (Term.typeAscription "(" `N ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
               "+"
               (num "1"))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (¬´term_+_¬ª
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª
                   (num "4")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                    "‚Äñ"))
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª
                    `u
                    "-"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                   "‚Äñ"))
                 "+"
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                "="
                (¬´term_*_¬ª
                 (num "2")
                 "*"
                 (¬´term_+_¬ª
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                  "+"
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))))]
             ":="
             (calc
              "calc"
              (calcStep
               (¬´term_=_¬ª
                (¬´term_+_¬ª
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª
                   (num "4")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                    "‚Äñ"))
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª
                    `u
                    "-"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                   "‚Äñ"))
                 "+"
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
                "="
                (¬´term_+_¬ª
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                    "‚Äñ"))
                  "*"
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                    "‚Äñ")))
                 "+"
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
              [(calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_+_¬ª
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª
                    (Term.app
                     (Analysis.InnerProductSpace.Projection.termabsR "absR")
                     [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª
                      `u
                      "-"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                     "‚Äñ"))
                   "*"
                   (¬´term_*_¬ª
                    (Term.app
                     (Analysis.InnerProductSpace.Projection.termabsR "absR")
                     [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª
                      `u
                      "-"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                     "‚Äñ")))
                  "+"
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                     [])
                    []
                    (Tactic.exact "exact" `zero_le_two)]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_+_¬ª
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                     (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                     " ‚Ä¢ "
                     (¬´term_-_¬ª
                      `u
                      "-"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                    "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                     (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                     " ‚Ä¢ "
                     (¬´term_-_¬ª
                      `u
                      "-"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                    "‚Äñ"))
                  "+"
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.simp
                     "simp"
                     []
                     []
                     []
                     ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"]
                     [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_+_¬ª
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
                  "+"
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `smul_sub)
                       ","
                       (Tactic.rwRule [] `smul_smul)
                       ","
                       (Tactic.rwRule
                        []
                        (Term.app
                         `mul_one_div_cancel
                         [(Term.typeAscription
                           "("
                           `_root_.two_ne_zero
                           ":"
                           [(¬´term_‚â†_¬ª
                             (Term.typeAscription
                              "("
                              (num "2")
                              ":"
                              [(Data.Real.Basic.term‚Ñù "‚Ñù")]
                              ")")
                             "‚â†"
                             (num "0"))]
                           ")")]))
                       ","
                       (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
                       ","
                       (Tactic.rwRule [] `add_smul)]
                      "]")
                     [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["only"]
                     ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"]
                     [])
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`eq‚ÇÅ []]
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                       ":="
                       (Term.proj
                        (Term.app
                         `sub_sub_sub_cancel_left
                         [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                        "."
                        `symm))))
                    []
                    (Mathlib.Tactic.tacticHave_
                     "have"
                     [`eq‚ÇÇ []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_=_¬ª
                        (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                        "="
                        (¬´term_+_¬ª `a "+" `b)))])
                    []
                    (Tactic.tacticShow_
                     "show"
                     (¬´term_=_¬ª
                      (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                      "="
                      (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                    []
                    (Tactic.abel "abel" [] [])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)]
                      "]")
                     [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_*_¬ª
                  (num "2")
                  "*"
                  (¬´term_+_¬ª
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                   "+"
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
                ":="
                (Term.app `parallelogram_law_with_norm [(Term.hole "_") (Term.hole "_")]))]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                `Œ¥
                "‚â§"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                 "‚Äñ"
                 (¬´term_-_¬ª
                  `u
                  "-"
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                 "‚Äñ")))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") [])
                 []
                 (Tactic.apply "apply" `Œ¥_le')
                 []
                 (Tactic.apply "apply" `h‚ÇÇ)
                 []
                 (Std.Tactic.tacticRepeat'_
                  "repeat'"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
                 []
                 (Std.Tactic.tacticRepeat'_
                  "repeat'"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
                 []
                 (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
                "‚â§"
                (¬´term_*_¬ª
                 (¬´term_*_¬ª
                  (num "4")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª
                    `u
                    "-"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                   "‚Äñ"))
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                  "‚Äñ"
                  (¬´term_-_¬ª
                   `u
                   "-"
                   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                  "‚Äñ"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Mathlib.Tactic.tacticSimp_rw__
                  "simp_rw"
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
                  [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `mul_le_mul_of_nonneg_left
                   [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four]))]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÇ []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                "‚â§"
                (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
             ":="
             (Term.app
              `mul_self_le_mul_self
              [(Term.app `norm_nonneg [(Term.hole "_")])
               (Term.app
                `le_trans
                [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
                 (Term.app
                  `add_le_add_left
                  [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÇ' []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
                "‚â§"
                (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
             ":="
             (Term.app
              `mul_self_le_mul_self
              [(Term.app `norm_nonneg [(Term.hole "_")])
               (Term.app
                `le_trans
                [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
                 (Term.app
                  `add_le_add_left
                  [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
          []
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") [])
          []
          (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))])
          []
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") [])
          []
          (calcTactic
           "calc"
           (calcStep
            (¬´term_=_¬ª
             (¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
             "="
             (¬´term_-_¬ª
              (¬´term_*_¬ª
               (num "2")
               "*"
               (¬´term_+_¬ª
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                "+"
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
              "-"
              (¬´term_*_¬ª
               (¬´term_*_¬ª
                (num "4")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                 "‚Äñ"
                 (¬´term_-_¬ª
                  `u
                  "-"
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                 "‚Äñ"))
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (¬´term_-_¬ª
                 `u
                 "-"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                "‚Äñ"))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)]
                  "]")
                 [])
                []
                (Tactic.simp "simp" [] [] [] [] [])]))))
           [(calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (¬´term_-_¬ª
               (¬´term_*_¬ª
                (num "2")
                "*"
                (¬´term_+_¬ª
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
                 "+"
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
               "-"
               (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
             ":="
             (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
            (calcStep
             (¬´term_‚â§_¬ª
              (Term.hole "_")
              "‚â§"
              (¬´term_-_¬ª
               (¬´term_*_¬ª
                (num "2")
                "*"
                (¬´term_+_¬ª
                 (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
                 "+"
                 (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
               "-"
               (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
             ":="
             (Term.app
              `sub_le_sub_right
              [(Term.app
                `mul_le_mul_of_nonneg_left
                [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
               (Term.hole "_")]))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (¬´term_+_¬ª
               (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
               "+"
               (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `add_nonneg
            [(Term.app
              `mul_nonneg
              [(Term.app
                `mul_nonneg
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                 `zero_le_Œ¥])
               (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
             (Term.app
              `mul_nonneg
              [(Term.app
                `mul_nonneg
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                 `nat.one_div_pos_of_nat.le])
               `nat.one_div_pos_of_nat.le])]))
          []
          (Tactic.apply "apply" `tendsto.comp)
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(convert "convert" [] `continuous_sqrt.continuous_at [])
            []
            (Tactic.exact "exact" `sqrt_zero.symm)])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                   "=>"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª (num "8") "*" `Œ¥)
                    "*"
                    (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                 `at_top
                 (Term.app
                  `nhds
                  [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(convert
                  "convert"
                  []
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.explicit "@" `tendsto_const_nhds)
                     [(Term.hole "_")
                      (Term.hole "_")
                      (Term.hole "_")
                      (¬´term_*_¬ª (num "8") "*" `Œ¥)
                      (Term.hole "_")])
                    "."
                    `mul)
                   [`tendsto_one_div_add_at_top_nhds_0_nat])
                  [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                  [])]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                   "=>"
                   (¬´term_*_¬ª
                    (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                    "*"
                    (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                 `at_top
                 (Term.app
                  `nhds
                  [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(convert
                  "convert"
                  []
                  (Term.app
                   (Term.proj
                    (Term.app
                     (Term.explicit "@" `tendsto_const_nhds)
                     [(Term.hole "_")
                      (Term.hole "_")
                      (Term.hole "_")
                      (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                      (Term.hole "_")])
                    "."
                    `mul)
                   [`tendsto_one_div_add_at_top_nhds_0_nat])
                  [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                  [])]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÇ []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                   "=>"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª
                     (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                     "*"
                     (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                    "*"
                    (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
                 `at_top
                 (Term.app
                  `nhds
                  [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(convert
                  "convert"
                  []
                  (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
                  [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
                  [])]))))))
          []
          (convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
          []
          (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `add_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ]) [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq‚ÇÅ.add [`eq‚ÇÇ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq‚ÇÅ.add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÇ []]
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`n]
               [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
               "=>"
               (¬´term_*_¬ª
                (¬´term_*_¬ª
                 (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                 "*"
                 (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
                "*"
                (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
             `at_top
             (Term.app
              `nhds
              [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
          []
          (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat]) [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `this.mul [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
          "=>"
          (¬´term_*_¬ª
           (¬´term_*_¬ª
            (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
            "*"
            (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
           "*"
           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
        `at_top
        (Term.app
         `nhds
         [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nhds [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nhds [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
        "=>"
        (¬´term_*_¬ª
         (¬´term_*_¬ª
          (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
          "*"
          (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
         "*"
         (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª
        (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        "*"
        (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
       "*"
       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `n "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª
       (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
       "*"
       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `n "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`n]
       [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
       "=>"
       (¬´term_*_¬ª
        (¬´term_*_¬ª
         (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
         "*"
         (Term.paren
          "("
          (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
          ")"))
        "*"
        (Term.paren
         "("
         (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
         ")"))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`n]
               [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
               "=>"
               (¬´term_*_¬ª
                (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                "*"
                (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
             `at_top
             (Term.app
              `nhds
              [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(convert
              "convert"
              []
              (Term.app
               (Term.proj
                (Term.app
                 (Term.explicit "@" `tendsto_const_nhds)
                 [(Term.hole "_")
                  (Term.hole "_")
                  (Term.hole "_")
                  (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                  (Term.hole "_")])
                "."
                `mul)
               [`tendsto_one_div_add_at_top_nhds_0_nat])
              [])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(convert
           "convert"
           []
           (Term.app
            (Term.proj
             (Term.app
              (Term.explicit "@" `tendsto_const_nhds)
              [(Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
               (Term.hole "_")])
             "."
             `mul)
            [`tendsto_one_div_add_at_top_nhds_0_nat])
           [])
          []
          (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        (Term.proj
         (Term.app
          (Term.explicit "@" `tendsto_const_nhds)
          [(Term.hole "_")
           (Term.hole "_")
           (Term.hole "_")
           (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           (Term.hole "_")])
         "."
         `mul)
        [`tendsto_one_div_add_at_top_nhds_0_nat])
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.explicit "@" `tendsto_const_nhds)
         [(Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
          (Term.hole "_")])
        "."
        `mul)
       [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.explicit "@" `tendsto_const_nhds)
        [(Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")
         (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
         (Term.hole "_")])
       "."
       `mul)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.explicit "@" `tendsto_const_nhds)
       [(Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.explicit "@" `tendsto_const_nhds)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_const_nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.explicit "@" `tendsto_const_nhds)
      [(Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
       (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
          "=>"
          (¬´term_*_¬ª
           (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           "*"
           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
        `at_top
        (Term.app
         `nhds
         [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nhds [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nhds [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
        "=>"
        (¬´term_*_¬ª
         (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
         "*"
         (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
       "*"
       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `n "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`n]
       [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
       "=>"
       (¬´term_*_¬ª
        (Term.typeAscription "(" (num "4") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        "*"
        (Term.paren
         "("
         (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
         ")"))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÅ []]
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`n]
               [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
               "=>"
               (¬´term_*_¬ª
                (¬´term_*_¬ª (num "8") "*" `Œ¥)
                "*"
                (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
             `at_top
             (Term.app
              `nhds
              [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(convert
              "convert"
              []
              (Term.app
               (Term.proj
                (Term.app
                 (Term.explicit "@" `tendsto_const_nhds)
                 [(Term.hole "_")
                  (Term.hole "_")
                  (Term.hole "_")
                  (¬´term_*_¬ª (num "8") "*" `Œ¥)
                  (Term.hole "_")])
                "."
                `mul)
               [`tendsto_one_div_add_at_top_nhds_0_nat])
              [])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(convert
           "convert"
           []
           (Term.app
            (Term.proj
             (Term.app
              (Term.explicit "@" `tendsto_const_nhds)
              [(Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (¬´term_*_¬ª (num "8") "*" `Œ¥)
               (Term.hole "_")])
             "."
             `mul)
            [`tendsto_one_div_add_at_top_nhds_0_nat])
           [])
          []
          (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `mul_zero)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        (Term.proj
         (Term.app
          (Term.explicit "@" `tendsto_const_nhds)
          [(Term.hole "_")
           (Term.hole "_")
           (Term.hole "_")
           (¬´term_*_¬ª (num "8") "*" `Œ¥)
           (Term.hole "_")])
         "."
         `mul)
        [`tendsto_one_div_add_at_top_nhds_0_nat])
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.explicit "@" `tendsto_const_nhds)
         [(Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (¬´term_*_¬ª (num "8") "*" `Œ¥)
          (Term.hole "_")])
        "."
        `mul)
       [`tendsto_one_div_add_at_top_nhds_0_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_one_div_add_at_top_nhds_0_nat
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.explicit "@" `tendsto_const_nhds)
        [(Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")
         (¬´term_*_¬ª (num "8") "*" `Œ¥)
         (Term.hole "_")])
       "."
       `mul)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.explicit "@" `tendsto_const_nhds)
       [(Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (¬´term_*_¬ª (num "8") "*" `Œ¥)
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_*_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_*_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (¬´term_*_¬ª (num "8") "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "8")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_*_¬ª (num "8") "*" `Œ¥) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.explicit "@" `tendsto_const_nhds)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_const_nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.explicit "@" `tendsto_const_nhds)
      [(Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.paren "(" (¬´term_*_¬ª (num "8") "*" `Œ¥) ")")
       (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
          "=>"
          (¬´term_*_¬ª
           (¬´term_*_¬ª (num "8") "*" `Œ¥)
           "*"
           (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
        `at_top
        (Term.app
         `nhds
         [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nhds [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nhds [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
        "=>"
        (¬´term_*_¬ª
         (¬´term_*_¬ª (num "8") "*" `Œ¥)
         "*"
         (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª (num "8") "*" `Œ¥)
       "*"
       (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_/_¬ª (num "1") "/" (¬´term_+_¬ª `n "+" (num "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `n "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "8") "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "8")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`n]
       [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
       "=>"
       (¬´term_*_¬ª
        (¬´term_*_¬ª (num "8") "*" `Œ¥)
        "*"
        (Term.paren
         "("
         (¬´term_/_¬ª (num "1") "/" (Term.paren "(" (¬´term_+_¬ª `n "+" (num "1")) ")"))
         ")"))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(convert "convert" [] `continuous_sqrt.continuous_at [])
        []
        (Tactic.exact "exact" `sqrt_zero.symm)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `sqrt_zero.symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sqrt_zero.symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] `continuous_sqrt.continuous_at [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `continuous_sqrt.continuous_at
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `tendsto.comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto.comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `add_nonneg
        [(Term.app
          `mul_nonneg
          [(Term.app
            `mul_nonneg
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
             `zero_le_Œ¥])
           (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
         (Term.app
          `mul_nonneg
          [(Term.app
            `mul_nonneg
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
             `nat.one_div_pos_of_nat.le])
           `nat.one_div_pos_of_nat.le])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `add_nonneg
       [(Term.app
         `mul_nonneg
         [(Term.app
           `mul_nonneg
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
            `zero_le_Œ¥])
          (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
        (Term.app
         `mul_nonneg
         [(Term.app
           `mul_nonneg
           [(Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
            `nat.one_div_pos_of_nat.le])
          `nat.one_div_pos_of_nat.le])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_nonneg
       [(Term.app
         `mul_nonneg
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
          `nat.one_div_pos_of_nat.le])
        `nat.one_div_pos_of_nat.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat.one_div_pos_of_nat.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `mul_nonneg
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        `nat.one_div_pos_of_nat.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat.one_div_pos_of_nat.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mul_nonneg
      [(Term.paren
        "("
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        ")")
       `nat.one_div_pos_of_nat.le])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mul_nonneg
      [(Term.paren
        "("
        (Term.app
         `mul_nonneg
         [(Term.paren
           "("
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
           ")")
          `nat.one_div_pos_of_nat.le])
        ")")
       `nat.one_div_pos_of_nat.le])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `mul_nonneg
       [(Term.app
         `mul_nonneg
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
          `zero_le_Œ¥])
        (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.one_div_pos_of_nat
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_of_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_of_lt [`Nat.one_div_pos_of_nat])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `mul_nonneg
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        `zero_le_Œ¥])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_le_Œ¥
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mul_nonneg
      [(Term.paren
        "("
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        ")")
       `zero_le_Œ¥])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mul_nonneg
      [(Term.paren
        "("
        (Term.app
         `mul_nonneg
         [(Term.paren
           "("
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
           ")")
          `zero_le_Œ¥])
        ")")
       (Term.paren "(" (Term.app `le_of_lt [`Nat.one_div_pos_of_nat]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        (¬´term_=_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
         "="
         (¬´term_-_¬ª
          (¬´term_*_¬ª
           (num "2")
           "*"
           (¬´term_+_¬ª
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
            "+"
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
          "-"
          (¬´term_*_¬ª
           (¬´term_*_¬ª
            (num "4")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
             "‚Äñ"))
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
            "‚Äñ"))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)] "]")
             [])
            []
            (Tactic.simp "simp" [] [] [] [] [])]))))
       [(calcStep
         (¬´term_‚â§_¬ª
          (Term.hole "_")
          "‚â§"
          (¬´term_-_¬ª
           (¬´term_*_¬ª
            (num "2")
            "*"
            (¬´term_+_¬ª
             (¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
             "+"
             (¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
           "-"
           (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
         ":="
         (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")]))
        (calcStep
         (¬´term_‚â§_¬ª
          (Term.hole "_")
          "‚â§"
          (¬´term_-_¬ª
           (¬´term_*_¬ª
            (num "2")
            "*"
            (¬´term_+_¬ª
             (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
             "+"
             (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
           "-"
           (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
         ":="
         (Term.app
          `sub_le_sub_right
          [(Term.app
            `mul_le_mul_of_nonneg_left
            [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
           (Term.hole "_")]))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_+_¬ª
           (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
           "+"
           (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.RingNF.ring "ring")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_+_¬ª
        (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
        "+"
        (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
       "+"
       (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `div) "*" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "4") "*" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª (¬´term_*_¬ª (num "8") "*" `Œ¥) "*" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "8") "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "8")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app
       `sub_le_sub_right
       [(Term.app
         `mul_le_mul_of_nonneg_left
         [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app
       `mul_le_mul_of_nonneg_left
       [(Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÇ'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `eq‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_le_add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ']) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mul_le_mul_of_nonneg_left
      [(Term.paren "(" (Term.app `add_le_add [`eq‚ÇÇ `eq‚ÇÇ']) ")")
       (Term.paren
        "("
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sub_le_sub_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Term.hole "_")
       "‚â§"
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (num "2")
         "*"
         (¬´term_+_¬ª
          (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
          "+"
          (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
        "-"
        (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (num "2")
        "*"
        (¬´term_+_¬ª
         (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
         "+"
         (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
       "-"
       (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "4") "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (num "2")
       "*"
       (¬´term_+_¬ª
        (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
        "+"
        (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
       "+"
       (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 66, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 66, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_+_¬ª
      (¬´term_*_¬ª
       (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
       "*"
       (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")"))
      "+"
      (¬´term_*_¬ª
       (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
       "*"
       (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app `sub_le_sub_left [`eq‚ÇÅ (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `eq‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sub_le_sub_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Term.hole "_")
       "‚â§"
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (num "2")
         "*"
         (¬´term_+_¬ª
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
          "+"
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
        "-"
        (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (num "2")
        "*"
        (¬´term_+_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
         "+"
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
       "-"
       (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "4") "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (num "2")
       "*"
       (¬´term_+_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
        "+"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
       "+"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_+_¬ª
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
      "+"
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)] "]")
           [])
          []
          (Tactic.simp "simp" [] [] [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `this)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
       "="
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (num "2")
         "*"
         (¬´term_+_¬ª
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
          "+"
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
        "-"
        (¬´term_*_¬ª
         (¬´term_*_¬ª
          (num "4")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
           "‚Äñ"
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
           "‚Äñ"))
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
          "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (num "2")
        "*"
        (¬´term_+_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
         "+"
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
       "-"
       (¬´term_*_¬ª
        (¬´term_*_¬ª
         (num "4")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
          "‚Äñ"))
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
         "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª
        (num "4")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
         "‚Äñ"))
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª
       (num "4")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (num "2")
       "*"
       (¬´term_+_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
        "+"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
       "+"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_+_¬ª
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
      "+"
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_self_sqrt)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_self_sqrt
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `sqrt_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sqrt_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sqrt_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `nonneg_le_nonneg_of_sq_le_sq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nonneg_le_nonneg_of_sq_le_sq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `dist_eq_norm)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_eq_norm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÇ' []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
            "‚â§"
            (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
         ":="
         (Term.app
          `mul_self_le_mul_self
          [(Term.app `norm_nonneg [(Term.hole "_")])
           (Term.app
            `le_trans
            [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
             (Term.app
              `add_le_add_left
              [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_self_le_mul_self
       [(Term.app `norm_nonneg [(Term.hole "_")])
        (Term.app
         `le_trans
         [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
          (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `le_trans
       [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
        (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hp]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Nat.one_div_le_one_div [`hp])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.one_div_le_one_div
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Nat.one_div_le_one_div [`hp])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_le_add_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `add_le_add_left
      [(Term.paren "(" (Term.app `Nat.one_div_le_one_div [`hp]) ")") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<|_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<|_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hw [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `le_of_lt
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `le_trans
      [(Term.paren "(" (¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`p])) ")")
       (Term.paren
        "("
        (Term.app
         `add_le_add_left
         [(Term.paren "(" (Term.app `Nat.one_div_le_one_div [`hp]) ")") (Term.hole "_")])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `norm_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_self_le_mul_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
       "‚â§"
       (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 66, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÇ []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
            "‚â§"
            (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))))]
         ":="
         (Term.app
          `mul_self_le_mul_self
          [(Term.app `norm_nonneg [(Term.hole "_")])
           (Term.app
            `le_trans
            [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
             (Term.app
              `add_le_add_left
              [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_self_le_mul_self
       [(Term.app `norm_nonneg [(Term.hole "_")])
        (Term.app
         `le_trans
         [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
          (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `le_trans
       [(¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
        (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_le_add_left [(Term.app `Nat.one_div_le_one_div [`hq]) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Nat.one_div_le_one_div [`hq])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hq
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.one_div_le_one_div
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Nat.one_div_le_one_div [`hq])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_le_add_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `add_le_add_left
      [(Term.paren "(" (Term.app `Nat.one_div_le_one_div [`hq]) ")") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<|_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_<|_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hw [`q])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `le_of_lt
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `le_trans
      [(Term.paren "(" (¬´term_<|_¬ª `le_of_lt "<|" (Term.app `hw [`q])) ")")
       (Term.paren
        "("
        (Term.app
         `add_le_add_left
         [(Term.paren "(" (Term.app `Nat.one_div_le_one_div [`hq]) ")") (Term.hole "_")])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `norm_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_self_le_mul_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
       "‚â§"
       (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_+_¬ª `Œ¥ "+" `div) "*" (¬´term_+_¬ª `Œ¥ "+" `div))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_+_¬ª `Œ¥ "+" `div)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `div
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 66, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `Œ¥ "+" `div) ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÅ []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
            "‚â§"
            (¬´term_*_¬ª
             (¬´term_*_¬ª
              (num "4")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
               "‚Äñ"
               (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
               "‚Äñ"))
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
              "‚Äñ"
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
              "‚Äñ"))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Mathlib.Tactic.tacticSimp_rw__
              "simp_rw"
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `mul_le_mul_of_nonneg_left
               [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Mathlib.Tactic.tacticSimp_rw__
           "simp_rw"
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mul_le_mul_of_nonneg_left
            [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mul_le_mul_of_nonneg_left
        [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_le_mul_of_nonneg_left
       [(Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq]) `zero_le_four])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_le_four
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Eq
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `zero_le_Œ¥
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_self_le_mul_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `mul_self_le_mul_self [`zero_le_Œ¥ `Eq])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul_of_nonneg_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticSimp_rw__
       "simp_rw"
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mul_assoc)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
       "‚â§"
       (¬´term_*_¬ª
        (¬´term_*_¬ª
         (num "4")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
          "‚Äñ"))
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
         "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª
        (num "4")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
         "‚Äñ"))
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª
       (num "4")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª (¬´term_*_¬ª (num "4") "*" `Œ¥) "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "4") "*" `Œ¥)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "4")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            `Œ¥
            "‚â§"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
             "‚Äñ")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") [])
             []
             (Tactic.apply "apply" `Œ¥_le')
             []
             (Tactic.apply "apply" `h‚ÇÇ)
             []
             (Std.Tactic.tacticRepeat'_
              "repeat'"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
             []
             (Std.Tactic.tacticRepeat'_
              "repeat'"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
             []
             (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") [])
          []
          (Tactic.apply "apply" `Œ¥_le')
          []
          (Tactic.apply "apply" `h‚ÇÇ)
          []
          (Std.Tactic.tacticRepeat'_
           "repeat'"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
          []
          (Std.Tactic.tacticRepeat'_
           "repeat'"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
          []
          (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `add_halves [(num "1")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_halves [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_halves
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRepeat'_
       "repeat'"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `le_of_lt [`one_half_pos]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_of_lt [`one_half_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_half_pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_of_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRepeat'_
       "repeat'"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `Subtype.mem [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Subtype.mem [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subtype.mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `h‚ÇÇ)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `Œ¥_le')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ¥_le'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `smul_add)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       `Œ¥
       "‚â§"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `Œ¥
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (¬´term_+_¬ª
             (¬´term_*_¬ª
              (¬´term_*_¬ª
               (num "4")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (¬´term_-_¬ª
                 `u
                 "-"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                "‚Äñ"))
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
               "‚Äñ"
               (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
               "‚Äñ"))
             "+"
             (¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
            "="
            (¬´term_*_¬ª
             (num "2")
             "*"
             (¬´term_+_¬ª
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
              "+"
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))))]
         ":="
         (calc
          "calc"
          (calcStep
           (¬´term_=_¬ª
            (¬´term_+_¬ª
             (¬´term_*_¬ª
              (¬´term_*_¬ª
               (num "4")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (¬´term_-_¬ª
                 `u
                 "-"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                "‚Äñ"))
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
               "‚Äñ"
               (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
               "‚Äñ"))
             "+"
             (¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
            "="
            (¬´term_+_¬ª
             (¬´term_*_¬ª
              (¬´term_*_¬ª
               (num "2")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (¬´term_-_¬ª
                 `u
                 "-"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                "‚Äñ"))
              "*"
              (¬´term_*_¬ª
               (num "2")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (¬´term_-_¬ª
                 `u
                 "-"
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                "‚Äñ")))
             "+"
             (¬´term_*_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
              "*"
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
          [(calcStep
            (¬´term_=_¬ª
             (Term.hole "_")
             "="
             (¬´term_+_¬ª
              (¬´term_*_¬ª
               (¬´term_*_¬ª
                (Term.app
                 (Analysis.InnerProductSpace.Projection.termabsR "absR")
                 [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                 "‚Äñ"
                 (¬´term_-_¬ª
                  `u
                  "-"
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                 "‚Äñ"))
               "*"
               (¬´term_*_¬ª
                (Term.app
                 (Analysis.InnerProductSpace.Projection.termabsR "absR")
                 [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                 "‚Äñ"
                 (¬´term_-_¬ª
                  `u
                  "-"
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
                 "‚Äñ")))
              "+"
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
                 [])
                []
                (Tactic.exact "exact" `zero_le_two)]))))
           (calcStep
            (¬´term_=_¬ª
             (Term.hole "_")
             "="
             (¬´term_+_¬ª
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                 " ‚Ä¢ "
                 (¬´term_-_¬ª
                  `u
                  "-"
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                 " ‚Ä¢ "
                 (¬´term_-_¬ª
                  `u
                  "-"
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
                "‚Äñ"))
              "+"
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.simp
                 "simp"
                 []
                 []
                 []
                 ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"]
                 [])]))))
           (calcStep
            (¬´term_=_¬ª
             (Term.hole "_")
             "="
             (¬´term_+_¬ª
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
              "+"
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `smul_sub)
                   ","
                   (Tactic.rwRule [] `smul_smul)
                   ","
                   (Tactic.rwRule
                    []
                    (Term.app
                     `mul_one_div_cancel
                     [(Term.typeAscription
                       "("
                       `_root_.two_ne_zero
                       ":"
                       [(¬´term_‚â†_¬ª
                         (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                         "‚â†"
                         (num "0"))]
                       ")")]))
                   ","
                   (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
                   ","
                   (Tactic.rwRule [] `add_smul)]
                  "]")
                 [])
                []
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["only"]
                 ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"]
                 [])
                []
                (Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`eq‚ÇÅ []]
                   [(Term.typeSpec
                     ":"
                     (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                   ":="
                   (Term.proj
                    (Term.app
                     `sub_sub_sub_cancel_left
                     [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                    "."
                    `symm))))
                []
                (Mathlib.Tactic.tacticHave_
                 "have"
                 [`eq‚ÇÇ []]
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                    "="
                    (¬´term_+_¬ª `a "+" `b)))])
                []
                (Tactic.tacticShow_
                 "show"
                 (¬´term_=_¬ª
                  (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                  "="
                  (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
                []
                (Tactic.abel "abel" [] [])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
                 [])]))))
           (calcStep
            (¬´term_=_¬ª
             (Term.hole "_")
             "="
             (¬´term_*_¬ª
              (num "2")
              "*"
              (¬´term_+_¬ª
               (¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
               "+"
               (¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
            ":="
            (Term.app `parallelogram_law_with_norm [(Term.hole "_") (Term.hole "_")]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        (¬´term_=_¬ª
         (¬´term_+_¬ª
          (¬´term_*_¬ª
           (¬´term_*_¬ª
            (num "4")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
             "‚Äñ"))
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
            "‚Äñ"))
          "+"
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
         "="
         (¬´term_+_¬ª
          (¬´term_*_¬ª
           (¬´term_*_¬ª
            (num "2")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
             "‚Äñ"))
           "*"
           (¬´term_*_¬ª
            (num "2")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
             "‚Äñ")))
          "+"
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.RingNF.ring "ring")]))))
       [(calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_+_¬ª
           (¬´term_*_¬ª
            (¬´term_*_¬ª
             (Term.app
              (Analysis.InnerProductSpace.Projection.termabsR "absR")
              [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
              "‚Äñ"
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
              "‚Äñ"))
            "*"
            (¬´term_*_¬ª
             (Term.app
              (Analysis.InnerProductSpace.Projection.termabsR "absR")
              [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
              "‚Äñ"
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
              "‚Äñ")))
           "+"
           (¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
              [])
             []
             (Tactic.exact "exact" `zero_le_two)]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_+_¬ª
           (¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
              (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
              " ‚Ä¢ "
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
             "‚Äñ")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
              (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
              " ‚Ä¢ "
              (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
             "‚Äñ"))
           "+"
           (¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] [])]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_+_¬ª
           (¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
           "+"
           (¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `smul_sub)
                ","
                (Tactic.rwRule [] `smul_smul)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `mul_one_div_cancel
                  [(Term.typeAscription
                    "("
                    `_root_.two_ne_zero
                    ":"
                    [(¬´term_‚â†_¬ª
                      (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                      "‚â†"
                      (num "0"))]
                    ")")]))
                ","
                (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
                ","
                (Tactic.rwRule [] `add_smul)]
               "]")
              [])
             []
             (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] [])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÅ []]
                [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
                ":="
                (Term.proj
                 (Term.app
                  `sub_sub_sub_cancel_left
                  [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
                 "."
                 `symm))))
             []
             (Mathlib.Tactic.tacticHave_
              "have"
              [`eq‚ÇÇ []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
                 "="
                 (¬´term_+_¬ª `a "+" `b)))])
             []
             (Tactic.tacticShow_
              "show"
              (¬´term_=_¬ª
               (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
               "="
               (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
             []
             (Tactic.abel "abel" [] [])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
              [])]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_*_¬ª
           (num "2")
           "*"
           (¬´term_+_¬ª
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
            "+"
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
         ":="
         (Term.app `parallelogram_law_with_norm [(Term.hole "_") (Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `parallelogram_law_with_norm [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `parallelogram_law_with_norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_*_¬ª
        (num "2")
        "*"
        (¬´term_+_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
         "+"
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (num "2")
       "*"
       (¬´term_+_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
        "+"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
       "+"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_+_¬ª
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `a "‚Äñ"))
      "+"
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `b "‚Äñ")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `smul_sub)
             ","
             (Tactic.rwRule [] `smul_smul)
             ","
             (Tactic.rwRule
              []
              (Term.app
               `mul_one_div_cancel
               [(Term.typeAscription
                 "("
                 `_root_.two_ne_zero
                 ":"
                 [(¬´term_‚â†_¬ª
                   (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                   "‚â†"
                   (num "0"))]
                 ")")]))
             ","
             (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
             ","
             (Tactic.rwRule [] `add_smul)]
            "]")
           [])
          []
          (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
             ":="
             (Term.proj
              (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
              "."
              `symm))))
          []
          (Mathlib.Tactic.tacticHave_
           "have"
           [`eq‚ÇÇ []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
              "="
              (¬´term_+_¬ª `a "+" `b)))])
          []
          (Tactic.tacticShow_
           "show"
           (¬´term_=_¬ª
            (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
            "="
            (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
          []
          (Tactic.abel "abel" [] [])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `eq‚ÇÇ)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticShow_
       "show"
       (¬´term_=_¬ª
        (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
        "="
        (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
       "="
       (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª (¬´term_-_¬ª `u "-" `wq) "+" (¬´term_-_¬ª `u "-" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_-_¬ª `u "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_+_¬ª `u "+" `u)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticHave_
       "have"
       [`eq‚ÇÇ []]
       [(Term.typeSpec
         ":"
         (¬´term_=_¬ª
          (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
          "="
          (¬´term_+_¬ª `a "+" `b)))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
       "="
       (¬´term_+_¬ª `a "+" `b))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `a "+" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_-_¬ª (¬´term_+_¬ª `u "+" `u) "-" (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_+_¬ª `u "+" `u)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÅ []]
         [(Term.typeSpec ":" (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b)))]
         ":="
         (Term.proj
          (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
          "."
          `symm))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sub_sub_sub_cancel_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `sub_sub_sub_cancel_left [(Term.hole "_") (Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª (¬´term_-_¬ª `wp "-" `wq) "=" (¬´term_-_¬ª `a "-" `b))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `a "-" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `one_smul)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `smul_sub)
         ","
         (Tactic.rwRule [] `smul_smul)
         ","
         (Tactic.rwRule
          []
          (Term.app
           `mul_one_div_cancel
           [(Term.typeAscription
             "("
             `_root_.two_ne_zero
             ":"
             [(¬´term_‚â†_¬ª
               (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
               "‚â†"
               (num "0"))]
             ")")]))
         ","
         (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `one_add_one_eq_two)
         ","
         (Tactic.rwRule [] `add_smul)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_add_one_eq_two
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mul_one_div_cancel
       [(Term.typeAscription
         "("
         `_root_.two_ne_zero
         ":"
         [(¬´term_‚â†_¬ª
           (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           "‚â†"
           (num "0"))]
         ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription
       "("
       `_root_.two_ne_zero
       ":"
       [(¬´term_‚â†_¬ª
         (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
         "‚â†"
         (num "0"))]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â†_¬ª
       (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
       "‚â†"
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.two_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_one_div_cancel
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_sub
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_+_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
        "+"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
       "+"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `a "-" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `a "-" `b) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `a "-" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `a "+" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_+_¬ª `a "+" `b) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `a "+" `b)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `norm_smul)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_+_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
           (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           " ‚Ä¢ "
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
          "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
           (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           " ‚Ä¢ "
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
          "‚Äñ"))
        "+"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
          " ‚Ä¢ "
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
         "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
          " ‚Ä¢ "
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
         "‚Äñ"))
       "+"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
         (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
         " ‚Ä¢ "
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
        "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
         (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
         " ‚Ä¢ "
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        " ‚Ä¢ "
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
       (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
       " ‚Ä¢ "
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_-_¬ª
      `u
      "-"
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
        (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        " ‚Ä¢ "
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
       (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
       " ‚Ä¢ "
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_-_¬ª
      `u
      "-"
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
           [])
          []
          (Tactic.exact "exact" `zero_le_two)])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `zero_le_two)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_le_two
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `_root_.abs_of_nonneg)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.abs_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_+_¬ª
        (¬´term_*_¬ª
         (¬´term_*_¬ª
          (Term.app
           (Analysis.InnerProductSpace.Projection.termabsR "absR")
           [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
           "‚Äñ"
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
           "‚Äñ"))
         "*"
         (¬´term_*_¬ª
          (Term.app
           (Analysis.InnerProductSpace.Projection.termabsR "absR")
           [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
           "‚Äñ"
           (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
           "‚Äñ")))
        "+"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_*_¬ª
        (¬´term_*_¬ª
         (Term.app
          (Analysis.InnerProductSpace.Projection.termabsR "absR")
          [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
          "‚Äñ"))
        "*"
        (¬´term_*_¬ª
         (Term.app
          (Analysis.InnerProductSpace.Projection.termabsR "absR")
          [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
          "‚Äñ")))
       "+"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `wp "-" `wq) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `wp "-" `wq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (¬´term_*_¬ª
        (Term.app
         (Analysis.InnerProductSpace.Projection.termabsR "absR")
         [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
         "‚Äñ"))
       "*"
       (¬´term_*_¬ª
        (Term.app
         (Analysis.InnerProductSpace.Projection.termabsR "absR")
         [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
         "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Term.app
        (Analysis.InnerProductSpace.Projection.termabsR "absR")
        [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
        "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `half " ‚Ä¢ " (¬´term_+_¬ª `wq "+" `wp))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª `wq "+" `wp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `wp
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `wq
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_+_¬ª `wq "+" `wp) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `half
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app
       (Analysis.InnerProductSpace.Projection.termabsR "absR")
       [(Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" (num "2") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.InnerProductSpace.Projection.termabsR "absR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.termabsR', expected 'Analysis.InnerProductSpace.Projection.termabsR._@.Analysis.InnerProductSpace.Projection._hyg.71'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Existence of minimizers
    Let `u` be a point in a real inner product space, and let `K` be a nonempty complete convex subset.
    Then there exists a (unique) `v` in `K` that minimizes the distance `‚Äñu - v‚Äñ` to `u`.
     -/
  theorem
    exists_norm_eq_infi_of_complete_convex
    { K : Set F } ( ne : K . Nonempty ) ( h‚ÇÅ : IsComplete K ) ( h‚ÇÇ : Convex ‚Ñù K )
      : ‚àÄ u : F , ‚àÉ v ‚àà K , ‚Äñ u - v ‚Äñ = ‚®Ö w : K , ‚Äñ u - w ‚Äñ
    :=
      fun
        u
          =>
          by
            let Œ¥ := ‚®Ö w : K , ‚Äñ u - w ‚Äñ
              letI : Nonempty K := ne.to_subtype
              have zero_le_Œ¥ : 0 ‚â§ Œ¥ := le_cinf·µ¢ fun _ => norm_nonneg _
              have
                Œ¥_le
                  : ‚àÄ w : K , Œ¥ ‚â§ ‚Äñ u - w ‚Äñ
                  :=
                  cinf·µ¢_le ‚ü® 0 , Set.forall_range_iff . 2 fun _ => norm_nonneg _ ‚ü©
              have Œ¥_le' : ‚àÄ w ‚àà K , Œ¥ ‚â§ ‚Äñ u - w ‚Äñ := fun w hw => Œ¥_le ‚ü® w , hw ‚ü©
              have
                exists_seq
                  : ‚àÉ w : ‚Ñï ‚Üí K , ‚àÄ n , ‚Äñ u - w n ‚Äñ < Œ¥ + 1 / n + 1
                  :=
                  by
                    have
                        hŒ¥
                          : ‚àÄ n : ‚Ñï , Œ¥ < Œ¥ + 1 / n + 1
                          :=
                          fun n => lt_add_of_le_of_pos le_rfl Nat.one_div_pos_of_nat
                      have h := fun n => exists_lt_of_cinf·µ¢_lt hŒ¥ n
                      let w : ‚Ñï ‚Üí K := fun n => Classical.choose h n
                      exact ‚ü® w , fun n => Classical.choose_spec h n ‚ü©
              rcases exists_seq with ‚ü® w , hw ‚ü©
              have
                norm_tendsto
                  : tendsto fun n => ‚Äñ u - w n ‚Äñ at_top nhds Œ¥
                  :=
                  by
                    have h : tendsto fun n : ‚Ñï => Œ¥ at_top nhds Œ¥ := tendsto_const_nhds
                      have
                        h'
                          : tendsto fun n : ‚Ñï => Œ¥ + 1 / n + 1 at_top nhds Œ¥
                          :=
                          by
                            convert h.add tendsto_one_div_add_at_top_nhds_0_nat
                              simp only [ add_zero ]
                      exact
                        tendsto_of_tendsto_of_tendsto_of_le_of_le
                          h h' fun x => Œ¥_le _ fun x => le_of_lt hw _
              have
                seq_is_cauchy
                  : CauchySeq fun n => ( w n : F )
                  :=
                  by
                    rw [ cauchy_seq_iff_le_tendsto_0 ]
                      let b := fun n : ‚Ñï => 8 * Œ¥ * 1 / n + 1 + 4 * 1 / n + 1 * 1 / n + 1
                      use fun n => sqrt b n
                      constructor
                      intro n
                      exact sqrt_nonneg _
                      constructor
                      intro p q N hp hq
                      let wp := ( w p : F )
                      let wq := ( w q : F )
                      let a := u - wq
                      let b := u - wp
                      let half := 1 / ( 2 : ‚Ñù )
                      let div := 1 / ( N : ‚Ñù ) + 1
                      have
                        :
                            4 * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                                +
                                ‚Äñ wp - wq ‚Äñ * ‚Äñ wp - wq ‚Äñ
                              =
                              2 * ‚Äñ a ‚Äñ * ‚Äñ a ‚Äñ + ‚Äñ b ‚Äñ * ‚Äñ b ‚Äñ
                          :=
                          calc
                            4 * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                                  +
                                  ‚Äñ wp - wq ‚Äñ * ‚Äñ wp - wq ‚Äñ
                                =
                                2 * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ * 2 * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                                  +
                                  ‚Äñ wp - wq ‚Äñ * ‚Äñ wp - wq ‚Äñ
                              :=
                              by ring
                            _
                                  =
                                  absR ( 2 : ‚Ñù ) * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                                      *
                                      absR ( 2 : ‚Ñù ) * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                                    +
                                    ‚Äñ wp - wq ‚Äñ * ‚Äñ wp - wq ‚Äñ
                                :=
                                by rw [ _root_.abs_of_nonneg ] exact zero_le_two
                              _
                                  =
                                  ‚Äñ ( 2 : ‚Ñù ) ‚Ä¢ u - half ‚Ä¢ wq + wp ‚Äñ
                                      *
                                      ‚Äñ ( 2 : ‚Ñù ) ‚Ä¢ u - half ‚Ä¢ wq + wp ‚Äñ
                                    +
                                    ‚Äñ wp - wq ‚Äñ * ‚Äñ wp - wq ‚Äñ
                                :=
                                by simp [ norm_smul ]
                              _ = ‚Äñ a + b ‚Äñ * ‚Äñ a + b ‚Äñ + ‚Äñ a - b ‚Äñ * ‚Äñ a - b ‚Äñ
                                :=
                                by
                                  rw
                                      [
                                        smul_sub
                                          ,
                                          smul_smul
                                          ,
                                          mul_one_div_cancel ( _root_.two_ne_zero : ( 2 : ‚Ñù ) ‚â† 0 )
                                          ,
                                          ‚Üê one_add_one_eq_two
                                          ,
                                          add_smul
                                        ]
                                    simp only [ one_smul ]
                                    have
                                      eq‚ÇÅ : wp - wq = a - b := sub_sub_sub_cancel_left _ _ _ . symm
                                    have eq‚ÇÇ : u + u - wq + wp = a + b
                                    show u + u - wq + wp = u - wq + u - wp
                                    abel
                                    rw [ eq‚ÇÅ , eq‚ÇÇ ]
                              _ = 2 * ‚Äñ a ‚Äñ * ‚Äñ a ‚Äñ + ‚Äñ b ‚Äñ * ‚Äñ b ‚Äñ
                                :=
                                parallelogram_law_with_norm _ _
                      have
                        eq
                          : Œ¥ ‚â§ ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                          :=
                          by
                            rw [ smul_add ]
                              apply Œ¥_le'
                              apply h‚ÇÇ
                              repeat' exact Subtype.mem _
                              repeat' exact le_of_lt one_half_pos
                              exact add_halves 1
                      have
                        eq‚ÇÅ
                          : 4 * Œ¥ * Œ¥ ‚â§ 4 * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                          :=
                          by
                            simp_rw [ mul_assoc ]
                              exact
                                mul_le_mul_of_nonneg_left
                                  mul_self_le_mul_self zero_le_Œ¥ Eq zero_le_four
                      have
                        eq‚ÇÇ
                          : ‚Äñ a ‚Äñ * ‚Äñ a ‚Äñ ‚â§ Œ¥ + div * Œ¥ + div
                          :=
                          mul_self_le_mul_self
                            norm_nonneg _
                              le_trans le_of_lt <| hw q add_le_add_left Nat.one_div_le_one_div hq _
                      have
                        eq‚ÇÇ'
                          : ‚Äñ b ‚Äñ * ‚Äñ b ‚Äñ ‚â§ Œ¥ + div * Œ¥ + div
                          :=
                          mul_self_le_mul_self
                            norm_nonneg _
                              le_trans le_of_lt <| hw p add_le_add_left Nat.one_div_le_one_div hp _
                      rw [ dist_eq_norm ]
                      apply nonneg_le_nonneg_of_sq_le_sq
                      ¬∑ exact sqrt_nonneg _
                      rw [ mul_self_sqrt ]
                      calc
                        ‚Äñ wp - wq ‚Äñ * ‚Äñ wp - wq ‚Äñ
                            =
                            2 * ‚Äñ a ‚Äñ * ‚Äñ a ‚Äñ + ‚Äñ b ‚Äñ * ‚Äñ b ‚Äñ
                              -
                              4 * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ * ‚Äñ u - half ‚Ä¢ wq + wp ‚Äñ
                          :=
                          by rw [ ‚Üê this ] simp
                        _ ‚â§ 2 * ‚Äñ a ‚Äñ * ‚Äñ a ‚Äñ + ‚Äñ b ‚Äñ * ‚Äñ b ‚Äñ - 4 * Œ¥ * Œ¥ := sub_le_sub_left eq‚ÇÅ _
                          _ ‚â§ 2 * Œ¥ + div * Œ¥ + div + Œ¥ + div * Œ¥ + div - 4 * Œ¥ * Œ¥
                            :=
                            sub_le_sub_right
                              mul_le_mul_of_nonneg_left add_le_add eq‚ÇÇ eq‚ÇÇ' by norm_num _
                          _ = 8 * Œ¥ * div + 4 * div * div := by ring
                      exact
                        add_nonneg
                          mul_nonneg
                              mul_nonneg by norm_num zero_le_Œ¥ le_of_lt Nat.one_div_pos_of_nat
                            mul_nonneg
                              mul_nonneg by norm_num nat.one_div_pos_of_nat.le
                                nat.one_div_pos_of_nat.le
                      apply tendsto.comp
                      ¬∑ convert continuous_sqrt.continuous_at exact sqrt_zero.symm
                      have
                        eq‚ÇÅ
                          : tendsto fun n : ‚Ñï => 8 * Œ¥ * 1 / n + 1 at_top nhds ( 0 : ‚Ñù )
                          :=
                          by
                            convert
                                @ tendsto_const_nhds _ _ _ 8 * Œ¥ _ . mul
                                  tendsto_one_div_add_at_top_nhds_0_nat
                              simp only [ mul_zero ]
                      have
                        : tendsto fun n : ‚Ñï => ( 4 : ‚Ñù ) * 1 / n + 1 at_top nhds ( 0 : ‚Ñù )
                          :=
                          by
                            convert
                                @ tendsto_const_nhds _ _ _ ( 4 : ‚Ñù ) _ . mul
                                  tendsto_one_div_add_at_top_nhds_0_nat
                              simp only [ mul_zero ]
                      have
                        eq‚ÇÇ
                          :
                            tendsto
                              fun n : ‚Ñï => ( 4 : ‚Ñù ) * 1 / n + 1 * 1 / n + 1 at_top nhds ( 0 : ‚Ñù )
                          :=
                          by
                            convert this.mul tendsto_one_div_add_at_top_nhds_0_nat
                              simp only [ mul_zero ]
                      convert eq‚ÇÅ.add eq‚ÇÇ
                      simp only [ add_zero ]
              rcases
                cauchy_seq_tendsto_of_is_complete h‚ÇÅ fun n => _ seq_is_cauchy
                with ‚ü® v , hv , w_tendsto ‚ü©
              use v
              use hv
              have
                h_cont
                  : Continuous fun v => ‚Äñ u - v ‚Äñ
                  :=
                  Continuous.comp continuous_norm Continuous.sub continuous_const continuous_id
              have : tendsto fun n => ‚Äñ u - w n ‚Äñ at_top nhds ‚Äñ u - v ‚Äñ
              convert tendsto.comp h_cont.continuous_at w_tendsto
              exact tendsto_nhds_unique this norm_tendsto
              exact Subtype.mem _
#align exists_norm_eq_infi_of_complete_convex exists_norm_eq_infi_of_complete_convex

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Characterization of minimizers for the projection on a convex set in a real inner product\nspace. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `norm_eq_infi_iff_real_inner_le_zero [])
      (Command.declSig
       [(Term.implicitBinder "{" [`K] [":" (Term.app `Set [`F])] "}")
        (Term.explicitBinder
         "("
         [`h]
         [":" (Term.app `Convex [(Data.Real.Basic.term‚Ñù "‚Ñù") `K])]
         []
         ")")
        (Term.implicitBinder "{" [`u] [":" `F] "}")
        (Term.implicitBinder "{" [`v] [":" `F] "}")
        (Term.explicitBinder "(" [`hv] [":" (¬´term_‚àà_¬ª `v "‚àà" `K)] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚Üî_¬ª
         (¬´term_=_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "="
          (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
           "‚®Ö"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
           ", "
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
         "‚Üî"
         (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
          "‚àÄ"
          (Lean.binderIdent `w)
          (¬´binderTerm‚àà_¬ª "‚àà" `K)
          ","
          (¬´term_‚â§_¬ª
           (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
            "‚ü™"
            (¬´term_-_¬ª `u "-" `v)
            ", "
            (¬´term_-_¬ª `w "-" `v)
            "‚ü´_‚Ñù")
           "‚â§"
           (num "0"))))))
      (Command.declValSimple
       ":="
       (Term.app
        `Iff.intro
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`eq `w `hw])
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `Œ¥
                []
                []
                ":="
                (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                 "‚®Ö"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
                 ", "
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `p
                []
                []
                ":="
                (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 (¬´term_-_¬ª `w "-" `v)
                 "‚ü´_‚Ñù"))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `q
                []
                []
                ":="
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                 "^"
                 (num "2")))))
             []
             (Std.Tactic.tacticLetI_
              "letI"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
                ":="
                (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
             []
             (Mathlib.Tactic.tacticHave_
              "have"
              [`zero_le_Œ¥ []]
              [(Term.typeSpec ":" (¬´term_‚â§_¬ª (num "0") "‚â§" `Œ¥))])
             []
             (Tactic.apply "apply" `le_cinf·µ¢)
             []
             (Tactic.intro "intro" [])
             []
             (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
             []
             (Mathlib.Tactic.tacticHave_
              "have"
              [`Œ¥_le []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "‚àÄ"
                 [`w]
                 [(Term.typeSpec ":" `K)]
                 ","
                 (¬´term_‚â§_¬ª
                  `Œ¥
                  "‚â§"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))])
             []
             (Tactic.intro "intro" [`w])
             []
             (Tactic.apply "apply" `cinf·µ¢_le)
             []
             (Mathlib.Tactic.¬´tacticUse_,,¬ª
              "use"
              [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
             []
             (Std.Tactic.rintro
              "rintro"
              [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.ignore "_"))
               (Std.Tactic.RCases.rintroPat.one
                (Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.ignore "_")])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                   [])]
                 "‚ü©"))]
              [])
             []
             (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`Œ¥_le' []]
                [(Term.typeSpec
                  ":"
                  (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                   "‚àÄ"
                   (Lean.binderIdent `w)
                   (¬´binderTerm‚àà_¬ª "‚àà" `K)
                   ","
                   (¬´term_‚â§_¬ª
                    `Œ¥
                    "‚â§"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
                ":="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`w `hw]
                  []
                  "=>"
                  (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
             []
             (Mathlib.Tactic.tacticHave_
              "have"
              []
              [(Term.typeSpec
                ":"
                (Term.forall
                 "‚àÄ"
                 [`Œ∏]
                 [(Term.typeSpec ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]
                 ","
                 (Term.arrow
                  (¬´term_<_¬ª (num "0") "<" `Œ∏)
                  "‚Üí"
                  (Term.arrow
                   (¬´term_‚â§_¬ª `Œ∏ "‚â§" (num "1"))
                   "‚Üí"
                   (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))))))])
             []
             (Tactic.intro "intro" [`Œ∏ `hŒ∏‚ÇÅ `hŒ∏‚ÇÇ])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (¬´term_‚â§_¬ª
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                    "^"
                    (num "2"))
                   "‚â§"
                   (¬´term_+_¬ª
                    (¬´term_-_¬ª
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                      "^"
                      (num "2"))
                     "-"
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª (num "2") "*" `Œ∏)
                      "*"
                      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                       "‚ü™"
                       (¬´term_-_¬ª `u "-" `v)
                       ", "
                       (¬´term_-_¬ª `w "-" `v)
                       "‚ü´_‚Ñù")))
                    "+"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                     "*"
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                      "^"
                      (num "2"))))))]
                ":="
                (calc
                 "calc"
                 (calcStep
                  (¬´term_‚â§_¬ª
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                    "^"
                    (num "2"))
                   "‚â§"
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª
                      `u
                      "-"
                      (¬´term_+_¬ª
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                       "+"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                     "‚Äñ")
                    "^"
                    (num "2")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.simp
                       "simp"
                       []
                       []
                       ["only"]
                       ["[" [(Tactic.simpLemma [] [] `sq)] "]"]
                       [])
                      ";"
                      (Tactic.apply
                       "apply"
                       (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
                      []
                      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") [])
                      ";"
                      (Tactic.apply "apply" `Œ¥_le')
                      []
                      (Tactic.apply "apply" (Term.app `h [`hw `hv]))
                      []
                      (Std.Tactic.exacts
                       "exacts"
                       "["
                       [(Term.app `le_of_lt [`hŒ∏‚ÇÅ])
                        ","
                        (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
                        ","
                        (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
                       "]")]))))
                 [(calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª
                       (¬´term_-_¬ª `u "-" `v)
                       "-"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
                      "‚Äñ")
                     "^"
                     (num "2")))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.tacticHave_
                        "have"
                        (Term.haveDecl
                         (Term.haveIdDecl
                          []
                          [(Term.typeSpec
                            ":"
                            (¬´term_=_¬ª
                             (¬´term_-_¬ª
                              `u
                              "-"
                              (¬´term_+_¬ª
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                               "+"
                               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                                (¬´term_-_¬ª (num "1") "-" `Œ∏)
                                " ‚Ä¢ "
                                `v)))
                             "="
                             (¬´term_-_¬ª
                              (¬´term_-_¬ª `u "-" `v)
                              "-"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                          ":="
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Tactic.rwSeq
                               "rw"
                               []
                               (Tactic.rwRuleSeq
                                "["
                                [(Tactic.rwRule [] `smul_sub)
                                 ","
                                 (Tactic.rwRule [] `sub_smul)
                                 ","
                                 (Tactic.rwRule [] `one_smul)]
                                "]")
                               [])
                              []
                              (Tactic.simp
                               "simp"
                               []
                               []
                               ["only"]
                               ["["
                                [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                                 ","
                                 (Tactic.simpLemma [] [] `add_comm)
                                 ","
                                 (Tactic.simpLemma [] [] `add_left_comm)
                                 ","
                                 (Tactic.simpLemma [] [] `add_assoc)
                                 ","
                                 (Tactic.simpLemma [] [] `neg_add_rev)]
                                "]"]
                               [])]))))))
                       []
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]")
                        [])]))))
                  (calcStep
                   (¬´term_=_¬ª
                    (Term.hole "_")
                    "="
                    (¬´term_+_¬ª
                     (¬´term_-_¬ª
                      (¬´term_^_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                       "^"
                       (num "2"))
                      "-"
                      (¬´term_*_¬ª
                       (¬´term_*_¬ª (num "2") "*" `Œ∏)
                       "*"
                       (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                     "+"
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                      "*"
                      (¬´term_^_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                       "^"
                       (num "2")))))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `norm_sub_sq)
                          ","
                          (Tactic.rwRule [] `inner_smul_right)
                          ","
                          (Tactic.rwRule [] `norm_smul)]
                         "]")
                        [])
                       []
                       (Tactic.simp
                        "simp"
                        []
                        []
                        ["only"]
                        ["[" [(Tactic.simpLemma [] [] `sq)] "]"]
                        [])
                       []
                       (Tactic.tacticShow_
                        "show"
                        (¬´term_=_¬ª
                         (¬´term_+_¬ª
                          (¬´term_-_¬ª
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                           "-"
                           (¬´term_*_¬ª
                            (num "2")
                            "*"
                            (¬´term_*_¬ª
                             `Œ∏
                             "*"
                             (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                          "+"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª
                            (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
                           "*"
                           (¬´term_*_¬ª
                            (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
                         "="
                         (¬´term_+_¬ª
                          (¬´term_-_¬ª
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                           "-"
                           (¬´term_*_¬ª
                            (¬´term_*_¬ª (num "2") "*" `Œ∏)
                            "*"
                            (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                          "+"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                           "*"
                           (¬´term_*_¬ª
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                            "*"
                            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                             "‚Äñ"
                             (¬´term_-_¬ª `w "-" `v)
                             "‚Äñ"))))))
                       []
                       (Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))]
                         "]")
                        [])
                       ";"
                       (Mathlib.Tactic.RingNF.ring "ring")]))))]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`eq‚ÇÅ []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (¬´term_+_¬ª
                    (¬´term_-_¬ª
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                      "^"
                      (num "2"))
                     "-"
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª (num "2") "*" `Œ∏)
                      "*"
                      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                    "+"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                     "*"
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                      "^"
                      (num "2"))))
                   "="
                   (¬´term_+_¬ª
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                     "^"
                     (num "2"))
                    "+"
                    (¬´term_-_¬ª
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                      "*"
                      (¬´term_^_¬ª
                       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                       "^"
                       (num "2")))
                     "-"
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª (num "2") "*" `Œ∏)
                      "*"
                      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.abel "abel" [] [])]))))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `le_add_iff_nonneg_right)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
             []
             (Mathlib.Tactic.tacticHave_
              "have"
              [`eq‚ÇÇ []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (¬´term_-_¬ª
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                   "*"
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                    "^"
                    (num "2")))
                  "-"
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª (num "2") "*" `Œ∏)
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                 "="
                 (¬´term_*_¬ª
                  `Œ∏
                  "*"
                  (¬´term_-_¬ª
                   (¬´term_*_¬ª
                    `Œ∏
                    "*"
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                     "^"
                     (num "2")))
                   "-"
                   (¬´term_*_¬ª
                    (num "2")
                    "*"
                    (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))])
             []
             (Mathlib.Tactic.RingNF.ring "ring")
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 `le_of_sub_nonneg
                 [(Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])]))))
             []
             (Tactic.exact "exact" `this)
             []
             (Classical.¬´tacticBy_cases_:_¬ª "by_cases" [`hq ":"] (¬´term_=_¬ª `q "=" (num "0")))
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
               []
               (Mathlib.Tactic.tacticHave_
                "have"
                []
                [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (num "0")))])
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  []
                  ":="
                  (Term.app
                   `this
                   [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))))
               []
               (linarith "linarith" [] (linarithArgsRest [] [] []))
               []
               (Tactic.exact "exact" `this)])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Mathlib.Tactic.tacticHave_
                "have"
                [`q_pos []]
                [(Term.typeSpec ":" (¬´term_<_¬ª (num "0") "<" `q))])
               []
               (Tactic.apply "apply" `lt_of_le_of_ne)
               []
               (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))
               []
               (Tactic.intro "intro" [`h])
               []
               (Tactic.exact "exact" (Term.app `hq [`h.symm]))
               []
               (Std.Tactic.byContra "by_contra" [(Lean.binderIdent `hp)])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
               []
               (Tactic.tacticLet_
                "let"
                (Term.letDecl
                 (Term.letIdDecl
                  `Œ∏
                  []
                  []
                  ":="
                  (Term.app
                   `min
                   [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                    (¬´term_/_¬ª `p "/" `q)]))))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`eq‚ÇÅ []]
                  [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
                  ":="
                  (calc
                   "calc"
                   (calcStep
                    (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
                    ":="
                    (Term.app
                     `mul_le_mul_of_nonneg_right
                     [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
                      (Term.app `sq_nonneg [(Term.hole "_")])]))
                   [(calcStep
                     (¬´term_=_¬ª (Term.hole "_") "=" `p)
                     ":="
                     (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" `p))]
                  ":="
                  (calc
                   "calc"
                   (calcStep
                    (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.refine'
                         "refine'"
                         (Term.app
                          `this
                          [`Œ∏
                           (Term.app
                            `lt_min
                            [(Term.byTactic
                              "by"
                              (Tactic.tacticSeq
                               (Tactic.tacticSeq1Indented
                                [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                             (Term.app `div_pos [`hp `q_pos])])
                           (Term.byTactic
                            "by"
                            (Tactic.tacticSeq
                             (Tactic.tacticSeq1Indented
                              [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))]))))
                   [(calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
               []
               (linarith "linarith" [] (linarithArgsRest [] [] []))])])))
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`h])
             []
             (Std.Tactic.tacticLetI_
              "letI"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
                ":="
                (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
             []
             (Tactic.apply "apply" `le_antisymm)
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.apply "apply" `le_cinf·µ¢)
               []
               (Tactic.intro "intro" [`w])
               []
               (Tactic.apply
                "apply"
                (Term.app
                 `nonneg_le_nonneg_of_sq_le_sq
                 [(Term.app `norm_nonneg [(Term.hole "_")])]))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
               []
               (calcTactic
                "calc"
                (calcStep
                 (¬´term_‚â§_¬ª
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                  "‚â§"
                  (¬´term_-_¬ª
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                   "-"
                   (¬´term_*_¬ª
                    (num "2")
                    "*"
                    (Term.app
                     `inner
                     [(¬´term_-_¬ª `u "-" `v)
                      (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(linarith "linarith" [] (linarithArgsRest [] [] []))]))))
                [(calcStep
                  (¬´term_‚â§_¬ª
                   (Term.hole "_")
                   "‚â§"
                   (¬´term_+_¬ª
                    (¬´term_-_¬ª
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                      "^"
                      (num "2"))
                     "-"
                     (¬´term_*_¬ª
                      (num "2")
                      "*"
                      (Term.app
                       `inner
                       [(¬´term_-_¬ª `u "-" `v)
                        (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
                    "+"
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                      "‚Äñ"
                      (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
                      "‚Äñ")
                     "^"
                     (num "2"))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
                      []
                      (Tactic.refine'
                       "refine'"
                       (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
                      []
                      (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                     "‚Äñ")
                    "^"
                    (num "2")))
                  ":="
                  `norm_sub_sq.symm)
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (¬´term_*_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
                    "*"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Mathlib.Tactic.tacticHave_
                       "have"
                       []
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª
                          (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                          "="
                          (¬´term_-_¬ª `u "-" `w)))])
                      []
                      (Tactic.abel "abel" [] [])
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)]
                        "]")
                       [])]))))])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.tacticShow_
                "show"
                (¬´term_‚â§_¬ª
                 (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                  "‚®Ö"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
                  ", "
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
                 "‚â§"
                 (Term.app
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`w]
                    [(Term.typeSpec ":" `K)]
                    "=>"
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
                  [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
               []
               (Tactic.apply "apply" `cinf·µ¢_le)
               []
               (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [(num "0")])
               []
               (Std.Tactic.rintro
                "rintro"
                [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `y))
                 (Std.Tactic.RCases.rintroPat.one
                  (Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                     [])]
                   "‚ü©"))]
                [])
               []
               (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))])])))])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Iff.intro
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.intro "intro" [`eq `w `hw])
            []
            (Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `Œ¥
               []
               []
               ":="
               (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                "‚®Ö"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
                ", "
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))
            []
            (Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `p
               []
               []
               ":="
               (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                "‚ü™"
                (¬´term_-_¬ª `u "-" `v)
                ", "
                (¬´term_-_¬ª `w "-" `v)
                "‚ü´_‚Ñù"))))
            []
            (Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `q
               []
               []
               ":="
               (¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                "^"
                (num "2")))))
            []
            (Std.Tactic.tacticLetI_
             "letI"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
               ":="
               (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
            []
            (Mathlib.Tactic.tacticHave_
             "have"
             [`zero_le_Œ¥ []]
             [(Term.typeSpec ":" (¬´term_‚â§_¬ª (num "0") "‚â§" `Œ¥))])
            []
            (Tactic.apply "apply" `le_cinf·µ¢)
            []
            (Tactic.intro "intro" [])
            []
            (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
            []
            (Mathlib.Tactic.tacticHave_
             "have"
             [`Œ¥_le []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                [`w]
                [(Term.typeSpec ":" `K)]
                ","
                (¬´term_‚â§_¬ª
                 `Œ¥
                 "‚â§"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))])
            []
            (Tactic.intro "intro" [`w])
            []
            (Tactic.apply "apply" `cinf·µ¢_le)
            []
            (Mathlib.Tactic.¬´tacticUse_,,¬ª
             "use"
             [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
            []
            (Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.ignore "_"))
              (Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.ignore "_")])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "‚ü©"))]
             [])
            []
            (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`Œ¥_le' []]
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                  "‚àÄ"
                  (Lean.binderIdent `w)
                  (¬´binderTerm‚àà_¬ª "‚àà" `K)
                  ","
                  (¬´term_‚â§_¬ª
                   `Œ¥
                   "‚â§"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [`w `hw]
                 []
                 "=>"
                 (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
            []
            (Mathlib.Tactic.tacticHave_
             "have"
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                [`Œ∏]
                [(Term.typeSpec ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]
                ","
                (Term.arrow
                 (¬´term_<_¬ª (num "0") "<" `Œ∏)
                 "‚Üí"
                 (Term.arrow
                  (¬´term_‚â§_¬ª `Œ∏ "‚â§" (num "1"))
                  "‚Üí"
                  (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))))))])
            []
            (Tactic.intro "intro" [`Œ∏ `hŒ∏‚ÇÅ `hŒ∏‚ÇÇ])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (¬´term_‚â§_¬ª
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "^"
                   (num "2"))
                  "‚â§"
                  (¬´term_+_¬ª
                   (¬´term_-_¬ª
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                     "^"
                     (num "2"))
                    "-"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª (num "2") "*" `Œ∏)
                     "*"
                     (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                      "‚ü™"
                      (¬´term_-_¬ª `u "-" `v)
                      ", "
                      (¬´term_-_¬ª `w "-" `v)
                      "‚ü´_‚Ñù")))
                   "+"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                    "*"
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                     "^"
                     (num "2"))))))]
               ":="
               (calc
                "calc"
                (calcStep
                 (¬´term_‚â§_¬ª
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "^"
                   (num "2"))
                  "‚â§"
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª
                     `u
                     "-"
                     (¬´term_+_¬ª
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                      "+"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                    "‚Äñ")
                   "^"
                   (num "2")))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
                     ";"
                     (Tactic.apply
                      "apply"
                      (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
                     []
                     (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") [])
                     ";"
                     (Tactic.apply "apply" `Œ¥_le')
                     []
                     (Tactic.apply "apply" (Term.app `h [`hw `hv]))
                     []
                     (Std.Tactic.exacts
                      "exacts"
                      "["
                      [(Term.app `le_of_lt [`hŒ∏‚ÇÅ])
                       ","
                       (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
                       ","
                       (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
                      "]")]))))
                [(calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª
                      (¬´term_-_¬ª `u "-" `v)
                      "-"
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
                     "‚Äñ")
                    "^"
                    (num "2")))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         []
                         [(Term.typeSpec
                           ":"
                           (¬´term_=_¬ª
                            (¬´term_-_¬ª
                             `u
                             "-"
                             (¬´term_+_¬ª
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                              "+"
                              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                            "="
                            (¬´term_-_¬ª
                             (¬´term_-_¬ª `u "-" `v)
                             "-"
                             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                         ":="
                         (Term.byTactic
                          "by"
                          (Tactic.tacticSeq
                           (Tactic.tacticSeq1Indented
                            [(Tactic.rwSeq
                              "rw"
                              []
                              (Tactic.rwRuleSeq
                               "["
                               [(Tactic.rwRule [] `smul_sub)
                                ","
                                (Tactic.rwRule [] `sub_smul)
                                ","
                                (Tactic.rwRule [] `one_smul)]
                               "]")
                              [])
                             []
                             (Tactic.simp
                              "simp"
                              []
                              []
                              ["only"]
                              ["["
                               [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                                ","
                                (Tactic.simpLemma [] [] `add_comm)
                                ","
                                (Tactic.simpLemma [] [] `add_left_comm)
                                ","
                                (Tactic.simpLemma [] [] `add_assoc)
                                ","
                                (Tactic.simpLemma [] [] `neg_add_rev)]
                               "]"]
                              [])]))))))
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]")
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (¬´term_+_¬ª
                    (¬´term_-_¬ª
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                      "^"
                      (num "2"))
                     "-"
                     (¬´term_*_¬ª
                      (¬´term_*_¬ª (num "2") "*" `Œ∏)
                      "*"
                      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                    "+"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                     "*"
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                      "^"
                      (num "2")))))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] `norm_sub_sq)
                         ","
                         (Tactic.rwRule [] `inner_smul_right)
                         ","
                         (Tactic.rwRule [] `norm_smul)]
                        "]")
                       [])
                      []
                      (Tactic.simp
                       "simp"
                       []
                       []
                       ["only"]
                       ["[" [(Tactic.simpLemma [] [] `sq)] "]"]
                       [])
                      []
                      (Tactic.tacticShow_
                       "show"
                       (¬´term_=_¬ª
                        (¬´term_+_¬ª
                         (¬´term_-_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                          "-"
                          (¬´term_*_¬ª
                           (num "2")
                           "*"
                           (¬´term_*_¬ª
                            `Œ∏
                            "*"
                            (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                         "+"
                         (¬´term_*_¬ª
                          (¬´term_*_¬ª
                           (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
                          "*"
                          (¬´term_*_¬ª
                           (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
                        "="
                        (¬´term_+_¬ª
                         (¬´term_-_¬ª
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                          "-"
                          (¬´term_*_¬ª
                           (¬´term_*_¬ª (num "2") "*" `Œ∏)
                           "*"
                           (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                         "+"
                         (¬´term_*_¬ª
                          (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                          "*"
                          (¬´term_*_¬ª
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                           "*"
                           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                            "‚Äñ"
                            (¬´term_-_¬ª `w "-" `v)
                            "‚Äñ"))))))
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
                       [])
                      ";"
                      (Mathlib.Tactic.RingNF.ring "ring")]))))]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`eq‚ÇÅ []]
               [(Term.typeSpec
                 ":"
                 (¬´term_=_¬ª
                  (¬´term_+_¬ª
                   (¬´term_-_¬ª
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                     "^"
                     (num "2"))
                    "-"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª (num "2") "*" `Œ∏)
                     "*"
                     (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                   "+"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                    "*"
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                     "^"
                     (num "2"))))
                  "="
                  (¬´term_+_¬ª
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                    "^"
                    (num "2"))
                   "+"
                   (¬´term_-_¬ª
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                     "*"
                     (¬´term_^_¬ª
                      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                      "^"
                      (num "2")))
                    "-"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª (num "2") "*" `Œ∏)
                     "*"
                     (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.abel "abel" [] [])]))))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `le_add_iff_nonneg_right)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
            []
            (Mathlib.Tactic.tacticHave_
             "have"
             [`eq‚ÇÇ []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (¬´term_-_¬ª
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                   "^"
                   (num "2")))
                 "-"
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª (num "2") "*" `Œ∏)
                  "*"
                  (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                "="
                (¬´term_*_¬ª
                 `Œ∏
                 "*"
                 (¬´term_-_¬ª
                  (¬´term_*_¬ª
                   `Œ∏
                   "*"
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                    "^"
                    (num "2")))
                  "-"
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))])
            []
            (Mathlib.Tactic.RingNF.ring "ring")
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app `le_of_sub_nonneg [(Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])]))))
            []
            (Tactic.exact "exact" `this)
            []
            (Classical.¬´tacticBy_cases_:_¬ª "by_cases" [`hq ":"] (¬´term_=_¬ª `q "=" (num "0")))
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
              []
              (Mathlib.Tactic.tacticHave_
               "have"
               []
               [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (num "0")))])
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 []
                 ":="
                 (Term.app
                  `this
                  [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))))
              []
              (linarith "linarith" [] (linarithArgsRest [] [] []))
              []
              (Tactic.exact "exact" `this)])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Mathlib.Tactic.tacticHave_
               "have"
               [`q_pos []]
               [(Term.typeSpec ":" (¬´term_<_¬ª (num "0") "<" `q))])
              []
              (Tactic.apply "apply" `lt_of_le_of_ne)
              []
              (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))
              []
              (Tactic.intro "intro" [`h])
              []
              (Tactic.exact "exact" (Term.app `hq [`h.symm]))
              []
              (Std.Tactic.byContra "by_contra" [(Lean.binderIdent `hp)])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le)] "]")
               [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
              []
              (Tactic.tacticLet_
               "let"
               (Term.letDecl
                (Term.letIdDecl
                 `Œ∏
                 []
                 []
                 ":="
                 (Term.app
                  `min
                  [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                   (¬´term_/_¬ª `p "/" `q)]))))
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`eq‚ÇÅ []]
                 [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
                 ":="
                 (calc
                  "calc"
                  (calcStep
                   (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
                   ":="
                   (Term.app
                    `mul_le_mul_of_nonneg_right
                    [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
                     (Term.app `sq_nonneg [(Term.hole "_")])]))
                  [(calcStep
                    (¬´term_=_¬ª (Term.hole "_") "=" `p)
                    ":="
                    (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" `p))]
                 ":="
                 (calc
                  "calc"
                  (calcStep
                   (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.refine'
                        "refine'"
                        (Term.app
                         `this
                         [`Œ∏
                          (Term.app
                           `lt_min
                           [(Term.byTactic
                             "by"
                             (Tactic.tacticSeq
                              (Tactic.tacticSeq1Indented
                               [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                            (Term.app `div_pos [`hp `q_pos])])
                          (Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))]))))
                  [(calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
              []
              (linarith "linarith" [] (linarithArgsRest [] [] []))])])))
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.intro "intro" [`h])
            []
            (Std.Tactic.tacticLetI_
             "letI"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
               ":="
               (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
            []
            (Tactic.apply "apply" `le_antisymm)
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.apply "apply" `le_cinf·µ¢)
              []
              (Tactic.intro "intro" [`w])
              []
              (Tactic.apply
               "apply"
               (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
              []
              (calcTactic
               "calc"
               (calcStep
                (¬´term_‚â§_¬ª
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                 "‚â§"
                 (¬´term_-_¬ª
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                  "-"
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (Term.app
                    `inner
                    [(¬´term_-_¬ª `u "-" `v)
                     (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(linarith "linarith" [] (linarithArgsRest [] [] []))]))))
               [(calcStep
                 (¬´term_‚â§_¬ª
                  (Term.hole "_")
                  "‚â§"
                  (¬´term_+_¬ª
                   (¬´term_-_¬ª
                    (¬´term_^_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                     "^"
                     (num "2"))
                    "-"
                    (¬´term_*_¬ª
                     (num "2")
                     "*"
                     (Term.app
                      `inner
                      [(¬´term_-_¬ª `u "-" `v)
                       (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
                   "+"
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                     "‚Äñ"
                     (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
                     "‚Äñ")
                    "^"
                    (num "2"))))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
                     []
                     (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
                     []
                     (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))]))))
                (calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                    "‚Äñ"
                    (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                    "‚Äñ")
                   "^"
                   (num "2")))
                 ":="
                 `norm_sub_sq.symm)
                (calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (¬´term_*_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
                   "*"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Mathlib.Tactic.tacticHave_
                      "have"
                      []
                      [(Term.typeSpec
                        ":"
                        (¬´term_=_¬ª
                         (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                         "="
                         (¬´term_-_¬ª `u "-" `w)))])
                     []
                     (Tactic.abel "abel" [] [])
                     []
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)]
                       "]")
                      [])]))))])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.tacticShow_
               "show"
               (¬´term_‚â§_¬ª
                (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
                 "‚®Ö"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
                 ", "
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
                "‚â§"
                (Term.app
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`w]
                   [(Term.typeSpec ":" `K)]
                   "=>"
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
                 [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
              []
              (Tactic.apply "apply" `cinf·µ¢_le)
              []
              (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [(num "0")])
              []
              (Std.Tactic.rintro
               "rintro"
               [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `y))
                (Std.Tactic.RCases.rintroPat.one
                 (Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                    [])]
                  "‚ü©"))]
               [])
              []
              (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`h])
          []
          (Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
             ":="
             (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
          []
          (Tactic.apply "apply" `le_antisymm)
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.apply "apply" `le_cinf·µ¢)
            []
            (Tactic.intro "intro" [`w])
            []
            (Tactic.apply
             "apply"
             (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
            []
            (calcTactic
             "calc"
             (calcStep
              (¬´term_‚â§_¬ª
               (¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
               "‚â§"
               (¬´term_-_¬ª
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                "-"
                (¬´term_*_¬ª
                 (num "2")
                 "*"
                 (Term.app
                  `inner
                  [(¬´term_-_¬ª `u "-" `v)
                   (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(linarith "linarith" [] (linarithArgsRest [] [] []))]))))
             [(calcStep
               (¬´term_‚â§_¬ª
                (Term.hole "_")
                "‚â§"
                (¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "^"
                   (num "2"))
                  "-"
                  (¬´term_*_¬ª
                   (num "2")
                   "*"
                   (Term.app
                    `inner
                    [(¬´term_-_¬ª `u "-" `v)
                     (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
                 "+"
                 (¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
                   "‚Äñ")
                  "^"
                  (num "2"))))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
                   []
                   (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
                   []
                   (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))]))))
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                  "‚Äñ"
                  (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                  "‚Äñ")
                 "^"
                 (num "2")))
               ":="
               `norm_sub_sq.symm)
              (calcStep
               (¬´term_=_¬ª
                (Term.hole "_")
                "="
                (¬´term_*_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
                 "*"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Mathlib.Tactic.tacticHave_
                    "have"
                    []
                    [(Term.typeSpec
                      ":"
                      (¬´term_=_¬ª
                       (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                       "="
                       (¬´term_-_¬ª `u "-" `w)))])
                   []
                   (Tactic.abel "abel" [] [])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
                    [])]))))])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.tacticShow_
             "show"
             (¬´term_‚â§_¬ª
              (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
               "‚®Ö"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
               ", "
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
              "‚â§"
              (Term.app
               (Term.fun
                "fun"
                (Term.basicFun
                 [`w]
                 [(Term.typeSpec ":" `K)]
                 "=>"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
               [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
            []
            (Tactic.apply "apply" `cinf·µ¢_le)
            []
            (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [(num "0")])
            []
            (Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `y))
              (Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "‚ü©"))]
             [])
            []
            (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.tacticShow_
         "show"
         (¬´term_‚â§_¬ª
          (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
           "‚®Ö"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
           ", "
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
          "‚â§"
          (Term.app
           (Term.fun
            "fun"
            (Term.basicFun
             [`w]
             [(Term.typeSpec ":" `K)]
             "=>"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
           [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
        []
        (Tactic.apply "apply" `cinf·µ¢_le)
        []
        (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [(num "0")])
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `y))
          (Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
              [])]
            "‚ü©"))]
         [])
        []
        (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `y))
        (Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.tuple
          "‚ü®"
          [(Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
            [])]
          "‚ü©"))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [(num "0")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `cinf·µ¢_le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cinf·µ¢_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticShow_
       "show"
       (¬´term_‚â§_¬ª
        (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
         "‚®Ö"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
         ", "
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
        "‚â§"
        (Term.app
         (Term.fun
          "fun"
          (Term.basicFun
           [`w]
           [(Term.typeSpec ":" `K)]
           "=>"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
         [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
        "‚®Ö"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
        ", "
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
       "‚â§"
       (Term.app
        (Term.fun
         "fun"
         (Term.basicFun
          [`w]
          [(Term.typeSpec ":" `K)]
          "=>"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
        [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.fun
        "fun"
        (Term.basicFun
         [`w]
         [(Term.typeSpec ":" `K)]
         "=>"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
       [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`w]
        [(Term.typeSpec ":" `K)]
        "=>"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 0, term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`w]
       [(Term.typeSpec ":" `K)]
       "=>"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
       "‚®Ö"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
       ", "
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
      "‚®Ö"
      (Std.ExtendedBinder.extBinders
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
      ", "
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.apply "apply" `le_cinf·µ¢)
        []
        (Tactic.intro "intro" [`w])
        []
        (Tactic.apply
         "apply"
         (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
        []
        (calcTactic
         "calc"
         (calcStep
          (¬´term_‚â§_¬ª
           (¬´term_*_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
            "*"
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
           "‚â§"
           (¬´term_-_¬ª
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
            "-"
            (¬´term_*_¬ª
             (num "2")
             "*"
             (Term.app
              `inner
              [(¬´term_-_¬ª `u "-" `v)
               (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(linarith "linarith" [] (linarithArgsRest [] [] []))]))))
         [(calcStep
           (¬´term_‚â§_¬ª
            (Term.hole "_")
            "‚â§"
            (¬´term_+_¬ª
             (¬´term_-_¬ª
              (¬´term_^_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
               "^"
               (num "2"))
              "-"
              (¬´term_*_¬ª
               (num "2")
               "*"
               (Term.app
                `inner
                [(¬´term_-_¬ª `u "-" `v)
                 (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
             "+"
             (¬´term_^_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
               "‚Äñ"
               (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
               "‚Äñ")
              "^"
              (num "2"))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
               []
               (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
               []
               (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))]))))
          (calcStep
           (¬´term_=_¬ª
            (Term.hole "_")
            "="
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
              "‚Äñ"
              (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
              "‚Äñ")
             "^"
             (num "2")))
           ":="
           `norm_sub_sq.symm)
          (calcStep
           (¬´term_=_¬ª
            (Term.hole "_")
            "="
            (¬´term_*_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
             "*"
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Mathlib.Tactic.tacticHave_
                "have"
                []
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                   "="
                   (¬´term_-_¬ª `u "-" `w)))])
               []
               (Tactic.abel "abel" [] [])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
                [])]))))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        (¬´term_‚â§_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
         "‚â§"
         (¬´term_-_¬ª
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
          "-"
          (¬´term_*_¬ª
           (num "2")
           "*"
           (Term.app
            `inner
            [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(linarith "linarith" [] (linarithArgsRest [] [] []))]))))
       [(calcStep
         (¬´term_‚â§_¬ª
          (Term.hole "_")
          "‚â§"
          (¬´term_+_¬ª
           (¬´term_-_¬ª
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
             "^"
             (num "2"))
            "-"
            (¬´term_*_¬ª
             (num "2")
             "*"
             (Term.app
              `inner
              [(¬´term_-_¬ª `u "-" `v)
               (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
           "+"
           (¬´term_^_¬ª
            (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
             "‚Äñ"
             (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
             "‚Äñ")
            "^"
            (num "2"))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
             []
             (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
             []
             (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_^_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
            "‚Äñ")
           "^"
           (num "2")))
         ":="
         `norm_sub_sq.symm)
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Mathlib.Tactic.tacticHave_
              "have"
              []
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
                 "="
                 (¬´term_-_¬ª `u "-" `w)))])
             []
             (Tactic.abel "abel" [] [])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
              [])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Mathlib.Tactic.tacticHave_
           "have"
           []
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
              "="
              (¬´term_-_¬ª `u "-" `w)))])
          []
          (Tactic.abel "abel" [] [])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticHave_
       "have"
       []
       [(Term.typeSpec
         ":"
         (¬´term_=_¬ª
          (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
          "="
          (¬´term_-_¬ª `u "-" `w)))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
       "="
       (¬´term_-_¬ª `u "-" `w))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `w)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      `norm_sub_sq.symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
         "‚Äñ")
        "^"
        (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
        "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (¬´term_-_¬ª `w "-" `v))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
          []
          (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
          []
          (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sq_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sq_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_add_of_nonneg_right [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_add_of_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Term.hole "_")
       "‚â§"
       (¬´term_+_¬ª
        (¬´term_-_¬ª
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "^"
          (num "2"))
         "-"
         (¬´term_*_¬ª
          (num "2")
          "*"
          (Term.app
           `inner
           [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
        "+"
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
          "‚Äñ"
          (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
          "‚Äñ")
         "^"
         (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_-_¬ª
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
         "^"
         (num "2"))
        "-"
        (¬´term_*_¬ª
         (num "2")
         "*"
         (Term.app
          `inner
          [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
       "+"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
         "‚Äñ"
         (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
         "‚Äñ")
        "^"
        (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
        "‚Äñ"
        (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
        "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
       "‚Äñ"
       (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
       "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.typeAscription "(" `w ":" [`F] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `F
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_-_¬ª
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
        "^"
        (num "2"))
       "-"
       (¬´term_*_¬ª
        (num "2")
        "*"
        (Term.app
         `inner
         [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (num "2")
       "*"
       (Term.app
        `inner
        [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `inner
       [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.typeAscription "(" `w ":" [`F] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `F
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 80, (some 80, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(linarith "linarith" [] (linarithArgsRest [] [] []))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (linarith "linarith" [] (linarithArgsRest [] [] []))
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
       "‚â§"
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
        "-"
        (¬´term_*_¬ª
         (num "2")
         "*"
         (Term.app
          `inner
          [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
       "-"
       (¬´term_*_¬ª
        (num "2")
        "*"
        (Term.app
         `inner
         [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (num "2")
       "*"
       (Term.app
        `inner
        [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `inner
       [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.typeAscription "(" `w ":" [`F] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `F
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `w "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply
       "apply"
       (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nonneg_le_nonneg_of_sq_le_sq [(Term.app `norm_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `norm_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nonneg_le_nonneg_of_sq_le_sq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`w])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `le_cinf·µ¢)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_cinf·µ¢
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `le_antisymm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_antisymm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticLetI_
       "letI"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
         ":="
         (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nonempty [`K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nonempty
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(Tactic.intro "intro" [`h])
         []
         (Std.Tactic.tacticLetI_
          "letI"
          (Term.haveDecl
           (Term.haveIdDecl
            []
            [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
            ":="
            (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
         []
         (Tactic.apply "apply" `le_antisymm)
         []
         (tactic__
          (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
          [(Tactic.apply "apply" `le_cinf·µ¢)
           []
           (Tactic.intro "intro" [`w])
           []
           (Tactic.apply
            "apply"
            (Term.app
             `nonneg_le_nonneg_of_sq_le_sq
             [(Term.paren "(" (Term.app `norm_nonneg [(Term.hole "_")]) ")")]))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl [] [] ":=" (Term.app `h [`w (Term.proj `w "." (fieldIdx "2"))]))))
           []
           (calcTactic
            "calc"
            (calcStep
             (¬´term_‚â§_¬ª
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
              "‚â§"
              (¬´term_-_¬ª
               (¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
               "-"
               (¬´term_*_¬ª
                (num "2")
                "*"
                (Term.app
                 `inner
                 [(Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
                  (Term.paren
                   "("
                   (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
                   ")")]))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(linarith "linarith" [] (linarithArgsRest [] [] []))]))))
            [(calcStep
              (¬´term_‚â§_¬ª
               (Term.hole "_")
               "‚â§"
               (¬´term_+_¬ª
                (¬´term_-_¬ª
                 (¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                  "^"
                  (num "2"))
                 "-"
                 (¬´term_*_¬ª
                  (num "2")
                  "*"
                  (Term.app
                   `inner
                   [(Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
                    (Term.paren
                     "("
                     (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
                     ")")])))
                "+"
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                  "‚Äñ"
                  (¬´term_-_¬ª (Term.typeAscription "(" `w ":" [`F] ")") "-" `v)
                  "‚Äñ")
                 "^"
                 (num "2"))))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sq)] "]") [])
                  []
                  (Tactic.refine' "refine'" (Term.app `le_add_of_nonneg_right [(Term.hole "_")]))
                  []
                  (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))]))))
             (calcStep
              (¬´term_=_¬ª
               (Term.hole "_")
               "="
               (¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                 "‚Äñ"
                 (¬´term_-_¬ª (¬´term_-_¬ª `u "-" `v) "-" (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")"))
                 "‚Äñ")
                "^"
                (num "2")))
              ":="
              `norm_sub_sq.symm)
             (calcStep
              (¬´term_=_¬ª
               (Term.hole "_")
               "="
               (¬´term_*_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")
                "*"
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Mathlib.Tactic.tacticHave_
                   "have"
                   []
                   [(Term.typeSpec
                     ":"
                     (¬´term_=_¬ª
                      (¬´term_-_¬ª
                       (¬´term_-_¬ª `u "-" `v)
                       "-"
                       (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")"))
                      "="
                      (¬´term_-_¬ª `u "-" `w)))])
                  []
                  (Tactic.abel "abel" [] [])
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this) "," (Tactic.rwRule [] `sq)] "]")
                   [])]))))])])
         []
         (tactic__
          (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
          [(Tactic.tacticShow_
            "show"
            (¬´term_‚â§_¬ª
             (Term.paren
              "("
              (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
               "‚®Ö"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
               ", "
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))
              ")")
             "‚â§"
             (Term.app
              (Term.paren
               "("
               (Term.fun
                "fun"
                (Term.basicFun
                 [`w]
                 [(Term.typeSpec ":" `K)]
                 "=>"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
               ")")
              [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")])))
           []
           (Tactic.apply "apply" `cinf·µ¢_le)
           []
           (Mathlib.Tactic.¬´tacticUse_,,¬ª "use" [(num "0")])
           []
           (Std.Tactic.rintro
            "rintro"
            [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `y))
             (Std.Tactic.RCases.rintroPat.one
              (Std.Tactic.RCases.rcasesPat.tuple
               "‚ü®"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                 [])]
               "‚ü©"))]
            [])
           []
           (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))])])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`eq `w `hw])
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `Œ¥
             []
             []
             ":="
             (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
              "‚®Ö"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
              ", "
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `p
             []
             []
             ":="
             (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
              "‚ü™"
              (¬´term_-_¬ª `u "-" `v)
              ", "
              (¬´term_-_¬ª `w "-" `v)
              "‚ü´_‚Ñù"))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `q
             []
             []
             ":="
             (¬´term_^_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
              "^"
              (num "2")))))
          []
          (Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `Nonempty [`K]))]
             ":="
             (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`v "," `hv] "‚ü©")] "‚ü©"))))
          []
          (Mathlib.Tactic.tacticHave_
           "have"
           [`zero_le_Œ¥ []]
           [(Term.typeSpec ":" (¬´term_‚â§_¬ª (num "0") "‚â§" `Œ¥))])
          []
          (Tactic.apply "apply" `le_cinf·µ¢)
          []
          (Tactic.intro "intro" [])
          []
          (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
          []
          (Mathlib.Tactic.tacticHave_
           "have"
           [`Œ¥_le []]
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [`w]
              [(Term.typeSpec ":" `K)]
              ","
              (¬´term_‚â§_¬ª
               `Œ¥
               "‚â§"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))])
          []
          (Tactic.intro "intro" [`w])
          []
          (Tactic.apply "apply" `cinf·µ¢_le)
          []
          (Mathlib.Tactic.¬´tacticUse_,,¬ª
           "use"
           [(Term.typeAscription "(" (num "0") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")])
          []
          (Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.ignore "_"))
            (Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.ignore "_")])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                [])]
              "‚ü©"))]
           [])
          []
          (Tactic.exact "exact" (Term.app `norm_nonneg [(Term.hole "_")]))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Œ¥_le' []]
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                "‚àÄ"
                (Lean.binderIdent `w)
                (¬´binderTerm‚àà_¬ª "‚àà" `K)
                ","
                (¬´term_‚â§_¬ª
                 `Œ¥
                 "‚â§"
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ"))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`w `hw]
               []
               "=>"
               (Term.app `Œ¥_le [(Term.anonymousCtor "‚ü®" [`w "," `hw] "‚ü©")]))))))
          []
          (Mathlib.Tactic.tacticHave_
           "have"
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [`Œ∏]
              [(Term.typeSpec ":" (Data.Real.Basic.term‚Ñù "‚Ñù"))]
              ","
              (Term.arrow
               (¬´term_<_¬ª (num "0") "<" `Œ∏)
               "‚Üí"
               (Term.arrow
                (¬´term_‚â§_¬ª `Œ∏ "‚â§" (num "1"))
                "‚Üí"
                (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))))))])
          []
          (Tactic.intro "intro" [`Œ∏ `hŒ∏‚ÇÅ `hŒ∏‚ÇÇ])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                 "^"
                 (num "2"))
                "‚â§"
                (¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "^"
                   (num "2"))
                  "-"
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª (num "2") "*" `Œ∏)
                   "*"
                   (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                    "‚ü™"
                    (¬´term_-_¬ª `u "-" `v)
                    ", "
                    (¬´term_-_¬ª `w "-" `v)
                    "‚ü´_‚Ñù")))
                 "+"
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                   "^"
                   (num "2"))))))]
             ":="
             (calc
              "calc"
              (calcStep
               (¬´term_‚â§_¬ª
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                 "^"
                 (num "2"))
                "‚â§"
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                  "‚Äñ"
                  (¬´term_-_¬ª
                   `u
                   "-"
                   (¬´term_+_¬ª
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                    "+"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                  "‚Äñ")
                 "^"
                 (num "2")))
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
                   ";"
                   (Tactic.apply
                    "apply"
                    (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
                   []
                   (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") [])
                   ";"
                   (Tactic.apply "apply" `Œ¥_le')
                   []
                   (Tactic.apply "apply" (Term.app `h [`hw `hv]))
                   []
                   (Std.Tactic.exacts
                    "exacts"
                    "["
                    [(Term.app `le_of_lt [`hŒ∏‚ÇÅ])
                     ","
                     (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
                     ","
                     (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
                    "]")]))))
              [(calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (¬´term_-_¬ª
                    (¬´term_-_¬ª `u "-" `v)
                    "-"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
                   "‚Äñ")
                  "^"
                  (num "2")))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª
                          (¬´term_-_¬ª
                           `u
                           "-"
                           (¬´term_+_¬ª
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                            "+"
                            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                          "="
                          (¬´term_-_¬ª
                           (¬´term_-_¬ª `u "-" `v)
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.rwSeq
                            "rw"
                            []
                            (Tactic.rwRuleSeq
                             "["
                             [(Tactic.rwRule [] `smul_sub)
                              ","
                              (Tactic.rwRule [] `sub_smul)
                              ","
                              (Tactic.rwRule [] `one_smul)]
                             "]")
                            [])
                           []
                           (Tactic.simp
                            "simp"
                            []
                            []
                            ["only"]
                            ["["
                             [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                              ","
                              (Tactic.simpLemma [] [] `add_comm)
                              ","
                              (Tactic.simpLemma [] [] `add_left_comm)
                              ","
                              (Tactic.simpLemma [] [] `add_assoc)
                              ","
                              (Tactic.simpLemma [] [] `neg_add_rev)]
                             "]"]
                            [])]))))))
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]")
                     [])]))))
               (calcStep
                (¬´term_=_¬ª
                 (Term.hole "_")
                 "="
                 (¬´term_+_¬ª
                  (¬´term_-_¬ª
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                    "^"
                    (num "2"))
                   "-"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª (num "2") "*" `Œ∏)
                    "*"
                    (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                  "+"
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                   "*"
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                    "^"
                    (num "2")))))
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `norm_sub_sq)
                       ","
                       (Tactic.rwRule [] `inner_smul_right)
                       ","
                       (Tactic.rwRule [] `norm_smul)]
                      "]")
                     [])
                    []
                    (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
                    []
                    (Tactic.tacticShow_
                     "show"
                     (¬´term_=_¬ª
                      (¬´term_+_¬ª
                       (¬´term_-_¬ª
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                        "-"
                        (¬´term_*_¬ª
                         (num "2")
                         "*"
                         (¬´term_*_¬ª
                          `Œ∏
                          "*"
                          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                       "+"
                       (¬´term_*_¬ª
                        (¬´term_*_¬ª
                         (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
                        "*"
                        (¬´term_*_¬ª
                         (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
                      "="
                      (¬´term_+_¬ª
                       (¬´term_-_¬ª
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                        "-"
                        (¬´term_*_¬ª
                         (¬´term_*_¬ª (num "2") "*" `Œ∏)
                         "*"
                         (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                       "+"
                       (¬´term_*_¬ª
                        (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                        "*"
                        (¬´term_*_¬ª
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                         "*"
                         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))))
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
                     [])
                    ";"
                    (Mathlib.Tactic.RingNF.ring "ring")]))))]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`eq‚ÇÅ []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (¬´term_+_¬ª
                 (¬´term_-_¬ª
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                   "^"
                   (num "2"))
                  "-"
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª (num "2") "*" `Œ∏)
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                 "+"
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                  "*"
                  (¬´term_^_¬ª
                   (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                   "^"
                   (num "2"))))
                "="
                (¬´term_+_¬ª
                 (¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                  "^"
                  (num "2"))
                 "+"
                 (¬´term_-_¬ª
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                   "*"
                   (¬´term_^_¬ª
                    (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                    "^"
                    (num "2")))
                  "-"
                  (¬´term_*_¬ª
                   (¬´term_*_¬ª (num "2") "*" `Œ∏)
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.abel "abel" [] [])]))))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `le_add_iff_nonneg_right)]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
          []
          (Mathlib.Tactic.tacticHave_
           "have"
           [`eq‚ÇÇ []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (¬´term_-_¬ª
               (¬´term_*_¬ª
                (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                "*"
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                 "^"
                 (num "2")))
               "-"
               (¬´term_*_¬ª
                (¬´term_*_¬ª (num "2") "*" `Œ∏)
                "*"
                (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
              "="
              (¬´term_*_¬ª
               `Œ∏
               "*"
               (¬´term_-_¬ª
                (¬´term_*_¬ª
                 `Œ∏
                 "*"
                 (¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                  "^"
                  (num "2")))
                "-"
                (¬´term_*_¬ª
                 (num "2")
                 "*"
                 (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))])
          []
          (Mathlib.Tactic.RingNF.ring "ring")
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             []
             ":="
             (Term.app `le_of_sub_nonneg [(Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])]))))
          []
          (Tactic.exact "exact" `this)
          []
          (Classical.¬´tacticBy_cases_:_¬ª "by_cases" [`hq ":"] (¬´term_=_¬ª `q "=" (num "0")))
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
            []
            (Mathlib.Tactic.tacticHave_
             "have"
             []
             [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (num "0")))])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                `this
                [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))))
            []
            (linarith "linarith" [] (linarithArgsRest [] [] []))
            []
            (Tactic.exact "exact" `this)])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Mathlib.Tactic.tacticHave_
             "have"
             [`q_pos []]
             [(Term.typeSpec ":" (¬´term_<_¬ª (num "0") "<" `q))])
            []
            (Tactic.apply "apply" `lt_of_le_of_ne)
            []
            (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))
            []
            (Tactic.intro "intro" [`h])
            []
            (Tactic.exact "exact" (Term.app `hq [`h.symm]))
            []
            (Std.Tactic.byContra "by_contra" [(Lean.binderIdent `hp)])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
            []
            (Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `Œ∏
               []
               []
               ":="
               (Term.app
                `min
                [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
                 (¬´term_/_¬ª `p "/" `q)]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`eq‚ÇÅ []]
               [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
               ":="
               (calc
                "calc"
                (calcStep
                 (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
                 ":="
                 (Term.app
                  `mul_le_mul_of_nonneg_right
                  [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
                   (Term.app `sq_nonneg [(Term.hole "_")])]))
                [(calcStep
                  (¬´term_=_¬ª (Term.hole "_") "=" `p)
                  ":="
                  (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" `p))]
               ":="
               (calc
                "calc"
                (calcStep
                 (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.refine'
                      "refine'"
                      (Term.app
                       `this
                       [`Œ∏
                        (Term.app
                         `lt_min
                         [(Term.byTactic
                           "by"
                           (Tactic.tacticSeq
                            (Tactic.tacticSeq1Indented
                             [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                          (Term.app `div_pos [`hp `q_pos])])
                        (Term.byTactic
                         "by"
                         (Tactic.tacticSeq
                          (Tactic.tacticSeq1Indented
                           [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))]))))
                [(calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
            []
            (linarith "linarith" [] (linarithArgsRest [] [] []))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Mathlib.Tactic.tacticHave_
         "have"
         [`q_pos []]
         [(Term.typeSpec ":" (¬´term_<_¬ª (num "0") "<" `q))])
        []
        (Tactic.apply "apply" `lt_of_le_of_ne)
        []
        (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))
        []
        (Tactic.intro "intro" [`h])
        []
        (Tactic.exact "exact" (Term.app `hq [`h.symm]))
        []
        (Std.Tactic.byContra "by_contra" [(Lean.binderIdent `hp)])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
        []
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `Œ∏
           []
           []
           ":="
           (Term.app
            `min
            [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
             (¬´term_/_¬ª `p "/" `q)]))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`eq‚ÇÅ []]
           [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
           ":="
           (calc
            "calc"
            (calcStep
             (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
             ":="
             (Term.app
              `mul_le_mul_of_nonneg_right
              [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
               (Term.app `sq_nonneg [(Term.hole "_")])]))
            [(calcStep
              (¬´term_=_¬ª (Term.hole "_") "=" `p)
              ":="
              (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" `p))]
           ":="
           (calc
            "calc"
            (calcStep
             (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `this
                   [`Œ∏
                    (Term.app
                     `lt_min
                     [(Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                      (Term.app `div_pos [`hp `q_pos])])
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))]))))
            [(calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
        []
        (linarith "linarith" [] (linarithArgsRest [] [] []))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (linarith "linarith" [] (linarithArgsRest [] [] []))
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" `p))]
         ":="
         (calc
          "calc"
          (calcStep
           (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.refine'
                "refine'"
                (Term.app
                 `this
                 [`Œ∏
                  (Term.app
                   `lt_min
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                    (Term.app `div_pos [`hp `q_pos])])
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))]))))
          [(calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.refine'
             "refine'"
             (Term.app
              `this
              [`Œ∏
               (Term.app
                `lt_min
                [(Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                 (Term.app `div_pos [`hp `q_pos])])
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))]))))
       [(calcStep (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p) ":=" `eq‚ÇÅ)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª (Term.hole "_") "‚â§" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `this
            [`Œ∏
             (Term.app
              `lt_min
              [(Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
               (Term.app `div_pos [`hp `q_pos])])
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `this
        [`Œ∏
         (Term.app
          `lt_min
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
           (Term.app `div_pos [`hp `q_pos])])
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `this
       [`Œ∏
        (Term.app
         `lt_min
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
          (Term.app `div_pos [`hp `q_pos])])
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `lt_min
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        (Term.app `div_pos [`hp `q_pos])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `div_pos [`hp `q_pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q_pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `div_pos [`hp `q_pos]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_min
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `lt_min
      [(Term.paren
        "("
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        ")")
       (Term.paren "(" (Term.app `div_pos [`hp `q_pos]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" (¬´term_*_¬ª `Œ∏ "*" `q))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª `Œ∏ "*" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª (num "2") "*" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª (¬´term_*_¬ª (num "2") "*" `p) "‚â§" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª (num "2") "*" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÅ []]
         [(Term.typeSpec ":" (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p))]
         ":="
         (calc
          "calc"
          (calcStep
           (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
           ":="
           (Term.app
            `mul_le_mul_of_nonneg_right
            [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
             (Term.app `sq_nonneg [(Term.hole "_")])]))
          [(calcStep
            (¬´term_=_¬ª (Term.hole "_") "=" `p)
            ":="
            (Term.app `div_mul_cancel [(Term.hole "_") `hq]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
        ":="
        (Term.app
         `mul_le_mul_of_nonneg_right
         [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
          (Term.app `sq_nonneg [(Term.hole "_")])]))
       [(calcStep
         (¬´term_=_¬ª (Term.hole "_") "=" `p)
         ":="
         (Term.app `div_mul_cancel [(Term.hole "_") `hq]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `div_mul_cancel [(Term.hole "_") `hq])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hq
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_mul_cancel
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª (Term.hole "_") "=" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app
       `mul_le_mul_of_nonneg_right
       [(Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
        (Term.app `sq_nonneg [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sq_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sq_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `sq_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `min_le_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul_of_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (¬´term_/_¬ª `p "/" `q) "*" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_/_¬ª `p "/" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª `Œ∏ "*" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª (¬´term_*_¬ª `Œ∏ "*" `q) "‚â§" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_*_¬ª `Œ∏ "*" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticLet_
       "let"
       (Term.letDecl
        (Term.letIdDecl
         `Œ∏
         []
         []
         ":="
         (Term.app
          `min
          [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           (¬´term_/_¬ª `p "/" `q)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `min
       [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        (¬´term_/_¬ª `p "/" `q)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_/_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_/_¬ª `p "/" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_/_¬ª `p "/" `q) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `min
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `not_le)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hp] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `not_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.byContra "by_contra" [(Lean.binderIdent `hp)])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `hq [`h.symm]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hq [`h.symm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h.symm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `sq_nonneg [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sq_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sq_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `lt_of_le_of_ne)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `lt_of_le_of_ne
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticHave_
       "have"
       [`q_pos []]
       [(Term.typeSpec ":" (¬´term_<_¬ª (num "0") "<" `q))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_<_¬ª (num "0") "<" `q)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `q
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
        []
        (Mathlib.Tactic.tacticHave_ "have" [] [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (num "0")))])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           []
           ":="
           (Term.app
            `this
            [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))))
        []
        (linarith "linarith" [] (linarithArgsRest [] [] []))
        []
        (Tactic.exact "exact" `this)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `this)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (linarith "linarith" [] (linarithArgsRest [] [] []))
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app
          `this
          [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `this
       [(Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.typeAscription "(" (num "1") ":" [(Data.Real.Basic.term‚Ñù "‚Ñù")] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.term‚Ñù "‚Ñù")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticHave_ "have" [] [(Term.typeSpec ":" (¬´term_‚â§_¬ª `p "‚â§" (num "0")))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª `p "‚â§" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hq)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Classical.¬´tacticBy_cases_:_¬ª "by_cases" [`hq ":"] (¬´term_=_¬ª `q "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª `q "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `q
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `this)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app `le_of_sub_nonneg [(Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_of_sub_nonneg [(Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hŒ∏‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nonneg_of_mul_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nonneg_of_mul_nonneg_right [`this `hŒ∏‚ÇÅ])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_of_sub_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `eq‚ÇÇ)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÇ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.RingNF.ring "ring")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticHave_
       "have"
       [`eq‚ÇÇ []]
       [(Term.typeSpec
         ":"
         (¬´term_=_¬ª
          (¬´term_-_¬ª
           (¬´term_*_¬ª
            (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
            "*"
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
             "^"
             (num "2")))
           "-"
           (¬´term_*_¬ª
            (¬´term_*_¬ª (num "2") "*" `Œ∏)
            "*"
            (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
          "="
          (¬´term_*_¬ª
           `Œ∏
           "*"
           (¬´term_-_¬ª
            (¬´term_*_¬ª
             `Œ∏
             "*"
             (¬´term_^_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
              "^"
              (num "2")))
            "-"
            (¬´term_*_¬ª
             (num "2")
             "*"
             (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
         "*"
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
          "^"
          (num "2")))
        "-"
        (¬´term_*_¬ª
         (¬´term_*_¬ª (num "2") "*" `Œ∏)
         "*"
         (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
       "="
       (¬´term_*_¬ª
        `Œ∏
        "*"
        (¬´term_-_¬ª
         (¬´term_*_¬ª
          `Œ∏
          "*"
          (¬´term_^_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
           "^"
           (num "2")))
         "-"
         (¬´term_*_¬ª
          (num "2")
          "*"
          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       `Œ∏
       "*"
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         `Œ∏
         "*"
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
          "^"
          (num "2")))
        "-"
        (¬´term_*_¬ª (num "2") "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        `Œ∏
        "*"
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
         "^"
         (num "2")))
       "-"
       (¬´term_*_¬ª (num "2") "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª (num "2") "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       `Œ∏
       "*"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "^"
        (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_-_¬ª
      (¬´term_*_¬ª
       `Œ∏
       "*"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "^"
        (num "2")))
      "-"
      (¬´term_*_¬ª
       (num "2")
       "*"
       (Term.app
        `inner
        [(Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")") (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
        "*"
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
         "^"
         (num "2")))
       "-"
       (¬´term_*_¬ª
        (¬´term_*_¬ª (num "2") "*" `Œ∏)
        "*"
        (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª (num "2") "*" `Œ∏)
       "*"
       (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "2") "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
       "*"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "^"
        (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `eq‚ÇÅ) "," (Tactic.rwRule [] `le_add_iff_nonneg_right)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_add_iff_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`eq‚ÇÅ []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (¬´term_+_¬ª
             (¬´term_-_¬ª
              (¬´term_^_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
               "^"
               (num "2"))
              "-"
              (¬´term_*_¬ª
               (¬´term_*_¬ª (num "2") "*" `Œ∏)
               "*"
               (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
             "+"
             (¬´term_*_¬ª
              (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
              "*"
              (¬´term_^_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
               "^"
               (num "2"))))
            "="
            (¬´term_+_¬ª
             (¬´term_^_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
              "^"
              (num "2"))
             "+"
             (¬´term_-_¬ª
              (¬´term_*_¬ª
               (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
               "*"
               (¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                "^"
                (num "2")))
              "-"
              (¬´term_*_¬ª
               (¬´term_*_¬ª (num "2") "*" `Œ∏)
               "*"
               (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.abel "abel" [] [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.abel "abel" [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_+_¬ª
        (¬´term_-_¬ª
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "^"
          (num "2"))
         "-"
         (¬´term_*_¬ª
          (¬´term_*_¬ª (num "2") "*" `Œ∏)
          "*"
          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
        "+"
        (¬´term_*_¬ª
         (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
         "*"
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
          "^"
          (num "2"))))
       "="
       (¬´term_+_¬ª
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
         "^"
         (num "2"))
        "+"
        (¬´term_-_¬ª
         (¬´term_*_¬ª
          (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
          "*"
          (¬´term_^_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
           "^"
           (num "2")))
         "-"
         (¬´term_*_¬ª
          (¬´term_*_¬ª (num "2") "*" `Œ∏)
          "*"
          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
        "^"
        (num "2"))
       "+"
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
         "*"
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
          "^"
          (num "2")))
        "-"
        (¬´term_*_¬ª
         (¬´term_*_¬ª (num "2") "*" `Œ∏)
         "*"
         (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
        "*"
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
         "^"
         (num "2")))
       "-"
       (¬´term_*_¬ª
        (¬´term_*_¬ª (num "2") "*" `Œ∏)
        "*"
        (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª (num "2") "*" `Œ∏)
       "*"
       (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "2") "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
       "*"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "^"
        (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_-_¬ª
      (¬´term_*_¬ª
       (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
       "*"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "^"
        (num "2")))
      "-"
      (¬´term_*_¬ª
       (¬´term_*_¬ª (num "2") "*" `Œ∏)
       "*"
       (Term.app
        `inner
        [(Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")") (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 80, (some 80, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_+_¬ª
       (¬´term_-_¬ª
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
         "^"
         (num "2"))
        "-"
        (¬´term_*_¬ª
         (¬´term_*_¬ª (num "2") "*" `Œ∏)
         "*"
         (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
       "+"
       (¬´term_*_¬ª
        (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
        "*"
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
         "^"
         (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
       "*"
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "^"
        (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_-_¬ª
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
        "^"
        (num "2"))
       "-"
       (¬´term_*_¬ª
        (¬´term_*_¬ª (num "2") "*" `Œ∏)
        "*"
        (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª (num "2") "*" `Œ∏)
       "*"
       (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "2") "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 80, (some 80, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
             "^"
             (num "2"))
            "‚â§"
            (¬´term_+_¬ª
             (¬´term_-_¬ª
              (¬´term_^_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
               "^"
               (num "2"))
              "-"
              (¬´term_*_¬ª
               (¬´term_*_¬ª (num "2") "*" `Œ∏)
               "*"
               (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                "‚ü™"
                (¬´term_-_¬ª `u "-" `v)
                ", "
                (¬´term_-_¬ª `w "-" `v)
                "‚ü´_‚Ñù")))
             "+"
             (¬´term_*_¬ª
              (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
              "*"
              (¬´term_^_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
               "^"
               (num "2"))))))]
         ":="
         (calc
          "calc"
          (calcStep
           (¬´term_‚â§_¬ª
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
             "^"
             (num "2"))
            "‚â§"
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
              "‚Äñ"
              (¬´term_-_¬ª
               `u
               "-"
               (¬´term_+_¬ª
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                "+"
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
              "‚Äñ")
             "^"
             (num "2")))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
               ";"
               (Tactic.apply
                "apply"
                (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
               []
               (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") [])
               ";"
               (Tactic.apply "apply" `Œ¥_le')
               []
               (Tactic.apply "apply" (Term.app `h [`hw `hv]))
               []
               (Std.Tactic.exacts
                "exacts"
                "["
                [(Term.app `le_of_lt [`hŒ∏‚ÇÅ])
                 ","
                 (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
                 ","
                 (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
                "]")]))))
          [(calcStep
            (¬´term_=_¬ª
             (Term.hole "_")
             "="
             (¬´term_^_¬ª
              (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
               "‚Äñ"
               (¬´term_-_¬ª
                (¬´term_-_¬ª `u "-" `v)
                "-"
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
               "‚Äñ")
              "^"
              (num "2")))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   []
                   [(Term.typeSpec
                     ":"
                     (¬´term_=_¬ª
                      (¬´term_-_¬ª
                       `u
                       "-"
                       (¬´term_+_¬ª
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                        "+"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                      "="
                      (¬´term_-_¬ª
                       (¬´term_-_¬ª `u "-" `v)
                       "-"
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq
                         "["
                         [(Tactic.rwRule [] `smul_sub)
                          ","
                          (Tactic.rwRule [] `sub_smul)
                          ","
                          (Tactic.rwRule [] `one_smul)]
                         "]")
                        [])
                       []
                       (Tactic.simp
                        "simp"
                        []
                        []
                        ["only"]
                        ["["
                         [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                          ","
                          (Tactic.simpLemma [] [] `add_comm)
                          ","
                          (Tactic.simpLemma [] [] `add_left_comm)
                          ","
                          (Tactic.simpLemma [] [] `add_assoc)
                          ","
                          (Tactic.simpLemma [] [] `neg_add_rev)]
                         "]"]
                        [])]))))))
                []
                (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]") [])]))))
           (calcStep
            (¬´term_=_¬ª
             (Term.hole "_")
             "="
             (¬´term_+_¬ª
              (¬´term_-_¬ª
               (¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                "^"
                (num "2"))
               "-"
               (¬´term_*_¬ª
                (¬´term_*_¬ª (num "2") "*" `Œ∏)
                "*"
                (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
              "+"
              (¬´term_*_¬ª
               (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
               "*"
               (¬´term_^_¬ª
                (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                "^"
                (num "2")))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `norm_sub_sq)
                   ","
                   (Tactic.rwRule [] `inner_smul_right)
                   ","
                   (Tactic.rwRule [] `norm_smul)]
                  "]")
                 [])
                []
                (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
                []
                (Tactic.tacticShow_
                 "show"
                 (¬´term_=_¬ª
                  (¬´term_+_¬ª
                   (¬´term_-_¬ª
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                    "-"
                    (¬´term_*_¬ª
                     (num "2")
                     "*"
                     (¬´term_*_¬ª
                      `Œ∏
                      "*"
                      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                   "+"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª
                     (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
                    "*"
                    (¬´term_*_¬ª
                     (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
                  "="
                  (¬´term_+_¬ª
                   (¬´term_-_¬ª
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                    "-"
                    (¬´term_*_¬ª
                     (¬´term_*_¬ª (num "2") "*" `Œ∏)
                     "*"
                     (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                   "+"
                   (¬´term_*_¬ª
                    (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                    "*"
                    (¬´term_*_¬ª
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                     "*"
                     (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))))
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
                 [])
                ";"
                (Mathlib.Tactic.RingNF.ring "ring")]))))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        (¬´term_‚â§_¬ª
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "^"
          (num "2"))
         "‚â§"
         (¬´term_^_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
           "‚Äñ"
           (¬´term_-_¬ª
            `u
            "-"
            (¬´term_+_¬ª
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
             "+"
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
           "‚Äñ")
          "^"
          (num "2")))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
            ";"
            (Tactic.apply
             "apply"
             (Term.app `mul_self_le_mul_self [(Term.app `norm_nonneg [(Term.hole "_")])]))
            []
            (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Eq)] "]") [])
            ";"
            (Tactic.apply "apply" `Œ¥_le')
            []
            (Tactic.apply "apply" (Term.app `h [`hw `hv]))
            []
            (Std.Tactic.exacts
             "exacts"
             "["
             [(Term.app `le_of_lt [`hŒ∏‚ÇÅ])
              ","
              (Term.app (Term.proj `sub_nonneg "." (fieldIdx "2")) [`hŒ∏‚ÇÇ])
              ","
              (Term.app `add_sub_cancel'_right [(Term.hole "_") (Term.hole "_")])]
             "]")]))))
       [(calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_^_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (¬´term_-_¬ª
             (¬´term_-_¬ª `u "-" `v)
             "-"
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))
            "‚Äñ")
           "^"
           (num "2")))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (¬´term_-_¬ª
                    `u
                    "-"
                    (¬´term_+_¬ª
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " `w)
                     "+"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term_-_¬ª (num "1") "-" `Œ∏) " ‚Ä¢ " `v)))
                   "="
                   (¬´term_-_¬ª
                    (¬´term_-_¬ª `u "-" `v)
                    "-"
                    (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `Œ∏ " ‚Ä¢ " (¬´term_-_¬ª `w "-" `v)))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `smul_sub)
                       ","
                       (Tactic.rwRule [] `sub_smul)
                       ","
                       (Tactic.rwRule [] `one_smul)]
                      "]")
                     [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     ["only"]
                     ["["
                      [(Tactic.simpLemma [] [] `sub_eq_add_neg)
                       ","
                       (Tactic.simpLemma [] [] `add_comm)
                       ","
                       (Tactic.simpLemma [] [] `add_left_comm)
                       ","
                       (Tactic.simpLemma [] [] `add_assoc)
                       ","
                       (Tactic.simpLemma [] [] `neg_add_rev)]
                      "]"]
                     [])]))))))
             []
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `this)] "]") [])]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_+_¬ª
           (¬´term_-_¬ª
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
             "^"
             (num "2"))
            "-"
            (¬´term_*_¬ª
             (¬´term_*_¬ª (num "2") "*" `Œ∏)
             "*"
             (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
           "+"
           (¬´term_*_¬ª
            (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
            "*"
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
             "^"
             (num "2")))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `norm_sub_sq)
                ","
                (Tactic.rwRule [] `inner_smul_right)
                ","
                (Tactic.rwRule [] `norm_smul)]
               "]")
              [])
             []
             (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
             []
             (Tactic.tacticShow_
              "show"
              (¬´term_=_¬ª
               (¬´term_+_¬ª
                (¬´term_-_¬ª
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                 "-"
                 (¬´term_*_¬ª
                  (num "2")
                  "*"
                  (¬´term_*_¬ª
                   `Œ∏
                   "*"
                   (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
                "+"
                (¬´term_*_¬ª
                 (¬´term_*_¬ª
                  (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
                 "*"
                 (¬´term_*_¬ª
                  (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
               "="
               (¬´term_+_¬ª
                (¬´term_-_¬ª
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
                 "-"
                 (¬´term_*_¬ª
                  (¬´term_*_¬ª (num "2") "*" `Œ∏)
                  "*"
                  (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
                "+"
                (¬´term_*_¬ª
                 (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
                 "*"
                 (¬´term_*_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
                  "*"
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
              [])
             ";"
             (Mathlib.Tactic.RingNF.ring "ring")]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `norm_sub_sq)
             ","
             (Tactic.rwRule [] `inner_smul_right)
             ","
             (Tactic.rwRule [] `norm_smul)]
            "]")
           [])
          []
          (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `sq)] "]"] [])
          []
          (Tactic.tacticShow_
           "show"
           (¬´term_=_¬ª
            (¬´term_+_¬ª
             (¬´term_-_¬ª
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
              "-"
              (¬´term_*_¬ª
               (num "2")
               "*"
               (¬´term_*_¬ª `Œ∏ "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
             "+"
             (¬´term_*_¬ª
              (¬´term_*_¬ª
               (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
              "*"
              (¬´term_*_¬ª
               (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
            "="
            (¬´term_+_¬ª
             (¬´term_-_¬ª
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
              "-"
              (¬´term_*_¬ª
               (¬´term_*_¬ª (num "2") "*" `Œ∏)
               "*"
               (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
             "+"
             (¬´term_*_¬ª
              (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
              "*"
              (¬´term_*_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
               "*"
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
           [])
          ";"
          (Mathlib.Tactic.RingNF.ring "ring")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.RingNF.ring "ring")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `abs_of_pos [`hŒ∏‚ÇÅ]))] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs_of_pos [`hŒ∏‚ÇÅ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hŒ∏‚ÇÅ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs_of_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticShow_
       "show"
       (¬´term_=_¬ª
        (¬´term_+_¬ª
         (¬´term_-_¬ª
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
          "-"
          (¬´term_*_¬ª
           (num "2")
           "*"
           (¬´term_*_¬ª `Œ∏ "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
         "+"
         (¬´term_*_¬ª
          (¬´term_*_¬ª
           (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
          "*"
          (¬´term_*_¬ª
           (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
        "="
        (¬´term_+_¬ª
         (¬´term_-_¬ª
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
          "-"
          (¬´term_*_¬ª
           (¬´term_*_¬ª (num "2") "*" `Œ∏)
           "*"
           (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
         "+"
         (¬´term_*_¬ª
          (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
          "*"
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_+_¬ª
        (¬´term_-_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
         "-"
         (¬´term_*_¬ª
          (num "2")
          "*"
          (¬´term_*_¬ª `Œ∏ "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
        "+"
        (¬´term_*_¬ª
         (¬´term_*_¬ª
          (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
         "*"
         (¬´term_*_¬ª
          (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
       "="
       (¬´term_+_¬ª
        (¬´term_-_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
         "-"
         (¬´term_*_¬ª
          (¬´term_*_¬ª (num "2") "*" `Œ∏)
          "*"
          (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
        "+"
        (¬´term_*_¬ª
         (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
         "*"
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_+_¬ª
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
        "-"
        (¬´term_*_¬ª
         (¬´term_*_¬ª (num "2") "*" `Œ∏)
         "*"
         (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
       "+"
       (¬´term_*_¬ª
        (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
        "*"
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
       "*"
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_*_¬ª
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
      "*"
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª `Œ∏ "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_-_¬ª
       (¬´term_*_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
       "-"
       (¬´term_*_¬ª
        (¬´term_*_¬ª (num "2") "*" `Œ∏)
        "*"
        (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª (num "2") "*" `Œ∏)
       "*"
       (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `w "-" `v) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `u "-" `v) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (¬´term_*_¬ª (num "2") "*" `Œ∏)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 71, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_*_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_+_¬ª
       (¬´term_-_¬ª
        (¬´term_*_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ"))
        "-"
        (¬´term_*_¬ª
         (num "2")
         "*"
         (¬´term_*_¬ª `Œ∏ "*" (Term.app `inner [(¬´term_-_¬ª `u "-" `v) (¬´term_-_¬ª `w "-" `v)]))))
       "+"
       (¬´term_*_¬ª
        (¬´term_*_¬ª
         (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
        "*"
        (¬´term_*_¬ª
         (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
         "*"
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (¬´term_*_¬ª
        (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
       "*"
       (¬´term_*_¬ª
        (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
        "*"
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_*_¬ª
       (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
       "*"
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `w "-" `v) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `w "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app (Analysis.InnerProductSpace.Projection.termabsR "absR") [`Œ∏])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ∏
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Analysis.InnerProductSpace.Projection.termabsR "absR")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.termabsR', expected 'Analysis.InnerProductSpace.Projection.termabsR._@.Analysis.InnerProductSpace.Projection._hyg.71'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Characterization of minimizers for the projection on a convex set in a real inner product
    space. -/
  theorem
    norm_eq_infi_iff_real_inner_le_zero
    { K : Set F } ( h : Convex ‚Ñù K ) { u : F } { v : F } ( hv : v ‚àà K )
      : ‚Äñ u - v ‚Äñ = ‚®Ö w : K , ‚Äñ u - w ‚Äñ ‚Üî ‚àÄ w ‚àà K , ‚ü™ u - v , w - v ‚ü´_‚Ñù ‚â§ 0
    :=
      Iff.intro
        by
            intro eq w hw
              let Œ¥ := ‚®Ö w : K , ‚Äñ u - w ‚Äñ
              let p := ‚ü™ u - v , w - v ‚ü´_‚Ñù
              let q := ‚Äñ w - v ‚Äñ ^ 2
              letI : Nonempty K := ‚ü® ‚ü® v , hv ‚ü© ‚ü©
              have zero_le_Œ¥ : 0 ‚â§ Œ¥
              apply le_cinf·µ¢
              intro
              exact norm_nonneg _
              have Œ¥_le : ‚àÄ w : K , Œ¥ ‚â§ ‚Äñ u - w ‚Äñ
              intro w
              apply cinf·µ¢_le
              use ( 0 : ‚Ñù )
              rintro _ ‚ü® _ , rfl ‚ü©
              exact norm_nonneg _
              have Œ¥_le' : ‚àÄ w ‚àà K , Œ¥ ‚â§ ‚Äñ u - w ‚Äñ := fun w hw => Œ¥_le ‚ü® w , hw ‚ü©
              have : ‚àÄ Œ∏ : ‚Ñù , 0 < Œ∏ ‚Üí Œ∏ ‚â§ 1 ‚Üí 2 * p ‚â§ Œ∏ * q
              intro Œ∏ hŒ∏‚ÇÅ hŒ∏‚ÇÇ
              have
                :
                    ‚Äñ u - v ‚Äñ ^ 2
                      ‚â§
                      ‚Äñ u - v ‚Äñ ^ 2 - 2 * Œ∏ * ‚ü™ u - v , w - v ‚ü´_‚Ñù + Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ ^ 2
                  :=
                  calc
                    ‚Äñ u - v ‚Äñ ^ 2 ‚â§ ‚Äñ u - Œ∏ ‚Ä¢ w + 1 - Œ∏ ‚Ä¢ v ‚Äñ ^ 2
                      :=
                      by
                        simp only [ sq ]
                          ;
                          apply mul_self_le_mul_self norm_nonneg _
                          rw [ Eq ]
                          ;
                          apply Œ¥_le'
                          apply h hw hv
                          exacts [ le_of_lt hŒ∏‚ÇÅ , sub_nonneg . 2 hŒ∏‚ÇÇ , add_sub_cancel'_right _ _ ]
                    _ = ‚Äñ u - v - Œ∏ ‚Ä¢ w - v ‚Äñ ^ 2
                        :=
                        by
                          have
                              : u - Œ∏ ‚Ä¢ w + 1 - Œ∏ ‚Ä¢ v = u - v - Œ∏ ‚Ä¢ w - v
                                :=
                                by
                                  rw [ smul_sub , sub_smul , one_smul ]
                                    simp
                                      only
                                      [
                                        sub_eq_add_neg
                                          ,
                                          add_comm
                                          ,
                                          add_left_comm
                                          ,
                                          add_assoc
                                          ,
                                          neg_add_rev
                                        ]
                            rw [ this ]
                      _ = ‚Äñ u - v ‚Äñ ^ 2 - 2 * Œ∏ * inner u - v w - v + Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ ^ 2
                        :=
                        by
                          rw [ norm_sub_sq , inner_smul_right , norm_smul ]
                            simp only [ sq ]
                            show
                              ‚Äñ u - v ‚Äñ * ‚Äñ u - v ‚Äñ - 2 * Œ∏ * inner u - v w - v
                                  +
                                  absR Œ∏ * ‚Äñ w - v ‚Äñ * absR Œ∏ * ‚Äñ w - v ‚Äñ
                                =
                                ‚Äñ u - v ‚Äñ * ‚Äñ u - v ‚Äñ - 2 * Œ∏ * inner u - v w - v
                                  +
                                  Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ * ‚Äñ w - v ‚Äñ
                            rw [ abs_of_pos hŒ∏‚ÇÅ ]
                            ;
                            ring
              have
                eq‚ÇÅ
                  :
                    ‚Äñ u - v ‚Äñ ^ 2 - 2 * Œ∏ * inner u - v w - v + Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ ^ 2
                      =
                      ‚Äñ u - v ‚Äñ ^ 2 + Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ ^ 2 - 2 * Œ∏ * inner u - v w - v
                  :=
                  by abel
              rw [ eq‚ÇÅ , le_add_iff_nonneg_right ] at this
              have
                eq‚ÇÇ
                :
                  Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ ^ 2 - 2 * Œ∏ * inner u - v w - v
                    =
                    Œ∏ * Œ∏ * ‚Äñ w - v ‚Äñ ^ 2 - 2 * inner u - v w - v
              ring
              rw [ eq‚ÇÇ ] at this
              have := le_of_sub_nonneg nonneg_of_mul_nonneg_right this hŒ∏‚ÇÅ
              exact this
              by_cases hq : q = 0
              ¬∑
                rw [ hq ] at this
                  have : p ‚â§ 0
                  have := this ( 1 : ‚Ñù ) by norm_num by norm_num
                  linarith
                  exact this
              ¬∑
                have q_pos : 0 < q
                  apply lt_of_le_of_ne
                  exact sq_nonneg _
                  intro h
                  exact hq h.symm
                  by_contra hp
                  rw [ not_le ] at hp
                  let Œ∏ := min ( 1 : ‚Ñù ) p / q
                  have
                    eq‚ÇÅ
                      : Œ∏ * q ‚â§ p
                      :=
                      calc
                        Œ∏ * q ‚â§ p / q * q := mul_le_mul_of_nonneg_right min_le_right _ _ sq_nonneg _
                        _ = p := div_mul_cancel _ hq
                  have
                    : 2 * p ‚â§ p
                      :=
                      calc
                        2 * p ‚â§ Œ∏ * q
                          :=
                          by refine' this Œ∏ lt_min by norm_num div_pos hp q_pos by norm_num
                        _ ‚â§ p := eq‚ÇÅ
                  linarith
          by
            intro h
              letI : Nonempty K := ‚ü® ‚ü® v , hv ‚ü© ‚ü©
              apply le_antisymm
              ¬∑
                apply le_cinf·µ¢
                  intro w
                  apply nonneg_le_nonneg_of_sq_le_sq norm_nonneg _
                  have := h w w . 2
                  calc
                    ‚Äñ u - v ‚Äñ * ‚Äñ u - v ‚Äñ ‚â§ ‚Äñ u - v ‚Äñ * ‚Äñ u - v ‚Äñ - 2 * inner u - v ( w : F ) - v
                      :=
                      by linarith
                    _ ‚â§ ‚Äñ u - v ‚Äñ ^ 2 - 2 * inner u - v ( w : F ) - v + ‚Äñ ( w : F ) - v ‚Äñ ^ 2
                        :=
                        by rw [ sq ] refine' le_add_of_nonneg_right _ exact sq_nonneg _
                      _ = ‚Äñ u - v - w - v ‚Äñ ^ 2 := norm_sub_sq.symm
                      _ = ‚Äñ u - w ‚Äñ * ‚Äñ u - w ‚Äñ
                        :=
                        by have : u - v - w - v = u - w abel rw [ this , sq ]
              ¬∑
                show ‚®Ö w : K , ‚Äñ u - w ‚Äñ ‚â§ fun w : K => ‚Äñ u - w ‚Äñ ‚ü® v , hv ‚ü©
                  apply cinf·µ¢_le
                  use 0
                  rintro y ‚ü® z , rfl ‚ü©
                  exact norm_nonneg _
#align norm_eq_infi_iff_real_inner_le_zero norm_eq_infi_iff_real_inner_le_zero

variable (K : Submodule ùïú E)

/-- Existence of projections on complete subspaces.
Let `u` be a point in an inner product space, and let `K` be a nonempty complete subspace.
Then there exists a (unique) `v` in `K` that minimizes the distance `‚Äñu - v‚Äñ` to `u`.
This point `v` is usually called the orthogonal projection of `u` onto `K`.
-/
theorem exists_norm_eq_infi_of_complete_subspace (h : IsComplete (‚ÜëK : Set E)) :
    ‚àÄ u : E, ‚àÉ v ‚àà K, ‚Äñu - v‚Äñ = ‚®Ö w : (K : Set E), ‚Äñu - w‚Äñ :=
  by
  letI : InnerProductSpace ‚Ñù E := InnerProductSpace.isROrCToReal ùïú E
  letI : Module ‚Ñù E := RestrictScalars.module ‚Ñù ùïú E
  let K' : Submodule ‚Ñù E := Submodule.restrictScalars ‚Ñù K
  exact exists_norm_eq_infi_of_complete_convex ‚ü®0, K'.zero_mem‚ü© h K'.convex
#align exists_norm_eq_infi_of_complete_subspace exists_norm_eq_infi_of_complete_subspace

/-- Characterization of minimizers in the projection on a subspace, in the real case.
Let `u` be a point in a real inner product space, and let `K` be a nonempty subspace.
Then point `v` minimizes the distance `‚Äñu - v‚Äñ` over points in `K` if and only if
for all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`).
This is superceded by `norm_eq_infi_iff_inner_eq_zero` that gives the same conclusion over
any `is_R_or_C` field.
-/
theorem norm_eq_infi_iff_real_inner_eq_zero (K : Submodule ‚Ñù F) {u : F} {v : F} (hv : v ‚àà K) :
    (‚Äñu - v‚Äñ = ‚®Ö w : (‚ÜëK : Set F), ‚Äñu - w‚Äñ) ‚Üî ‚àÄ w ‚àà K, ‚ü™u - v, w‚ü´_‚Ñù = 0 :=
  Iff.intro
    (by
      intro h
      have h : ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0 :=
        by
        rwa [norm_eq_infi_iff_real_inner_le_zero] at h
        exacts[K.convex, hv]
      intro w hw
      have le : ‚ü™u - v, w‚ü´_‚Ñù ‚â§ 0
      let w' := w + v
      have : w' ‚àà K := Submodule.add_mem _ hw hv
      have h‚ÇÅ := h w' this
      have h‚ÇÇ : w' - v = w
      simp only [add_neg_cancel_right, sub_eq_add_neg]
      rw [h‚ÇÇ] at h‚ÇÅ
      exact h‚ÇÅ
      have ge : ‚ü™u - v, w‚ü´_‚Ñù ‚â• 0
      let w'' := -w + v
      have : w'' ‚àà K := Submodule.add_mem _ (Submodule.neg_mem _ hw) hv
      have h‚ÇÅ := h w'' this
      have h‚ÇÇ : w'' - v = -w
      simp only [neg_inj, add_neg_cancel_right, sub_eq_add_neg]
      rw [h‚ÇÇ, inner_neg_right] at h‚ÇÅ
      linarith
      exact le_antisymm le GE.ge)
    (by
      intro h
      have : ‚àÄ w ‚àà K, ‚ü™u - v, w - v‚ü´_‚Ñù ‚â§ 0
      intro w hw
      let w' := w - v
      have : w' ‚àà K := Submodule.sub_mem _ hw hv
      have h‚ÇÅ := h w' this
      exact le_of_eq h‚ÇÅ
      rwa [norm_eq_infi_iff_real_inner_le_zero]
      exacts[Submodule.convex _, hv])
#align norm_eq_infi_iff_real_inner_eq_zero norm_eq_infi_iff_real_inner_eq_zero

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Characterization of minimizers in the projection on a subspace.\nLet `u` be a point in an inner product space, and let `K` be a nonempty subspace.\nThen point `v` minimizes the distance `‚Äñu - v‚Äñ` over points in `K` if and only if\nfor all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`)\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `norm_eq_infi_iff_inner_eq_zero [])
      (Command.declSig
       [(Term.implicitBinder "{" [`u] [":" `E] "}")
        (Term.implicitBinder "{" [`v] [":" `E] "}")
        (Term.explicitBinder "(" [`hv] [":" (¬´term_‚àà_¬ª `v "‚àà" `K)] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚Üî_¬ª
         (¬´term_=_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `v) "‚Äñ")
          "="
          (Order.CompleteLattice.¬´term‚®Ö_,_¬ª
           "‚®Ö"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `w) [(group ":" `K)]))
           ", "
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (¬´term_-_¬ª `u "-" `w) "‚Äñ")))
         "‚Üî"
         (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
          "‚àÄ"
          (Lean.binderIdent `w)
          (¬´binderTerm‚àà_¬ª "‚àà" `K)
          ","
          (¬´term_=_¬ª
           (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
           "="
           (num "0"))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.tacticLetI_
            "letI"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
              ":="
              (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
           []
           (Std.Tactic.tacticLetI_
            "letI"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
              ":="
              (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
           []
           (Tactic.tacticLet_
            "let"
            (Term.letDecl
             (Term.letIdDecl
              `K'
              []
              [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
              ":="
              (Term.app `K.restrict_scalars [(Data.Real.Basic.term‚Ñù "‚Ñù")]))))
           []
           (Tactic.constructor "constructor")
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.intro "intro" [`H])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`A []]
                [(Term.typeSpec
                  ":"
                  (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                   "‚àÄ"
                   (Lean.binderIdent `w)
                   (¬´binderTerm‚àà_¬ª "‚àà" `K)
                   ","
                   (¬´term_=_¬ª
                    (Term.app
                     `re
                     [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                       "‚ü™"
                       (¬´term_-_¬ª `u "-" `v)
                       ", "
                       `w
                       "‚ü´")])
                    "="
                    (num "0"))))]
                ":="
                (Term.app
                 (Term.proj
                  (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
                  "."
                  (fieldIdx "1"))
                 [`H]))))
             []
             (Tactic.intro "intro" [`w `hw])
             []
             (Tactic.apply "apply" `ext)
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.simp
                "simp"
                []
                []
                []
                ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"]
                [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Mathlib.Tactic.tacticSymm_ "symm" [])
               []
               (calcTactic
                "calc"
                (calcStep
                 (¬´term_=_¬ª
                  (Term.app `im [(Term.typeAscription "(" (num "0") ":" [`ùïú] ")")])
                  "="
                  (num "0"))
                 ":="
                 `im.map_zero)
                [(calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Term.app
                    `re
                    [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                      "‚ü™"
                      (¬´term_-_¬ª `u "-" `v)
                      ", "
                      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
                      "‚ü´")]))
                  ":="
                  (Term.proj
                   (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
                   "."
                   `symm))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Term.app
                    `re
                    [(¬´term_*_¬ª
                      (¬´term-_¬ª "-" `I)
                      "*"
                      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                       "‚ü™"
                       (¬´term_-_¬ª `u "-" `v)
                       ", "
                       `w
                       "‚ü´"))]))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]")
                       [])]))))
                 (calcStep
                  (¬´term_=_¬ª
                   (Term.hole "_")
                   "="
                   (Term.app
                    `im
                    [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                      "‚ü™"
                      (¬´term_-_¬ª `u "-" `v)
                      ", "
                      `w
                      "‚ü´")]))
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))])])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.intro "intro" [`H])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                   "‚àÄ"
                   (Lean.binderIdent `w)
                   (¬´binderTerm‚àà_¬ª "‚àà" `K')
                   ","
                   (¬´term_=_¬ª
                    (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                     "‚ü™"
                     (¬´term_-_¬ª `u "-" `v)
                     ", "
                     `w
                     "‚ü´_‚Ñù")
                    "="
                    (num "0"))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.intro "intro" [`w `hw])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `real_inner_eq_re_inner)
                       ","
                       (Tactic.rwRule [] (Term.app `H [`w `hw]))]
                      "]")
                     [])
                    []
                    (Tactic.exact "exact" `zero_re')]))))))
             []
             (Tactic.exact
              "exact"
              (Term.app
               (Term.proj
                (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
                "."
                (fieldIdx "2"))
               [`this]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `InnerProductSpace [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
             ":="
             (Term.app `InnerProductSpace.isROrCToReal [`ùïú `E]))))
          []
          (Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `Module [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
             ":="
             (Term.app `RestrictScalars.module [(Data.Real.Basic.term‚Ñù "‚Ñù") `ùïú `E]))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `K'
             []
             [(Term.typeSpec ":" (Term.app `Submodule [(Data.Real.Basic.term‚Ñù "‚Ñù") `E]))]
             ":="
             (Term.app `K.restrict_scalars [(Data.Real.Basic.term‚Ñù "‚Ñù")]))))
          []
          (Tactic.constructor "constructor")
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.intro "intro" [`H])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`A []]
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                  "‚àÄ"
                  (Lean.binderIdent `w)
                  (¬´binderTerm‚àà_¬ª "‚àà" `K)
                  ","
                  (¬´term_=_¬ª
                   (Term.app
                    `re
                    [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                      "‚ü™"
                      (¬´term_-_¬ª `u "-" `v)
                      ", "
                      `w
                      "‚ü´")])
                   "="
                   (num "0"))))]
               ":="
               (Term.app
                (Term.proj
                 (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
                 "."
                 (fieldIdx "1"))
                [`H]))))
            []
            (Tactic.intro "intro" [`w `hw])
            []
            (Tactic.apply "apply" `ext)
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.simp
               "simp"
               []
               []
               []
               ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"]
               [])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Mathlib.Tactic.tacticSymm_ "symm" [])
              []
              (calcTactic
               "calc"
               (calcStep
                (¬´term_=_¬ª
                 (Term.app `im [(Term.typeAscription "(" (num "0") ":" [`ùïú] ")")])
                 "="
                 (num "0"))
                ":="
                `im.map_zero)
               [(calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (Term.app
                   `re
                   [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                     "‚ü™"
                     (¬´term_-_¬ª `u "-" `v)
                     ", "
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
                     "‚ü´")]))
                 ":="
                 (Term.proj
                  (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
                  "."
                  `symm))
                (calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (Term.app
                   `re
                   [(¬´term_*_¬ª
                     (¬´term-_¬ª "-" `I)
                     "*"
                     (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                      "‚ü™"
                      (¬´term_-_¬ª `u "-" `v)
                      ", "
                      `w
                      "‚ü´"))]))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]")
                      [])]))))
                (calcStep
                 (¬´term_=_¬ª
                  (Term.hole "_")
                  "="
                  (Term.app
                   `im
                   [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                     "‚ü™"
                     (¬´term_-_¬ª `u "-" `v)
                     ", "
                     `w
                     "‚ü´")]))
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))])])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.intro "intro" [`H])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                  "‚àÄ"
                  (Lean.binderIdent `w)
                  (¬´binderTerm‚àà_¬ª "‚àà" `K')
                  ","
                  (¬´term_=_¬ª
                   (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                    "‚ü™"
                    (¬´term_-_¬ª `u "-" `v)
                    ", "
                    `w
                    "‚ü´_‚Ñù")
                   "="
                   (num "0"))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.intro "intro" [`w `hw])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `real_inner_eq_re_inner)
                      ","
                      (Tactic.rwRule [] (Term.app `H [`w `hw]))]
                     "]")
                    [])
                   []
                   (Tactic.exact "exact" `zero_re')]))))))
            []
            (Tactic.exact
             "exact"
             (Term.app
              (Term.proj
               (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
               "."
               (fieldIdx "2"))
              [`this]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.intro "intro" [`H])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
              "‚àÄ"
              (Lean.binderIdent `w)
              (¬´binderTerm‚àà_¬ª "‚àà" `K')
              ","
              (¬´term_=_¬ª
               (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
                "‚ü™"
                (¬´term_-_¬ª `u "-" `v)
                ", "
                `w
                "‚ü´_‚Ñù")
               "="
               (num "0"))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.intro "intro" [`w `hw])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `real_inner_eq_re_inner)
                  ","
                  (Tactic.rwRule [] (Term.app `H [`w `hw]))]
                 "]")
                [])
               []
               (Tactic.exact "exact" `zero_re')]))))))
        []
        (Tactic.exact
         "exact"
         (Term.app
          (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
          [`this]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
        [`this]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
       [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_eq_infi_iff_real_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
            "‚àÄ"
            (Lean.binderIdent `w)
            (¬´binderTerm‚àà_¬ª "‚àà" `K')
            ","
            (¬´term_=_¬ª
             (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª
              "‚ü™"
              (¬´term_-_¬ª `u "-" `v)
              ", "
              `w
              "‚ü´_‚Ñù")
             "="
             (num "0"))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`w `hw])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `real_inner_eq_re_inner)
                ","
                (Tactic.rwRule [] (Term.app `H [`w `hw]))]
               "]")
              [])
             []
             (Tactic.exact "exact" `zero_re')]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`w `hw])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `real_inner_eq_re_inner)
             ","
             (Tactic.rwRule [] (Term.app `H [`w `hw]))]
            "]")
           [])
          []
          (Tactic.exact "exact" `zero_re')])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `zero_re')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_re'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `real_inner_eq_re_inner) "," (Tactic.rwRule [] (Term.app `H [`w `hw]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `H [`w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `real_inner_eq_re_inner
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
       "‚àÄ"
       (Lean.binderIdent `w)
       (¬´binderTerm‚àà_¬ª "‚àà" `K')
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Basic.¬´term‚ü™_,_‚ü´_‚Ñù¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´_‚Ñù")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_-_¬ª `u "-" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`H])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.intro "intro" [`H])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`A []]
           [(Term.typeSpec
             ":"
             (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
              "‚àÄ"
              (Lean.binderIdent `w)
              (¬´binderTerm‚àà_¬ª "‚àà" `K)
              ","
              (¬´term_=_¬ª
               (Term.app
                `re
                [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª `u "-" `v)
                  ", "
                  `w
                  "‚ü´")])
               "="
               (num "0"))))]
           ":="
           (Term.app
            (Term.proj (Term.app `norm_eq_infi_iff_real_inner_eq_zero [`K' `hv]) "." (fieldIdx "1"))
            [`H]))))
        []
        (Tactic.intro "intro" [`w `hw])
        []
        (Tactic.apply "apply" `ext)
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.simp
           "simp"
           []
           []
           []
           ["[" [(Tactic.simpLemma [] [] (Term.app `A [`w `hw]))] "]"]
           [])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Mathlib.Tactic.tacticSymm_ "symm" [])
          []
          (calcTactic
           "calc"
           (calcStep
            (¬´term_=_¬ª
             (Term.app `im [(Term.typeAscription "(" (num "0") ":" [`ùïú] ")")])
             "="
             (num "0"))
            ":="
            `im.map_zero)
           [(calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Term.app
               `re
               [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
                 "‚ü´")]))
             ":="
             (Term.proj
              (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
              "."
              `symm))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Term.app
               `re
               [(¬´term_*_¬ª
                 (¬´term-_¬ª "-" `I)
                 "*"
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª `u "-" `v)
                  ", "
                  `w
                  "‚ü´"))]))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]")
                  [])]))))
            (calcStep
             (¬´term_=_¬ª
              (Term.hole "_")
              "="
              (Term.app
               `im
               [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 `w
                 "‚ü´")]))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))])])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Mathlib.Tactic.tacticSymm_ "symm" [])
        []
        (calcTactic
         "calc"
         (calcStep
          (¬´term_=_¬ª
           (Term.app `im [(Term.typeAscription "(" (num "0") ":" [`ùïú] ")")])
           "="
           (num "0"))
          ":="
          `im.map_zero)
         [(calcStep
           (¬´term_=_¬ª
            (Term.hole "_")
            "="
            (Term.app
             `re
             [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
               "‚ü™"
               (¬´term_-_¬ª `u "-" `v)
               ", "
               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
               "‚ü´")]))
           ":="
           (Term.proj
            (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
            "."
            `symm))
          (calcStep
           (¬´term_=_¬ª
            (Term.hole "_")
            "="
            (Term.app
             `re
             [(¬´term_*_¬ª
               (¬´term-_¬ª "-" `I)
               "*"
               (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                "‚ü™"
                (¬´term_-_¬ª `u "-" `v)
                ", "
                `w
                "‚ü´"))]))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]")
                [])]))))
          (calcStep
           (¬´term_=_¬ª
            (Term.hole "_")
            "="
            (Term.app
             `im
             [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
               "‚ü™"
               (¬´term_-_¬ª `u "-" `v)
               ", "
               `w
               "‚ü´")]))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        (¬´term_=_¬ª (Term.app `im [(Term.typeAscription "(" (num "0") ":" [`ùïú] ")")]) "=" (num "0"))
        ":="
        `im.map_zero)
       [(calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (Term.app
           `re
           [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª `u "-" `v)
             ", "
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª (¬´term-_¬ª "-" `I) " ‚Ä¢ " `w)
             "‚ü´")]))
         ":="
         (Term.proj
          (Term.app `A [(Term.hole "_") (Term.app `K.smul_mem [(¬´term-_¬ª "-" `I) `hw])])
          "."
          `symm))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (Term.app
           `re
           [(¬´term_*_¬ª
             (¬´term-_¬ª "-" `I)
             "*"
             (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
              "‚ü™"
              (¬´term_-_¬ª `u "-" `v)
              ", "
              `w
              "‚ü´"))]))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_smul_right)] "]")
              [])]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (Term.app
           `im
           [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª `u "-" `v)
             ", "
             `w
             "‚ü´")]))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (Term.app
        `im
        [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          (¬´term_-_¬ª `u "-" `v)
          ", "
          `w
          "‚ü´")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `im
       [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Characterization of minimizers in the projection on a subspace.
    Let `u` be a point in an inner product space, and let `K` be a nonempty subspace.
    Then point `v` minimizes the distance `‚Äñu - v‚Äñ` over points in `K` if and only if
    for all `w ‚àà K`, `‚ü™u - v, w‚ü´ = 0` (i.e., `u - v` is orthogonal to the subspace `K`)
    -/
  theorem
    norm_eq_infi_iff_inner_eq_zero
    { u : E } { v : E } ( hv : v ‚àà K )
      : ‚Äñ u - v ‚Äñ = ‚®Ö w : K , ‚Äñ u - w ‚Äñ ‚Üî ‚àÄ w ‚àà K , ‚ü™ u - v , w ‚ü´ = 0
    :=
      by
        letI : InnerProductSpace ‚Ñù E := InnerProductSpace.isROrCToReal ùïú E
          letI : Module ‚Ñù E := RestrictScalars.module ‚Ñù ùïú E
          let K' : Submodule ‚Ñù E := K.restrict_scalars ‚Ñù
          constructor
          ¬∑
            intro H
              have
                A
                  : ‚àÄ w ‚àà K , re ‚ü™ u - v , w ‚ü´ = 0
                  :=
                  norm_eq_infi_iff_real_inner_eq_zero K' hv . 1 H
              intro w hw
              apply ext
              ¬∑ simp [ A w hw ]
              ¬∑
                symm
                  calc
                    im ( 0 : ùïú ) = 0 := im.map_zero
                    _ = re ‚ü™ u - v , - I ‚Ä¢ w ‚ü´ := A _ K.smul_mem - I hw . symm
                      _ = re - I * ‚ü™ u - v , w ‚ü´ := by rw [ inner_smul_right ]
                      _ = im ‚ü™ u - v , w ‚ü´ := by simp
          ¬∑
            intro H
              have
                : ‚àÄ w ‚àà K' , ‚ü™ u - v , w ‚ü´_‚Ñù = 0
                  :=
                  by intro w hw rw [ real_inner_eq_re_inner , H w hw ] exact zero_re'
              exact norm_eq_infi_iff_real_inner_eq_zero K' hv . 2 this
#align norm_eq_infi_iff_inner_eq_zero norm_eq_infi_iff_inner_eq_zero

section orthogonalProjection

variable [CompleteSpace K]

/-- The orthogonal projection onto a complete subspace, as an
unbundled function.  This definition is only intended for use in
setting up the bundled version `orthogonal_projection` and should not
be used once that is defined. -/
def orthogonalProjectionFn (v : E) :=
  (exists_norm_eq_infi_of_complete_subspace K (complete_space_coe_iff_is_complete.mp ‚Äπ_‚Ä∫) v).some
#align orthogonal_projection_fn orthogonalProjectionFn

variable {K}

/-- The unbundled orthogonal projection is in the given subspace.
This lemma is only intended for use in setting up the bundled version
and should not be used once that is defined. -/
theorem orthogonal_projection_fn_mem (v : E) : orthogonalProjectionFn K v ‚àà K :=
  (exists_norm_eq_infi_of_complete_subspace K (complete_space_coe_iff_is_complete.mp ‚Äπ_‚Ä∫)
        v).some_spec.some
#align orthogonal_projection_fn_mem orthogonal_projection_fn_mem

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "The characterization of the unbundled orthogonal projection.  This\nlemma is only intended for use in setting up the bundled version\nand should not be used once that is defined. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `orthogonal_projection_fn_inner_eq_zero [])
      (Command.declSig
       [(Term.explicitBinder "(" [`v] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
         "‚àÄ"
         (Lean.binderIdent `w)
         (¬´binderTerm‚àà_¬ª "‚àà" `K)
         ","
         (¬´term_=_¬ª
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
           "‚ü™"
           (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjectionFn [`K `v]))
           ", "
           `w
           "‚ü´")
          "="
          (num "0")))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule
               [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
               (Term.app
                `norm_eq_infi_iff_inner_eq_zero
                [`K (Term.app `orthogonal_projection_fn_mem [`v])]))]
             "]")
            [])
           []
           (Tactic.exact
            "exact"
            (Term.proj
             (Term.proj
              (Term.app
               `exists_norm_eq_infi_of_complete_subspace
               [`K
                (Term.app
                 `complete_space_coe_iff_is_complete.mp
                 [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
                `v])
              "."
              `some_spec)
             "."
             `some_spec))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
              (Term.app
               `norm_eq_infi_iff_inner_eq_zero
               [`K (Term.app `orthogonal_projection_fn_mem [`v])]))]
            "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.proj
            (Term.proj
             (Term.app
              `exists_norm_eq_infi_of_complete_subspace
              [`K
               (Term.app
                `complete_space_coe_iff_is_complete.mp
                [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
               `v])
             "."
             `some_spec)
            "."
            `some_spec))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.proj
        (Term.proj
         (Term.app
          `exists_norm_eq_infi_of_complete_subspace
          [`K
           (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
           `v])
         "."
         `some_spec)
        "."
        `some_spec))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.proj
        (Term.app
         `exists_norm_eq_infi_of_complete_subspace
         [`K
          (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
          `v])
        "."
        `some_spec)
       "."
       `some_spec)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.app
        `exists_norm_eq_infi_of_complete_subspace
        [`K
         (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
         `v])
       "."
       `some_spec)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `exists_norm_eq_infi_of_complete_subspace
       [`K
        (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
        `v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term‚Äπ_‚Ä∫¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term‚Äπ_‚Ä∫¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `complete_space_coe_iff_is_complete.mp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exists_norm_eq_infi_of_complete_subspace
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `exists_norm_eq_infi_of_complete_subspace
      [`K
       (Term.paren
        "("
        (Term.app `complete_space_coe_iff_is_complete.mp [(¬´term‚Äπ_‚Ä∫¬ª "‚Äπ" (Term.hole "_") "‚Ä∫")])
        ")")
       `v])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
          (Term.app
           `norm_eq_infi_iff_inner_eq_zero
           [`K (Term.app `orthogonal_projection_fn_mem [`v])]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_eq_infi_iff_inner_eq_zero [`K (Term.app `orthogonal_projection_fn_mem [`v])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_fn_mem [`v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `orthogonal_projection_fn_mem [`v])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_eq_infi_iff_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
       "‚àÄ"
       (Lean.binderIdent `w)
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjectionFn [`K `v]))
         ", "
         `w
         "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjectionFn [`K `v]))
        ", "
        `w
        "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjectionFn [`K `v]))
       ", "
       `w
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The characterization of the unbundled orthogonal projection.  This
    lemma is only intended for use in setting up the bundled version
    and should not be used once that is defined. -/
  theorem
    orthogonal_projection_fn_inner_eq_zero
    ( v : E ) : ‚àÄ w ‚àà K , ‚ü™ v - orthogonalProjectionFn K v , w ‚ü´ = 0
    :=
      by
        rw [ ‚Üê norm_eq_infi_iff_inner_eq_zero K orthogonal_projection_fn_mem v ]
          exact
            exists_norm_eq_infi_of_complete_subspace K complete_space_coe_iff_is_complete.mp ‚Äπ _ ‚Ä∫ v
                .
                some_spec
              .
              some_spec
#align orthogonal_projection_fn_inner_eq_zero orthogonal_projection_fn_inner_eq_zero

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "The unbundled orthogonal projection is the unique point in `K`\nwith the orthogonality property.  This lemma is only intended for use\nin setting up the bundled version and should not be used once that is\ndefined. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [])
      (Command.declSig
       [(Term.implicitBinder "{" [`u `v] [":" `E] "}")
        (Term.explicitBinder "(" [`hvm] [":" (¬´term_‚àà_¬ª `v "‚àà" `K)] [] ")")
        (Term.explicitBinder
         "("
         [`hvo]
         [":"
          (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
           "‚àÄ"
           (Lean.binderIdent `w)
           (¬´binderTerm‚àà_¬ª "‚àà" `K)
           ","
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª `u "-" `v)
             ", "
             `w
             "‚ü´")
            "="
            (num "0")))]
         []
         ")")]
       (Term.typeSpec ":" (¬´term_=_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "=" `v)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `sub_eq_zero)
              ","
              (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_self_eq_zero)]
             "]")
            [])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hvs []]
              [(Term.typeSpec
                ":"
                (¬´term_‚àà_¬ª (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v) "‚àà" `K))]
              ":="
              (Term.app
               `Submodule.sub_mem
               [`K (Term.app `orthogonal_projection_fn_mem [`u]) `hvm]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`huo []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u]))
                  ", "
                  (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
                  "‚ü´")
                 "="
                 (num "0")))]
              ":="
              (Term.app `orthogonal_projection_fn_inner_eq_zero [`u (Term.hole "_") `hvs]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`huv []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª `u "-" `v)
                  ", "
                  (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
                  "‚ü´")
                 "="
                 (num "0")))]
              ":="
              (Term.app `hvo [(Term.hole "_") `hvs]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`houv []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª
                   (¬´term_-_¬ª `u "-" `v)
                   "-"
                   (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u])))
                  ", "
                  (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
                  "‚ü´")
                 "="
                 (num "0")))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `inner_sub_left)
                     ","
                     (Tactic.rwRule [] `huo)
                     ","
                     (Tactic.rwRule [] `huv)
                     ","
                     (Tactic.rwRule [] `sub_zero)]
                    "]")
                   [])]))))))
           []
           (Std.Tactic.tacticRwa__
            "rwa"
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_sub_sub_cancel_left)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`houv] []))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `sub_eq_zero)
             ","
             (Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_self_eq_zero)]
            "]")
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hvs []]
             [(Term.typeSpec
               ":"
               (¬´term_‚àà_¬ª (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v) "‚àà" `K))]
             ":="
             (Term.app
              `Submodule.sub_mem
              [`K (Term.app `orthogonal_projection_fn_mem [`u]) `hvm]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`huo []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u]))
                 ", "
                 (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
                 "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.app `orthogonal_projection_fn_inner_eq_zero [`u (Term.hole "_") `hvs]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`huv []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `u "-" `v)
                 ", "
                 (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
                 "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.app `hvo [(Term.hole "_") `hvs]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`houv []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (¬´term_-_¬ª
                  (¬´term_-_¬ª `u "-" `v)
                  "-"
                  (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u])))
                 ", "
                 (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
                 "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `inner_sub_left)
                    ","
                    (Tactic.rwRule [] `huo)
                    ","
                    (Tactic.rwRule [] `huv)
                    ","
                    (Tactic.rwRule [] `sub_zero)]
                   "]")
                  [])]))))))
          []
          (Std.Tactic.tacticRwa__
           "rwa"
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_sub_sub_cancel_left)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`houv] []))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRwa__
       "rwa"
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `sub_sub_sub_cancel_left)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`houv] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `houv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_sub_sub_cancel_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`houv []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª
              (¬´term_-_¬ª `u "-" `v)
              "-"
              (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u])))
             ", "
             (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
             "‚ü´")
            "="
            (num "0")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `inner_sub_left)
                ","
                (Tactic.rwRule [] `huo)
                ","
                (Tactic.rwRule [] `huv)
                ","
                (Tactic.rwRule [] `sub_zero)]
               "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `inner_sub_left)
             ","
             (Tactic.rwRule [] `huo)
             ","
             (Tactic.rwRule [] `huv)
             ","
             (Tactic.rwRule [] `sub_zero)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `inner_sub_left)
         ","
         (Tactic.rwRule [] `huo)
         ","
         (Tactic.rwRule [] `huv)
         ","
         (Tactic.rwRule [] `sub_zero)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `huv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `huo
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_sub_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (¬´term_-_¬ª
         (¬´term_-_¬ª `u "-" `v)
         "-"
         (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u])))
        ", "
        (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
        "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (¬´term_-_¬ª
        (¬´term_-_¬ª `u "-" `v)
        "-"
        (¬´term_-_¬ª `u "-" (Term.app `orthogonalProjectionFn [`K `u])))
       ", "
       (¬´term_-_¬ª (Term.app `orthogonalProjectionFn [`K `u]) "-" `v)
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The unbundled orthogonal projection is the unique point in `K`
    with the orthogonality property.  This lemma is only intended for use
    in setting up the bundled version and should not be used once that is
    defined. -/
  theorem
    eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero
    { u v : E } ( hvm : v ‚àà K ) ( hvo : ‚àÄ w ‚àà K , ‚ü™ u - v , w ‚ü´ = 0 )
      : orthogonalProjectionFn K u = v
    :=
      by
        rw [ ‚Üê sub_eq_zero , ‚Üê inner_self_eq_zero ]
          have
            hvs
              : orthogonalProjectionFn K u - v ‚àà K
              :=
              Submodule.sub_mem K orthogonal_projection_fn_mem u hvm
          have
            huo
              : ‚ü™ u - orthogonalProjectionFn K u , orthogonalProjectionFn K u - v ‚ü´ = 0
              :=
              orthogonal_projection_fn_inner_eq_zero u _ hvs
          have huv : ‚ü™ u - v , orthogonalProjectionFn K u - v ‚ü´ = 0 := hvo _ hvs
          have
            houv
              : ‚ü™ u - v - u - orthogonalProjectionFn K u , orthogonalProjectionFn K u - v ‚ü´ = 0
              :=
              by rw [ inner_sub_left , huo , huv , sub_zero ]
          rwa [ sub_sub_sub_cancel_left ] at houv
#align
  eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero

variable (K)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `orthogonal_projection_fn_norm_sq [])
      (Command.declSig
       [(Term.explicitBinder "(" [`v] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (¬´term_*_¬ª
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ")
          "*"
          (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ"))
         "="
         (¬´term_+_¬ª
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjectionFn [`K `v]))
            "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjectionFn [`K `v]))
            "‚Äñ"))
          "+"
          (¬´term_*_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (Term.app `orthogonalProjectionFn [`K `v])
            "‚Äñ")
           "*"
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (Term.app `orthogonalProjectionFn [`K `v])
            "‚Äñ"))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest `p [] ":=" (Term.app `orthogonalProjectionFn [`K `v]) []))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`h' []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª `v "-" `p)
                  ", "
                  `p
                  "‚ü´")
                 "="
                 (num "0")))]
              ":="
              (Term.app
               `orthogonal_projection_fn_inner_eq_zero
               [(Term.hole "_") (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`v])]))))
           []
           (Tactic.¬´tactic_<;>_¬ª
            (convert
             "convert"
             []
             (Term.app
              `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
              [(¬´term_-_¬ª `v "-" `p) `p `h'])
             ["using" (num "2")])
            "<;>"
            (Tactic.simp "simp" [] [] [] [] []))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest `p [] ":=" (Term.app `orthogonalProjectionFn [`K `v]) []))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h' []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (¬´term_-_¬ª `v "-" `p)
                 ", "
                 `p
                 "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.app
              `orthogonal_projection_fn_inner_eq_zero
              [(Term.hole "_") (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`v])]))))
          []
          (Tactic.¬´tactic_<;>_¬ª
           (convert
            "convert"
            []
            (Term.app
             `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
             [(¬´term_-_¬ª `v "-" `p) `p `h'])
            ["using" (num "2")])
           "<;>"
           (Tactic.simp "simp" [] [] [] [] []))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.¬´tactic_<;>_¬ª
       (convert
        "convert"
        []
        (Term.app
         `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
         [(¬´term_-_¬ª `v "-" `p) `p `h'])
        ["using" (num "2")])
       "<;>"
       (Tactic.simp "simp" [] [] [] [] []))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 2 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
      (convert
       "convert"
       []
       (Term.app
        `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
        [(¬´term_-_¬ª `v "-" `p) `p `h'])
       ["using" (num "2")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero [(¬´term_-_¬ª `v "-" `p) `p `h'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term_-_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_-_¬ª `v "-" `p)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `v
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (¬´term_-_¬ª `v "-" `p) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h' []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª `v "-" `p)
             ", "
             `p
             "‚ü´")
            "="
            (num "0")))]
         ":="
         (Term.app
          `orthogonal_projection_fn_inner_eq_zero
          [(Term.hole "_") (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`v])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `orthogonal_projection_fn_inner_eq_zero
       [(Term.hole "_") (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`v])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_fn_mem [`v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `orthogonal_projection_fn_mem [`v])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `v "-" `p) ", " `p "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `v "-" `p) ", " `p "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  orthogonal_projection_fn_norm_sq
  ( v : E )
    :
      ‚Äñ v ‚Äñ * ‚Äñ v ‚Äñ
        =
        ‚Äñ v - orthogonalProjectionFn K v ‚Äñ * ‚Äñ v - orthogonalProjectionFn K v ‚Äñ
          +
          ‚Äñ orthogonalProjectionFn K v ‚Äñ * ‚Äñ orthogonalProjectionFn K v ‚Äñ
  :=
    by
      set p := orthogonalProjectionFn K v
        have
          h'
            : ‚ü™ v - p , p ‚ü´ = 0
            :=
            orthogonal_projection_fn_inner_eq_zero _ _ orthogonal_projection_fn_mem v
        convert norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero v - p p h' using 2 <;> simp
#align orthogonal_projection_fn_norm_sq orthogonal_projection_fn_norm_sq

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment "/--" "The orthogonal projection onto a complete subspace. -/")]
      []
      []
      []
      []
      [])
     (Command.def
      "def"
      (Command.declId `orthogonalProjection [])
      (Command.optDeclSig
       []
       [(Term.typeSpec ":" (Topology.Algebra.Module.Basic.¬´term_‚ÜíL[_]_¬ª `E " ‚ÜíL[" `ùïú "] " `K))])
      (Command.declValSimple
       ":="
       (Term.app
        `LinearMap.mkContinuous
        [(Term.structInst
          "{"
          []
          [(Term.structInstField
            (Term.structInstLVal `toFun [])
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`v]
              []
              "=>"
              (Term.anonymousCtor
               "‚ü®"
               [(Term.app `orthogonalProjectionFn [`K `v])
                ","
                (Term.app `orthogonal_projection_fn_mem [`v])]
               "‚ü©"))))
           []
           (Term.structInstField
            (Term.structInstLVal `map_add' [])
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`x `y]
              []
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hm []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚àà_¬ª
                        (¬´term_+_¬ª
                         (Term.app `orthogonalProjectionFn [`K `x])
                         "+"
                         (Term.app `orthogonalProjectionFn [`K `y]))
                        "‚àà"
                        `K))]
                     ":="
                     (Term.app
                      `Submodule.add_mem
                      [`K
                       (Term.app `orthogonal_projection_fn_mem [`x])
                       (Term.app `orthogonal_projection_fn_mem [`y])]))))
                  []
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`ho []]
                     [(Term.typeSpec
                       ":"
                       (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                        "‚àÄ"
                        (Lean.binderIdent `w)
                        (¬´binderTerm‚àà_¬ª "‚àà" `K)
                        ","
                        (¬´term_=_¬ª
                         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                          "‚ü™"
                          (¬´term_-_¬ª
                           (¬´term_+_¬ª `x "+" `y)
                           "-"
                           (¬´term_+_¬ª
                            (Term.app `orthogonalProjectionFn [`K `x])
                            "+"
                            (Term.app `orthogonalProjectionFn [`K `y])))
                          ", "
                          `w
                          "‚ü´")
                         "="
                         (num "0"))))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(Tactic.intro "intro" [`w `hw])
                         []
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [] `add_sub_add_comm)
                            ","
                            (Tactic.rwRule [] `inner_add_left)
                            ","
                            (Tactic.rwRule
                             []
                             (Term.app
                              `orthogonal_projection_fn_inner_eq_zero
                              [(Term.hole "_") `w `hw]))
                            ","
                            (Tactic.rwRule
                             []
                             (Term.app
                              `orthogonal_projection_fn_inner_eq_zero
                              [(Term.hole "_") `w `hw]))
                            ","
                            (Tactic.rwRule [] `add_zero)]
                           "]")
                          [])]))))))
                  []
                  (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   []
                   ["["
                    [(Tactic.simpLemma
                      []
                      []
                      (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
                    "]"]
                   [])]))))))
           []
           (Term.structInstField
            (Term.structInstLVal `map_smul' [])
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`c `x]
              []
              "=>"
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hm []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚àà_¬ª
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                         `c
                         " ‚Ä¢ "
                         (Term.app `orthogonalProjectionFn [`K `x]))
                        "‚àà"
                        `K))]
                     ":="
                     (Term.app
                      `Submodule.smul_mem
                      [`K (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`x])]))))
                  []
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`ho []]
                     [(Term.typeSpec
                       ":"
                       (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                        "‚àÄ"
                        (Lean.binderIdent `w)
                        (¬´binderTerm‚àà_¬ª "‚àà" `K)
                        ","
                        (¬´term_=_¬ª
                         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                          "‚ü™"
                          (¬´term_-_¬ª
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
                           "-"
                           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                            `c
                            " ‚Ä¢ "
                            (Term.app `orthogonalProjectionFn [`K `x])))
                          ", "
                          `w
                          "‚ü´")
                         "="
                         (num "0"))))]
                     ":="
                     (Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(Tactic.intro "intro" [`w `hw])
                         []
                         (Tactic.rwSeq
                          "rw"
                          []
                          (Tactic.rwRuleSeq
                           "["
                           [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
                            ","
                            (Tactic.rwRule [] `inner_smul_left)
                            ","
                            (Tactic.rwRule
                             []
                             (Term.app
                              `orthogonal_projection_fn_inner_eq_zero
                              [(Term.hole "_") `w `hw]))
                            ","
                            (Tactic.rwRule [] `mul_zero)]
                           "]")
                          [])]))))))
                  []
                  (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   []
                   ["["
                    [(Tactic.simpLemma
                      []
                      []
                      (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
                    "]"]
                   [])]))))))]
          (Term.optEllipsis [])
          []
          "}")
         (num "1")
         (Term.fun
          "fun"
          (Term.basicFun
           [`x]
           []
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `one_mul) "," (Tactic.simpLemma [] [] `LinearMap.coe_mk)]
                 "]"]
                [])
               []
               (Tactic.refine'
                "refine'"
                (Term.app
                 `le_of_pow_le_pow
                 [(num "2")
                  (Term.app `norm_nonneg [(Term.hole "_")])
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                  (Term.hole "_")]))
               []
               (Tactic.change
                "change"
                (¬´term_‚â§_¬ª
                 (¬´term_^_¬ª
                  (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                   "‚Äñ"
                   (Term.app `orthogonalProjectionFn [`K `x])
                   "‚Äñ")
                  "^"
                  (num "2"))
                 "‚â§"
                 (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2")))
                [])
               []
               (choice
                (Tactic.nlinarith
                 "nlinarith"
                 []
                 []
                 ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])
                (nlinarith
                 "nlinarith"
                 []
                 (linarithArgsRest
                  []
                  []
                  ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])))])))))])
       [])
      []
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `LinearMap.mkContinuous
       [(Term.structInst
         "{"
         []
         [(Term.structInstField
           (Term.structInstLVal `toFun [])
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [`v]
             []
             "=>"
             (Term.anonymousCtor
              "‚ü®"
              [(Term.app `orthogonalProjectionFn [`K `v])
               ","
               (Term.app `orthogonal_projection_fn_mem [`v])]
              "‚ü©"))))
          []
          (Term.structInstField
           (Term.structInstLVal `map_add' [])
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `y]
             []
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hm []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚àà_¬ª
                       (¬´term_+_¬ª
                        (Term.app `orthogonalProjectionFn [`K `x])
                        "+"
                        (Term.app `orthogonalProjectionFn [`K `y]))
                       "‚àà"
                       `K))]
                    ":="
                    (Term.app
                     `Submodule.add_mem
                     [`K
                      (Term.app `orthogonal_projection_fn_mem [`x])
                      (Term.app `orthogonal_projection_fn_mem [`y])]))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`ho []]
                    [(Term.typeSpec
                      ":"
                      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                       "‚àÄ"
                       (Lean.binderIdent `w)
                       (¬´binderTerm‚àà_¬ª "‚àà" `K)
                       ","
                       (¬´term_=_¬ª
                        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                         "‚ü™"
                         (¬´term_-_¬ª
                          (¬´term_+_¬ª `x "+" `y)
                          "-"
                          (¬´term_+_¬ª
                           (Term.app `orthogonalProjectionFn [`K `x])
                           "+"
                           (Term.app `orthogonalProjectionFn [`K `y])))
                         ", "
                         `w
                         "‚ü´")
                        "="
                        (num "0"))))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.intro "intro" [`w `hw])
                        []
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [] `add_sub_add_comm)
                           ","
                           (Tactic.rwRule [] `inner_add_left)
                           ","
                           (Tactic.rwRule
                            []
                            (Term.app
                             `orthogonal_projection_fn_inner_eq_zero
                             [(Term.hole "_") `w `hw]))
                           ","
                           (Tactic.rwRule
                            []
                            (Term.app
                             `orthogonal_projection_fn_inner_eq_zero
                             [(Term.hole "_") `w `hw]))
                           ","
                           (Tactic.rwRule [] `add_zero)]
                          "]")
                         [])]))))))
                 []
                 (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma
                     []
                     []
                     (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
                   "]"]
                  [])]))))))
          []
          (Term.structInstField
           (Term.structInstLVal `map_smul' [])
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [`c `x]
             []
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hm []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚àà_¬ª
                       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                        `c
                        " ‚Ä¢ "
                        (Term.app `orthogonalProjectionFn [`K `x]))
                       "‚àà"
                       `K))]
                    ":="
                    (Term.app
                     `Submodule.smul_mem
                     [`K (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`x])]))))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`ho []]
                    [(Term.typeSpec
                      ":"
                      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                       "‚àÄ"
                       (Lean.binderIdent `w)
                       (¬´binderTerm‚àà_¬ª "‚àà" `K)
                       ","
                       (¬´term_=_¬ª
                        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                         "‚ü™"
                         (¬´term_-_¬ª
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
                          "-"
                          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                           `c
                           " ‚Ä¢ "
                           (Term.app `orthogonalProjectionFn [`K `x])))
                         ", "
                         `w
                         "‚ü´")
                        "="
                        (num "0"))))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.intro "intro" [`w `hw])
                        []
                        (Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq
                          "["
                          [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
                           ","
                           (Tactic.rwRule [] `inner_smul_left)
                           ","
                           (Tactic.rwRule
                            []
                            (Term.app
                             `orthogonal_projection_fn_inner_eq_zero
                             [(Term.hole "_") `w `hw]))
                           ","
                           (Tactic.rwRule [] `mul_zero)]
                          "]")
                         [])]))))))
                 []
                 (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma
                     []
                     []
                     (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
                   "]"]
                  [])]))))))]
         (Term.optEllipsis [])
         []
         "}")
        (num "1")
        (Term.fun
         "fun"
         (Term.basicFun
          [`x]
          []
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.simp
               "simp"
               []
               []
               ["only"]
               ["["
                [(Tactic.simpLemma [] [] `one_mul) "," (Tactic.simpLemma [] [] `LinearMap.coe_mk)]
                "]"]
               [])
              []
              (Tactic.refine'
               "refine'"
               (Term.app
                `le_of_pow_le_pow
                [(num "2")
                 (Term.app `norm_nonneg [(Term.hole "_")])
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
                 (Term.hole "_")]))
              []
              (Tactic.change
               "change"
               (¬´term_‚â§_¬ª
                (¬´term_^_¬ª
                 (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                  "‚Äñ"
                  (Term.app `orthogonalProjectionFn [`K `x])
                  "‚Äñ")
                 "^"
                 (num "2"))
                "‚â§"
                (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2")))
               [])
              []
              (choice
               (Tactic.nlinarith
                "nlinarith"
                []
                []
                ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])
               (nlinarith
                "nlinarith"
                []
                (linarithArgsRest
                 []
                 []
                 ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])))])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `one_mul) "," (Tactic.simpLemma [] [] `LinearMap.coe_mk)]
              "]"]
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `le_of_pow_le_pow
              [(num "2")
               (Term.app `norm_nonneg [(Term.hole "_")])
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
               (Term.hole "_")]))
            []
            (Tactic.change
             "change"
             (¬´term_‚â§_¬ª
              (¬´term_^_¬ª
               (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
                "‚Äñ"
                (Term.app `orthogonalProjectionFn [`K `x])
                "‚Äñ")
               "^"
               (num "2"))
              "‚â§"
              (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2")))
             [])
            []
            (choice
             (Tactic.nlinarith
              "nlinarith"
              []
              []
              ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])
             (nlinarith
              "nlinarith"
              []
              (linarithArgsRest
               []
               []
               ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `one_mul) "," (Tactic.simpLemma [] [] `LinearMap.coe_mk)]
            "]"]
           [])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `le_of_pow_le_pow
            [(num "2")
             (Term.app `norm_nonneg [(Term.hole "_")])
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
             (Term.hole "_")]))
          []
          (Tactic.change
           "change"
           (¬´term_‚â§_¬ª
            (¬´term_^_¬ª
             (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
              "‚Äñ"
              (Term.app `orthogonalProjectionFn [`K `x])
              "‚Äñ")
             "^"
             (num "2"))
            "‚â§"
            (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2")))
           [])
          []
          (choice
           (Tactic.nlinarith
            "nlinarith"
            []
            []
            ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])
           (nlinarith
            "nlinarith"
            []
            (linarithArgsRest
             []
             []
             ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (choice
       (Tactic.nlinarith
        "nlinarith"
        []
        []
        ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])
       (nlinarith
        "nlinarith"
        []
        (linarithArgsRest [] [] ["[" [(Term.app `orthogonal_projection_fn_norm_sq [`K `x])] "]"])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_fn_norm_sq [`K `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_norm_sq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_fn_norm_sq [`K `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_norm_sq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.change
       "change"
       (¬´term_‚â§_¬ª
        (¬´term_^_¬ª
         (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (Term.app `orthogonalProjectionFn [`K `x]) "‚Äñ")
         "^"
         (num "2"))
        "‚â§"
        (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2")))
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (¬´term_^_¬ª
        (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (Term.app `orthogonalProjectionFn [`K `x]) "‚Äñ")
        "^"
        (num "2"))
       "‚â§"
       (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term_^_¬ª
       (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (Term.app `orthogonalProjectionFn [`K `x]) "‚Äñ")
       "^"
       (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (Term.app `orthogonalProjectionFn [`K `x]) "‚Äñ")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonalProjectionFn [`K `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonalProjectionFn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `le_of_pow_le_pow
        [(num "2")
         (Term.app `norm_nonneg [(Term.hole "_")])
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
         (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `le_of_pow_le_pow
       [(num "2")
        (Term.app `norm_nonneg [(Term.hole "_")])
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.normNum "norm_num" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, tactic) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Mathlib.Tactic.normNum "norm_num" [] [] [])])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm_nonneg [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `norm_nonneg [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_of_pow_le_pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["[" [(Tactic.simpLemma [] [] `one_mul) "," (Tactic.simpLemma [] [] `LinearMap.coe_mk)] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearMap.coe_mk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInst', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInst', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.structInst
       "{"
       []
       [(Term.structInstField
         (Term.structInstLVal `toFun [])
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`v]
           []
           "=>"
           (Term.anonymousCtor
            "‚ü®"
            [(Term.app `orthogonalProjectionFn [`K `v])
             ","
             (Term.app `orthogonal_projection_fn_mem [`v])]
            "‚ü©"))))
        []
        (Term.structInstField
         (Term.structInstLVal `map_add' [])
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `y]
           []
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hm []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚àà_¬ª
                     (¬´term_+_¬ª
                      (Term.app `orthogonalProjectionFn [`K `x])
                      "+"
                      (Term.app `orthogonalProjectionFn [`K `y]))
                     "‚àà"
                     `K))]
                  ":="
                  (Term.app
                   `Submodule.add_mem
                   [`K
                    (Term.app `orthogonal_projection_fn_mem [`x])
                    (Term.app `orthogonal_projection_fn_mem [`y])]))))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`ho []]
                  [(Term.typeSpec
                    ":"
                    (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                     "‚àÄ"
                     (Lean.binderIdent `w)
                     (¬´binderTerm‚àà_¬ª "‚àà" `K)
                     ","
                     (¬´term_=_¬ª
                      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                       "‚ü™"
                       (¬´term_-_¬ª
                        (¬´term_+_¬ª `x "+" `y)
                        "-"
                        (¬´term_+_¬ª
                         (Term.app `orthogonalProjectionFn [`K `x])
                         "+"
                         (Term.app `orthogonalProjectionFn [`K `y])))
                       ", "
                       `w
                       "‚ü´")
                      "="
                      (num "0"))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.intro "intro" [`w `hw])
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] `add_sub_add_comm)
                         ","
                         (Tactic.rwRule [] `inner_add_left)
                         ","
                         (Tactic.rwRule
                          []
                          (Term.app
                           `orthogonal_projection_fn_inner_eq_zero
                           [(Term.hole "_") `w `hw]))
                         ","
                         (Tactic.rwRule
                          []
                          (Term.app
                           `orthogonal_projection_fn_inner_eq_zero
                           [(Term.hole "_") `w `hw]))
                         ","
                         (Tactic.rwRule [] `add_zero)]
                        "]")
                       [])]))))))
               []
               (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
                 "]"]
                [])]))))))
        []
        (Term.structInstField
         (Term.structInstLVal `map_smul' [])
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`c `x]
           []
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hm []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚àà_¬ª
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                      `c
                      " ‚Ä¢ "
                      (Term.app `orthogonalProjectionFn [`K `x]))
                     "‚àà"
                     `K))]
                  ":="
                  (Term.app
                   `Submodule.smul_mem
                   [`K (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`x])]))))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`ho []]
                  [(Term.typeSpec
                    ":"
                    (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                     "‚àÄ"
                     (Lean.binderIdent `w)
                     (¬´binderTerm‚àà_¬ª "‚àà" `K)
                     ","
                     (¬´term_=_¬ª
                      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                       "‚ü™"
                       (¬´term_-_¬ª
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
                        "-"
                        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                         `c
                         " ‚Ä¢ "
                         (Term.app `orthogonalProjectionFn [`K `x])))
                       ", "
                       `w
                       "‚ü´")
                      "="
                      (num "0"))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.intro "intro" [`w `hw])
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
                         ","
                         (Tactic.rwRule [] `inner_smul_left)
                         ","
                         (Tactic.rwRule
                          []
                          (Term.app
                           `orthogonal_projection_fn_inner_eq_zero
                           [(Term.hole "_") `w `hw]))
                         ","
                         (Tactic.rwRule [] `mul_zero)]
                        "]")
                       [])]))))))
               []
               (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
                 "]"]
                [])]))))))]
       (Term.optEllipsis [])
       []
       "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstFieldAbbrev'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`c `x]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hm []]
               [(Term.typeSpec
                 ":"
                 (¬´term_‚àà_¬ª
                  (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " (Term.app `orthogonalProjectionFn [`K `x]))
                  "‚àà"
                  `K))]
               ":="
               (Term.app
                `Submodule.smul_mem
                [`K (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`x])]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`ho []]
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                  "‚àÄ"
                  (Lean.binderIdent `w)
                  (¬´binderTerm‚àà_¬ª "‚àà" `K)
                  ","
                  (¬´term_=_¬ª
                   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                    "‚ü™"
                    (¬´term_-_¬ª
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
                     "-"
                     (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                      `c
                      " ‚Ä¢ "
                      (Term.app `orthogonalProjectionFn [`K `x])))
                    ", "
                    `w
                    "‚ü´")
                   "="
                   (num "0"))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.intro "intro" [`w `hw])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
                      ","
                      (Tactic.rwRule [] `inner_smul_left)
                      ","
                      (Tactic.rwRule
                       []
                       (Term.app `orthogonal_projection_fn_inner_eq_zero [(Term.hole "_") `w `hw]))
                      ","
                      (Tactic.rwRule [] `mul_zero)]
                     "]")
                    [])]))))))
            []
            (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
            []
            (Tactic.simp
             "simp"
             []
             []
             []
             ["["
              [(Tactic.simpLemma
                []
                []
                (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
              "]"]
             [])])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hm []]
             [(Term.typeSpec
               ":"
               (¬´term_‚àà_¬ª
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " (Term.app `orthogonalProjectionFn [`K `x]))
                "‚àà"
                `K))]
             ":="
             (Term.app
              `Submodule.smul_mem
              [`K (Term.hole "_") (Term.app `orthogonal_projection_fn_mem [`x])]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`ho []]
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                "‚àÄ"
                (Lean.binderIdent `w)
                (¬´binderTerm‚àà_¬ª "‚àà" `K)
                ","
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (¬´term_-_¬ª
                   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
                   "-"
                   (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                    `c
                    " ‚Ä¢ "
                    (Term.app `orthogonalProjectionFn [`K `x])))
                  ", "
                  `w
                  "‚ü´")
                 "="
                 (num "0"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`w `hw])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
                    ","
                    (Tactic.rwRule [] `inner_smul_left)
                    ","
                    (Tactic.rwRule
                     []
                     (Term.app `orthogonal_projection_fn_inner_eq_zero [(Term.hole "_") `w `hw]))
                    ","
                    (Tactic.rwRule [] `mul_zero)]
                   "]")
                  [])]))))))
          []
          (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
          []
          (Tactic.simp
           "simp"
           []
           []
           []
           ["["
            [(Tactic.simpLemma
              []
              []
              (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma
          []
          []
          (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hm `ho])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ho
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Ext.¬´tacticExt___:_¬ª "ext" [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`ho []]
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
            "‚àÄ"
            (Lean.binderIdent `w)
            (¬´binderTerm‚àà_¬ª "‚àà" `K)
            ","
            (¬´term_=_¬ª
             (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
              "‚ü™"
              (¬´term_-_¬ª
               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
               "-"
               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " (Term.app `orthogonalProjectionFn [`K `x])))
              ", "
              `w
              "‚ü´")
             "="
             (num "0"))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`w `hw])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
                ","
                (Tactic.rwRule [] `inner_smul_left)
                ","
                (Tactic.rwRule
                 []
                 (Term.app `orthogonal_projection_fn_inner_eq_zero [(Term.hole "_") `w `hw]))
                ","
                (Tactic.rwRule [] `mul_zero)]
               "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`w `hw])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
             ","
             (Tactic.rwRule [] `inner_smul_left)
             ","
             (Tactic.rwRule
              []
              (Term.app `orthogonal_projection_fn_inner_eq_zero [(Term.hole "_") `w `hw]))
             ","
             (Tactic.rwRule [] `mul_zero)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `smul_sub)
         ","
         (Tactic.rwRule [] `inner_smul_left)
         ","
         (Tactic.rwRule
          []
          (Term.app `orthogonal_projection_fn_inner_eq_zero [(Term.hole "_") `w `hw]))
         ","
         (Tactic.rwRule [] `mul_zero)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_fn_inner_eq_zero [(Term.hole "_") `w `hw])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_smul_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_sub
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`w `hw])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
       "‚àÄ"
       (Lean.binderIdent `w)
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (¬´term_-_¬ª
          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
          "-"
          (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " (Term.app `orthogonalProjectionFn [`K `x])))
         ", "
         `w
         "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (¬´term_-_¬ª
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
         "-"
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " (Term.app `orthogonalProjectionFn [`K `x])))
        ", "
        `w
        "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (¬´term_-_¬ª
        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " `x)
        "-"
        (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª `c " ‚Ä¢ " (Term.app `orthogonalProjectionFn [`K `x])))
       ", "
       `w
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- The orthogonal projection onto a complete subspace. -/
  def
    orthogonalProjection
    : E ‚ÜíL[ ùïú ] K
    :=
      LinearMap.mkContinuous
        {
            toFun := fun v => ‚ü® orthogonalProjectionFn K v , orthogonal_projection_fn_mem v ‚ü©
              map_add'
                :=
                fun
                  x y
                    =>
                    by
                      have
                          hm
                            : orthogonalProjectionFn K x + orthogonalProjectionFn K y ‚àà K
                            :=
                            Submodule.add_mem
                              K orthogonal_projection_fn_mem x orthogonal_projection_fn_mem y
                        have
                          ho
                            :
                              ‚àÄ
                                w
                                ‚àà K
                                ,
                                ‚ü™
                                    x + y - orthogonalProjectionFn K x + orthogonalProjectionFn K y
                                    ,
                                    w
                                    ‚ü´
                                  =
                                  0
                            :=
                            by
                              intro w hw
                                rw
                                  [
                                    add_sub_add_comm
                                      ,
                                      inner_add_left
                                      ,
                                      orthogonal_projection_fn_inner_eq_zero _ w hw
                                      ,
                                      orthogonal_projection_fn_inner_eq_zero _ w hw
                                      ,
                                      add_zero
                                    ]
                        ext
                        simp [ eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hm ho ]
              map_smul'
                :=
                fun
                  c x
                    =>
                    by
                      have
                          hm
                            : c ‚Ä¢ orthogonalProjectionFn K x ‚àà K
                            :=
                            Submodule.smul_mem K _ orthogonal_projection_fn_mem x
                        have
                          ho
                            : ‚àÄ w ‚àà K , ‚ü™ c ‚Ä¢ x - c ‚Ä¢ orthogonalProjectionFn K x , w ‚ü´ = 0
                            :=
                            by
                              intro w hw
                                rw
                                  [
                                    ‚Üê smul_sub
                                      ,
                                      inner_smul_left
                                      ,
                                      orthogonal_projection_fn_inner_eq_zero _ w hw
                                      ,
                                      mul_zero
                                    ]
                        ext
                        simp [ eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hm ho ]
            }
          1
          fun
            x
              =>
              by
                simp only [ one_mul , LinearMap.coe_mk ]
                  refine' le_of_pow_le_pow 2 norm_nonneg _ by norm_num _
                  change ‚Äñ orthogonalProjectionFn K x ‚Äñ ^ 2 ‚â§ ‚Äñ x ‚Äñ ^ 2
                  nlinarith [ orthogonal_projection_fn_norm_sq K x ]
                    nlinarith [ orthogonal_projection_fn_norm_sq K x ]
#align orthogonal_projection orthogonalProjection

variable {K}

@[simp]
theorem orthogonal_projection_fn_eq (v : E) :
    orthogonalProjectionFn K v = (orthogonalProjection K v : E) :=
  rfl
#align orthogonal_projection_fn_eq orthogonal_projection_fn_eq

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment "/--" "The characterization of the orthogonal projection.  -/")]
      [(Term.attributes "@[" [(Term.attrInstance (Term.attrKind []) (Attr.simp "simp" [] []))] "]")]
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `orthogonal_projection_inner_eq_zero [])
      (Command.declSig
       [(Term.explicitBinder "(" [`v] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
         "‚àÄ"
         (Lean.binderIdent `w)
         (¬´binderTerm‚àà_¬ª "‚àà" `K)
         ","
         (¬´term_=_¬ª
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
           "‚ü™"
           (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjection [`K `v]))
           ", "
           `w
           "‚ü´")
          "="
          (num "0")))))
      (Command.declValSimple ":=" (Term.app `orthogonal_projection_fn_inner_eq_zero [`v]) [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_fn_inner_eq_zero [`v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_fn_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
       "‚àÄ"
       (Lean.binderIdent `w)
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjection [`K `v]))
         ", "
         `w
         "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjection [`K `v]))
        ", "
        `w
        "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjection [`K `v]))
       ", "
       `w
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- The characterization of the orthogonal projection.  -/ @[ simp ]
  theorem
    orthogonal_projection_inner_eq_zero
    ( v : E ) : ‚àÄ w ‚àà K , ‚ü™ v - orthogonalProjection K v , w ‚ü´ = 0
    := orthogonal_projection_fn_inner_eq_zero v
#align orthogonal_projection_inner_eq_zero orthogonal_projection_inner_eq_zero

/-- The difference of `v` from its orthogonal projection onto `K` is in `K·óÆ`.  -/
@[simp]
theorem sub_orthogonal_projection_mem_orthogonal (v : E) : v - orthogonalProjection K v ‚àà K·óÆ :=
  by
  intro w hw
  rw [inner_eq_zero_sym]
  exact orthogonal_projection_inner_eq_zero _ _ hw
#align sub_orthogonal_projection_mem_orthogonal sub_orthogonal_projection_mem_orthogonal

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "The orthogonal projection is the unique point in `K` with the\northogonality property. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_orthogonal_projection_of_mem_of_inner_eq_zero [])
      (Command.declSig
       [(Term.implicitBinder "{" [`u `v] [":" `E] "}")
        (Term.explicitBinder "(" [`hvm] [":" (¬´term_‚àà_¬ª `v "‚àà" `K)] [] ")")
        (Term.explicitBinder
         "("
         [`hvo]
         [":"
          (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
           "‚àÄ"
           (Lean.binderIdent `w)
           (¬´binderTerm‚àà_¬ª "‚àà" `K)
           ","
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª `u "-" `v)
             ", "
             `w
             "‚ü´")
            "="
            (num "0")))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `u]) ":" [`E] ")")
         "="
         `v)))
      (Command.declValSimple
       ":="
       (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hvm `hvo])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero [`hvm `hvo])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hvo
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hvm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª
       (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `u]) ":" [`E] ")")
       "="
       `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `u]) ":" [`E] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `E
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonalProjection [`K `u])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonalProjection
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
       "‚àÄ"
       (Lean.binderIdent `w)
       (¬´binderTerm‚àà_¬ª "‚àà" `K)
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" (¬´term_-_¬ª `u "-" `v) ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The orthogonal projection is the unique point in `K` with the
    orthogonality property. -/
  theorem
    eq_orthogonal_projection_of_mem_of_inner_eq_zero
    { u v : E } ( hvm : v ‚àà K ) ( hvo : ‚àÄ w ‚àà K , ‚ü™ u - v , w ‚ü´ = 0 )
      : ( orthogonalProjection K u : E ) = v
    := eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hvm hvo
#align
  eq_orthogonal_projection_of_mem_of_inner_eq_zero eq_orthogonal_projection_of_mem_of_inner_eq_zero

/-- The orthogonal projection of `y` on `U` minimizes the distance `‚Äñy - x‚Äñ` for `x ‚àà U`. -/
theorem orthogonal_projection_minimal {U : Submodule ùïú E} [CompleteSpace U] (y : E) :
    ‚Äñy - orthogonalProjection U y‚Äñ = ‚®Ö x : U, ‚Äñy - x‚Äñ :=
  by
  rw [norm_eq_infi_iff_inner_eq_zero _ (Submodule.coe_mem _)]
  exact orthogonal_projection_inner_eq_zero _
#align orthogonal_projection_minimal orthogonal_projection_minimal

/-- The orthogonal projections onto equal subspaces are coerced back to the same point in `E`. -/
theorem eq_orthogonal_projection_of_eq_submodule {K' : Submodule ùïú E} [CompleteSpace K']
    (h : K = K') (u : E) : (orthogonalProjection K u : E) = (orthogonalProjection K' u : E) :=
  by
  change orthogonalProjectionFn K u = orthogonalProjectionFn K' u
  congr
  exact h
#align eq_orthogonal_projection_of_eq_submodule eq_orthogonal_projection_of_eq_submodule

/-- The orthogonal projection sends elements of `K` to themselves. -/
@[simp]
theorem orthogonal_projection_mem_subspace_eq_self (v : K) : orthogonalProjection K v = v :=
  by
  ext
  apply eq_orthogonal_projection_of_mem_of_inner_eq_zero <;> simp
#align orthogonal_projection_mem_subspace_eq_self orthogonal_projection_mem_subspace_eq_self

/-- A point equals its orthogonal projection if and only if it lies in the subspace. -/
theorem orthogonal_projection_eq_self_iff {v : E} : (orthogonalProjection K v : E) = v ‚Üî v ‚àà K :=
  by
  refine' ‚ü®fun h => _, fun h => eq_orthogonal_projection_of_mem_of_inner_eq_zero h _‚ü©
  ¬∑ rw [‚Üê h]
    simp
  ¬∑ simp
#align orthogonal_projection_eq_self_iff orthogonal_projection_eq_self_iff

theorem LinearIsometry.map_orthogonal_projection {E E' : Type _} [InnerProductSpace ùïú E]
    [InnerProductSpace ùïú E'] (f : E ‚Üí‚Çó·µ¢[ùïú] E') (p : Submodule ùïú E) [CompleteSpace p] (x : E) :
    f (orthogonalProjection p x) = orthogonalProjection (p.map f.toLinearMap) (f x) :=
  by
  refine' ((eq_orthogonal_projection_of_mem_of_inner_eq_zero _) fun y hy => _).symm
  refine' Submodule.apply_coe_mem_map _ _
  rcases hy with ‚ü®x', hx', rfl : f x' = y‚ü©
  rw [‚Üê f.map_sub, f.inner_map_map, orthogonal_projection_inner_eq_zero x x' hx']
#align linear_isometry.map_orthogonal_projection LinearIsometry.map_orthogonal_projection

theorem LinearIsometry.map_orthogonal_projection' {E E' : Type _} [InnerProductSpace ùïú E]
    [InnerProductSpace ùïú E'] (f : E ‚Üí‚Çó·µ¢[ùïú] E') (p : Submodule ùïú E) [CompleteSpace p] (x : E) :
    f (orthogonalProjection p x) = orthogonalProjection (p.map f) (f x) :=
  by
  refine' ((eq_orthogonal_projection_of_mem_of_inner_eq_zero _) fun y hy => _).symm
  refine' Submodule.apply_coe_mem_map _ _
  rcases hy with ‚ü®x', hx', rfl : f x' = y‚ü©
  rw [‚Üê f.map_sub, f.inner_map_map, orthogonal_projection_inner_eq_zero x x' hx']
#align linear_isometry.map_orthogonal_projection' LinearIsometry.map_orthogonal_projection'

/-- Orthogonal projection onto the `submodule.map` of a subspace. -/
theorem orthogonal_projection_map_apply {E E' : Type _} [InnerProductSpace ùïú E]
    [InnerProductSpace ùïú E'] (f : E ‚âÉ‚Çó·µ¢[ùïú] E') (p : Submodule ùïú E) [CompleteSpace p] (x : E') :
    (orthogonalProjection (p.map (f.toLinearEquiv : E ‚Üí‚Çó[ùïú] E')) x : E') =
      f (orthogonalProjection p (f.symm x)) :=
  by
  simpa only [f.coe_to_linear_isometry, f.apply_symm_apply] using
    (f.to_linear_isometry.map_orthogonal_projection p (f.symm x)).symm
#align orthogonal_projection_map_apply orthogonal_projection_map_apply

/-- The orthogonal projection onto the trivial submodule is the zero map. -/
@[simp]
theorem orthogonal_projection_bot : orthogonalProjection (‚ä• : Submodule ùïú E) = 0 := by ext
#align orthogonal_projection_bot orthogonal_projection_bot

variable (K)

/-- The orthogonal projection has norm `‚â§ 1`. -/
theorem orthogonal_projection_norm_le : ‚ÄñorthogonalProjection K‚Äñ ‚â§ 1 :=
  LinearMap.mk_continuous_norm_le _ (by norm_num) _
#align orthogonal_projection_norm_le orthogonal_projection_norm_le

variable (ùïú)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `smul_orthogonal_projection_singleton [])
      (Command.declSig
       [(Term.implicitBinder "{" [`v] [":" `E] "}") (Term.explicitBinder "(" [`w] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Term.typeAscription
           "("
           (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
           ":"
           [`ùïú]
           ")")
          " ‚Ä¢ "
          (Term.typeAscription
           "("
           (Term.app
            `orthogonalProjection
            [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])
           ":"
           [`E]
           ")"))
         "="
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
          " ‚Ä¢ "
          `v))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (¬´term_=_¬ª
              (coeNotation
               "‚Üë"
               (Term.app
                `orthogonalProjection
                [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v)
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                  (Term.typeAscription
                   "("
                   (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                   ":"
                   [`ùïú]
                   ")")
                  " ‚Ä¢ "
                  `w)]))
              "="
              (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
               (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
               " ‚Ä¢ "
               `v))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `this]))])))))
           []
           (Tactic.apply "apply" `eq_orthogonal_projection_of_mem_of_inner_eq_zero)
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Submodule.mem_span_singleton)] "]")
              [])
             []
             (Mathlib.Tactic.¬´tacticUse_,,¬ª
              "use"
              [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.intro "intro" [`x `hx])
             []
             (Std.Tactic.obtain
              "obtain"
              [(Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                    [])]
                  "‚ü©")])]
              []
              [":=" [(Term.app `submodule.mem_span_singleton.mp [`hx])]])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hv []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (¬´term_^_¬ª
                    (coeNotation "‚Üë" (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ"))
                    "^"
                    (num "2"))
                   "="
                   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `v "‚ü´")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.NormCast.tacticNorm_cast__ "norm_cast" [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     []
                     ["[" [(Tactic.simpLemma [] [] `norm_sq_eq_inner)] "]"]
                     [])]))))))
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `inner_sub_left)
                ","
                (Tactic.simpLemma [] [] `inner_smul_left)
                ","
                (Tactic.simpLemma [] [] `inner_smul_right)
                ","
                (Tactic.simpLemma [] [] `map_div‚ÇÄ)
                ","
                (Tactic.simpLemma [] [] `mul_comm)
                ","
                (Tactic.simpLemma [] [] `hv)
                ","
                (Tactic.simpLemma [] [] `InnerProductSpace.conj_sym)
                ","
                (Tactic.simpLemma [] [] `hv)]
               "]"]
              [])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (¬´term_=_¬ª
             (coeNotation
              "‚Üë"
              (Term.app
               `orthogonalProjection
               [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v)
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (Term.typeAscription
                  "("
                  (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                  ":"
                  [`ùïú]
                  ")")
                 " ‚Ä¢ "
                 `w)]))
             "="
             (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
              (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
              " ‚Ä¢ "
              `v))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `this]))])))))
          []
          (Tactic.apply "apply" `eq_orthogonal_projection_of_mem_of_inner_eq_zero)
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Submodule.mem_span_singleton)] "]")
             [])
            []
            (Mathlib.Tactic.¬´tacticUse_,,¬ª
             "use"
             [(Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.intro "intro" [`x `hx])
            []
            (Std.Tactic.obtain
             "obtain"
             [(Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                   [])]
                 "‚ü©")])]
             []
             [":=" [(Term.app `submodule.mem_span_singleton.mp [`hx])]])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hv []]
               [(Term.typeSpec
                 ":"
                 (¬´term_=_¬ª
                  (¬´term_^_¬ª
                   (coeNotation "‚Üë" (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ"))
                   "^"
                   (num "2"))
                  "="
                  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `v "‚ü´")))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.NormCast.tacticNorm_cast__ "norm_cast" [])
                   []
                   (Tactic.simp
                    "simp"
                    []
                    []
                    []
                    ["[" [(Tactic.simpLemma [] [] `norm_sq_eq_inner)] "]"]
                    [])]))))))
            []
            (Tactic.simp
             "simp"
             []
             []
             []
             ["["
              [(Tactic.simpLemma [] [] `inner_sub_left)
               ","
               (Tactic.simpLemma [] [] `inner_smul_left)
               ","
               (Tactic.simpLemma [] [] `inner_smul_right)
               ","
               (Tactic.simpLemma [] [] `map_div‚ÇÄ)
               ","
               (Tactic.simpLemma [] [] `mul_comm)
               ","
               (Tactic.simpLemma [] [] `hv)
               ","
               (Tactic.simpLemma [] [] `InnerProductSpace.conj_sym)
               ","
               (Tactic.simpLemma [] [] `hv)]
              "]"]
             [])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.intro "intro" [`x `hx])
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "‚ü®"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `c)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
               [])]
             "‚ü©")])]
         []
         [":=" [(Term.app `submodule.mem_span_singleton.mp [`hx])]])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hv []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª
              (¬´term_^_¬ª
               (coeNotation "‚Üë" (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ"))
               "^"
               (num "2"))
              "="
              (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `v "‚ü´")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.NormCast.tacticNorm_cast__ "norm_cast" [])
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["[" [(Tactic.simpLemma [] [] `norm_sq_eq_inner)] "]"]
                [])]))))))
        []
        (Tactic.simp
         "simp"
         []
         []
         []
         ["["
          [(Tactic.simpLemma [] [] `inner_sub_left)
           ","
           (Tactic.simpLemma [] [] `inner_smul_left)
           ","
           (Tactic.simpLemma [] [] `inner_smul_right)
           ","
           (Tactic.simpLemma [] [] `map_div‚ÇÄ)
           ","
           (Tactic.simpLemma [] [] `mul_comm)
           ","
           (Tactic.simpLemma [] [] `hv)
           ","
           (Tactic.simpLemma [] [] `InnerProductSpace.conj_sym)
           ","
           (Tactic.simpLemma [] [] `hv)]
          "]"]
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [] `inner_sub_left)
         ","
         (Tactic.simpLemma [] [] `inner_smul_left)
         ","
         (Tactic.simpLemma [] [] `inner_smul_right)
         ","
         (Tactic.simpLemma [] [] `map_div‚ÇÄ)
         ","
         (Tactic.simpLemma [] [] `mul_comm)
         ","
         (Tactic.simpLemma [] [] `hv)
         ","
         (Tactic.simpLemma [] [] `InnerProductSpace.conj_sym)
         ","
         (Tactic.simpLemma [] [] `hv)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `InnerProductSpace.conj_sym
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_div‚ÇÄ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_smul_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_smul_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_sub_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hv []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (¬´term_^_¬ª
             (coeNotation "‚Üë" (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ"))
             "^"
             (num "2"))
            "="
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `v "‚ü´")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.NormCast.tacticNorm_cast__ "norm_cast" [])
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["[" [(Tactic.simpLemma [] [] `norm_sq_eq_inner)] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.NormCast.tacticNorm_cast__ "norm_cast" [])
          []
          (Tactic.simp
           "simp"
           []
           []
           []
           ["[" [(Tactic.simpLemma [] [] `norm_sq_eq_inner)] "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `norm_sq_eq_inner)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_sq_eq_inner
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.NormCast.tacticNorm_cast__ "norm_cast" [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (¬´term_^_¬ª
        (coeNotation "‚Üë" (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ"))
        "^"
        (num "2"))
       "="
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `v "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `v "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  smul_orthogonal_projection_singleton
  { v : E } ( w : E ) : ( ‚Äñ v ‚Äñ ^ 2 : ùïú ) ‚Ä¢ ( orthogonalProjection ùïú ‚àô v w : E ) = ‚ü™ v , w ‚ü´ ‚Ä¢ v
  :=
    by
      suffices
          ‚Üë orthogonalProjection ùïú ‚àô v ( ‚Äñ v ‚Äñ ^ 2 : ùïú ) ‚Ä¢ w = ‚ü™ v , w ‚ü´ ‚Ä¢ v by simpa using this
        apply eq_orthogonal_projection_of_mem_of_inner_eq_zero
        ¬∑ rw [ Submodule.mem_span_singleton ] use ‚ü™ v , w ‚ü´
        ¬∑
          intro x hx
            obtain ‚ü® c , rfl ‚ü© := submodule.mem_span_singleton.mp hx
            have hv : ‚Üë ‚Äñ v ‚Äñ ^ 2 = ‚ü™ v , v ‚ü´ := by norm_cast simp [ norm_sq_eq_inner ]
            simp
              [
                inner_sub_left
                  ,
                  inner_smul_left
                  ,
                  inner_smul_right
                  ,
                  map_div‚ÇÄ
                  ,
                  mul_comm
                  ,
                  hv
                  ,
                  InnerProductSpace.conj_sym
                  ,
                  hv
                ]
#align smul_orthogonal_projection_singleton smul_orthogonal_projection_singleton

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment "/--" "Formula for orthogonal projection onto a single vector. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `orthogonal_projection_singleton [])
      (Command.declSig
       [(Term.implicitBinder "{" [`v] [":" `E] "}") (Term.explicitBinder "(" [`w] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Term.typeAscription
          "("
          (Term.app `orthogonalProjection [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])
          ":"
          [`E]
          ")")
         "="
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (¬´term_/_¬ª
           (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
           "/"
           (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2")))
          " ‚Ä¢ "
          `v))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Classical.¬´tacticBy_cases_:_¬ª "by_cases" [`hv ":"] (¬´term_=_¬ª `v "=" (num "0")))
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `hv)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `eq_orthogonal_projection_of_eq_submodule
                  [(Term.app `Submodule.span_zero_singleton [`ùïú])]))]
               "]")
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.simp "simp" [] [] [] [] [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.tacticInfer_instance "infer_instance")])])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hv' []]
              [(Term.typeSpec
                ":"
                (¬´term_‚â†_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "‚â†" (num "0")))]
              ":="
              (Term.app `ne_of_gt [(Term.app `norm_pos_iff.mpr [`hv])]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`key []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                  (¬´term_*_¬ª
                   (¬´term_‚Åª¬π¬ª
                    (Term.typeAscription
                     "("
                     (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                     ":"
                     [`ùïú]
                     ")")
                    "‚Åª¬π")
                   "*"
                   (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2")))
                  " ‚Ä¢ "
                  (coeNotation
                   "‚Üë"
                   (Term.app
                    `orthogonalProjection
                    [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])))
                 "="
                 (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                  (¬´term_*_¬ª
                   (¬´term_‚Åª¬π¬ª
                    (Term.typeAscription
                     "("
                     (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                     ":"
                     [`ùïú]
                     ")")
                    "‚Åª¬π")
                   "*"
                   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´"))
                  " ‚Ä¢ "
                  `v)))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.simp
                   "simp"
                   []
                   []
                   []
                   ["["
                    [(Tactic.simpLemma [] [] `mul_smul)
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
                    "]"]
                   [])]))))))
           []
           (Tactic.¬´tactic_<;>_¬ª
            (convert "convert" [] `key [])
            "<;>"
            (Tactic.fieldSimp
             "field_simp"
             []
             []
             []
             [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hv')] "]")]
             []))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Classical.¬´tacticBy_cases_:_¬ª "by_cases" [`hv ":"] (¬´term_=_¬ª `v "=" (num "0")))
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hv)
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `eq_orthogonal_projection_of_eq_submodule
                 [(Term.app `Submodule.span_zero_singleton [`ùïú])]))]
              "]")
             [])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.simp "simp" [] [] [] [] [])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.tacticInfer_instance "infer_instance")])])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hv' []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â†_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "‚â†" (num "0")))]
             ":="
             (Term.app `ne_of_gt [(Term.app `norm_pos_iff.mpr [`hv])]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`key []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (¬´term_*_¬ª
                  (¬´term_‚Åª¬π¬ª
                   (Term.typeAscription
                    "("
                    (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                    ":"
                    [`ùïú]
                    ")")
                   "‚Åª¬π")
                  "*"
                  (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2")))
                 " ‚Ä¢ "
                 (coeNotation
                  "‚Üë"
                  (Term.app
                   `orthogonalProjection
                   [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])))
                "="
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (¬´term_*_¬ª
                  (¬´term_‚Åª¬π¬ª
                   (Term.typeAscription
                    "("
                    (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                    ":"
                    [`ùïú]
                    ")")
                   "‚Åª¬π")
                  "*"
                  (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´"))
                 " ‚Ä¢ "
                 `v)))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma [] [] `mul_smul)
                    ","
                    (Tactic.simpLemma
                     []
                     []
                     (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
                   "]"]
                  [])]))))))
          []
          (Tactic.¬´tactic_<;>_¬ª
           (convert "convert" [] `key [])
           "<;>"
           (Tactic.fieldSimp
            "field_simp"
            []
            []
            []
            [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hv')] "]")]
            []))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.¬´tactic_<;>_¬ª
       (convert "convert" [] `key [])
       "<;>"
       (Tactic.fieldSimp
        "field_simp"
        []
        []
        []
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hv')] "]")]
        []))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.fieldSimp
       "field_simp"
       []
       []
       []
       [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hv')] "]")]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 2 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1, tactic))
      (convert "convert" [] `key [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `key
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`key []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
             (¬´term_*_¬ª
              (¬´term_‚Åª¬π¬ª
               (Term.typeAscription
                "("
                (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                ":"
                [`ùïú]
                ")")
               "‚Åª¬π")
              "*"
              (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2")))
             " ‚Ä¢ "
             (coeNotation
              "‚Üë"
              (Term.app
               `orthogonalProjection
               [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])))
            "="
            (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
             (¬´term_*_¬ª
              (¬´term_‚Åª¬π¬ª
               (Term.typeAscription
                "("
                (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
                ":"
                [`ùïú]
                ")")
               "‚Åª¬π")
              "*"
              (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´"))
             " ‚Ä¢ "
             `v)))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `mul_smul)
                ","
                (Tactic.simpLemma [] [] (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
               "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `mul_smul)
             ","
             (Tactic.simpLemma [] [] (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [] `mul_smul)
         ","
         (Tactic.simpLemma [] [] (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `smul_orthogonal_projection_singleton [`ùïú `w])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ùïú
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `smul_orthogonal_projection_singleton
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
        (¬´term_*_¬ª
         (¬´term_‚Åª¬π¬ª
          (Term.typeAscription
           "("
           (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
           ":"
           [`ùïú]
           ")")
          "‚Åª¬π")
         "*"
         (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2")))
        " ‚Ä¢ "
        (coeNotation
         "‚Üë"
         (Term.app
          `orthogonalProjection
          [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])))
       "="
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
        (¬´term_*_¬ª
         (¬´term_‚Åª¬π¬ª
          (Term.typeAscription
           "("
           (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
           ":"
           [`ùïú]
           ")")
          "‚Åª¬π")
         "*"
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´"))
        " ‚Ä¢ "
        `v))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
       (¬´term_*_¬ª
        (¬´term_‚Åª¬π¬ª
         (Term.typeAscription
          "("
          (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
          ":"
          [`ùïú]
          ")")
         "‚Åª¬π")
        "*"
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´"))
       " ‚Ä¢ "
       `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (¬´term_*_¬ª
       (¬´term_‚Åª¬π¬ª
        (Term.typeAscription
         "("
         (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "^" (num "2"))
         ":"
         [`ùïú]
         ")")
        "‚Åª¬π")
       "*"
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- Formula for orthogonal projection onto a single vector. -/
  theorem
    orthogonal_projection_singleton
    { v : E } ( w : E ) : ( orthogonalProjection ùïú ‚àô v w : E ) = ‚ü™ v , w ‚ü´ / ‚Äñ v ‚Äñ ^ 2 ‚Ä¢ v
    :=
      by
        by_cases hv : v = 0
          ¬∑
            rw [ hv , eq_orthogonal_projection_of_eq_submodule Submodule.span_zero_singleton ùïú ]
              ¬∑ simp
              ¬∑ infer_instance
          have hv' : ‚Äñ v ‚Äñ ‚â† 0 := ne_of_gt norm_pos_iff.mpr hv
          have
            key
              :
                ( ‚Äñ v ‚Äñ ^ 2 : ùïú ) ‚Åª¬π * ‚Äñ v ‚Äñ ^ 2 ‚Ä¢ ‚Üë orthogonalProjection ùïú ‚àô v w
                  =
                  ( ‚Äñ v ‚Äñ ^ 2 : ùïú ) ‚Åª¬π * ‚ü™ v , w ‚ü´ ‚Ä¢ v
              :=
              by simp [ mul_smul , smul_orthogonal_projection_singleton ùïú w ]
          convert key <;> field_simp [ hv' ]
#align orthogonal_projection_singleton orthogonal_projection_singleton

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment "/--" "Formula for orthogonal projection onto a single unit vector. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `orthogonal_projection_unit_singleton [])
      (Command.declSig
       [(Term.implicitBinder "{" [`v] [":" `E] "}")
        (Term.explicitBinder
         "("
         [`hv]
         [":" (¬´term_=_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `v "‚Äñ") "=" (num "1"))]
         []
         ")")
        (Term.explicitBinder "(" [`w] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Term.typeAscription
          "("
          (Term.app `orthogonalProjection [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])
          ":"
          [`E]
          ")")
         "="
         (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
          " ‚Ä¢ "
          `v))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule
               [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
               (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
             "]")
            [])
           []
           (Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hv)] "]"] [])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
              (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
            "]")
           [])
          []
          (Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hv)] "]"] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hv)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
          (Term.app `smul_orthogonal_projection_singleton [`ùïú `w]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `smul_orthogonal_projection_singleton [`ùïú `w])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ùïú
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `smul_orthogonal_projection_singleton
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª
       (Term.typeAscription
        "("
        (Term.app `orthogonalProjection [(Submodule.LinearAlgebra.Span.¬´term_‚àô_¬ª `ùïú " ‚àô " `v) `w])
        ":"
        [`E]
        ")")
       "="
       (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
        " ‚Ä¢ "
        `v))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
       " ‚Ä¢ "
       `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- Formula for orthogonal projection onto a single unit vector. -/
  theorem
    orthogonal_projection_unit_singleton
    { v : E } ( hv : ‚Äñ v ‚Äñ = 1 ) ( w : E ) : ( orthogonalProjection ùïú ‚àô v w : E ) = ‚ü™ v , w ‚ü´ ‚Ä¢ v
    := by rw [ ‚Üê smul_orthogonal_projection_singleton ùïú w ] simp [ hv ]
#align orthogonal_projection_unit_singleton orthogonal_projection_unit_singleton

end orthogonalProjection

section reflection

variable {ùïú} (K) [CompleteSpace K]

/-- Auxiliary definition for `reflection`: the reflection as a linear equivalence. -/
def reflectionLinearEquiv : E ‚âÉ‚Çó[ùïú] E :=
  LinearEquiv.ofInvolutive
    (bit0 (K.Subtype.comp (orthogonalProjection K).toLinearMap) - LinearMap.id) fun x => by
    simp [bit0]
#align reflection_linear_equiv reflectionLinearEquiv

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Reflection in a complete subspace of an inner product space.  The word \"reflection\" is\nsometimes understood to mean specifically reflection in a codimension-one subspace, and sometimes\nmore generally to cover operations such as reflection in a point.  The definition here, of\nreflection in a subspace, is a more general sense of the word that includes both those common\ncases. -/")]
      []
      []
      []
      []
      [])
     (Command.def
      "def"
      (Command.declId `reflection [])
      (Command.optDeclSig
       []
       [(Term.typeSpec
         ":"
         (Analysis.NormedSpace.LinearIsometry.¬´term_‚âÉ‚Çó·µ¢[_]_¬ª `E " ‚âÉ‚Çó·µ¢[" `ùïú "] " `E))])
      (Command.declValSimple
       ":="
       (Term.structInst
        "{"
        [[(Term.app `reflectionLinearEquiv [`K])] "with"]
        [(Term.structInstField
          (Term.structInstLVal `norm_map' [])
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.intro "intro" [`x])
              []
              (Tactic.tacticLet_
               "let"
               (Term.letDecl
                (Term.letIdDecl
                 `w
                 []
                 [(Term.typeSpec ":" `K)]
                 ":="
                 (Term.app `orthogonalProjection [`K `x]))))
              []
              (Tactic.tacticLet_
               "let"
               (Term.letDecl (Term.letIdDecl `v [] [] ":=" (¬´term_-_¬ª `x "-" `w))))
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (¬´term_=_¬ª
                    (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
                    "="
                    (num "0")))]
                 ":="
                 (Term.app
                  `orthogonal_projection_inner_eq_zero
                  [`x `w (Term.proj `w "." (fieldIdx "2"))]))))
              []
              (convert "convert" [] (Term.app `norm_sub_eq_norm_add [`this]) ["using" (num "2")])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `LinearEquiv.coe_mk)
                   ","
                   (Tactic.rwRule [] `reflectionLinearEquiv)
                   ","
                   (Tactic.rwRule [] `LinearEquiv.to_fun_eq_coe)
                   ","
                   (Tactic.rwRule [] `LinearEquiv.coe_of_involutive)
                   ","
                   (Tactic.rwRule [] `LinearMap.sub_apply)
                   ","
                   (Tactic.rwRule [] `LinearMap.id_apply)
                   ","
                   (Tactic.rwRule [] `bit0)
                   ","
                   (Tactic.rwRule [] `LinearMap.add_apply)
                   ","
                   (Tactic.rwRule [] `LinearMap.comp_apply)
                   ","
                   (Tactic.rwRule [] `Submodule.subtype_apply)
                   ","
                   (Tactic.rwRule [] `ContinuousLinearMap.to_linear_map_eq_coe)
                   ","
                   (Tactic.rwRule [] `ContinuousLinearMap.coe_coe)]
                  "]")
                 [])
                []
                (Tactic.dsimp
                 "dsimp"
                 []
                 []
                 []
                 ["[" [(Tactic.simpLemma [] [] `w) "," (Tactic.simpLemma [] [] `v)] "]"]
                 [])
                []
                (Tactic.abel "abel" [] [])])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Tactic.simp
                 "simp"
                 []
                 []
                 ["only"]
                 ["["
                  [(Tactic.simpLemma [] [] `add_sub_cancel'_right)
                   ","
                   (Tactic.simpLemma [] [] `eq_self_iff_true)]
                  "]"]
                 [])])]))))]
        (Term.optEllipsis [])
        []
        "}")
       [])
      []
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.structInst
       "{"
       [[(Term.app `reflectionLinearEquiv [`K])] "with"]
       [(Term.structInstField
         (Term.structInstLVal `norm_map' [])
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`x])
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `w
                []
                [(Term.typeSpec ":" `K)]
                ":="
                (Term.app `orthogonalProjection [`K `x]))))
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl (Term.letIdDecl `v [] [] ":=" (¬´term_-_¬ª `x "-" `w))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
                   "="
                   (num "0")))]
                ":="
                (Term.app
                 `orthogonal_projection_inner_eq_zero
                 [`x `w (Term.proj `w "." (fieldIdx "2"))]))))
             []
             (convert "convert" [] (Term.app `norm_sub_eq_norm_add [`this]) ["using" (num "2")])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `LinearEquiv.coe_mk)
                  ","
                  (Tactic.rwRule [] `reflectionLinearEquiv)
                  ","
                  (Tactic.rwRule [] `LinearEquiv.to_fun_eq_coe)
                  ","
                  (Tactic.rwRule [] `LinearEquiv.coe_of_involutive)
                  ","
                  (Tactic.rwRule [] `LinearMap.sub_apply)
                  ","
                  (Tactic.rwRule [] `LinearMap.id_apply)
                  ","
                  (Tactic.rwRule [] `bit0)
                  ","
                  (Tactic.rwRule [] `LinearMap.add_apply)
                  ","
                  (Tactic.rwRule [] `LinearMap.comp_apply)
                  ","
                  (Tactic.rwRule [] `Submodule.subtype_apply)
                  ","
                  (Tactic.rwRule [] `ContinuousLinearMap.to_linear_map_eq_coe)
                  ","
                  (Tactic.rwRule [] `ContinuousLinearMap.coe_coe)]
                 "]")
                [])
               []
               (Tactic.dsimp
                "dsimp"
                []
                []
                []
                ["[" [(Tactic.simpLemma [] [] `w) "," (Tactic.simpLemma [] [] `v)] "]"]
                [])
               []
               (Tactic.abel "abel" [] [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `add_sub_cancel'_right)
                  ","
                  (Tactic.simpLemma [] [] `eq_self_iff_true)]
                 "]"]
                [])])]))))]
       (Term.optEllipsis [])
       []
       "}")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.structInstField', expected 'Lean.Parser.Term.structInstFieldAbbrev'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`x])
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `w
             []
             [(Term.typeSpec ":" `K)]
             ":="
             (Term.app `orthogonalProjection [`K `x]))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl (Term.letIdDecl `v [] [] ":=" (¬´term_-_¬ª `x "-" `w))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.app
              `orthogonal_projection_inner_eq_zero
              [`x `w (Term.proj `w "." (fieldIdx "2"))]))))
          []
          (convert "convert" [] (Term.app `norm_sub_eq_norm_add [`this]) ["using" (num "2")])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `LinearEquiv.coe_mk)
               ","
               (Tactic.rwRule [] `reflectionLinearEquiv)
               ","
               (Tactic.rwRule [] `LinearEquiv.to_fun_eq_coe)
               ","
               (Tactic.rwRule [] `LinearEquiv.coe_of_involutive)
               ","
               (Tactic.rwRule [] `LinearMap.sub_apply)
               ","
               (Tactic.rwRule [] `LinearMap.id_apply)
               ","
               (Tactic.rwRule [] `bit0)
               ","
               (Tactic.rwRule [] `LinearMap.add_apply)
               ","
               (Tactic.rwRule [] `LinearMap.comp_apply)
               ","
               (Tactic.rwRule [] `Submodule.subtype_apply)
               ","
               (Tactic.rwRule [] `ContinuousLinearMap.to_linear_map_eq_coe)
               ","
               (Tactic.rwRule [] `ContinuousLinearMap.coe_coe)]
              "]")
             [])
            []
            (Tactic.dsimp
             "dsimp"
             []
             []
             []
             ["[" [(Tactic.simpLemma [] [] `w) "," (Tactic.simpLemma [] [] `v)] "]"]
             [])
            []
            (Tactic.abel "abel" [] [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `add_sub_cancel'_right)
               ","
               (Tactic.simpLemma [] [] `eq_self_iff_true)]
              "]"]
             [])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `add_sub_cancel'_right)
           ","
           (Tactic.simpLemma [] [] `eq_self_iff_true)]
          "]"]
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `add_sub_cancel'_right)
         ","
         (Tactic.simpLemma [] [] `eq_self_iff_true)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq_self_iff_true
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_sub_cancel'_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `LinearEquiv.coe_mk)
           ","
           (Tactic.rwRule [] `reflectionLinearEquiv)
           ","
           (Tactic.rwRule [] `LinearEquiv.to_fun_eq_coe)
           ","
           (Tactic.rwRule [] `LinearEquiv.coe_of_involutive)
           ","
           (Tactic.rwRule [] `LinearMap.sub_apply)
           ","
           (Tactic.rwRule [] `LinearMap.id_apply)
           ","
           (Tactic.rwRule [] `bit0)
           ","
           (Tactic.rwRule [] `LinearMap.add_apply)
           ","
           (Tactic.rwRule [] `LinearMap.comp_apply)
           ","
           (Tactic.rwRule [] `Submodule.subtype_apply)
           ","
           (Tactic.rwRule [] `ContinuousLinearMap.to_linear_map_eq_coe)
           ","
           (Tactic.rwRule [] `ContinuousLinearMap.coe_coe)]
          "]")
         [])
        []
        (Tactic.dsimp
         "dsimp"
         []
         []
         []
         ["[" [(Tactic.simpLemma [] [] `w) "," (Tactic.simpLemma [] [] `v)] "]"]
         [])
        []
        (Tactic.abel "abel" [] [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.dsimp
       "dsimp"
       []
       []
       []
       ["[" [(Tactic.simpLemma [] [] `w) "," (Tactic.simpLemma [] [] `v)] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `LinearEquiv.coe_mk)
         ","
         (Tactic.rwRule [] `reflectionLinearEquiv)
         ","
         (Tactic.rwRule [] `LinearEquiv.to_fun_eq_coe)
         ","
         (Tactic.rwRule [] `LinearEquiv.coe_of_involutive)
         ","
         (Tactic.rwRule [] `LinearMap.sub_apply)
         ","
         (Tactic.rwRule [] `LinearMap.id_apply)
         ","
         (Tactic.rwRule [] `bit0)
         ","
         (Tactic.rwRule [] `LinearMap.add_apply)
         ","
         (Tactic.rwRule [] `LinearMap.comp_apply)
         ","
         (Tactic.rwRule [] `Submodule.subtype_apply)
         ","
         (Tactic.rwRule [] `ContinuousLinearMap.to_linear_map_eq_coe)
         ","
         (Tactic.rwRule [] `ContinuousLinearMap.coe_coe)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ContinuousLinearMap.coe_coe
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ContinuousLinearMap.to_linear_map_eq_coe
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Submodule.subtype_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearMap.comp_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearMap.add_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `bit0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearMap.id_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearMap.sub_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearEquiv.coe_of_involutive
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearEquiv.to_fun_eq_coe
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `reflectionLinearEquiv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearEquiv.coe_mk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] (Term.app `norm_sub_eq_norm_add [`this]) ["using" (num "2")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `norm_sub_eq_norm_add [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_sub_eq_norm_add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
            "="
            (num "0")))]
         ":="
         (Term.app
          `orthogonal_projection_inner_eq_zero
          [`x `w (Term.proj `w "." (fieldIdx "2"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `orthogonal_projection_inner_eq_zero [`x `w (Term.proj `w "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `w "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `orthogonal_projection_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `w "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Reflection in a complete subspace of an inner product space.  The word "reflection" is
    sometimes understood to mean specifically reflection in a codimension-one subspace, and sometimes
    more generally to cover operations such as reflection in a point.  The definition here, of
    reflection in a subspace, is a more general sense of the word that includes both those common
    cases. -/
  def
    reflection
    : E ‚âÉ‚Çó·µ¢[ ùïú ] E
    :=
      {
        reflectionLinearEquiv K with
        norm_map'
          :=
          by
            intro x
              let w : K := orthogonalProjection K x
              let v := x - w
              have : ‚ü™ v , w ‚ü´ = 0 := orthogonal_projection_inner_eq_zero x w w . 2
              convert norm_sub_eq_norm_add this using 2
              ¬∑
                rw
                    [
                      LinearEquiv.coe_mk
                        ,
                        reflectionLinearEquiv
                        ,
                        LinearEquiv.to_fun_eq_coe
                        ,
                        LinearEquiv.coe_of_involutive
                        ,
                        LinearMap.sub_apply
                        ,
                        LinearMap.id_apply
                        ,
                        bit0
                        ,
                        LinearMap.add_apply
                        ,
                        LinearMap.comp_apply
                        ,
                        Submodule.subtype_apply
                        ,
                        ContinuousLinearMap.to_linear_map_eq_coe
                        ,
                        ContinuousLinearMap.coe_coe
                      ]
                  dsimp [ w , v ]
                  abel
              ¬∑ simp only [ add_sub_cancel'_right , eq_self_iff_true ]
        }
#align reflection reflection

variable {K}

/-- The result of reflecting. -/
theorem reflection_apply (p : E) : reflection K p = bit0 ‚Üë(orthogonalProjection K p) - p :=
  rfl
#align reflection_apply reflection_apply

/-- Reflection is its own inverse. -/
@[simp]
theorem reflection_symm : (reflection K).symm = reflection K :=
  rfl
#align reflection_symm reflection_symm

/-- Reflection is its own inverse. -/
@[simp]
theorem reflection_inv : (reflection K)‚Åª¬π = reflection K :=
  rfl
#align reflection_inv reflection_inv

variable (K)

/-- Reflecting twice in the same subspace. -/
@[simp]
theorem reflection_reflection (p : E) : reflection K (reflection K p) = p :=
  (reflection K).left_inv p
#align reflection_reflection reflection_reflection

/-- Reflection is involutive. -/
theorem reflection_involutive : Function.Involutive (reflection K) :=
  reflection_reflection K
#align reflection_involutive reflection_involutive

/-- Reflection is involutive. -/
@[simp]
theorem reflection_trans_reflection :
    (reflection K).trans (reflection K) = LinearIsometryEquiv.refl ùïú E :=
  LinearIsometryEquiv.ext <| reflection_involutive K
#align reflection_trans_reflection reflection_trans_reflection

/-- Reflection is involutive. -/
@[simp]
theorem reflection_mul_reflection : reflection K * reflection K = 1 :=
  reflection_trans_reflection _
#align reflection_mul_reflection reflection_mul_reflection

variable {K}

/-- A point is its own reflection if and only if it is in the subspace. -/
theorem reflection_eq_self_iff (x : E) : reflection K x = x ‚Üî x ‚àà K :=
  by
  rw [‚Üê orthogonal_projection_eq_self_iff, reflection_apply, sub_eq_iff_eq_add', ‚Üê two_smul ùïú, ‚Üê
    two_smul' ùïú]
  refine' (smul_right_injective E _).eq_iff
  exact two_ne_zero
#align reflection_eq_self_iff reflection_eq_self_iff

theorem reflection_mem_subspace_eq_self {x : E} (hx : x ‚àà K) : reflection K x = x :=
  (reflection_eq_self_iff x).mpr hx
#align reflection_mem_subspace_eq_self reflection_mem_subspace_eq_self

/-- Reflection in the `submodule.map` of a subspace. -/
theorem reflection_map_apply {E E' : Type _} [InnerProductSpace ùïú E] [InnerProductSpace ùïú E']
    (f : E ‚âÉ‚Çó·µ¢[ùïú] E') (K : Submodule ùïú E) [CompleteSpace K] (x : E') :
    reflection (K.map (f.toLinearEquiv : E ‚Üí‚Çó[ùïú] E')) x = f (reflection K (f.symm x)) := by
  simp [bit0, reflection_apply, orthogonal_projection_map_apply f K x]
#align reflection_map_apply reflection_map_apply

/-- Reflection in the `submodule.map` of a subspace. -/
theorem reflection_map {E E' : Type _} [InnerProductSpace ùïú E] [InnerProductSpace ùïú E']
    (f : E ‚âÉ‚Çó·µ¢[ùïú] E') (K : Submodule ùïú E) [CompleteSpace K] :
    reflection (K.map (f.toLinearEquiv : E ‚Üí‚Çó[ùïú] E')) = f.symm.trans ((reflection K).trans f) :=
  LinearIsometryEquiv.ext <| reflection_map_apply f K
#align reflection_map reflection_map

/-- Reflection through the trivial subspace {0} is just negation. -/
@[simp]
theorem reflection_bot : reflection (‚ä• : Submodule ùïú E) = LinearIsometryEquiv.neg ùïú := by
  ext <;> simp [reflection_apply]
#align reflection_bot reflection_bot

end reflection

section Orthogonal

/-- If `K‚ÇÅ` is complete and contained in `K‚ÇÇ`, `K‚ÇÅ` and `K‚ÇÅ·óÆ ‚äì K‚ÇÇ` span `K‚ÇÇ`. -/
theorem Submodule.sup_orthogonal_inf_of_complete_space {K‚ÇÅ K‚ÇÇ : Submodule ùïú E} (h : K‚ÇÅ ‚â§ K‚ÇÇ)
    [CompleteSpace K‚ÇÅ] : K‚ÇÅ ‚äî K‚ÇÅ·óÆ ‚äì K‚ÇÇ = K‚ÇÇ := by
  ext x
  rw [Submodule.mem_sup]
  let v : K‚ÇÅ := orthogonalProjection K‚ÇÅ x
  have hvm : x - v ‚àà K‚ÇÅ·óÆ := sub_orthogonal_projection_mem_orthogonal x
  constructor
  ¬∑ rintro ‚ü®y, hy, z, hz, rfl‚ü©
    exact K‚ÇÇ.add_mem (h hy) hz.2
  ¬∑ exact fun hx => ‚ü®v, v.prop, x - v, ‚ü®hvm, K‚ÇÇ.sub_mem hx (h v.prop)‚ü©, add_sub_cancel'_right _ _‚ü©
#align submodule.sup_orthogonal_inf_of_complete_space Submodule.sup_orthogonal_inf_of_complete_space

variable {K}

/-- If `K` is complete, `K` and `K·óÆ` span the whole space. -/
theorem Submodule.sup_orthogonal_of_complete_space [CompleteSpace K] : K ‚äî K·óÆ = ‚ä§ :=
  by
  convert Submodule.sup_orthogonal_inf_of_complete_space (le_top : K ‚â§ ‚ä§)
  simp
#align submodule.sup_orthogonal_of_complete_space Submodule.sup_orthogonal_of_complete_space

variable (K)

/-- If `K` is complete, any `v` in `E` can be expressed as a sum of elements of `K` and `K·óÆ`. -/
theorem Submodule.exists_sum_mem_mem_orthogonal [CompleteSpace K] (v : E) :
    ‚àÉ y ‚àà K, ‚àÉ z ‚àà K·óÆ, v = y + z :=
  by
  have h_mem : v ‚àà K ‚äî K·óÆ := by simp [Submodule.sup_orthogonal_of_complete_space]
  obtain ‚ü®y, hy, z, hz, hyz‚ü© := submodule.mem_sup.mp h_mem
  exact ‚ü®y, hy, z, hz, hyz.symm‚ü©
#align submodule.exists_sum_mem_mem_orthogonal Submodule.exists_sum_mem_mem_orthogonal

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "If `K` is complete, then the orthogonal complement of its orthogonal complement is itself. -/")]
      [(Term.attributes "@[" [(Term.attrInstance (Term.attrKind []) (Attr.simp "simp" [] []))] "]")]
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `Submodule.orthogonal_orthogonal [])
      (Command.declSig
       [(Term.instBinder "[" [] (Term.app `CompleteSpace [`K]) "]")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª
          (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª `K "·óÆ")
          "·óÆ")
         "="
         `K)))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.Ext.¬´tacticExt___:_¬ª
            "ext"
            [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `v))]
            [])
           []
           (Tactic.constructor "constructor")
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Std.Tactic.obtain
              "obtain"
              [(Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `y)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hy)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                    [])]
                  "‚ü©")])]
              []
              [":=" [(Term.app `K.exists_sum_mem_mem_orthogonal [`v])]])
             []
             (Tactic.intro "intro" [`hv])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hz' []]
                [(Term.typeSpec ":" (¬´term_=_¬ª `z "=" (num "0")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       [`hyz []]
                       [(Term.typeSpec
                         ":"
                         (¬´term_=_¬ª
                          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
                          "="
                          (num "0")))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.simp
                            "simp"
                            []
                            []
                            []
                            ["["
                             [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
                              ","
                              (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
                             "]"]
                            [])]))))))
                    []
                    (Std.Tactic.Simpa.simpa
                     "simpa"
                     []
                     []
                     (Std.Tactic.Simpa.simpaArgsRest
                      []
                      []
                      []
                      [(Tactic.simpArgs
                        "["
                        [(Tactic.simpLemma [] [] `inner_add_right)
                         ","
                         (Tactic.simpLemma [] [] `hyz)]
                        "]")]
                      ["using" (Term.app `hv [`z `hz])]))]))))))
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["[" [(Tactic.simpLemma [] [] `hy) "," (Tactic.simpLemma [] [] `hz')] "]"]
              [])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.intro "intro" [`hv `w `hw])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]")
              [])
             []
             (Tactic.exact "exact" (Term.app `hw [`v `hv]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.Ext.¬´tacticExt___:_¬ª
           "ext"
           [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `v))]
           [])
          []
          (Tactic.constructor "constructor")
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Std.Tactic.obtain
             "obtain"
             [(Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `y)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hy)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                   [])]
                 "‚ü©")])]
             []
             [":=" [(Term.app `K.exists_sum_mem_mem_orthogonal [`v])]])
            []
            (Tactic.intro "intro" [`hv])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hz' []]
               [(Term.typeSpec ":" (¬´term_=_¬ª `z "=" (num "0")))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      [`hyz []]
                      [(Term.typeSpec
                        ":"
                        (¬´term_=_¬ª
                         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
                         "="
                         (num "0")))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(Tactic.simp
                           "simp"
                           []
                           []
                           []
                           ["["
                            [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
                             ","
                             (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
                            "]"]
                           [])]))))))
                   []
                   (Std.Tactic.Simpa.simpa
                    "simpa"
                    []
                    []
                    (Std.Tactic.Simpa.simpaArgsRest
                     []
                     []
                     []
                     [(Tactic.simpArgs
                       "["
                       [(Tactic.simpLemma [] [] `inner_add_right) "," (Tactic.simpLemma [] [] `hyz)]
                       "]")]
                     ["using" (Term.app `hv [`z `hz])]))]))))))
            []
            (Tactic.simp
             "simp"
             []
             []
             []
             ["[" [(Tactic.simpLemma [] [] `hy) "," (Tactic.simpLemma [] [] `hz')] "]"]
             [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.intro "intro" [`hv `w `hw])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]")
             [])
            []
            (Tactic.exact "exact" (Term.app `hw [`v `hv]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.intro "intro" [`hv `w `hw])
        []
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]") [])
        []
        (Tactic.exact "exact" (Term.app `hw [`v `hv]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `hw [`v `hv]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hw [`v `hv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_eq_zero_sym
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`hv `w `hw])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hw
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `w
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "‚ü®"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `y)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hy)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `z)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hz)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
               [])]
             "‚ü©")])]
         []
         [":=" [(Term.app `K.exists_sum_mem_mem_orthogonal [`v])]])
        []
        (Tactic.intro "intro" [`hv])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hz' []]
           [(Term.typeSpec ":" (¬´term_=_¬ª `z "=" (num "0")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`hyz []]
                  [(Term.typeSpec
                    ":"
                    (¬´term_=_¬ª
                     (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
                     "="
                     (num "0")))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.simp
                       "simp"
                       []
                       []
                       []
                       ["["
                        [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
                         ","
                         (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
                        "]"]
                       [])]))))))
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest
                 []
                 []
                 []
                 [(Tactic.simpArgs
                   "["
                   [(Tactic.simpLemma [] [] `inner_add_right) "," (Tactic.simpLemma [] [] `hyz)]
                   "]")]
                 ["using" (Term.app `hv [`z `hz])]))]))))))
        []
        (Tactic.simp
         "simp"
         []
         []
         []
         ["[" [(Tactic.simpLemma [] [] `hy) "," (Tactic.simpLemma [] [] `hz')] "]"]
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["[" [(Tactic.simpLemma [] [] `hy) "," (Tactic.simpLemma [] [] `hz')] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hz' []]
         [(Term.typeSpec ":" (¬´term_=_¬ª `z "=" (num "0")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hyz []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª
                   (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
                   "="
                   (num "0")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.simp
                     "simp"
                     []
                     []
                     []
                     ["["
                      [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
                       ","
                       (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
                      "]"]
                     [])]))))))
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               []
               [(Tactic.simpArgs
                 "["
                 [(Tactic.simpLemma [] [] `inner_add_right) "," (Tactic.simpLemma [] [] `hyz)]
                 "]")]
               ["using" (Term.app `hv [`z `hz])]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hyz []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
                    ","
                    (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
                   "]"]
                  [])]))))))
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            []
            [(Tactic.simpArgs
              "["
              [(Tactic.simpLemma [] [] `inner_add_right) "," (Tactic.simpLemma [] [] `hyz)]
              "]")]
            ["using" (Term.app `hv [`z `hz])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma [] [] `inner_add_right) "," (Tactic.simpLemma [] [] `hyz)]
          "]")]
        ["using" (Term.app `hv [`z `hz])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hv [`z `hz])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hyz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_add_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hyz []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
            "="
            (num "0")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              []
              ["["
               [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
                ","
                (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
               "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           []
           ["["
            [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
             ","
             (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [] (Term.app `hz [`y `hy]))
         ","
         (Tactic.simpLemma [] [] `inner_eq_zero_sym)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_eq_zero_sym
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hz [`y `hy])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `z ", " `y "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- If `K` is complete, then the orthogonal complement of its orthogonal complement is itself. -/
    @[ simp ]
  theorem
    Submodule.orthogonal_orthogonal
    [ CompleteSpace K ] : K ·óÆ ·óÆ = K
    :=
      by
        ext v
          constructor
          ¬∑
            obtain ‚ü® y , hy , z , hz , rfl ‚ü© := K.exists_sum_mem_mem_orthogonal v
              intro hv
              have
                hz'
                  : z = 0
                  :=
                  by
                    have hyz : ‚ü™ z , y ‚ü´ = 0 := by simp [ hz y hy , inner_eq_zero_sym ]
                      simpa [ inner_add_right , hyz ] using hv z hz
              simp [ hy , hz' ]
          ¬∑ intro hv w hw rw [ inner_eq_zero_sym ] exact hw v hv
#align submodule.orthogonal_orthogonal Submodule.orthogonal_orthogonal

theorem Submodule.orthogonal_orthogonal_eq_closure [CompleteSpace E] : K·óÆ·óÆ = K.topologicalClosure :=
  by
  refine' le_antisymm _ _
  ¬∑ convert Submodule.orthogonal_orthogonal_monotone K.le_topological_closure
    haveI : CompleteSpace K.topological_closure :=
      K.is_closed_topological_closure.complete_space_coe
    rw [K.topological_closure.orthogonal_orthogonal]
  ¬∑ exact K.topological_closure_minimal K.le_orthogonal_orthogonal K·óÆ.is_closed_orthogonal
#align submodule.orthogonal_orthogonal_eq_closure Submodule.orthogonal_orthogonal_eq_closure

variable {K}

/-- If `K` is complete, `K` and `K·óÆ` are complements of each other. -/
theorem Submodule.is_compl_orthogonal_of_complete_space [CompleteSpace K] : IsCompl K K·óÆ :=
  ‚ü®K.orthogonal_disjoint, codisjoint_iff.2 Submodule.sup_orthogonal_of_complete_space‚ü©
#align
  submodule.is_compl_orthogonal_of_complete_space Submodule.is_compl_orthogonal_of_complete_space

@[simp]
theorem Submodule.orthogonal_eq_bot_iff [CompleteSpace (K : Set E)] : K·óÆ = ‚ä• ‚Üî K = ‚ä§ :=
  by
  refine' ‚ü®_, fun h => by rw [h, Submodule.top_orthogonal_eq_bot]‚ü©
  intro h
  have : K ‚äî K·óÆ = ‚ä§ := Submodule.sup_orthogonal_of_complete_space
  rwa [h, sup_comm, bot_sup_eq] at this
#align submodule.orthogonal_eq_bot_iff Submodule.orthogonal_eq_bot_iff

/-- A point in `K` with the orthogonality property (here characterized in terms of `K·óÆ`) must be the
orthogonal projection. -/
theorem eq_orthogonal_projection_of_mem_orthogonal [CompleteSpace K] {u v : E} (hv : v ‚àà K)
    (hvo : u - v ‚àà K·óÆ) : (orthogonalProjection K u : E) = v :=
  eq_orthogonal_projection_fn_of_mem_of_inner_eq_zero hv fun w => inner_eq_zero_sym.mp ‚àò hvo w
#align eq_orthogonal_projection_of_mem_orthogonal eq_orthogonal_projection_of_mem_orthogonal

/-- A point in `K` with the orthogonality property (here characterized in terms of `K·óÆ`) must be the
orthogonal projection. -/
theorem eq_orthogonal_projection_of_mem_orthogonal' [CompleteSpace K] {u v z : E} (hv : v ‚àà K)
    (hz : z ‚àà K·óÆ) (hu : u = v + z) : (orthogonalProjection K u : E) = v :=
  eq_orthogonal_projection_of_mem_orthogonal hv (by simpa [hu] )
#align eq_orthogonal_projection_of_mem_orthogonal' eq_orthogonal_projection_of_mem_orthogonal'

/-- The orthogonal projection onto `K` of an element of `K·óÆ` is zero. -/
theorem orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero [CompleteSpace K] {v : E}
    (hv : v ‚àà K·óÆ) : orthogonalProjection K v = 0 :=
  by
  ext
  convert eq_orthogonal_projection_of_mem_orthogonal _ _ <;> simp [hv]
#align
  orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero

/-- The reflection in `K` of an element of `K·óÆ` is its negation. -/
theorem reflection_mem_subspace_orthogonal_complement_eq_neg [CompleteSpace K] {v : E}
    (hv : v ‚àà K·óÆ) : reflection K v = -v := by
  simp [reflection_apply, orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero hv]
#align
  reflection_mem_subspace_orthogonal_complement_eq_neg reflection_mem_subspace_orthogonal_complement_eq_neg

/-- The orthogonal projection onto `K·óÆ` of an element of `K` is zero. -/
theorem orthogonal_projection_mem_subspace_orthogonal_precomplement_eq_zero [CompleteSpace E]
    {v : E} (hv : v ‚àà K) : orthogonalProjection K·óÆ v = 0 :=
  orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero (K.le_orthogonal_orthogonal hv)
#align
  orthogonal_projection_mem_subspace_orthogonal_precomplement_eq_zero orthogonal_projection_mem_subspace_orthogonal_precomplement_eq_zero

/-- If `U ‚â§ V`, then projecting on `V` and then on `U` is the same as projecting on `U`. -/
theorem orthogonal_projection_orthogonal_projection_of_le {U V : Submodule ùïú E} [CompleteSpace U]
    [CompleteSpace V] (h : U ‚â§ V) (x : E) :
    orthogonalProjection U (orthogonalProjection V x) = orthogonalProjection U x :=
  Eq.symm <| by
    simpa only [sub_eq_zero, map_sub] using
      orthogonal_projection_mem_subspace_orthogonal_complement_eq_zero
        (Submodule.orthogonal_le h (sub_orthogonal_projection_mem_orthogonal x))
#align
  orthogonal_projection_orthogonal_projection_of_le orthogonal_projection_orthogonal_projection_of_le

/-- Given a monotone family `U` of complete submodules of `E` and a fixed `x : E`,
the orthogonal projection of `x` on `U i` tends to the orthogonal projection of `x` on
`(‚®Ü i, U i).topological_closure` along `at_top`. -/
theorem orthogonal_projection_tendsto_closure_supr [CompleteSpace E] {Œπ : Type _} [SemilatticeSup Œπ]
    (U : Œπ ‚Üí Submodule ùïú E) [‚àÄ i, CompleteSpace (U i)] (hU : Monotone U) (x : E) :
    Filter.Tendsto (fun i => (orthogonalProjection (U i) x : E)) atTop
      (ùìù (orthogonalProjection (‚®Ü i, U i).topologicalClosure x : E)) :=
  by
  cases isEmpty_or_nonempty Œπ
  ¬∑ rw [filter_eq_bot_of_is_empty (at_top : Filter Œπ)]
    exact tendsto_bot
  let y := (orthogonalProjection (‚®Ü i, U i).topologicalClosure x : E)
  have proj_x : ‚àÄ i, orthogonalProjection (U i) x = orthogonalProjection (U i) y := fun i =>
    (orthogonal_projection_orthogonal_projection_of_le
        ((le_sup·µ¢ U i).trans (sup·µ¢ U).le_topological_closure) _).symm
  suffices ‚àÄ Œµ > 0, ‚àÉ I, ‚àÄ i ‚â• I, ‚Äñ(orthogonalProjection (U i) y : E) - y‚Äñ < Œµ by
    simpa only [proj_x, NormedAddCommGroup.tendsto_at_top] using this
  intro Œµ hŒµ
  obtain ‚ü®a, ha, hay‚ü© : ‚àÉ a ‚àà ‚®Ü i, U i, dist y a < Œµ :=
    by
    have y_mem : y ‚àà (‚®Ü i, U i).topologicalClosure := Submodule.coe_mem _
    rw [‚Üê SetLike.mem_coe, Submodule.topological_closure_coe, Metric.mem_closure_iff] at y_mem
    exact y_mem Œµ hŒµ
  rw [dist_eq_norm] at hay
  obtain ‚ü®I, hI‚ü© : ‚àÉ I, a ‚àà U I := by rwa [Submodule.mem_supr_of_directed _ hU.directed_le] at ha
  refine' ‚ü®I, fun i (hi : I ‚â§ i) => _‚ü©
  rw [norm_sub_rev, orthogonal_projection_minimal]
  refine' lt_of_le_of_lt _ hay
  change _ ‚â§ ‚Äñy - (‚ü®a, hU hi hI‚ü© : U i)‚Äñ
  exact cinf·µ¢_le ‚ü®0, set.forall_range_iff.mpr fun _ => norm_nonneg _‚ü© _
#align orthogonal_projection_tendsto_closure_supr orthogonal_projection_tendsto_closure_supr

/-- Given a monotone family `U` of complete submodules of `E` with dense span supremum,
and a fixed `x : E`, the orthogonal projection of `x` on `U i` tends to `x` along `at_top`. -/
theorem orthogonal_projection_tendsto_self [CompleteSpace E] {Œπ : Type _} [SemilatticeSup Œπ]
    (U : Œπ ‚Üí Submodule ùïú E) [‚àÄ t, CompleteSpace (U t)] (hU : Monotone U) (x : E)
    (hU' : ‚ä§ ‚â§ (‚®Ü t, U t).topologicalClosure) :
    Filter.Tendsto (fun t => (orthogonalProjection (U t) x : E)) atTop (ùìù x) :=
  by
  rw [‚Üê eq_top_iff] at hU'
  convert orthogonal_projection_tendsto_closure_supr U hU x
  rw [orthogonal_projection_eq_self_iff.mpr _]
  rw [hU']
  trivial
#align orthogonal_projection_tendsto_self orthogonal_projection_tendsto_self

/-- The orthogonal complement satisfies `K·óÆ·óÆ·óÆ = K·óÆ`. -/
theorem Submodule.triorthogonal_eq_orthogonal [CompleteSpace E] : K·óÆ·óÆ·óÆ = K·óÆ :=
  by
  rw [K·óÆ.orthogonal_orthogonal_eq_closure]
  exact K.is_closed_orthogonal.submodule_topological_closure_eq
#align submodule.triorthogonal_eq_orthogonal Submodule.triorthogonal_eq_orthogonal

/-- The closure of `K` is the full space iff `K·óÆ` is trivial. -/
theorem Submodule.topological_closure_eq_top_iff [CompleteSpace E] :
    K.topologicalClosure = ‚ä§ ‚Üî K·óÆ = ‚ä• :=
  by
  rw [‚Üê Submodule.orthogonal_orthogonal_eq_closure]
  constructor <;> intro h
  ¬∑ rw [‚Üê Submodule.triorthogonal_eq_orthogonal, h, Submodule.top_orthogonal_eq_bot]
  ¬∑ rw [h, Submodule.bot_orthogonal_eq_top]
#align submodule.topological_closure_eq_top_iff Submodule.topological_closure_eq_top_iff

namespace Dense

open Submodule

variable {x y : E} [CompleteSpace E]

/-- If `S` is dense and `x - y ‚àà K·óÆ`, then `x = y`. -/
theorem eq_of_sub_mem_orthogonal (hK : Dense (K : Set E)) (h : x - y ‚àà K·óÆ) : x = y :=
  by
  rw [dense_iff_topological_closure_eq_top, topological_closure_eq_top_iff] at hK
  rwa [hK, Submodule.mem_bot, sub_eq_zero] at h
#align dense.eq_of_sub_mem_orthogonal Dense.eq_of_sub_mem_orthogonal

theorem eq_zero_of_mem_orthogonal (hK : Dense (K : Set E)) (h : x ‚àà K·óÆ) : x = 0 :=
  hK.eq_of_sub_mem_orthogonal (by rwa [sub_zero])
#align dense.eq_zero_of_mem_orthogonal Dense.eq_zero_of_mem_orthogonal

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_of_inner_left [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hK]
         [":" (Term.app `Dense [(Term.typeAscription "(" `K ":" [(Term.app `Set [`E])] ")")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`h]
         [":"
          (Term.forall
           "‚àÄ"
           [`v]
           [(Term.typeSpec ":" `K)]
           ","
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
            "="
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `y ", " `v "‚ü´")))]
         []
         ")")]
       (Term.typeSpec ":" (¬´term_=_¬ª `x "=" `y)))
      (Command.declValSimple
       ":="
       (Term.app
        (Term.proj `hK "." `eq_of_sub_mem_orthogonal)
        [(Term.app `Submodule.sub_mem_orthogonal_of_inner_left [`h])])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `hK "." `eq_of_sub_mem_orthogonal)
       [(Term.app `Submodule.sub_mem_orthogonal_of_inner_left [`h])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Submodule.sub_mem_orthogonal_of_inner_left [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Submodule.sub_mem_orthogonal_of_inner_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Submodule.sub_mem_orthogonal_of_inner_left [`h])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hK "." `eq_of_sub_mem_orthogonal)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hK
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª `x "=" `y)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "‚àÄ"
       [`v]
       [(Term.typeSpec ":" `K)]
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
        "="
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `y ", " `v "‚ü´")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
       "="
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `y ", " `v "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `y ", " `v "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  eq_of_inner_left
  ( hK : Dense ( K : Set E ) ) ( h : ‚àÄ v : K , ‚ü™ x , v ‚ü´ = ‚ü™ y , v ‚ü´ ) : x = y
  := hK . eq_of_sub_mem_orthogonal Submodule.sub_mem_orthogonal_of_inner_left h
#align dense.eq_of_inner_left Dense.eq_of_inner_left

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_of_inner_left [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hK]
         [":" (Term.app `Dense [(Term.typeAscription "(" `K ":" [(Term.app `Set [`E])] ")")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`h]
         [":"
          (Term.forall
           "‚àÄ"
           [`v]
           [(Term.typeSpec ":" `K)]
           ","
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
            "="
            (num "0")))]
         []
         ")")]
       (Term.typeSpec ":" (¬´term_=_¬ª `x "=" (num "0"))))
      (Command.declValSimple
       ":="
       (Term.app
        (Term.proj `hK "." `eq_of_inner_left)
        [(Term.fun
          "fun"
          (Term.basicFun
           [`v]
           []
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `inner_zero_left) "," (Tactic.rwRule [] (Term.app `h [`v]))]
                 "]")
                [])])))))])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `hK "." `eq_of_inner_left)
       [(Term.fun
         "fun"
         (Term.basicFun
          [`v]
          []
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `inner_zero_left) "," (Tactic.rwRule [] (Term.app `h [`v]))]
                "]")
               [])])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`v]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `inner_zero_left) "," (Tactic.rwRule [] (Term.app `h [`v]))]
              "]")
             [])])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `inner_zero_left) "," (Tactic.rwRule [] (Term.app `h [`v]))]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `inner_zero_left) "," (Tactic.rwRule [] (Term.app `h [`v]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h [`v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_zero_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hK "." `eq_of_inner_left)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hK
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª `x "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "‚àÄ"
       [`v]
       [(Term.typeSpec ":" `K)]
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `x ", " `v "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  eq_zero_of_inner_left
  ( hK : Dense ( K : Set E ) ) ( h : ‚àÄ v : K , ‚ü™ x , v ‚ü´ = 0 ) : x = 0
  := hK . eq_of_inner_left fun v => by rw [ inner_zero_left , h v ]
#align dense.eq_zero_of_inner_left Dense.eq_zero_of_inner_left

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_of_inner_right [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hK]
         [":" (Term.app `Dense [(Term.typeAscription "(" `K ":" [(Term.app `Set [`E])] ")")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`h]
         [":"
          (Term.forall
           "‚àÄ"
           [`v]
           [(Term.typeSpec ":" `K)]
           ","
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (Term.typeAscription "(" `v ":" [`E] ")")
             ", "
             `x
             "‚ü´")
            "="
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (Term.typeAscription "(" `v ":" [`E] ")")
             ", "
             `y
             "‚ü´")))]
         []
         ")")]
       (Term.typeSpec ":" (¬´term_=_¬ª `x "=" `y)))
      (Command.declValSimple
       ":="
       (Term.app
        (Term.proj `hK "." `eq_of_sub_mem_orthogonal)
        [(Term.app `Submodule.sub_mem_orthogonal_of_inner_right [`h])])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `hK "." `eq_of_sub_mem_orthogonal)
       [(Term.app `Submodule.sub_mem_orthogonal_of_inner_right [`h])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Submodule.sub_mem_orthogonal_of_inner_right [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Submodule.sub_mem_orthogonal_of_inner_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Submodule.sub_mem_orthogonal_of_inner_right [`h])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hK "." `eq_of_sub_mem_orthogonal)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hK
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª `x "=" `y)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "‚àÄ"
       [`v]
       [(Term.typeSpec ":" `K)]
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (Term.typeAscription "(" `v ":" [`E] ")")
         ", "
         `x
         "‚ü´")
        "="
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (Term.typeAscription "(" `v ":" [`E] ")")
         ", "
         `y
         "‚ü´")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (Term.typeAscription "(" `v ":" [`E] ")")
        ", "
        `x
        "‚ü´")
       "="
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (Term.typeAscription "(" `v ":" [`E] ")")
        ", "
        `y
        "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (Term.typeAscription "(" `v ":" [`E] ")")
       ", "
       `y
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  eq_of_inner_right
  ( hK : Dense ( K : Set E ) ) ( h : ‚àÄ v : K , ‚ü™ ( v : E ) , x ‚ü´ = ‚ü™ ( v : E ) , y ‚ü´ ) : x = y
  := hK . eq_of_sub_mem_orthogonal Submodule.sub_mem_orthogonal_of_inner_right h
#align dense.eq_of_inner_right Dense.eq_of_inner_right

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `eq_zero_of_inner_right [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hK]
         [":" (Term.app `Dense [(Term.typeAscription "(" `K ":" [(Term.app `Set [`E])] ")")])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`h]
         [":"
          (Term.forall
           "‚àÄ"
           [`v]
           [(Term.typeSpec ":" `K)]
           ","
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (Term.typeAscription "(" `v ":" [`E] ")")
             ", "
             `x
             "‚ü´")
            "="
            (num "0")))]
         []
         ")")]
       (Term.typeSpec ":" (¬´term_=_¬ª `x "=" (num "0"))))
      (Command.declValSimple
       ":="
       (Term.app
        (Term.proj `hK "." `eq_of_inner_right)
        [(Term.fun
          "fun"
          (Term.basicFun
           [`v]
           []
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `inner_zero_right) "," (Tactic.rwRule [] (Term.app `h [`v]))]
                 "]")
                [])])))))])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `hK "." `eq_of_inner_right)
       [(Term.fun
         "fun"
         (Term.basicFun
          [`v]
          []
          "=>"
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `inner_zero_right) "," (Tactic.rwRule [] (Term.app `h [`v]))]
                "]")
               [])])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`v]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `inner_zero_right) "," (Tactic.rwRule [] (Term.app `h [`v]))]
              "]")
             [])])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `inner_zero_right) "," (Tactic.rwRule [] (Term.app `h [`v]))]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `inner_zero_right) "," (Tactic.rwRule [] (Term.app `h [`v]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h [`v])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_zero_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hK "." `eq_of_inner_right)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hK
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª `x "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "‚àÄ"
       [`v]
       [(Term.typeSpec ":" `K)]
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
         "‚ü™"
         (Term.typeAscription "(" `v ":" [`E] ")")
         ", "
         `x
         "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (Term.typeAscription "(" `v ":" [`E] ")")
        ", "
        `x
        "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (Term.typeAscription "(" `v ":" [`E] ")")
       ", "
       `x
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  eq_zero_of_inner_right
  ( hK : Dense ( K : Set E ) ) ( h : ‚àÄ v : K , ‚ü™ ( v : E ) , x ‚ü´ = 0 ) : x = 0
  := hK . eq_of_inner_right fun v => by rw [ inner_zero_right , h v ]
#align dense.eq_zero_of_inner_right Dense.eq_zero_of_inner_right

end Dense

/-- The reflection in `K·óÆ` of an element of `K` is its negation. -/
theorem reflection_mem_subspace_orthogonal_precomplement_eq_neg [CompleteSpace E] {v : E}
    (hv : v ‚àà K) : reflection K·óÆ v = -v :=
  reflection_mem_subspace_orthogonal_complement_eq_neg (K.le_orthogonal_orthogonal hv)
#align
  reflection_mem_subspace_orthogonal_precomplement_eq_neg reflection_mem_subspace_orthogonal_precomplement_eq_neg

/-- The orthogonal projection onto `(ùïú ‚àô v)·óÆ` of `v` is zero. -/
theorem orthogonal_projection_orthogonal_complement_singleton_eq_zero [CompleteSpace E] (v : E) :
    orthogonalProjection (ùïú ‚àô v)·óÆ v = 0 :=
  orthogonal_projection_mem_subspace_orthogonal_precomplement_eq_zero
    (Submodule.mem_span_singleton_self v)
#align
  orthogonal_projection_orthogonal_complement_singleton_eq_zero orthogonal_projection_orthogonal_complement_singleton_eq_zero

/-- The reflection in `(ùïú ‚àô v)·óÆ` of `v` is `-v`. -/
theorem reflection_orthogonal_complement_singleton_eq_neg [CompleteSpace E] (v : E) :
    reflection (ùïú ‚àô v)·óÆ v = -v :=
  reflection_mem_subspace_orthogonal_precomplement_eq_neg (Submodule.mem_span_singleton_self v)
#align
  reflection_orthogonal_complement_singleton_eq_neg reflection_orthogonal_complement_singleton_eq_neg

theorem reflection_sub [CompleteSpace F] {v w : F} (h : ‚Äñv‚Äñ = ‚Äñw‚Äñ) :
    reflection (‚Ñù ‚àô v - w)·óÆ v = w :=
  by
  set R : F ‚âÉ‚Çó·µ¢[‚Ñù] F := reflection (‚Ñù ‚àô v - w)·óÆ
  suffices R v + R v = w + w
    by
    apply smul_right_injective F (by norm_num : (2 : ‚Ñù) ‚â† 0)
    simpa [two_smul] using this
  have h‚ÇÅ : R (v - w) = -(v - w) := reflection_orthogonal_complement_singleton_eq_neg (v - w)
  have h‚ÇÇ : R (v + w) = v + w :=
    by
    apply reflection_mem_subspace_eq_self
    rw [Submodule.mem_orthogonal_singleton_iff_inner_left]
    rw [real_inner_add_sub_eq_zero_iff]
    exact h
  convert congr_arg‚ÇÇ (¬∑ + ¬∑) h‚ÇÇ h‚ÇÅ using 1
  ¬∑ simp
  ¬∑ abel
#align reflection_sub reflection_sub

variable (K)

/-- In a complete space `E`, a vector splits as the sum of its orthogonal projections onto a
complete submodule `K` and onto the orthogonal complement of `K`.-/
theorem eq_sum_orthogonal_projection_self_orthogonal_complement [CompleteSpace E] [CompleteSpace K]
    (w : E) : w = (orthogonalProjection K w : E) + (orthogonalProjection K·óÆ w : E) :=
  by
  obtain ‚ü®y, hy, z, hz, hwyz‚ü© := K.exists_sum_mem_mem_orthogonal w
  convert hwyz
  ¬∑ exact eq_orthogonal_projection_of_mem_orthogonal' hy hz hwyz
  ¬∑ rw [add_comm] at hwyz
    refine' eq_orthogonal_projection_of_mem_orthogonal' hz _ hwyz
    simp [hy]
#align
  eq_sum_orthogonal_projection_self_orthogonal_complement eq_sum_orthogonal_projection_self_orthogonal_complement

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment "/--" "The Pythagorean theorem, for an orthogonal projection.-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `norm_sq_eq_add_norm_sq_projection [])
      (Command.declSig
       [(Term.explicitBinder "(" [`x] [":" `E] [] ")")
        (Term.explicitBinder "(" [`S] [":" (Term.app `Submodule [`ùïú `E])] [] ")")
        (Term.instBinder "[" [] (Term.app `CompleteSpace [`E]) "]")
        (Term.instBinder "[" [] (Term.app `CompleteSpace [`S]) "]")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (¬´term_^_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "^" (num "2"))
         "="
         (¬´term_+_¬ª
          (¬´term_^_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" (Term.app `orthogonalProjection [`S `x]) "‚Äñ")
           "^"
           (num "2"))
          "+"
          (¬´term_^_¬ª
           (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª
            "‚Äñ"
            (Term.app `orthogonalProjection [(Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª `S "·óÆ") `x])
            "‚Äñ")
           "^"
           (num "2"))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticLet_
            "let"
            (Term.letDecl (Term.letIdDecl `p1 [] [] ":=" (Term.app `orthogonalProjection [`S]))))
           []
           (Tactic.tacticLet_
            "let"
            (Term.letDecl
             (Term.letIdDecl
              `p2
              []
              []
              ":="
              (Term.app
               `orthogonalProjection
               [(Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª `S "·óÆ")]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`x_decomp []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª `x "=" (¬´term_+_¬ª (Term.app `p1 [`x]) "+" (Term.app `p2 [`x]))))]
              ":="
              (Term.app `eq_sum_orthogonal_projection_self_orthogonal_complement [`S `x]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`x_orth []]
              [(Term.typeSpec
                ":"
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                  "‚ü™"
                  (Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
                  ", "
                  (Term.app `p2 [`x])
                  "‚ü´")
                 "="
                 (num "0")))]
              ":="
              (Term.app
               `Submodule.inner_right_of_mem_orthogonal
               [(Term.app `SetLike.coe_mem [(Term.app `p1 [`x])])
                (Term.app `SetLike.coe_mem [(Term.app `p2 [`x])])]))))
           []
           (Mathlib.Tactic.nthRwSeq
            "nth_rw"
            []
            (num "1")
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `x_decomp)] "]")
            [])
           []
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma [] [] `sq)
              ","
              (Tactic.simpLemma
               []
               []
               (Term.app
                `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
                [(Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
                 (Term.app `p2 [`x])
                 `x_orth]))
              ","
              (Tactic.simpLemma [] [] `add_left_inj)
              ","
              (Tactic.simpLemma [] [] `mul_eq_mul_left_iff)
              ","
              (Tactic.simpLemma [] [] `norm_eq_zero)
              ","
              (Tactic.simpLemma [] [] `true_or_iff)
              ","
              (Tactic.simpLemma [] [] `eq_self_iff_true)
              ","
              (Tactic.simpLemma [] [] `Submodule.coe_norm)
              ","
              (Tactic.simpLemma [] [] `Submodule.coe_eq_zero)]
             "]"]
            [])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticLet_
           "let"
           (Term.letDecl (Term.letIdDecl `p1 [] [] ":=" (Term.app `orthogonalProjection [`S]))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl
             `p2
             []
             []
             ":="
             (Term.app
              `orthogonalProjection
              [(Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª `S "·óÆ")]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`x_decomp []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª `x "=" (¬´term_+_¬ª (Term.app `p1 [`x]) "+" (Term.app `p2 [`x]))))]
             ":="
             (Term.app `eq_sum_orthogonal_projection_self_orthogonal_complement [`S `x]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`x_orth []]
             [(Term.typeSpec
               ":"
               (¬´term_=_¬ª
                (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
                 "‚ü™"
                 (Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
                 ", "
                 (Term.app `p2 [`x])
                 "‚ü´")
                "="
                (num "0")))]
             ":="
             (Term.app
              `Submodule.inner_right_of_mem_orthogonal
              [(Term.app `SetLike.coe_mem [(Term.app `p1 [`x])])
               (Term.app `SetLike.coe_mem [(Term.app `p2 [`x])])]))))
          []
          (Mathlib.Tactic.nthRwSeq
           "nth_rw"
           []
           (num "1")
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `x_decomp)] "]")
           [])
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `sq)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app
               `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
               [(Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
                (Term.app `p2 [`x])
                `x_orth]))
             ","
             (Tactic.simpLemma [] [] `add_left_inj)
             ","
             (Tactic.simpLemma [] [] `mul_eq_mul_left_iff)
             ","
             (Tactic.simpLemma [] [] `norm_eq_zero)
             ","
             (Tactic.simpLemma [] [] `true_or_iff)
             ","
             (Tactic.simpLemma [] [] `eq_self_iff_true)
             ","
             (Tactic.simpLemma [] [] `Submodule.coe_norm)
             ","
             (Tactic.simpLemma [] [] `Submodule.coe_eq_zero)]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `sq)
         ","
         (Tactic.simpLemma
          []
          []
          (Term.app
           `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
           [(Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
            (Term.app `p2 [`x])
            `x_orth]))
         ","
         (Tactic.simpLemma [] [] `add_left_inj)
         ","
         (Tactic.simpLemma [] [] `mul_eq_mul_left_iff)
         ","
         (Tactic.simpLemma [] [] `norm_eq_zero)
         ","
         (Tactic.simpLemma [] [] `true_or_iff)
         ","
         (Tactic.simpLemma [] [] `eq_self_iff_true)
         ","
         (Tactic.simpLemma [] [] `Submodule.coe_norm)
         ","
         (Tactic.simpLemma [] [] `Submodule.coe_eq_zero)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Submodule.coe_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Submodule.coe_norm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eq_self_iff_true
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `true_or_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `norm_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_eq_mul_left_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_left_inj
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
       [(Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")") (Term.app `p2 [`x]) `x_orth])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x_orth
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `p2 [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `p2
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `p2 [`x]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `E
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `p1 [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `p1
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.nthRwSeq
       "nth_rw"
       []
       (num "1")
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `x_decomp)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x_decomp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`x_orth []]
         [(Term.typeSpec
           ":"
           (¬´term_=_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
             ", "
             (Term.app `p2 [`x])
             "‚ü´")
            "="
            (num "0")))]
         ":="
         (Term.app
          `Submodule.inner_right_of_mem_orthogonal
          [(Term.app `SetLike.coe_mem [(Term.app `p1 [`x])])
           (Term.app `SetLike.coe_mem [(Term.app `p2 [`x])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Submodule.inner_right_of_mem_orthogonal
       [(Term.app `SetLike.coe_mem [(Term.app `p1 [`x])])
        (Term.app `SetLike.coe_mem [(Term.app `p2 [`x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `SetLike.coe_mem [(Term.app `p2 [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `p2 [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `p2
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `p2 [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `SetLike.coe_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `SetLike.coe_mem [(Term.paren "(" (Term.app `p2 [`x]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `SetLike.coe_mem [(Term.app `p1 [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `p1 [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `p1
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `p1 [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `SetLike.coe_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `SetLike.coe_mem [(Term.paren "(" (Term.app `p1 [`x]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Submodule.inner_right_of_mem_orthogonal
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
        ", "
        (Term.app `p2 [`x])
        "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (Term.typeAscription "(" (Term.app `p1 [`x]) ":" [`E] ")")
       ", "
       (Term.app `p2 [`x])
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- The Pythagorean theorem, for an orthogonal projection.-/
  theorem
    norm_sq_eq_add_norm_sq_projection
    ( x : E ) ( S : Submodule ùïú E ) [ CompleteSpace E ] [ CompleteSpace S ]
      : ‚Äñ x ‚Äñ ^ 2 = ‚Äñ orthogonalProjection S x ‚Äñ ^ 2 + ‚Äñ orthogonalProjection S ·óÆ x ‚Äñ ^ 2
    :=
      by
        let p1 := orthogonalProjection S
          let p2 := orthogonalProjection S ·óÆ
          have
            x_decomp
              : x = p1 x + p2 x
              :=
              eq_sum_orthogonal_projection_self_orthogonal_complement S x
          have
            x_orth
              : ‚ü™ ( p1 x : E ) , p2 x ‚ü´ = 0
              :=
              Submodule.inner_right_of_mem_orthogonal SetLike.coe_mem p1 x SetLike.coe_mem p2 x
          nth_rw 1 [ x_decomp ]
          simp
            only
            [
              sq
                ,
                norm_add_sq_eq_norm_sq_add_norm_sq_of_inner_eq_zero ( p1 x : E ) p2 x x_orth
                ,
                add_left_inj
                ,
                mul_eq_mul_left_iff
                ,
                norm_eq_zero
                ,
                true_or_iff
                ,
                eq_self_iff_true
                ,
                Submodule.coe_norm
                ,
                Submodule.coe_eq_zero
              ]
#align norm_sq_eq_add_norm_sq_projection norm_sq_eq_add_norm_sq_projection

/-- In a complete space `E`, the projection maps onto a complete subspace `K` and its orthogonal
complement sum to the identity. -/
theorem id_eq_sum_orthogonal_projection_self_orthogonal_complement [CompleteSpace E]
    [CompleteSpace K] :
    ContinuousLinearMap.id ùïú E =
      K.subtypeL.comp (orthogonalProjection K) + K·óÆ.subtypeL.comp (orthogonalProjection K·óÆ) :=
  by
  ext w
  exact eq_sum_orthogonal_projection_self_orthogonal_complement K w
#align
  id_eq_sum_orthogonal_projection_self_orthogonal_complement id_eq_sum_orthogonal_projection_self_orthogonal_complement

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      []
      [(Term.attributes "@[" [(Term.attrInstance (Term.attrKind []) (Attr.simp "simp" [] []))] "]")]
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `inner_orthogonal_projection_eq_of_mem_right [])
      (Command.declSig
       [(Term.instBinder "[" [] (Term.app `CompleteSpace [`K]) "]")
        (Term.explicitBinder "(" [`u] [":" `K] [] ")")
        (Term.explicitBinder "(" [`v] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          (Term.app `orthogonalProjection [`K `v])
          ", "
          `u
          "‚ü´")
         "="
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `u "‚ü´"))))
      (Command.declValSimple
       ":="
       (calc
        "calc"
        (calcStep
         (¬´term_=_¬ª
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
           "‚ü™"
           (Term.app `orthogonalProjection [`K `v])
           ", "
           `u
           "‚ü´")
          "="
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
           "‚ü™"
           (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `v]) ":" [`E] ")")
           ", "
           `u
           "‚ü´"))
         ":="
         (Term.app (Term.proj `K "." `coe_inner) [(Term.hole "_") (Term.hole "_")]))
        [(calcStep
          (¬´term_=_¬ª
           (Term.hole "_")
           "="
           (¬´term_+_¬ª
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `v]) ":" [`E] ")")
             ", "
             `u
             "‚ü´")
            "+"
            (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
             "‚ü™"
             (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjection [`K `v]))
             ", "
             `u
             "‚ü´")))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule
                  []
                  (Term.app
                   `orthogonal_projection_inner_eq_zero
                   [(Term.hole "_")
                    (Term.hole "_")
                    (Term.app `Submodule.coe_mem [(Term.hole "_")])]))
                 ","
                 (Tactic.rwRule [] `add_zero)]
                "]")
               [])]))))
         (calcStep
          (¬´term_=_¬ª
           (Term.hole "_")
           "="
           (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `u "‚ü´"))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_add_left)
                 ","
                 (Tactic.rwRule [] `add_sub_cancel'_right)]
                "]")
               [])]))))])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          (Term.app `orthogonalProjection [`K `v])
          ", "
          `u
          "‚ü´")
         "="
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `v]) ":" [`E] ")")
          ", "
          `u
          "‚ü´"))
        ":="
        (Term.app (Term.proj `K "." `coe_inner) [(Term.hole "_") (Term.hole "_")]))
       [(calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (¬´term_+_¬ª
           (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
            "‚ü™"
            (Term.typeAscription "(" (Term.app `orthogonalProjection [`K `v]) ":" [`E] ")")
            ", "
            `u
            "‚ü´")
           "+"
           (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
            "‚ü™"
            (¬´term_-_¬ª `v "-" (Term.app `orthogonalProjection [`K `v]))
            ", "
            `u
            "‚ü´")))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 []
                 (Term.app
                  `orthogonal_projection_inner_eq_zero
                  [(Term.hole "_")
                   (Term.hole "_")
                   (Term.app `Submodule.coe_mem [(Term.hole "_")])]))
                ","
                (Tactic.rwRule [] `add_zero)]
               "]")
              [])]))))
        (calcStep
         (¬´term_=_¬ª
          (Term.hole "_")
          "="
          (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `u "‚ü´"))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_add_left)
                ","
                (Tactic.rwRule [] `add_sub_cancel'_right)]
               "]")
              [])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_add_left)
             ","
             (Tactic.rwRule [] `add_sub_cancel'_right)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_add_left)
         ","
         (Tactic.rwRule [] `add_sub_cancel'_right)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_sub_cancel'_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_add_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.hole "_")
       "="
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `u "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `v ", " `u "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
@[ simp ]
  theorem
    inner_orthogonal_projection_eq_of_mem_right
    [ CompleteSpace K ] ( u : K ) ( v : E ) : ‚ü™ orthogonalProjection K v , u ‚ü´ = ‚ü™ v , u ‚ü´
    :=
      calc
        ‚ü™ orthogonalProjection K v , u ‚ü´ = ‚ü™ ( orthogonalProjection K v : E ) , u ‚ü´
          :=
          K . coe_inner _ _
        _ = ‚ü™ ( orthogonalProjection K v : E ) , u ‚ü´ + ‚ü™ v - orthogonalProjection K v , u ‚ü´
            :=
            by rw [ orthogonal_projection_inner_eq_zero _ _ Submodule.coe_mem _ , add_zero ]
          _ = ‚ü™ v , u ‚ü´ := by rw [ ‚Üê inner_add_left , add_sub_cancel'_right ]
#align inner_orthogonal_projection_eq_of_mem_right inner_orthogonal_projection_eq_of_mem_right

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      []
      [(Term.attributes "@[" [(Term.attrInstance (Term.attrKind []) (Attr.simp "simp" [] []))] "]")]
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `inner_orthogonal_projection_eq_of_mem_left [])
      (Command.declSig
       [(Term.instBinder "[" [] (Term.app `CompleteSpace [`K]) "]")
        (Term.explicitBinder "(" [`u] [":" `K] [] ")")
        (Term.explicitBinder "(" [`v] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          `u
          ", "
          (Term.app `orthogonalProjection [`K `v])
          "‚ü´")
         "="
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          (Term.typeAscription "(" `u ":" [`E] ")")
          ", "
          `v
          "‚ü´"))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_conj_sym)
              ","
              (Tactic.rwRule
               [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
               (Term.app `inner_conj_sym [(Term.typeAscription "(" `u ":" [`E] ")")]))
              ","
              (Tactic.rwRule [] `inner_orthogonal_projection_eq_of_mem_right)]
             "]")
            [])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_conj_sym)
             ","
             (Tactic.rwRule
              [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
              (Term.app `inner_conj_sym [(Term.typeAscription "(" `u ":" [`E] ")")]))
             ","
             (Tactic.rwRule [] `inner_orthogonal_projection_eq_of_mem_right)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `inner_conj_sym)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
          (Term.app `inner_conj_sym [(Term.typeAscription "(" `u ":" [`E] ")")]))
         ","
         (Tactic.rwRule [] `inner_orthogonal_projection_eq_of_mem_right)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_orthogonal_projection_eq_of_mem_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inner_conj_sym [(Term.typeAscription "(" `u ":" [`E] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" `u ":" [`E] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `E
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inner_conj_sym
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_conj_sym
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        `u
        ", "
        (Term.app `orthogonalProjection [`K `v])
        "‚ü´")
       "="
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (Term.typeAscription "(" `u ":" [`E] ")")
        ", "
        `v
        "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       (Term.typeAscription "(" `u ":" [`E] ")")
       ", "
       `v
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
@[ simp ]
  theorem
    inner_orthogonal_projection_eq_of_mem_left
    [ CompleteSpace K ] ( u : K ) ( v : E ) : ‚ü™ u , orthogonalProjection K v ‚ü´ = ‚ü™ ( u : E ) , v ‚ü´
    :=
      by
        rw
          [
            ‚Üê inner_conj_sym
              ,
              ‚Üê inner_conj_sym ( u : E )
              ,
              inner_orthogonal_projection_eq_of_mem_right
            ]
#align inner_orthogonal_projection_eq_of_mem_left inner_orthogonal_projection_eq_of_mem_left

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment "/--" "The orthogonal projection is self-adjoint. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `inner_orthogonal_projection_left_eq_right [])
      (Command.declSig
       [(Term.instBinder "[" [] (Term.app `CompleteSpace [`K]) "]")
        (Term.explicitBinder "(" [`u `v] [":" `E] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          (coeNotation "‚Üë" (Term.app `orthogonalProjection [`K `u]))
          ", "
          `v
          "‚ü´")
         "="
         (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
          "‚ü™"
          `u
          ", "
          (Term.app `orthogonalProjection [`K `v])
          "‚ü´"))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule
               [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
               `inner_orthogonal_projection_eq_of_mem_left)
              ","
              (Tactic.rwRule [] `inner_orthogonal_projection_eq_of_mem_right)]
             "]")
            [])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
              `inner_orthogonal_projection_eq_of_mem_left)
             ","
             (Tactic.rwRule [] `inner_orthogonal_projection_eq_of_mem_right)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
          `inner_orthogonal_projection_eq_of_mem_left)
         ","
         (Tactic.rwRule [] `inner_orthogonal_projection_eq_of_mem_right)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_orthogonal_projection_eq_of_mem_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_orthogonal_projection_eq_of_mem_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        (coeNotation "‚Üë" (Term.app `orthogonalProjection [`K `u]))
        ", "
        `v
        "‚ü´")
       "="
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
        "‚ü™"
        `u
        ", "
        (Term.app `orthogonalProjection [`K `v])
        "‚ü´"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª
       "‚ü™"
       `u
       ", "
       (Term.app `orthogonalProjection [`K `v])
       "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- The orthogonal projection is self-adjoint. -/
  theorem
    inner_orthogonal_projection_left_eq_right
    [ CompleteSpace K ] ( u v : E )
      : ‚ü™ ‚Üë orthogonalProjection K u , v ‚ü´ = ‚ü™ u , orthogonalProjection K v ‚ü´
    :=
      by
        rw
          [
            ‚Üê inner_orthogonal_projection_eq_of_mem_left
              ,
              inner_orthogonal_projection_eq_of_mem_right
            ]
#align inner_orthogonal_projection_left_eq_right inner_orthogonal_projection_left_eq_right

/-- The orthogonal projection is symmetric. -/
theorem orthogonalProjectionIsSymmetric [CompleteSpace K] :
    (K.subtypeL ‚àòL orthogonalProjection K : E ‚Üí‚Çó[ùïú] E).IsSymmetric :=
  inner_orthogonal_projection_left_eq_right K
#align orthogonal_projection_is_symmetric orthogonalProjectionIsSymmetric

open FiniteDimensional

/-- Given a finite-dimensional subspace `K‚ÇÇ`, and a subspace `K‚ÇÅ`
containined in it, the dimensions of `K‚ÇÅ` and the intersection of its
orthogonal subspace with `K‚ÇÇ` add to that of `K‚ÇÇ`. -/
theorem Submodule.finrank_add_inf_finrank_orthogonal {K‚ÇÅ K‚ÇÇ : Submodule ùïú E}
    [FiniteDimensional ùïú K‚ÇÇ] (h : K‚ÇÅ ‚â§ K‚ÇÇ) :
    finrank ùïú K‚ÇÅ + finrank ùïú (K‚ÇÅ·óÆ ‚äì K‚ÇÇ : Submodule ùïú E) = finrank ùïú K‚ÇÇ :=
  by
  haveI := Submodule.finite_dimensional_of_le h
  haveI := proper_is_R_or_C ùïú K‚ÇÅ
  have hd := Submodule.dim_sup_add_dim_inf_eq K‚ÇÅ (K‚ÇÅ·óÆ ‚äì K‚ÇÇ)
  rw [‚Üê inf_assoc, (Submodule.orthogonal_disjoint K‚ÇÅ).eq_bot, bot_inf_eq, finrank_bot,
    Submodule.sup_orthogonal_inf_of_complete_space h] at hd
  rw [add_zero] at hd
  exact hd.symm
#align submodule.finrank_add_inf_finrank_orthogonal Submodule.finrank_add_inf_finrank_orthogonal

/-- Given a finite-dimensional subspace `K‚ÇÇ`, and a subspace `K‚ÇÅ`
containined in it, the dimensions of `K‚ÇÅ` and the intersection of its
orthogonal subspace with `K‚ÇÇ` add to that of `K‚ÇÇ`. -/
theorem Submodule.finrank_add_inf_finrank_orthogonal' {K‚ÇÅ K‚ÇÇ : Submodule ùïú E}
    [FiniteDimensional ùïú K‚ÇÇ] (h : K‚ÇÅ ‚â§ K‚ÇÇ) {n : ‚Ñï} (h_dim : finrank ùïú K‚ÇÅ + n = finrank ùïú K‚ÇÇ) :
    finrank ùïú (K‚ÇÅ·óÆ ‚äì K‚ÇÇ : Submodule ùïú E) = n :=
  by
  rw [‚Üê add_right_inj (finrank ùïú K‚ÇÅ)]
  simp [Submodule.finrank_add_inf_finrank_orthogonal h, h_dim]
#align submodule.finrank_add_inf_finrank_orthogonal' Submodule.finrank_add_inf_finrank_orthogonal'

/-- Given a finite-dimensional space `E` and subspace `K`, the dimensions of `K` and `K·óÆ` add to
that of `E`. -/
theorem Submodule.finrank_add_finrank_orthogonal [FiniteDimensional ùïú E] (K : Submodule ùïú E) :
    finrank ùïú K + finrank ùïú K·óÆ = finrank ùïú E :=
  by
  convert Submodule.finrank_add_inf_finrank_orthogonal (le_top : K ‚â§ ‚ä§) using 1
  ¬∑ rw [inf_top_eq]
  ¬∑ simp
#align submodule.finrank_add_finrank_orthogonal Submodule.finrank_add_finrank_orthogonal

/-- Given a finite-dimensional space `E` and subspace `K`, the dimensions of `K` and `K·óÆ` add to
that of `E`. -/
theorem Submodule.finrank_add_finrank_orthogonal' [FiniteDimensional ùïú E] {K : Submodule ùïú E}
    {n : ‚Ñï} (h_dim : finrank ùïú K + n = finrank ùïú E) : finrank ùïú K·óÆ = n :=
  by
  rw [‚Üê add_right_inj (finrank ùïú K)]
  simp [Submodule.finrank_add_finrank_orthogonal, h_dim]
#align submodule.finrank_add_finrank_orthogonal' Submodule.finrank_add_finrank_orthogonal'

attribute [local instance] fact_finite_dimensional_of_finrank_eq_succ

/-- In a finite-dimensional inner product space, the dimension of the orthogonal complement of the
span of a nonzero vector is one less than the dimension of the space. -/
theorem finrank_orthogonal_span_singleton {n : ‚Ñï} [_i : Fact (finrank ùïú E = n + 1)] {v : E}
    (hv : v ‚â† 0) : finrank ùïú (ùïú ‚àô v)·óÆ = n :=
  Submodule.finrank_add_finrank_orthogonal' <| by
    simp [finrank_span_singleton hv, _i.elim, add_comm]
#align finrank_orthogonal_span_singleton finrank_orthogonal_span_singleton

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- An element `œÜ` of the orthogonal group of `F` can be factored as a product of reflections, and
specifically at most as many reflections as the dimension of the complement of the fixed subspace
of `œÜ`. -/
theorem LinearIsometryEquiv.reflections_generate_dim_aux [FiniteDimensional ‚Ñù F] {n : ‚Ñï}
    (œÜ : F ‚âÉ‚Çó·µ¢[‚Ñù] F) (hn : finrank ‚Ñù (ker (ContinuousLinearMap.id ‚Ñù F - œÜ))·óÆ ‚â§ n) :
    ‚àÉ l : List F, l.length ‚â§ n ‚àß œÜ = (l.map fun v => reflection (‚Ñù ‚àô v)·óÆ).Prod :=
  by
  -- We prove this by strong induction on `n`, the dimension of the orthogonal complement of the
  -- fixed subspace of the endomorphism `œÜ`
  induction' n with n IH generalizing œÜ
  ¬∑ -- Base case: `n = 0`, the fixed subspace is the whole space, so `œÜ = id`
    refine' ‚ü®[], rfl.le, show œÜ = 1 from _‚ü©
    have : ker (ContinuousLinearMap.id ‚Ñù F - œÜ) = ‚ä§ := by
      rwa [le_zero_iff, finrank_eq_zero, Submodule.orthogonal_eq_bot_iff] at hn
    symm
    ext x
    have := LinearMap.congr_fun (linear_map.ker_eq_top.mp this) x
    simpa only [sub_eq_zero, ContinuousLinearMap.to_linear_map_eq_coe, ContinuousLinearMap.coe_sub,
      LinearMap.sub_apply, LinearMap.zero_apply] using this
  ¬∑ -- Inductive step.  Let `W` be the fixed subspace of `œÜ`.  We suppose its complement to have
    -- dimension at most n + 1.
    let W := ker (ContinuousLinearMap.id ‚Ñù F - œÜ)
    have hW : ‚àÄ w ‚àà W, œÜ w = w := fun w hw => (sub_eq_zero.mp hw).symm
    by_cases hn' : finrank ‚Ñù W·óÆ ‚â§ n
    ¬∑ obtain ‚ü®V, hV‚ÇÅ, hV‚ÇÇ‚ü© := IH œÜ hn'
      exact ‚ü®V, hV‚ÇÅ.trans n.le_succ, hV‚ÇÇ‚ü©
    -- Take a nonzero element `v` of the orthogonal complement of `W`.
    haveI : Nontrivial W·óÆ := nontrivial_of_finrank_pos (by linarith [zero_le n] : 0 < finrank ‚Ñù W·óÆ)
    obtain ‚ü®v, hv‚ü© := exists_ne (0 : W·óÆ)
    have hœÜv : œÜ v ‚àà W·óÆ := by
      intro w hw
      rw [‚Üê hW w hw, LinearIsometryEquiv.inner_map_map]
      exact v.prop w hw
    have hv' : (v : F) ‚àâ W := by
      intro h
      exact hv ((Submodule.mem_left_iff_eq_zero_of_disjoint W.orthogonal_disjoint).mp h)
    -- Let `œÅ` be the reflection in `v - œÜ v`; this is designed to swap `v` and `œÜ v`
    let x : F := v - œÜ v
    let œÅ := reflection (‚Ñù ‚àô x)·óÆ
    -- Notation: Let `V` be the fixed subspace of `œÜ.trans œÅ`
    let V := ker (ContinuousLinearMap.id ‚Ñù F - œÜ.trans œÅ)
    have hV : ‚àÄ w, œÅ (œÜ w) = w ‚Üí w ‚àà V := by
      intro w hw
      change w - œÅ (œÜ w) = 0
      rw [sub_eq_zero, hw]
    -- Everything fixed by `œÜ` is fixed by `œÜ.trans œÅ`
    have H‚ÇÇV : W ‚â§ V := by
      intro w hw
      apply hV
      rw [hW w hw]
      refine' reflection_mem_subspace_eq_self _
      rw [Submodule.mem_orthogonal_singleton_iff_inner_left]
      exact Submodule.sub_mem _ v.prop hœÜv _ hw
    -- `v` is also fixed by `œÜ.trans œÅ`
    have H‚ÇÅV : (v : F) ‚àà V := by
      apply hV
      have : œÅ v = œÜ v := reflection_sub (œÜ.norm_map v).symm
      rw [‚Üê this]
      exact reflection_reflection _ _
    -- By dimension-counting, the complement of the fixed subspace of `œÜ.trans œÅ` has dimension at
    -- most `n`
    have : finrank ‚Ñù V·óÆ ‚â§ n := by
      change finrank ‚Ñù W·óÆ ‚â§ n + 1 at hn
      have : finrank ‚Ñù W + 1 ‚â§ finrank ‚Ñù V :=
        Submodule.finrank_lt_finrank_of_lt (SetLike.lt_iff_le_and_exists.2 ‚ü®H‚ÇÇV, v, H‚ÇÅV, hv'‚ü©)
      have : finrank ‚Ñù V + finrank ‚Ñù V·óÆ = finrank ‚Ñù F := V.finrank_add_finrank_orthogonal
      have : finrank ‚Ñù W + finrank ‚Ñù W·óÆ = finrank ‚Ñù F := W.finrank_add_finrank_orthogonal
      linarith
    -- So apply the inductive hypothesis to `œÜ.trans œÅ`
    obtain ‚ü®l, hl, hœÜl‚ü© := IH (œÅ * œÜ) this
    -- Prepend `œÅ` to the factorization into reflections obtained for `œÜ.trans œÅ`; this gives a
    -- factorization into reflections for `œÜ`.
    refine' ‚ü®x::l, Nat.succ_le_succ hl, _‚ü©
    rw [List.map_cons, List.prod_cons]
    have := congr_arg ((¬∑ * ¬∑) œÅ) hœÜl
    rwa [‚Üê mul_assoc, reflection_mul_reflection, one_mul] at this
#align
  linear_isometry_equiv.reflections_generate_dim_aux LinearIsometryEquiv.reflections_generate_dim_aux

/-- The orthogonal group of `F` is generated by reflections; specifically each element `œÜ` of the
orthogonal group is a product of at most as many reflections as the dimension of `F`.

Special case of the **Cartan‚ÄìDieudonn√© theorem**. -/
theorem LinearIsometryEquiv.reflections_generate_dim [FiniteDimensional ‚Ñù F] (œÜ : F ‚âÉ‚Çó·µ¢[‚Ñù] F) :
    ‚àÉ l : List F, l.length ‚â§ finrank ‚Ñù F ‚àß œÜ = (l.map fun v => reflection (‚Ñù ‚àô v)·óÆ).Prod :=
  let ‚ü®l, hl‚ÇÅ, hl‚ÇÇ‚ü© := œÜ.reflections_generate_dim_aux le_rfl
  ‚ü®l, hl‚ÇÅ.trans (Submodule.finrank_le _), hl‚ÇÇ‚ü©
#align linear_isometry_equiv.reflections_generate_dim LinearIsometryEquiv.reflections_generate_dim

/-- The orthogonal group of `F` is generated by reflections. -/
theorem LinearIsometryEquiv.reflections_generate [FiniteDimensional ‚Ñù F] :
    Subgroup.closure (Set.range fun v : F => reflection (‚Ñù ‚àô v)·óÆ) = ‚ä§ :=
  by
  rw [Subgroup.eq_top_iff']
  intro œÜ
  rcases œÜ.reflections_generate_dim with ‚ü®l, _, rfl‚ü©
  apply (Subgroup.closure _).list_prod_mem
  intro x hx
  rcases list.mem_map.mp hx with ‚ü®a, _, hax‚ü©
  exact Subgroup.subset_closure ‚ü®a, hax‚ü©
#align linear_isometry_equiv.reflections_generate LinearIsometryEquiv.reflections_generate

end Orthogonal

section OrthogonalFamily

variable {Œπ : Type _}

/-- An orthogonal family of subspaces of `E` satisfies `direct_sum.is_internal` (that is,
they provide an internal direct sum decomposition of `E`) if and only if their span has trivial
orthogonal complement. -/
theorem OrthogonalFamily.is_internal_iff_of_is_complete [DecidableEq Œπ] {V : Œπ ‚Üí Submodule ùïú E}
    (hV : @OrthogonalFamily ùïú _ _ _ _ (fun i => V i) _ fun i => (V i).subtype‚Çó·µ¢)
    (hc : IsComplete (‚Üë(sup·µ¢ V) : Set E)) : DirectSum.IsInternal V ‚Üî (sup·µ¢ V)·óÆ = ‚ä• :=
  by
  haveI : CompleteSpace ‚Ü•(sup·µ¢ V) := hc.complete_space_coe
  simp only [DirectSum.is_internal_submodule_iff_independent_and_supr_eq_top, hV.independent,
    true_and_iff, Submodule.orthogonal_eq_bot_iff]
#align
  orthogonal_family.is_internal_iff_of_is_complete OrthogonalFamily.is_internal_iff_of_is_complete

/-- An orthogonal family of subspaces of `E` satisfies `direct_sum.is_internal` (that is,
they provide an internal direct sum decomposition of `E`) if and only if their span has trivial
orthogonal complement. -/
theorem OrthogonalFamily.is_internal_iff [DecidableEq Œπ] [FiniteDimensional ùïú E]
    {V : Œπ ‚Üí Submodule ùïú E}
    (hV : @OrthogonalFamily ùïú _ _ _ _ (fun i => V i) _ fun i => (V i).subtype‚Çó·µ¢) :
    DirectSum.IsInternal V ‚Üî (sup·µ¢ V)·óÆ = ‚ä• :=
  haveI h := FiniteDimensional.proper_is_R_or_C ùïú ‚Ü•(sup·µ¢ V)
  hV.is_internal_iff_of_is_complete (complete_space_coe_iff_is_complete.mp inferInstance)
#align orthogonal_family.is_internal_iff OrthogonalFamily.is_internal_iff

end OrthogonalFamily

section OrthonormalBasis

variable {ùïú E} {v : Set E}

open FiniteDimensional Submodule Set

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v) -/
/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "An orthonormal set in an `inner_product_space` is maximal, if and only if the orthogonal\ncomplement of its span is empty. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `maximal_orthonormal_iff_orthogonal_complement_eq_bot [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`hv]
         [":"
          (Term.app
           `Orthonormal
           [`ùïú (Term.typeAscription "(" `coe ":" [(Term.arrow `v "‚Üí" `E)] ")")])]
         []
         ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚Üî_¬ª
         (Term.forall
          "‚àÄ"
          [(Term.explicitBinder "(" [`u] [] [] ")")
           (Term.explicitBinder
            "("
            [(Term.hole "_")]
            [":" (Init.Core.¬´term_‚äá_¬ª `u " ‚äá " `v)]
            []
            ")")]
          []
          ","
          (Term.arrow
           (Term.app
            `Orthonormal
            [`ùïú (Term.typeAscription "(" `coe ":" [(Term.arrow `u "‚Üí" `E)] ")")])
           "‚Üí"
           (¬´term_=_¬ª `u "=" `v)))
         "‚Üî"
         (¬´term_=_¬ª
          (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª (Term.app `span [`ùïú `v]) "·óÆ")
          "="
          (Order.BoundedOrder.¬´term‚ä•¬ª "‚ä•")))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Submodule.eq_bot_iff)] "]")
            [])
           []
           (Tactic.constructor "constructor")
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [])
             []
             (Std.Tactic.rintro
              "rintro"
              [(Std.Tactic.RCases.rintroPat.one
                (Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx')])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
                   [])]
                 "‚ü©"))]
              [])
             []
             (Tactic.tacticLet_
              "let"
              (Term.letDecl
               (Term.letIdDecl
                `e
                []
                []
                ":="
                (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                 (Term.typeAscription
                  "("
                  (¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "‚Åª¬π")
                  ":"
                  [`ùïú]
                  ")")
                 " ‚Ä¢ "
                 `x))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`he []]
                [(Term.typeSpec
                  ":"
                  (¬´term_=_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `e "‚Äñ") "=" (num "1")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.simp
                     "simp"
                     []
                     []
                     []
                     ["["
                      [(Tactic.simpLemma [] [] `e)
                       ","
                       (Tactic.simpLemma [] [] (Term.app `norm_smul_inv_norm [`hx]))]
                      "]"]
                     [])]))))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`he' []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚àà_¬ª
                   `e
                   "‚àà"
                   (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª (Term.app `span [`ùïú `v]) "·óÆ")))]
                ":="
                (Term.app `smul_mem' [(Term.hole "_") (Term.hole "_") `hx']))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`he'' []]
                [(Term.typeSpec ":" (¬´term_‚àâ_¬ª `e "‚àâ" `v))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.intro "intro" [`hev])
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec ":" (¬´term_=_¬ª `e "=" (num "0")))]
                       ":="
                       (Term.byTactic
                        "by"
                        (Tactic.tacticSeq
                         (Tactic.tacticSeq1Indented
                          [(Tactic.tacticHave_
                            "have"
                            (Term.haveDecl
                             (Term.haveIdDecl
                              []
                              [(Term.typeSpec
                                ":"
                                (¬´term_‚àà_¬ª
                                 `e
                                 "‚àà"
                                 (Order.Basic.¬´term_‚äì_¬ª
                                  (Term.app `span [`ùïú `v])
                                  " ‚äì "
                                  (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª
                                   (Term.app `span [`ùïú `v])
                                   "·óÆ"))))]
                              ":="
                              (Term.anonymousCtor
                               "‚ü®"
                               [(Term.app `subset_span [`hev]) "," `he']
                               "‚ü©"))))
                           []
                           (Std.Tactic.Simpa.simpa
                            "simpa"
                            []
                            []
                            (Std.Tactic.Simpa.simpaArgsRest
                             []
                             []
                             []
                             [(Tactic.simpArgs
                               "["
                               [(Tactic.simpLemma
                                 []
                                 []
                                 (Term.proj (Term.app `span [`ùïú `v]) "." `inf_orthogonal_eq_bot))]
                               "]")]
                             ["using" `this]))]))))))
                    []
                    (Tactic.tacticHave_
                     "have"
                     (Term.haveDecl
                      (Term.haveIdDecl
                       []
                       [(Term.typeSpec ":" (¬´term_‚â†_¬ª `e "‚â†" (num "0")))]
                       ":="
                       (Term.app `hv.ne_zero [(Term.anonymousCtor "‚ü®" [`e "," `hev] "‚ü©")]))))
                    []
                    (Tactic.contradiction "contradiction")]))))))
             []
             (Tactic.refine'
              "refine'"
              (Term.anonymousCtor
               "‚ü®"
               [(Term.app `insert [`e `v])
                ","
                (Term.app `v.subset_insert [`e])
                ","
                (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," (Term.hole "_")] "‚ü©")
                ","
                (Term.proj (Term.app `v.ne_insert_of_not_mem [`he'']) "." `symm)]
               "‚ü©"))
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Std.Tactic.rintro
                "rintro"
                [(Std.Tactic.RCases.rintroPat.one
                  (Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
                     [])]
                   "‚ü©"))]
                [])
               []
               (Tactic.cases'
                "cases'"
                [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
                []
                ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
               []
               (tactic__
                (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                [(Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `he)] "]"]
                  [])])
               []
               (tactic__
                (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                [(Tactic.exact
                  "exact"
                  (Term.app
                   (Term.proj `hv "." (fieldIdx "1"))
                   [(Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©")]))])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  [`h_end []]
                  [(Term.typeSpec
                    ":"
                    (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                     "‚àÄ"
                     (Lean.binderIdent `a)
                     (¬´binderTerm‚àà_¬ª "‚àà" `v)
                     ","
                     (¬´term_=_¬ª
                      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
                      "="
                      (num "0"))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.intro "intro" [`a `ha])
                      []
                      (Tactic.exact
                       "exact"
                       (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))]))))))
               []
               (Std.Tactic.rintro
                "rintro"
                [(Std.Tactic.RCases.rintroPat.one
                  (Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
                     [])]
                   "‚ü©"))]
                [])
               []
               (Tactic.cases'
                "cases'"
                [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
                []
                ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
               []
               (tactic__
                (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                [(Std.Tactic.rintro
                  "rintro"
                  [(Std.Tactic.RCases.rintroPat.one
                    (Std.Tactic.RCases.rcasesPat.tuple
                     "‚ü®"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                       [])]
                     "‚ü©"))
                   (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
                  [])
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hb []]
                    [(Term.typeSpec ":" (¬´term_‚àà_¬ª `b "‚àà" `v))]
                    ":="
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.refine'
                         "refine'"
                         (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
                        []
                        (Tactic.intro "intro" [`hbe'])
                        []
                        (Tactic.apply "apply" `hab')
                        []
                        (Tactic.simp
                         "simp"
                         []
                         []
                         []
                         ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
                         [])]))))))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]")
                  [])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   []
                   [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `ha)] "]")]
                   ["using" (Term.app `h_end [`b `hb])]))])
               []
               (Std.Tactic.rintro
                "rintro"
                [(Std.Tactic.RCases.rintroPat.one
                  (Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                     [])]
                   "‚ü©"))
                 (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
                [])
               []
               (Tactic.cases'
                "cases'"
                [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`hb']))]
                []
                ["with" [(Lean.binderIdent `hb) (Lean.binderIdent `hb)]])
               []
               (tactic__
                (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   []
                   [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hb)] "]")]
                   ["using" (Term.app `h_end [`a `ha])]))])
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (¬´term_‚â†_¬ª
                     (Term.typeAscription
                      "("
                      (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©")
                      ":"
                      [`v]
                      ")")
                     "‚â†"
                     (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©")))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.intro "intro" [`hab''])
                      []
                      (Tactic.apply "apply" `hab')
                      []
                      (Std.Tactic.Simpa.simpa
                       "simpa"
                       []
                       []
                       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))]))))))
               []
               (Tactic.exact "exact" (Term.app (Term.proj `hv "." (fieldIdx "2")) [`this]))])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [] `subset.antisymm_iff)] "]"]
              [])
             []
             (Std.Tactic.rintro
              "rintro"
              [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `h))
               (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `u))
               (Std.Tactic.RCases.rintroPat.one
                (Std.Tactic.RCases.rcasesPat.paren
                 "("
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `huv)])
                  [":" (¬´term_‚äÜ_¬ª `v "‚äÜ" `u)])
                 ")"))
               (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hu))]
              [])
             []
             (Tactic.refine' "refine'" (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `huv] "‚ü©"))
             []
             (Tactic.intro "intro" [`x `hxu])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj
                (Term.app
                 (Term.app `mt [(Term.app `h [`x])])
                 [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
                "."
                `imp_symm)
               [(Term.hole "_")]))
             []
             (Tactic.intro "intro" [`hxv `y `hy])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hxv' []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚àâ_¬ª
                   (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©") ":" [`u] ")")
                   "‚àâ"
                   (Term.typeAscription
                    "("
                    (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
                    ":"
                    [(Term.app `Set [`u])]
                    ")")))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.simp
                     "simp"
                     []
                     []
                     []
                     ["[" [(Tactic.simpLemma [] [] `huv) "," (Tactic.simpLemma [] [] `hxv)] "]"]
                     [])]))))))
             []
             (Std.Tactic.obtain
              "obtain"
              [(Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `l)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hl)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                    [])]
                  "‚ü©")])]
              [":"
               (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
                "‚àÉ"
                (Lean.binderIdent `l)
                (¬´binderTerm‚àà_¬ª
                 "‚àà"
                 (Term.app
                  `Finsupp.supported
                  [`ùïú
                   `ùïú
                   (Term.typeAscription
                    "("
                    (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
                    ":"
                    [(Term.app `Set [`u])]
                    ")")]))
                ","
                (¬´term_=_¬ª
                 (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
                 "="
                 `y))]
              [":="
               [(Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule
                        [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                        `Finsupp.mem_span_image_iff_total)]
                      "]")
                     [])
                    []
                    (Tactic.simp
                     "simp"
                     []
                     []
                     []
                     ["["
                      [(Tactic.simpLemma [] [] `huv)
                       ","
                       (Tactic.simpLemma [] [] `inter_eq_self_of_subset_left)
                       ","
                       (Tactic.simpLemma [] [] `hy)]
                      "]"]
                     [])])))]])
             []
             (Tactic.exact "exact" (Term.app `hu.inner_finsupp_eq_zero [`hxv' `hl]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Submodule.eq_bot_iff)] "]")
           [])
          []
          (Tactic.constructor "constructor")
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [])
            []
            (Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx')])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
                  [])]
                "‚ü©"))]
             [])
            []
            (Tactic.tacticLet_
             "let"
             (Term.letDecl
              (Term.letIdDecl
               `e
               []
               []
               ":="
               (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
                (Term.typeAscription
                 "("
                 (¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "‚Åª¬π")
                 ":"
                 [`ùïú]
                 ")")
                " ‚Ä¢ "
                `x))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`he []]
               [(Term.typeSpec
                 ":"
                 (¬´term_=_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `e "‚Äñ") "=" (num "1")))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.simp
                    "simp"
                    []
                    []
                    []
                    ["["
                     [(Tactic.simpLemma [] [] `e)
                      ","
                      (Tactic.simpLemma [] [] (Term.app `norm_smul_inv_norm [`hx]))]
                     "]"]
                    [])]))))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`he' []]
               [(Term.typeSpec
                 ":"
                 (¬´term_‚àà_¬ª
                  `e
                  "‚àà"
                  (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª (Term.app `span [`ùïú `v]) "·óÆ")))]
               ":="
               (Term.app `smul_mem' [(Term.hole "_") (Term.hole "_") `hx']))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`he'' []]
               [(Term.typeSpec ":" (¬´term_‚àâ_¬ª `e "‚àâ" `v))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.intro "intro" [`hev])
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec ":" (¬´term_=_¬ª `e "=" (num "0")))]
                      ":="
                      (Term.byTactic
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented
                         [(Tactic.tacticHave_
                           "have"
                           (Term.haveDecl
                            (Term.haveIdDecl
                             []
                             [(Term.typeSpec
                               ":"
                               (¬´term_‚àà_¬ª
                                `e
                                "‚àà"
                                (Order.Basic.¬´term_‚äì_¬ª
                                 (Term.app `span [`ùïú `v])
                                 " ‚äì "
                                 (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª
                                  (Term.app `span [`ùïú `v])
                                  "·óÆ"))))]
                             ":="
                             (Term.anonymousCtor
                              "‚ü®"
                              [(Term.app `subset_span [`hev]) "," `he']
                              "‚ü©"))))
                          []
                          (Std.Tactic.Simpa.simpa
                           "simpa"
                           []
                           []
                           (Std.Tactic.Simpa.simpaArgsRest
                            []
                            []
                            []
                            [(Tactic.simpArgs
                              "["
                              [(Tactic.simpLemma
                                []
                                []
                                (Term.proj (Term.app `span [`ùïú `v]) "." `inf_orthogonal_eq_bot))]
                              "]")]
                            ["using" `this]))]))))))
                   []
                   (Tactic.tacticHave_
                    "have"
                    (Term.haveDecl
                     (Term.haveIdDecl
                      []
                      [(Term.typeSpec ":" (¬´term_‚â†_¬ª `e "‚â†" (num "0")))]
                      ":="
                      (Term.app `hv.ne_zero [(Term.anonymousCtor "‚ü®" [`e "," `hev] "‚ü©")]))))
                   []
                   (Tactic.contradiction "contradiction")]))))))
            []
            (Tactic.refine'
             "refine'"
             (Term.anonymousCtor
              "‚ü®"
              [(Term.app `insert [`e `v])
               ","
               (Term.app `v.subset_insert [`e])
               ","
               (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," (Term.hole "_")] "‚ü©")
               ","
               (Term.proj (Term.app `v.ne_insert_of_not_mem [`he'']) "." `symm)]
              "‚ü©"))
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Std.Tactic.rintro
               "rintro"
               [(Std.Tactic.RCases.rintroPat.one
                 (Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
                    [])]
                  "‚ü©"))]
               [])
              []
              (Tactic.cases'
               "cases'"
               [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
               []
               ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Tactic.simp
                 "simp"
                 []
                 []
                 []
                 ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `he)] "]"]
                 [])])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Tactic.exact
                 "exact"
                 (Term.app
                  (Term.proj `hv "." (fieldIdx "1"))
                  [(Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©")]))])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 [`h_end []]
                 [(Term.typeSpec
                   ":"
                   (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                    "‚àÄ"
                    (Lean.binderIdent `a)
                    (¬´binderTerm‚àà_¬ª "‚àà" `v)
                    ","
                    (¬´term_=_¬ª
                     (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
                     "="
                     (num "0"))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.intro "intro" [`a `ha])
                     []
                     (Tactic.exact
                      "exact"
                      (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))]))))))
              []
              (Std.Tactic.rintro
               "rintro"
               [(Std.Tactic.RCases.rintroPat.one
                 (Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
                    [])]
                  "‚ü©"))]
               [])
              []
              (Tactic.cases'
               "cases'"
               [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
               []
               ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Std.Tactic.rintro
                 "rintro"
                 [(Std.Tactic.RCases.rintroPat.one
                   (Std.Tactic.RCases.rcasesPat.tuple
                    "‚ü®"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                      [])]
                    "‚ü©"))
                  (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
                 [])
                []
                (Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hb []]
                   [(Term.typeSpec ":" (¬´term_‚àà_¬ª `b "‚àà" `v))]
                   ":="
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.refine'
                        "refine'"
                        (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
                       []
                       (Tactic.intro "intro" [`hbe'])
                       []
                       (Tactic.apply "apply" `hab')
                       []
                       (Tactic.simp
                        "simp"
                        []
                        []
                        []
                        ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
                        [])]))))))
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]")
                 [])
                []
                (Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  []
                  [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `ha)] "]")]
                  ["using" (Term.app `h_end [`b `hb])]))])
              []
              (Std.Tactic.rintro
               "rintro"
               [(Std.Tactic.RCases.rintroPat.one
                 (Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                    [])]
                  "‚ü©"))
                (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
               [])
              []
              (Tactic.cases'
               "cases'"
               [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`hb']))]
               []
               ["with" [(Lean.binderIdent `hb) (Lean.binderIdent `hb)]])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  []
                  [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hb)] "]")]
                  ["using" (Term.app `h_end [`a `ha])]))])
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (¬´term_‚â†_¬ª
                    (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©") ":" [`v] ")")
                    "‚â†"
                    (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©")))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.intro "intro" [`hab''])
                     []
                     (Tactic.apply "apply" `hab')
                     []
                     (Std.Tactic.Simpa.simpa
                      "simpa"
                      []
                      []
                      (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))]))))))
              []
              (Tactic.exact "exact" (Term.app (Term.proj `hv "." (fieldIdx "2")) [`this]))])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["[" [(Tactic.simpLemma [] [] `subset.antisymm_iff)] "]"]
             [])
            []
            (Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `h))
              (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `u))
              (Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.paren
                "("
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `huv)])
                 [":" (¬´term_‚äÜ_¬ª `v "‚äÜ" `u)])
                ")"))
              (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hu))]
             [])
            []
            (Tactic.refine' "refine'" (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `huv] "‚ü©"))
            []
            (Tactic.intro "intro" [`x `hxu])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              (Term.proj
               (Term.app
                (Term.app `mt [(Term.app `h [`x])])
                [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
               "."
               `imp_symm)
              [(Term.hole "_")]))
            []
            (Tactic.intro "intro" [`hxv `y `hy])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hxv' []]
               [(Term.typeSpec
                 ":"
                 (¬´term_‚àâ_¬ª
                  (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©") ":" [`u] ")")
                  "‚àâ"
                  (Term.typeAscription
                   "("
                   (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
                   ":"
                   [(Term.app `Set [`u])]
                   ")")))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.simp
                    "simp"
                    []
                    []
                    []
                    ["[" [(Tactic.simpLemma [] [] `huv) "," (Tactic.simpLemma [] [] `hxv)] "]"]
                    [])]))))))
            []
            (Std.Tactic.obtain
             "obtain"
             [(Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `l)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hl)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                   [])]
                 "‚ü©")])]
             [":"
              (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
               "‚àÉ"
               (Lean.binderIdent `l)
               (¬´binderTerm‚àà_¬ª
                "‚àà"
                (Term.app
                 `Finsupp.supported
                 [`ùïú
                  `ùïú
                  (Term.typeAscription
                   "("
                   (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
                   ":"
                   [(Term.app `Set [`u])]
                   ")")]))
               ","
               (¬´term_=_¬ª
                (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
                "="
                `y))]
             [":="
              [(Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule
                       [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                       `Finsupp.mem_span_image_iff_total)]
                     "]")
                    [])
                   []
                   (Tactic.simp
                    "simp"
                    []
                    []
                    []
                    ["["
                     [(Tactic.simpLemma [] [] `huv)
                      ","
                      (Tactic.simpLemma [] [] `inter_eq_self_of_subset_left)
                      ","
                      (Tactic.simpLemma [] [] `hy)]
                     "]"]
                    [])])))]])
            []
            (Tactic.exact "exact" (Term.app `hu.inner_finsupp_eq_zero [`hxv' `hl]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["[" [(Tactic.simpLemma [] [] `subset.antisymm_iff)] "]"]
         [])
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `h))
          (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `u))
          (Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `huv)])
             [":" (¬´term_‚äÜ_¬ª `v "‚äÜ" `u)])
            ")"))
          (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hu))]
         [])
        []
        (Tactic.refine' "refine'" (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `huv] "‚ü©"))
        []
        (Tactic.intro "intro" [`x `hxu])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj
           (Term.app
            (Term.app `mt [(Term.app `h [`x])])
            [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
           "."
           `imp_symm)
          [(Term.hole "_")]))
        []
        (Tactic.intro "intro" [`hxv `y `hy])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hxv' []]
           [(Term.typeSpec
             ":"
             (¬´term_‚àâ_¬ª
              (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©") ":" [`u] ")")
              "‚àâ"
              (Term.typeAscription
               "("
               (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
               ":"
               [(Term.app `Set [`u])]
               ")")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.simp
                "simp"
                []
                []
                []
                ["[" [(Tactic.simpLemma [] [] `huv) "," (Tactic.simpLemma [] [] `hxv)] "]"]
                [])]))))))
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "‚ü®"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `l)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hl)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
               [])]
             "‚ü©")])]
         [":"
          (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
           "‚àÉ"
           (Lean.binderIdent `l)
           (¬´binderTerm‚àà_¬ª
            "‚àà"
            (Term.app
             `Finsupp.supported
             [`ùïú
              `ùïú
              (Term.typeAscription
               "("
               (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
               ":"
               [(Term.app `Set [`u])]
               ")")]))
           ","
           (¬´term_=_¬ª
            (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
            "="
            `y))]
         [":="
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                   `Finsupp.mem_span_image_iff_total)]
                 "]")
                [])
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["["
                 [(Tactic.simpLemma [] [] `huv)
                  ","
                  (Tactic.simpLemma [] [] `inter_eq_self_of_subset_left)
                  ","
                  (Tactic.simpLemma [] [] `hy)]
                 "]"]
                [])])))]])
        []
        (Tactic.exact "exact" (Term.app `hu.inner_finsupp_eq_zero [`hxv' `hl]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `hu.inner_finsupp_eq_zero [`hxv' `hl]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hu.inner_finsupp_eq_zero [`hxv' `hl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hxv'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hu.inner_finsupp_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "‚ü®"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `l)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hl)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
             [])]
           "‚ü©")])]
       [":"
        (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
         "‚àÉ"
         (Lean.binderIdent `l)
         (¬´binderTerm‚àà_¬ª
          "‚àà"
          (Term.app
           `Finsupp.supported
           [`ùïú
            `ùïú
            (Term.typeAscription
             "("
             (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
             ":"
             [(Term.app `Set [`u])]
             ")")]))
         ","
         (¬´term_=_¬ª
          (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
          "="
          `y))]
       [":="
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                 `Finsupp.mem_span_image_iff_total)]
               "]")
              [])
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `huv)
                ","
                (Tactic.simpLemma [] [] `inter_eq_self_of_subset_left)
                ","
                (Tactic.simpLemma [] [] `hy)]
               "]"]
              [])])))]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `Finsupp.mem_span_image_iff_total)]
            "]")
           [])
          []
          (Tactic.simp
           "simp"
           []
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `huv)
             ","
             (Tactic.simpLemma [] [] `inter_eq_self_of_subset_left)
             ","
             (Tactic.simpLemma [] [] `hy)]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [] `huv)
         ","
         (Tactic.simpLemma [] [] `inter_eq_self_of_subset_left)
         ","
         (Tactic.simpLemma [] [] `hy)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inter_eq_self_of_subset_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `huv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `Finsupp.mem_span_image_iff_total)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Finsupp.mem_span_image_iff_total
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
       "‚àÉ"
       (Lean.binderIdent `l)
       (¬´binderTerm‚àà_¬ª
        "‚àà"
        (Term.app
         `Finsupp.supported
         [`ùïú
          `ùïú
          (Term.typeAscription
           "("
           (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
           ":"
           [(Term.app `Set [`u])]
           ")")]))
       ","
       (¬´term_=_¬ª
        (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
        "="
        `y))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
       "="
       `y)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe]) [`l])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `l
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `Finsupp.total [(Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) `E `ùïú `coe])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coe
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ùïú
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `E
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Coe.¬´term‚Ü•_¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Init.Coe.¬´term‚Ü•_¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1023, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Finsupp.total
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Finsupp.total [(Term.paren "(" (Init.Coe.¬´term‚Ü•_¬ª "‚Ü•" `u) ")") `E `ùïú `coe])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Finsupp.supported
       [`ùïú
        `ùïú
        (Term.typeAscription
         "("
         (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
         ":"
         [(Term.app `Set [`u])]
         ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription
       "("
       (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
       ":"
       [(Term.app `Set [`u])]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`u])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `coe
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `ùïú
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ùïú
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Finsupp.supported
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hxv' []]
         [(Term.typeSpec
           ":"
           (¬´term_‚àâ_¬ª
            (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©") ":" [`u] ")")
            "‚àâ"
            (Term.typeAscription
             "("
             (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
             ":"
             [(Term.app `Set [`u])]
             ")")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              []
              ["[" [(Tactic.simpLemma [] [] `huv) "," (Tactic.simpLemma [] [] `hxv)] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           []
           ["[" [(Tactic.simpLemma [] [] `huv) "," (Tactic.simpLemma [] [] `hxv)] "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["[" [(Tactic.simpLemma [] [] `huv) "," (Tactic.simpLemma [] [] `hxv)] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hxv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `huv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚àâ_¬ª
       (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©") ":" [`u] ")")
       "‚àâ"
       (Term.typeAscription
        "("
        (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
        ":"
        [(Term.app `Set [`u])]
        ")"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription
       "("
       (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
       ":"
       [(Term.app `Set [`u])]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`u])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.¬´term_‚Åª¬π'_¬ª `coe " ‚Åª¬π' " `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `coe
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©") ":" [`u] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hxu
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 50 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 50, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`hxv `y `hy])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hxv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         (Term.app
          (Term.app `mt [(Term.app `h [`x])])
          [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
         "."
         `imp_symm)
        [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.app `mt [(Term.app `h [`x])])
         [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
        "."
        `imp_symm)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.app `mt [(Term.app `h [`x])])
        [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
       "."
       `imp_symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.app `mt [(Term.app `h [`x])])
       [(Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hxu
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hu.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `mt [(Term.app `h [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `h [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `mt [(Term.paren "(" (Term.app `h [`x]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.paren "(" (Term.app `mt [(Term.paren "(" (Term.app `h [`x]) ")")]) ")")
      [(Term.paren "(" (Term.app `hu.ne_zero [(Term.anonymousCtor "‚ü®" [`x "," `hxu] "‚ü©")]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`x `hxu])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hxu
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine' "refine'" (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `huv] "‚ü©"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," `huv] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `huv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `h))
        (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `u))
        (Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.paren
          "("
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `huv)])
           [":" (¬´term_‚äÜ_¬ª `v "‚äÜ" `u)])
          ")"))
        (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hu))]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚äÜ_¬ª `v "‚äÜ" `u)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `v
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["[" [(Tactic.simpLemma [] [] `subset.antisymm_iff)] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `subset.antisymm_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Mathlib.Tactic.Contrapose.contrapose! "contrapose!" [])
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `x)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx')])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
              [])]
            "‚ü©"))]
         [])
        []
        (Tactic.tacticLet_
         "let"
         (Term.letDecl
          (Term.letIdDecl
           `e
           []
           []
           ":="
           (Algebra.Group.Defs.¬´term_‚Ä¢_¬ª
            (Term.typeAscription
             "("
             (¬´term_‚Åª¬π¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `x "‚Äñ") "‚Åª¬π")
             ":"
             [`ùïú]
             ")")
            " ‚Ä¢ "
            `x))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`he []]
           [(Term.typeSpec
             ":"
             (¬´term_=_¬ª (Analysis.Normed.Group.Basic.¬´term‚Äñ_‚Äñ¬ª "‚Äñ" `e "‚Äñ") "=" (num "1")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.simp
                "simp"
                []
                []
                []
                ["["
                 [(Tactic.simpLemma [] [] `e)
                  ","
                  (Tactic.simpLemma [] [] (Term.app `norm_smul_inv_norm [`hx]))]
                 "]"]
                [])]))))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`he' []]
           [(Term.typeSpec
             ":"
             (¬´term_‚àà_¬ª
              `e
              "‚àà"
              (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª (Term.app `span [`ùïú `v]) "·óÆ")))]
           ":="
           (Term.app `smul_mem' [(Term.hole "_") (Term.hole "_") `hx']))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`he'' []]
           [(Term.typeSpec ":" (¬´term_‚àâ_¬ª `e "‚àâ" `v))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.intro "intro" [`hev])
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (¬´term_=_¬ª `e "=" (num "0")))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.tacticHave_
                       "have"
                       (Term.haveDecl
                        (Term.haveIdDecl
                         []
                         [(Term.typeSpec
                           ":"
                           (¬´term_‚àà_¬ª
                            `e
                            "‚àà"
                            (Order.Basic.¬´term_‚äì_¬ª
                             (Term.app `span [`ùïú `v])
                             " ‚äì "
                             (Analysis.InnerProductSpace.Basic.¬´term_·óÆ¬ª
                              (Term.app `span [`ùïú `v])
                              "·óÆ"))))]
                         ":="
                         (Term.anonymousCtor "‚ü®" [(Term.app `subset_span [`hev]) "," `he'] "‚ü©"))))
                      []
                      (Std.Tactic.Simpa.simpa
                       "simpa"
                       []
                       []
                       (Std.Tactic.Simpa.simpaArgsRest
                        []
                        []
                        []
                        [(Tactic.simpArgs
                          "["
                          [(Tactic.simpLemma
                            []
                            []
                            (Term.proj (Term.app `span [`ùïú `v]) "." `inf_orthogonal_eq_bot))]
                          "]")]
                        ["using" `this]))]))))))
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec ":" (¬´term_‚â†_¬ª `e "‚â†" (num "0")))]
                  ":="
                  (Term.app `hv.ne_zero [(Term.anonymousCtor "‚ü®" [`e "," `hev] "‚ü©")]))))
               []
               (Tactic.contradiction "contradiction")]))))))
        []
        (Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "‚ü®"
          [(Term.app `insert [`e `v])
           ","
           (Term.app `v.subset_insert [`e])
           ","
           (Term.anonymousCtor "‚ü®" [(Term.hole "_") "," (Term.hole "_")] "‚ü©")
           ","
           (Term.proj (Term.app `v.ne_insert_of_not_mem [`he'']) "." `symm)]
          "‚ü©"))
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
                [])]
              "‚ü©"))]
           [])
          []
          (Tactic.cases'
           "cases'"
           [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
           []
           ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.simp
             "simp"
             []
             []
             []
             ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `he)] "]"]
             [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.exact
             "exact"
             (Term.app
              (Term.proj `hv "." (fieldIdx "1"))
              [(Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©")]))])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`h_end []]
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
                "‚àÄ"
                (Lean.binderIdent `a)
                (¬´binderTerm‚àà_¬ª "‚àà" `v)
                ","
                (¬´term_=_¬ª
                 (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
                 "="
                 (num "0"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`a `ha])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))]))))))
          []
          (Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
                [])]
              "‚ü©"))]
           [])
          []
          (Tactic.cases'
           "cases'"
           [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
           []
           ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                  [])]
                "‚ü©"))
              (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
             [])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hb []]
               [(Term.typeSpec ":" (¬´term_‚àà_¬ª `b "‚àà" `v))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.refine'
                    "refine'"
                    (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
                   []
                   (Tactic.intro "intro" [`hbe'])
                   []
                   (Tactic.apply "apply" `hab')
                   []
                   (Tactic.simp
                    "simp"
                    []
                    []
                    []
                    ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
                    [])]))))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]")
             [])
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              []
              [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `ha)] "]")]
              ["using" (Term.app `h_end [`b `hb])]))])
          []
          (Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                [])]
              "‚ü©"))
            (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
           [])
          []
          (Tactic.cases'
           "cases'"
           [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`hb']))]
           []
           ["with" [(Lean.binderIdent `hb) (Lean.binderIdent `hb)]])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              []
              [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hb)] "]")]
              ["using" (Term.app `h_end [`a `ha])]))])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (¬´term_‚â†_¬ª
                (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©") ":" [`v] ")")
                "‚â†"
                (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©")))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`hab''])
                 []
                 (Tactic.apply "apply" `hab')
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))]))))))
          []
          (Tactic.exact "exact" (Term.app (Term.proj `hv "." (fieldIdx "2")) [`this]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`h_end []]
           [(Term.typeSpec
             ":"
             (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
              "‚àÄ"
              (Lean.binderIdent `a)
              (¬´binderTerm‚àà_¬ª "‚àà" `v)
              ","
              (¬´term_=_¬ª
               (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
               "="
               (num "0"))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.intro "intro" [`a `ha])
               []
               (Tactic.exact
                "exact"
                (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))]))))))
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
              [])]
            "‚ü©"))]
         [])
        []
        (Tactic.cases'
         "cases'"
         [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
         []
         ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
                [])]
              "‚ü©"))
            (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hb []]
             [(Term.typeSpec ":" (¬´term_‚àà_¬ª `b "‚àà" `v))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
                 []
                 (Tactic.intro "intro" [`hbe'])
                 []
                 (Tactic.apply "apply" `hab')
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
                  [])]))))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]")
           [])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            []
            [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `ha)] "]")]
            ["using" (Term.app `h_end [`b `hb])]))])
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
              [])]
            "‚ü©"))
          (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
         [])
        []
        (Tactic.cases'
         "cases'"
         [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`hb']))]
         []
         ["with" [(Lean.binderIdent `hb) (Lean.binderIdent `hb)]])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            []
            [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hb)] "]")]
            ["using" (Term.app `h_end [`a `ha])]))])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (¬´term_‚â†_¬ª
              (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©") ":" [`v] ")")
              "‚â†"
              (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©")))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.intro "intro" [`hab''])
               []
               (Tactic.apply "apply" `hab')
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))]))))))
        []
        (Tactic.exact "exact" (Term.app (Term.proj `hv "." (fieldIdx "2")) [`this]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app (Term.proj `hv "." (fieldIdx "2")) [`this]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `hv "." (fieldIdx "2")) [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hv "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (¬´term_‚â†_¬ª
            (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©") ":" [`v] ")")
            "‚â†"
            (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©")))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`hab''])
             []
             (Tactic.apply "apply" `hab')
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`hab''])
          []
          (Tactic.apply "apply" `hab')
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hab'']))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab''
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `hab')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`hab''])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab''
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â†_¬ª
       (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©") ":" [`v] ")")
       "‚â†"
       (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`b "," `hb] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription "(" (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©") ":" [`v] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`a "," `ha] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          []
          [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hb)] "]")]
          ["using" (Term.app `h_end [`a `ha])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `hb)] "]")]
        ["using" (Term.app `h_end [`a `ha])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h_end [`a `ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h_end
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.cases'
       "cases'"
       [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`hb']))]
       []
       ["with" [(Lean.binderIdent `hb) (Lean.binderIdent `hb)]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_or_mem_of_mem_insert [`hb'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hb'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_or_mem_of_mem_insert
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.tuple
          "‚ü®"
          [(Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
            [])]
          "‚ü©"))
        (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
              [])]
            "‚ü©"))
          (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
         [])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hb []]
           [(Term.typeSpec ":" (¬´term_‚àà_¬ª `b "‚àà" `v))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.refine' "refine'" (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
               []
               (Tactic.intro "intro" [`hbe'])
               []
               (Tactic.apply "apply" `hab')
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
                [])]))))))
        []
        (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]") [])
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          []
          [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `ha)] "]")]
          ["using" (Term.app `h_end [`b `hb])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `ha)] "]")]
        ["using" (Term.app `h_end [`b `hb])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `h_end [`b `hb])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hb
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `h_end
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `inner_eq_zero_sym)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `inner_eq_zero_sym
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hb []]
         [(Term.typeSpec ":" (¬´term_‚àà_¬ª `b "‚àà" `v))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine' "refine'" (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
             []
             (Tactic.intro "intro" [`hbe'])
             []
             (Tactic.apply "apply" `hab')
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine' "refine'" (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
          []
          (Tactic.intro "intro" [`hbe'])
          []
          (Tactic.apply "apply" `hab')
          []
          (Tactic.simp
           "simp"
           []
           []
           []
           ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["[" [(Tactic.simpLemma [] [] `ha) "," (Tactic.simpLemma [] [] `hbe')] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hbe'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `hab')
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`hbe'])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hbe'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine' "refine'" (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mem_of_mem_insert_of_ne [`hb' (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hb'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_of_mem_insert_of_ne
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚àà_¬ª `b "‚àà" `v)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `v
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.tuple
          "‚ü®"
          [(Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `b)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hb')])
            [])]
          "‚ü©"))
        (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `hab'))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.cases'
       "cases'"
       [(Tactic.casesTarget [] (Term.app `eq_or_mem_of_mem_insert [`ha']))]
       []
       ["with" [(Lean.binderIdent `ha) (Lean.binderIdent `ha)]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_or_mem_of_mem_insert [`ha'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_or_mem_of_mem_insert
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.tuple
          "‚ü®"
          [(Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `a)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `ha')])
            [])]
          "‚ü©"))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`h_end []]
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
            "‚àÄ"
            (Lean.binderIdent `a)
            (¬´binderTerm‚àà_¬ª "‚àà" `v)
            ","
            (¬´term_=_¬ª
             (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
             "="
             (num "0"))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`a `ha])
             []
             (Tactic.exact
              "exact"
              (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`a `ha])
          []
          (Tactic.exact "exact" (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `he' [`a (Term.app `Submodule.subset_span [`ha])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Submodule.subset_span [`ha])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Submodule.subset_span
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Submodule.subset_span [`ha])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `he'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`a `ha])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ha
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÄ__,_¬ª
       "‚àÄ"
       (Lean.binderIdent `a)
       (¬´binderTerm‚àà_¬ª "‚àà" `v)
       ","
       (¬´term_=_¬ª
        (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
        "="
        (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_=_¬ª
       (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
       "="
       (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª "‚ü™" `a ", " `e "‚ü´")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Analysis.InnerProductSpace.Projection.¬´term‚ü™_,_‚ü´¬ª', expected 'Analysis.InnerProductSpace.Projection.term‚ü™_,_‚ü´._@.Analysis.InnerProductSpace.Projection._hyg.7'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    An orthonormal set in an `inner_product_space` is maximal, if and only if the orthogonal
    complement of its span is empty. -/
  theorem
    maximal_orthonormal_iff_orthogonal_complement_eq_bot
    ( hv : Orthonormal ùïú ( coe : v ‚Üí E ) )
      : ‚àÄ ( u ) ( _ : u ‚äá v ) , Orthonormal ùïú ( coe : u ‚Üí E ) ‚Üí u = v ‚Üî span ùïú v ·óÆ = ‚ä•
    :=
      by
        rw [ Submodule.eq_bot_iff ]
          constructor
          ¬∑
            contrapose!
              rintro ‚ü® x , hx' , hx ‚ü©
              let e := ( ‚Äñ x ‚Äñ ‚Åª¬π : ùïú ) ‚Ä¢ x
              have he : ‚Äñ e ‚Äñ = 1 := by simp [ e , norm_smul_inv_norm hx ]
              have he' : e ‚àà span ùïú v ·óÆ := smul_mem' _ _ hx'
              have
                he''
                  : e ‚àâ v
                  :=
                  by
                    intro hev
                      have
                        : e = 0
                          :=
                          by
                            have : e ‚àà span ùïú v ‚äì span ùïú v ·óÆ := ‚ü® subset_span hev , he' ‚ü©
                              simpa [ span ùïú v . inf_orthogonal_eq_bot ] using this
                      have : e ‚â† 0 := hv.ne_zero ‚ü® e , hev ‚ü©
                      contradiction
              refine'
                ‚ü® insert e v , v.subset_insert e , ‚ü® _ , _ ‚ü© , v.ne_insert_of_not_mem he'' . symm ‚ü©
              ¬∑
                rintro ‚ü® a , ha' ‚ü©
                  cases' eq_or_mem_of_mem_insert ha' with ha ha
                  ¬∑ simp [ ha , he ]
                  ¬∑ exact hv . 1 ‚ü® a , ha ‚ü©
              ¬∑
                have
                    h_end
                      : ‚àÄ a ‚àà v , ‚ü™ a , e ‚ü´ = 0
                      :=
                      by intro a ha exact he' a Submodule.subset_span ha
                  rintro ‚ü® a , ha' ‚ü©
                  cases' eq_or_mem_of_mem_insert ha' with ha ha
                  ¬∑
                    rintro ‚ü® b , hb' ‚ü© hab'
                      have
                        hb
                          : b ‚àà v
                          :=
                          by
                            refine' mem_of_mem_insert_of_ne hb' _
                              intro hbe'
                              apply hab'
                              simp [ ha , hbe' ]
                      rw [ inner_eq_zero_sym ]
                      simpa [ ha ] using h_end b hb
                  rintro ‚ü® b , hb' ‚ü© hab'
                  cases' eq_or_mem_of_mem_insert hb' with hb hb
                  ¬∑ simpa [ hb ] using h_end a ha
                  have
                    : ( ‚ü® a , ha ‚ü© : v ) ‚â† ‚ü® b , hb ‚ü© := by intro hab'' apply hab' simpa using hab''
                  exact hv . 2 this
          ¬∑
            simp only [ subset.antisymm_iff ]
              rintro h u ( huv : v ‚äÜ u ) hu
              refine' ‚ü® _ , huv ‚ü©
              intro x hxu
              refine' mt h x hu.ne_zero ‚ü® x , hxu ‚ü© . imp_symm _
              intro hxv y hy
              have hxv' : ( ‚ü® x , hxu ‚ü© : u ) ‚àâ ( coe ‚Åª¬π' v : Set u ) := by simp [ huv , hxv ]
              obtain
                ‚ü® l , hl , rfl ‚ü©
                :
                  ‚àÉ
                    l
                    ‚àà Finsupp.supported ùïú ùïú ( coe ‚Åª¬π' v : Set u )
                    ,
                    Finsupp.total ‚Ü• u E ùïú coe l = y
                :=
                  by
                    rw [ ‚Üê Finsupp.mem_span_image_iff_total ]
                      simp [ huv , inter_eq_self_of_subset_left , hy ]
              exact hu.inner_finsupp_eq_zero hxv' hl
#align
  maximal_orthonormal_iff_orthogonal_complement_eq_bot maximal_orthonormal_iff_orthogonal_complement_eq_bot

variable [FiniteDimensional ùïú E]

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (u ¬´expr ‚äá ¬ª v) -/
/-- An orthonormal set in a finite-dimensional `inner_product_space` is maximal, if and only if it
is a basis. -/
theorem maximal_orthonormal_iff_basis_of_finite_dimensional (hv : Orthonormal ùïú (coe : v ‚Üí E)) :
    (‚àÄ (u) (_ : u ‚äá v), Orthonormal ùïú (coe : u ‚Üí E) ‚Üí u = v) ‚Üî ‚àÉ b : Basis v ùïú E, ‚áëb = coe :=
  by
  haveI := proper_is_R_or_C ùïú (span ùïú v)
  rw [maximal_orthonormal_iff_orthogonal_complement_eq_bot hv]
  have hv_compl : IsComplete (span ùïú v : Set E) := (span ùïú v).complete_of_finite_dimensional
  rw [Submodule.orthogonal_eq_bot_iff]
  have hv_coe : range (coe : v ‚Üí E) = v := by simp
  constructor
  ¬∑ refine' fun h => ‚ü®Basis.mk hv.linear_independent _, Basis.coe_mk _ _‚ü©
    convert h.ge
  ¬∑ rintro ‚ü®h, coe_h‚ü©
    rw [‚Üê h.span_eq, coe_h, hv_coe]
#align
  maximal_orthonormal_iff_basis_of_finite_dimensional maximal_orthonormal_iff_basis_of_finite_dimensional

end OrthonormalBasis

