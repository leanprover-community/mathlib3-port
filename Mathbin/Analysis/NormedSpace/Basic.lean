import Mathbin.Algebra.Algebra.RestrictScalars 
import Mathbin.Algebra.Algebra.Subalgebra 
import Mathbin.Analysis.Normed.Group.InfiniteSum 
import Mathbin.Data.Matrix.Basic 
import Mathbin.Topology.Algebra.Module 
import Mathbin.Topology.Instances.Ennreal 
import Mathbin.Topology.Sequences

/-!
# Normed spaces

In this file we define (semi)normed rings, fields, spaces, and algebras. We also prove some theorems
about these definitions.
-/


variable{Œ± : Type _}{Œ≤ : Type _}{Œ≥ : Type _}{Œπ : Type _}

noncomputable theory

open Filter Metric

open_locale TopologicalSpace BigOperators Nnreal Ennreal uniformity Pointwise

section SemiNormedRing

/-- A seminormed ring is a ring endowed with a seminorm which satisfies the inequality
`‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class SemiNormedRing(Œ± : Type _) extends HasNorm Œ±, Ring‚Çì Œ±, PseudoMetricSpace Œ± where 
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  norm_mul : ‚àÄ a b, norm (a*b) ‚â§ norm a*norm b

/-- A normed ring is a ring endowed with a norm which satisfies the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class NormedRing(Œ± : Type _) extends HasNorm Œ±, Ring‚Çì Œ±, MetricSpace Œ± where 
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  norm_mul : ‚àÄ a b, norm (a*b) ‚â§ norm a*norm b

/-- A normed ring is a seminormed ring. -/
instance (priority := 100)NormedRing.toSemiNormedRing [Œ≤ : NormedRing Œ±] : SemiNormedRing Œ± :=
  { Œ≤ with  }

/-- A seminormed commutative ring is a commutative ring endowed with a seminorm which satisfies
the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class SemiNormedCommRing(Œ± : Type _) extends SemiNormedRing Œ± where 
  mul_comm : ‚àÄ (x y : Œ±), (x*y) = y*x

/-- A normed commutative ring is a commutative ring endowed with a norm which satisfies
the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class NormedCommRing(Œ± : Type _) extends NormedRing Œ± where 
  mul_comm : ‚àÄ (x y : Œ±), (x*y) = y*x

/-- A normed commutative ring is a seminormed commutative ring. -/
instance (priority := 100)NormedCommRing.toSemiNormedCommRing [Œ≤ : NormedCommRing Œ±] : SemiNormedCommRing Œ± :=
  { Œ≤ with  }

instance  : NormedCommRing PUnit :=
  { PUnit.normedGroup, PUnit.commRing with
    norm_mul :=
      fun _ _ =>
        by 
          simp  }

/-- A mixin class with the axiom `‚à•1‚à• = 1`. Many `normed_ring`s and all `normed_field`s satisfy this
axiom. -/
class NormOneClass(Œ± : Type _)[HasNorm Œ±][HasOne Œ±] : Prop where 
  norm_one : ‚à•(1 : Œ±)‚à• = 1

export NormOneClass(norm_one)

attribute [simp] norm_one

@[simp]
theorem nnnorm_one [SemiNormedGroup Œ±] [HasOne Œ±] [NormOneClass Œ±] : ‚à•(1 : Œ±)‚à•‚Çä = 1 :=
  Nnreal.eq norm_one

instance (priority := 100)SemiNormedCommRing.toCommRing [Œ≤ : SemiNormedCommRing Œ±] : CommRing‚Çì Œ± :=
  { Œ≤ with  }

instance (priority := 100)NormedRing.toNormedGroup [Œ≤ : NormedRing Œ±] : NormedGroup Œ± :=
  { Œ≤ with  }

instance (priority := 100)SemiNormedRing.toSemiNormedGroup [Œ≤ : SemiNormedRing Œ±] : SemiNormedGroup Œ± :=
  { Œ≤ with  }

instance Prod.norm_one_class [NormedGroup Œ±] [HasOne Œ±] [NormOneClass Œ±] [NormedGroup Œ≤] [HasOne Œ≤] [NormOneClass Œ≤] :
  NormOneClass (Œ± √ó Œ≤) :=
  ‚ü®by 
      simp [Prod.norm_def]‚ü©

variable[SemiNormedRing Œ±]

theorem norm_mul_le (a b : Œ±) : ‚à•a*b‚à• ‚â§ ‚à•a‚à•*‚à•b‚à• :=
  SemiNormedRing.norm_mul _ _

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance Subalgebra.semiNormedRing {ùïú : Type _} {_ : CommRing‚Çì ùïú} {E : Type _} [SemiNormedRing E] {_ : Algebra ùïú E}
  (s : Subalgebra ùïú E) : SemiNormedRing s :=
  { s.to_submodule.semi_normed_group with norm_mul := fun a b => norm_mul_le a.1 b.1 }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance Subalgebra.normedRing {ùïú : Type _} {_ : CommRing‚Çì ùïú} {E : Type _} [NormedRing E] {_ : Algebra ùïú E}
  (s : Subalgebra ùïú E) : NormedRing s :=
  { s.semi_normed_ring with  }

theorem List.norm_prod_le' : ‚àÄ {l : List Œ±}, l ‚â† [] ‚Üí ‚à•l.prod‚à• ‚â§ (l.map norm).Prod
| [], h => (h rfl).elim
| [a], _ =>
  by 
    simp 
| a :: b :: l, _ =>
  by 
    rw [List.map_cons‚Çì, List.prod_cons, @List.prod_cons _ _ _ ‚à•a‚à•]
    refine' le_trans‚Çì (norm_mul_le _ _) (mul_le_mul_of_nonneg_left _ (norm_nonneg _))
    exact List.norm_prod_le' (List.cons_ne_nil b l)

theorem List.norm_prod_le [NormOneClass Œ±] : ‚àÄ (l : List Œ±), ‚à•l.prod‚à• ‚â§ (l.map norm).Prod
| [] =>
  by 
    simp 
| a :: l => List.norm_prod_le' (List.cons_ne_nil a l)

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem finset.norm_prod_le'
{Œ± : Type*}
[normed_comm_ring Œ±]
(s : finset Œπ)
(hs : s.nonempty)
(f : Œπ ‚Üí Œ±) : ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr‚àè in , ¬ª((i), s, f i)), ¬´expr‚àè in , ¬ª((i), s, ¬´expr‚à• ‚à•¬ª(f i))) :=
begin
  rcases [expr s, "with", "‚ü®", "‚ü®", ident l, "‚ü©", ",", ident hl, "‚ü©"],
  have [] [":", expr ¬´expr ‚â† ¬ª(l.map f, ¬´expr[ , ]¬ª([]))] [],
  by simpa [] [] [] [] [] ["using", expr hs],
  simpa [] [] [] [] [] ["using", expr list.norm_prod_le' this]
end

theorem Finset.norm_prod_le {Œ± : Type _} [NormedCommRing Œ±] [NormOneClass Œ±] (s : Finset Œπ) (f : Œπ ‚Üí Œ±) :
  ‚à•‚àèi in s, f i‚à• ‚â§ ‚àèi in s, ‚à•f i‚à• :=
  by 
    rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©
    simpa using (l.map f).norm_prod_le

/-- If `Œ±` is a seminormed ring, then `‚à•a^n‚à•‚â§ ‚à•a‚à•^n` for `n > 0`. See also `norm_pow_le`. -/
theorem norm_pow_le' (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n
| 1, h =>
  by 
    simp 
| n+2, h =>
  by 
    rw [pow_succ‚Çì _ (n+1), pow_succ‚Çì _ (n+1)]
    exact
      le_trans‚Çì (norm_mul_le a (a ^ n+1))
        (mul_le_mul (le_refl‚Çì _) (norm_pow_le' (Nat.succ_pos‚Çì _)) (norm_nonneg _) (norm_nonneg _))

/-- If `Œ±` is a seminormed ring with `‚à•1‚à•=1`, then `‚à•a^n‚à•‚â§ ‚à•a‚à•^n`. See also `norm_pow_le'`. -/
theorem norm_pow_le [NormOneClass Œ±] (a : Œ±) : ‚àÄ (n : ‚Ñï), ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n
| 0 =>
  by 
    simp 
| n+1 => norm_pow_le' a n.zero_lt_succ

theorem eventually_norm_pow_le (a : Œ±) : ‚àÄ·∂†n : ‚Ñï in at_top, ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n :=
  eventually_at_top.mpr ‚ü®1, fun b h => norm_pow_le' a (Nat.succ_le_iff.mp h)‚ü©

/-- In a seminormed ring, the left-multiplication `add_monoid_hom` is bounded. -/
theorem mul_left_bound (x : Œ±) : ‚àÄ (y : Œ±), ‚à•AddMonoidHom.mulLeft x y‚à• ‚â§ ‚à•x‚à•*‚à•y‚à• :=
  norm_mul_le x

/-- In a seminormed ring, the right-multiplication `add_monoid_hom` is bounded. -/
theorem mul_right_bound (x : Œ±) : ‚àÄ (y : Œ±), ‚à•AddMonoidHom.mulRight x y‚à• ‚â§ ‚à•x‚à•*‚à•y‚à• :=
  fun y =>
    by 
      rw [mul_comm‚Çì]
      convert norm_mul_le y x

/-- Seminormed ring structure on the product of two seminormed rings, using the sup norm. -/
instance Prod.semiNormedRing [SemiNormedRing Œ≤] : SemiNormedRing (Œ± √ó Œ≤) :=
  { Prod.semiNormedGroup with
    norm_mul :=
      fun x y =>
        calc ‚à•x*y‚à• = ‚à•(x.1*y.1, x.2*y.2)‚à• := rfl 
          _ = max ‚à•x.1*y.1‚à• ‚à•x.2*y.2‚à• := rfl 
          _ ‚â§ max (‚à•x.1‚à•*‚à•y.1‚à•) (‚à•x.2‚à•*‚à•y.2‚à•) := max_le_max (norm_mul_le x.1 y.1) (norm_mul_le x.2 y.2)
          _ = max (‚à•x.1‚à•*‚à•y.1‚à•) (‚à•y.2‚à•*‚à•x.2‚à•) :=
          by 
            simp [mul_comm‚Çì]
          _ ‚â§ max ‚à•x.1‚à• ‚à•x.2‚à•*max ‚à•y.2‚à• ‚à•y.1‚à• :=
          by 
            apply max_mul_mul_le_max_mul_max <;> simp [norm_nonneg]
          _ = max ‚à•x.1‚à• ‚à•x.2‚à•*max ‚à•y.1‚à• ‚à•y.2‚à• :=
          by 
            simp [max_comm‚Çì]
          _ = ‚à•x‚à•*‚à•y‚à• := rfl
           }

/-- Seminormed group instance (using sup norm of sup norm) for matrices over a seminormed ring. Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
def Matrix.semiNormedGroup {n m : Type _} [Fintype n] [Fintype m] : SemiNormedGroup (Matrix n m Œ±) :=
  Pi.semiNormedGroup

attribute [local instance] Matrix.semiNormedGroup

theorem semi_norm_matrix_le_iff {n m : Type _} [Fintype n] [Fintype m] {r : ‚Ñù} (hr : 0 ‚â§ r) {A : Matrix n m Œ±} :
  ‚à•A‚à• ‚â§ r ‚Üî ‚àÄ i j, ‚à•A i j‚à• ‚â§ r :=
  by 
    simp [pi_semi_norm_le_iff hr]

end SemiNormedRing

section NormedRing

variable[NormedRing Œ±]

theorem Units.norm_pos [Nontrivial Œ±] (x : Units Œ±) : 0 < ‚à•(x : Œ±)‚à• :=
  norm_pos_iff.mpr (Units.ne_zero x)

/-- Normed ring structure on the product of two normed rings, using the sup norm. -/
instance Prod.normedRing [NormedRing Œ≤] : NormedRing (Œ± √ó Œ≤) :=
  { Prod.semiNormedGroup with norm_mul := norm_mul_le }

/-- Normed group instance (using sup norm of sup norm) for matrices over a normed ring.  Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
def Matrix.normedGroup {n m : Type _} [Fintype n] [Fintype m] : NormedGroup (Matrix n m Œ±) :=
  Pi.normedGroup

end NormedRing

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[priority 100] instance semi_normed_ring_top_monoid [semi_normed_ring Œ±] : has_continuous_mul Œ± :=
‚ü®¬´expr $ ¬ª(continuous_iff_continuous_at.2, Œª
  x, ¬´expr $ ¬ª(tendsto_iff_norm_tendsto_zero.2, begin
     have [] [":", expr ‚àÄ
      e : ¬´expr √ó ¬ª(Œ±, Œ±), ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr * ¬ª(e.1, e.2), ¬´expr * ¬ª(x.1, x.2))), ¬´expr + ¬ª(¬´expr * ¬ª(¬´expr‚à• ‚à•¬ª(e.1), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(e.2, x.2))), ¬´expr * ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(e.1, x.1)), ¬´expr‚à• ‚à•¬ª(x.2))))] [],
     { intro [ident e],
       calc
         ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr * ¬ª(e.1, e.2), ¬´expr * ¬ª(x.1, x.2))), ¬´expr‚à• ‚à•¬ª(¬´expr + ¬ª(¬´expr * ¬ª(e.1, ¬´expr - ¬ª(e.2, x.2)), ¬´expr * ¬ª(¬´expr - ¬ª(e.1, x.1), x.2)))) : by rw ["[", expr mul_sub, ",", expr sub_mul, ",", expr sub_add_sub_cancel, "]"] []
         ¬´expr ‚â§ ¬ª(..., ¬´expr + ¬ª(¬´expr * ¬ª(¬´expr‚à• ‚à•¬ª(e.1), ¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(e.2, x.2))), ¬´expr * ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(e.1, x.1)), ¬´expr‚à• ‚à•¬ª(x.2)))) : norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _) },
     refine [expr squeeze_zero (Œª e, norm_nonneg _) this _],
     convert [] [expr ((continuous_fst.tendsto x).norm.mul ((continuous_snd.tendsto x).sub tendsto_const_nhds).norm).add (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _)] [],
     show [expr tendsto _ _ _],
     from [expr tendsto_const_nhds],
     simp [] [] [] [] [] []
   end))‚ü©

/-- A seminormed ring is a topological ring. -/
instance (priority := 100)semi_normed_top_ring [SemiNormedRing Œ±] : TopologicalRing Œ± :=
  {  }

/-- A normed field is a field with a norm satisfying ‚à•x y‚à• = ‚à•x‚à• ‚à•y‚à•. -/
class NormedField(Œ± : Type _) extends HasNorm Œ±, Field Œ±, MetricSpace Œ± where 
  dist_eq : ‚àÄ x y, dist x y = norm (x - y)
  norm_mul' : ‚àÄ a b, norm (a*b) = norm a*norm b

/-- A nondiscrete normed field is a normed field in which there is an element of norm different from
`0` and `1`. This makes it possible to bring any element arbitrarily close to `0` by multiplication
by the powers of any element, and thus to relate algebra and topology. -/
class NondiscreteNormedField(Œ± : Type _) extends NormedField Œ± where 
  non_trivial : ‚àÉ x : Œ±, 1 < ‚à•x‚à•

namespace NormedField

section NormedField

variable[NormedField Œ±]

@[simp]
theorem norm_mul (a b : Œ±) : ‚à•a*b‚à• = ‚à•a‚à•*‚à•b‚à• :=
  NormedField.norm_mul' a b

instance (priority := 100)to_normed_comm_ring : NormedCommRing Œ± :=
  { ‚ÄπNormedField Œ±‚Ä∫ with norm_mul := fun a b => (norm_mul a b).le }

instance (priority := 900)to_norm_one_class : NormOneClass Œ± :=
  ‚ü®mul_left_cancel‚ÇÄ (mt norm_eq_zero.1 (@one_ne_zero Œ± _ _))$
      by 
        rw [‚Üênorm_mul, mul_one‚Çì, mul_one‚Çì]‚ü©

@[simp]
theorem nnnorm_mul (a b : Œ±) : ‚à•a*b‚à•‚Çä = ‚à•a‚à•‚Çä*‚à•b‚à•‚Çä :=
  Nnreal.eq$ norm_mul a b

/-- `norm` as a `monoid_hom`. -/
@[simps]
def norm_hom : MonoidWithZeroHom Œ± ‚Ñù :=
  ‚ü®norm, norm_zero, norm_one, norm_mul‚ü©

/-- `nnnorm` as a `monoid_hom`. -/
@[simps]
def nnnorm_hom : MonoidWithZeroHom Œ± ‚Ñù‚â•0  :=
  ‚ü®nnnorm, nnnorm_zero, nnnorm_one, nnnorm_mul‚ü©

@[simp]
theorem norm_pow (a : Œ±) : ‚àÄ (n : ‚Ñï), ‚à•a ^ n‚à• = ‚à•a‚à• ^ n :=
  (norm_hom.toMonoidHom : Œ± ‚Üí* ‚Ñù).map_pow a

@[simp]
theorem nnnorm_pow (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à•‚Çä = ‚à•a‚à•‚Çä ^ n :=
  (nnnorm_hom.toMonoidHom : Œ± ‚Üí*  ‚Ñù‚â•0 ).map_pow a n

@[simp]
theorem norm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚à•‚àèb in s, f b‚à• = ‚àèb in s, ‚à•f b‚à• :=
  (norm_hom.toMonoidHom : Œ± ‚Üí* ‚Ñù).map_prod f s

@[simp]
theorem nnnorm_prod (s : Finset Œ≤) (f : Œ≤ ‚Üí Œ±) : ‚à•‚àèb in s, f b‚à•‚Çä = ‚àèb in s, ‚à•f b‚à•‚Çä :=
  (nnnorm_hom.toMonoidHom : Œ± ‚Üí*  ‚Ñù‚â•0 ).map_prod f s

@[simp]
theorem norm_div (a b : Œ±) : ‚à•a / b‚à• = ‚à•a‚à• / ‚à•b‚à• :=
  (norm_hom : MonoidWithZeroHom Œ± ‚Ñù).map_div a b

@[simp]
theorem nnnorm_div (a b : Œ±) : ‚à•a / b‚à•‚Çä = ‚à•a‚à•‚Çä / ‚à•b‚à•‚Çä :=
  (nnnorm_hom : MonoidWithZeroHom Œ± ‚Ñù‚â•0 ).map_div a b

@[simp]
theorem norm_inv (a : Œ±) : ‚à•a‚Åª¬π‚à• = ‚à•a‚à•‚Åª¬π :=
  (norm_hom : MonoidWithZeroHom Œ± ‚Ñù).map_inv a

@[simp]
theorem nnnorm_inv (a : Œ±) : ‚à•a‚Åª¬π‚à•‚Çä = ‚à•a‚à•‚Çä‚Åª¬π :=
  Nnreal.eq$
    by 
      simp 

@[simp]
theorem norm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚à•a ^ n‚à• = ‚à•a‚à• ^ n :=
  (norm_hom : MonoidWithZeroHom Œ± ‚Ñù).map_zpow

@[simp]
theorem nnnorm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚à•a ^ n‚à•‚Çä = ‚à•a‚à•‚Çä ^ n :=
  (nnnorm_hom : MonoidWithZeroHom Œ± ‚Ñù‚â•0 ).map_zpow

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[priority 100] instance : has_continuous_inv‚ÇÄ Œ± :=
begin
  refine [expr ‚ü®Œª r r0, tendsto_iff_norm_tendsto_zero.2 _‚ü©],
  have [ident r0'] [":", expr ¬´expr < ¬ª(0, ¬´expr‚à• ‚à•¬ª(r))] [":=", expr norm_pos_iff.2 r0],
  rcases [expr exists_between r0', "with", "‚ü®", ident Œµ, ",", ident Œµ0, ",", ident Œµr, "‚ü©"],
  have [] [":", expr ¬´expr‚àÄ·∂† in , ¬ª((e), exprùìù() r, ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr ‚Åª¬π¬ª(e), ¬´expr ‚Åª¬π¬ª(r))), ¬´expr / ¬ª(¬´expr / ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(r, e)), ¬´expr‚à• ‚à•¬ª(r)), Œµ)))] [],
  { filter_upwards ["[", expr (is_open_lt continuous_const continuous_norm).eventually_mem Œµr, "]"] [],
    intros [ident e, ident he],
    have [ident e0] [":", expr ¬´expr ‚â† ¬ª(e, 0)] [":=", expr norm_pos_iff.1 (Œµ0.trans he)],
    calc
      ¬´expr = ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(¬´expr ‚Åª¬π¬ª(e), ¬´expr ‚Åª¬π¬ª(r))), ¬´expr / ¬ª(¬´expr / ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(r, e)), ¬´expr‚à• ‚à•¬ª(r)), ¬´expr‚à• ‚à•¬ª(e))) : by field_simp [] ["[", expr mul_comm, "]"] [] []
      ¬´expr ‚â§ ¬ª(..., ¬´expr / ¬ª(¬´expr / ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr - ¬ª(r, e)), ¬´expr‚à• ‚à•¬ª(r)), Œµ)) : div_le_div_of_le_left (div_nonneg (norm_nonneg _) (norm_nonneg _)) Œµ0 he.le },
  refine [expr squeeze_zero' ¬´expr $ ¬ª(eventually_of_forall, Œª _, norm_nonneg _) this _],
  refine [expr (continuous_const.sub continuous_id).norm.div_const.div_const.tendsto' _ _ _],
  simp [] [] [] [] [] []
end

end NormedField

variable(Œ±)[NondiscreteNormedField Œ±]

theorem exists_one_lt_norm : ‚àÉ x : Œ±, 1 < ‚à•x‚à• :=
  ‚ÄπNondiscreteNormedField Œ±‚Ä∫.non_trivial

theorem exists_norm_lt_one : ‚àÉ x : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < 1 :=
  by 
    rcases exists_one_lt_norm Œ± with ‚ü®y, hy‚ü©
    refine' ‚ü®y‚Åª¬π, _, _‚ü©
    ¬∑
      simp only [inv_eq_zero, Ne.def, norm_pos_iff]
      rintro rfl 
      rw [norm_zero] at hy 
      exact lt_asymm‚Çì zero_lt_one hy
    ¬∑
      simp [inv_lt_one hy]

theorem exists_lt_norm (r : ‚Ñù) : ‚àÉ x : Œ±, r < ‚à•x‚à• :=
  let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± 
  let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt r hw
  ‚ü®w ^ n,
    by 
      rwa [norm_pow]‚ü©

theorem exists_norm_lt {r : ‚Ñù} (hr : 0 < r) : ‚àÉ x : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < r :=
  let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± 
  let ‚ü®n, hle, hlt‚ü© := exists_mem_Ioc_zpow hr hw
  ‚ü®w ^ n,
    by 
      rw [norm_zpow] <;> exact zpow_pos_of_pos (lt_trans‚Çì zero_lt_one hw) _,
    by 
      rwa [norm_zpow]‚ü©

variable{Œ±}

@[instance]
theorem punctured_nhds_ne_bot (x : Œ±) : ne_bot (ùìù[¬´expr ·∂ú¬ª {x}] x) :=
  by 
    rw [‚Üêmem_closure_iff_nhds_within_ne_bot, Metric.mem_closure_iff]
    rintro Œµ Œµ0 
    rcases NormedField.exists_norm_lt Œ± Œµ0 with ‚ü®b, hb0, hbŒµ‚ü©
    refine' ‚ü®x+b, mt (set.mem_singleton_iff.trans add_right_eq_self‚Çì).1$ norm_pos_iff.1 hb0, _‚ü©
    rwa [dist_comm, dist_eq_norm, add_sub_cancel']

@[instance]
theorem nhds_within_is_unit_ne_bot : ne_bot (ùìù[{ x:Œ± | IsUnit x }] 0) :=
  by 
    simpa only [is_unit_iff_ne_zero] using punctured_nhds_ne_bot (0 : Œ±)

end NormedField

instance  : NormedField ‚Ñù :=
  { Real.normedGroup with norm_mul' := abs_mul }

instance  : NondiscreteNormedField ‚Ñù :=
  { non_trivial :=
      ‚ü®2,
        by 
          unfold norm 
          rw [abs_of_nonneg] <;> normNum‚ü© }

namespace Real

theorem norm_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à•x‚à• = x :=
  abs_of_nonneg hx

theorem norm_of_nonpos {x : ‚Ñù} (hx : x ‚â§ 0) : ‚à•x‚à• = -x :=
  abs_of_nonpos hx

@[simp]
theorem norm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à• = n :=
  abs_of_nonneg n.cast_nonneg

@[simp]
theorem nnnorm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à•‚Çä = n :=
  Nnreal.eq$
    by 
      simp 

@[simp]
theorem norm_two : ‚à•(2 : ‚Ñù)‚à• = 2 :=
  abs_of_pos (@zero_lt_two ‚Ñù _ _)

@[simp]
theorem nnnorm_two : ‚à•(2 : ‚Ñù)‚à•‚Çä = 2 :=
  Nnreal.eq$
    by 
      simp 

theorem nnnorm_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à•x‚à•‚Çä = ‚ü®x, hx‚ü© :=
  Nnreal.eq$ norm_of_nonneg hx

theorem ennnorm_eq_of_real {x : ‚Ñù} (hx : 0 ‚â§ x) : (‚à•x‚à•‚Çä : ‚Ñù‚â•0‚àû) = Ennreal.ofReal x :=
  by 
    rw [‚Üêof_real_norm_eq_coe_nnnorm, norm_of_nonneg hx]

theorem of_real_le_ennnorm (x : ‚Ñù) : Ennreal.ofReal x ‚â§ ‚à•x‚à•‚Çä :=
  by 
    byCases' hx : 0 ‚â§ x
    ¬∑
      rw [Real.ennnorm_eq_of_real hx]
      rfl'
    ¬∑
      rw [Ennreal.of_real_eq_zero.2 (le_of_lt‚Çì (not_le‚Çì.1 hx))]
      exact bot_le

/-- If `E` is a nontrivial topological module over `‚Ñù`, then `E` has no isolated points.
This is a particular case of `module.punctured_nhds_ne_bot`. -/
instance punctured_nhds_module_ne_bot {E : Type _} [AddCommGroup‚Çì E] [TopologicalSpace E] [HasContinuousAdd E]
  [Nontrivial E] [Module ‚Ñù E] [HasContinuousSmul ‚Ñù E] (x : E) : ne_bot (ùìù[¬´expr ·∂ú¬ª {x}] x) :=
  Module.punctured_nhds_ne_bot ‚Ñù E x

end Real

namespace Nnreal

open_locale Nnreal

@[simp]
theorem norm_eq (x :  ‚Ñù‚â•0 ) : ‚à•(x : ‚Ñù)‚à• = x :=
  by 
    rw [Real.norm_eq_abs, x.abs_eq]

@[simp]
theorem nnnorm_eq (x :  ‚Ñù‚â•0 ) : ‚à•(x : ‚Ñù)‚à•‚Çä = x :=
  Nnreal.eq$ Real.norm_of_nonneg x.2

end Nnreal

@[simp]
theorem norm_norm [SemiNormedGroup Œ±] (x : Œ±) : ‚à•‚à•x‚à•‚à• = ‚à•x‚à• :=
  Real.norm_of_nonneg (norm_nonneg _)

@[simp]
theorem nnnorm_norm [SemiNormedGroup Œ±] (a : Œ±) : ‚à•‚à•a‚à•‚à•‚Çä = ‚à•a‚à•‚Çä :=
  by 
    simpa [Real.nnnorm_of_nonneg (norm_nonneg a)]

/-- A restatement of `metric_space.tendsto_at_top` in terms of the norm. -/
theorem NormedGroup.tendsto_at_top [Nonempty Œ±] [SemilatticeSup Œ±] {Œ≤ : Type _} [SemiNormedGroup Œ≤] {f : Œ± ‚Üí Œ≤}
  {b : Œ≤} : tendsto f at_top (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚à•f n - b‚à• < Œµ :=
  (at_top_basis.tendsto_iff Metric.nhds_basis_ball).trans
    (by 
      simp [dist_eq_norm])

/--
A variant of `normed_group.tendsto_at_top` that
uses `‚àÉ N, ‚àÄ n > N, ...` rather than `‚àÉ N, ‚àÄ n ‚â• N, ...`
-/
theorem NormedGroup.tendsto_at_top' [Nonempty Œ±] [SemilatticeSup Œ±] [NoTopOrder Œ±] {Œ≤ : Type _} [SemiNormedGroup Œ≤]
  {f : Œ± ‚Üí Œ≤} {b : Œ≤} : tendsto f at_top (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N < n ‚Üí ‚à•f n - b‚à• < Œµ :=
  (at_top_basis_Ioi.tendsto_iff Metric.nhds_basis_ball).trans
    (by 
      simp [dist_eq_norm])

instance  : NormedCommRing ‚Ñ§ :=
  { norm := fun n => ‚à•(n : ‚Ñù)‚à•,
    norm_mul :=
      fun m n =>
        le_of_eq‚Çì$
          by 
            simp only [norm, Int.cast_mul, abs_mul],
    dist_eq :=
      fun m n =>
        by 
          simp only [Int.dist_eq, norm, Int.cast_sub],
    mul_comm := mul_comm‚Çì }

@[normCast]
theorem Int.norm_cast_real (m : ‚Ñ§) : ‚à•(m : ‚Ñù)‚à• = ‚à•m‚à• :=
  rfl

theorem Int.norm_eq_abs (n : ‚Ñ§) : ‚à•n‚à• = |n| :=
  rfl

theorem Nnreal.coe_nat_abs (n : ‚Ñ§) : (n.nat_abs :  ‚Ñù‚â•0 ) = ‚à•n‚à•‚Çä :=
  Nnreal.eq$
    calc ((n.nat_abs :  ‚Ñù‚â•0 ) : ‚Ñù) = (n.nat_abs : ‚Ñ§) :=
      by 
        simp only [Int.cast_coe_nat, Nnreal.coe_nat_cast]
      _ = |n| :=
      by 
        simp only [‚ÜêInt.abs_eq_nat_abs, Int.cast_abs]
      _ = ‚à•n‚à• := rfl
      

instance  : NormOneClass ‚Ñ§ :=
  ‚ü®by 
      simp [‚ÜêInt.norm_cast_real]‚ü©

instance  : NormedField ‚Ñö :=
  { norm := fun r => ‚à•(r : ‚Ñù)‚à•,
    norm_mul' :=
      fun r‚ÇÅ r‚ÇÇ =>
        by 
          simp only [norm, Rat.cast_mul, abs_mul],
    dist_eq :=
      fun r‚ÇÅ r‚ÇÇ =>
        by 
          simp only [Rat.dist_eq, norm, Rat.cast_sub] }

instance  : NondiscreteNormedField ‚Ñö :=
  { non_trivial :=
      ‚ü®2,
        by 
          unfold norm 
          rw [abs_of_nonneg] <;> normNum‚ü© }

@[normCast, simp]
theorem Rat.norm_cast_real (r : ‚Ñö) : ‚à•(r : ‚Ñù)‚à• = ‚à•r‚à• :=
  rfl

@[normCast, simp]
theorem Int.norm_cast_rat (m : ‚Ñ§) : ‚à•(m : ‚Ñö)‚à• = ‚à•m‚à• :=
  by 
    rw [‚ÜêRat.norm_cast_real, ‚ÜêInt.norm_cast_real] <;> congr 1 <;> normCast

section 

variable[SemiNormedGroup Œ±]

theorem norm_nsmul_le (n : ‚Ñï) (a : Œ±) : ‚à•n ‚Ä¢ a‚à• ‚â§ n*‚à•a‚à• :=
  by 
    induction' n with n ih
    ¬∑
      simp only [norm_zero, Nat.cast_zero, zero_mul, zero_smul]
    simp only [Nat.succ_eq_add_one, add_smul, add_mul‚Çì, one_mul‚Çì, Nat.cast_add, Nat.cast_one, one_nsmul]
    exact norm_add_le_of_le ih le_rfl

theorem norm_zsmul_le (n : ‚Ñ§) (a : Œ±) : ‚à•n ‚Ä¢ a‚à• ‚â§ ‚à•n‚à•*‚à•a‚à• :=
  by 
    induction' n with n n
    ¬∑
      simp only [Int.of_nat_eq_coe, coe_nat_zsmul]
      convert norm_nsmul_le n a 
      exact Nat.abs_cast n
    ¬∑
      simp only [Int.neg_succ_of_nat_coe, neg_smul, norm_neg, coe_nat_zsmul]
      convert norm_nsmul_le n.succ a 
      exact Nat.abs_cast n.succ

theorem nnnorm_nsmul_le (n : ‚Ñï) (a : Œ±) : ‚à•n ‚Ä¢ a‚à•‚Çä ‚â§ n*‚à•a‚à•‚Çä :=
  by 
    simpa only [‚ÜêNnreal.coe_le_coe, Nnreal.coe_mul, Nnreal.coe_nat_cast] using norm_nsmul_le n a

theorem nnnorm_zsmul_le (n : ‚Ñ§) (a : Œ±) : ‚à•n ‚Ä¢ a‚à•‚Çä ‚â§ ‚à•n‚à•‚Çä*‚à•a‚à•‚Çä :=
  by 
    simpa only [‚ÜêNnreal.coe_le_coe, Nnreal.coe_mul] using norm_zsmul_le n a

end 

section SemiNormedSpace

section Prio

set_option extends_priority 920

/-- A seminormed space over a normed field is a vector space endowed with a seminorm which satisfies
the equality `‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•`. We require only `‚à•c ‚Ä¢ x‚à• ‚â§ ‚à•c‚à• ‚à•x‚à•` in the definition, then prove
`‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•` in `norm_smul`. -/
class SemiNormedSpace(Œ± : Type _)(Œ≤ : Type _)[NormedField Œ±][SemiNormedGroup Œ≤] extends Module Œ± Œ≤ where 
  norm_smul_le : ‚àÄ (a : Œ±) (b : Œ≤), ‚à•a ‚Ä¢ b‚à• ‚â§ ‚à•a‚à•*‚à•b‚à•

set_option extends_priority 920

/-- A normed space over a normed field is a vector space endowed with a norm which satisfies the
equality `‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•`. We require only `‚à•c ‚Ä¢ x‚à• ‚â§ ‚à•c‚à• ‚à•x‚à•` in the definition, then prove
`‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•` in `norm_smul`. -/
class NormedSpace(Œ± : Type _)(Œ≤ : Type _)[NormedField Œ±][NormedGroup Œ≤] extends Module Œ± Œ≤ where 
  norm_smul_le : ‚àÄ (a : Œ±) (b : Œ≤), ‚à•a ‚Ä¢ b‚à• ‚â§ ‚à•a‚à•*‚à•b‚à•

/-- A normed space is a seminormed space. -/
instance (priority := 100)NormedSpace.toSemiNormedSpace [NormedField Œ±] [NormedGroup Œ≤] [Œ≥ : NormedSpace Œ± Œ≤] :
  SemiNormedSpace Œ± Œ≤ :=
  { Œ≥ with  }

end Prio

variable[NormedField Œ±][SemiNormedGroup Œ≤]

instance (priority := 100)SemiNormedSpace.has_bounded_smul [SemiNormedSpace Œ± Œ≤] : HasBoundedSmul Œ± Œ≤ :=
  { dist_smul_pair' :=
      fun x y‚ÇÅ y‚ÇÇ =>
        by 
          simpa [dist_eq_norm, smul_sub] using SemiNormedSpace.norm_smul_le x (y‚ÇÅ - y‚ÇÇ),
    dist_pair_smul' :=
      fun x‚ÇÅ x‚ÇÇ y =>
        by 
          simpa [dist_eq_norm, sub_smul] using SemiNormedSpace.norm_smul_le (x‚ÇÅ - x‚ÇÇ) y }

instance NormedField.toNormedSpace : NormedSpace Œ± Œ± :=
  { norm_smul_le := fun a b => le_of_eq‚Çì (NormedField.norm_mul a b) }

theorem norm_smul [SemiNormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à• = ‚à•s‚à•*‚à•x‚à• :=
  by 
    byCases' h : s = 0
    ¬∑
      simp [h]
    ¬∑
      refine' le_antisymm‚Çì (SemiNormedSpace.norm_smul_le s x) _ 
      calc (‚à•s‚à•*‚à•x‚à•) = ‚à•s‚à•*‚à•s‚Åª¬π ‚Ä¢ s ‚Ä¢ x‚à• :=
        by 
          rw [inv_smul_smul‚ÇÄ h]_ ‚â§ ‚à•s‚à•*‚à•s‚Åª¬π‚à•*‚à•s ‚Ä¢ x‚à• :=
        mul_le_mul_of_nonneg_left (SemiNormedSpace.norm_smul_le _ _) (norm_nonneg _)_ = ‚à•s ‚Ä¢ x‚à• :=
        by 
          rw [NormedField.norm_inv, ‚Üêmul_assoc‚Çì, mul_inv_cancel (mt norm_eq_zero.1 h), one_mul‚Çì]

@[simp]
theorem abs_norm_eq_norm (z : Œ≤) : |‚à•z‚à•| = ‚à•z‚à• :=
  (abs_eq (norm_nonneg z)).mpr (Or.inl rfl)

theorem dist_smul [SemiNormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à•*dist x y :=
  by 
    simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]

theorem nnnorm_smul [SemiNormedSpace Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à•‚Çä = ‚à•s‚à•‚Çä*‚à•x‚à•‚Çä :=
  Nnreal.eq$ norm_smul s x

theorem nndist_smul [SemiNormedSpace Œ± Œ≤] (s : Œ±) (x y : Œ≤) : nndist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à•‚Çä*nndist x y :=
  Nnreal.eq$ dist_smul s x y

theorem norm_smul_of_nonneg [SemiNormedSpace ‚Ñù Œ≤] {t : ‚Ñù} (ht : 0 ‚â§ t) (x : Œ≤) : ‚à•t ‚Ä¢ x‚à• = t*‚à•x‚à• :=
  by 
    rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ht]

variable{E : Type _}[SemiNormedGroup E][SemiNormedSpace Œ± E]

variable{F : Type _}[SemiNormedGroup F][SemiNormedSpace Œ± F]

theorem eventually_nhds_norm_smul_sub_lt (c : Œ±) (x : E) {Œµ : ‚Ñù} (h : 0 < Œµ) : ‚àÄ·∂†y in ùìù x, ‚à•c ‚Ä¢ (y - x)‚à• < Œµ :=
  have  : tendsto (fun y => ‚à•c ‚Ä¢ (y - x)‚à•) (ùìù x) (ùìù 0) :=
    (continuous_const.smul (continuous_id.sub continuous_const)).norm.tendsto' _ _
      (by 
        simp )
  this.eventually (gt_mem_nhds h)

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem closure_ball
[semi_normed_space expr‚Ñù() E]
(x : E)
{r : expr‚Ñù()}
(hr : ¬´expr < ¬ª(0, r)) : ¬´expr = ¬ª(closure (ball x r), closed_ball x r) :=
begin
  refine [expr set.subset.antisymm closure_ball_subset_closed_ball (Œª y hy, _)],
  have [] [":", expr continuous_within_at (Œª
    c : expr‚Ñù(), ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(c, ¬´expr - ¬ª(y, x)), x)) (set.Ico 0 1) 1] [":=", expr ((continuous_id.smul continuous_const).add continuous_const).continuous_within_at],
  convert [] [expr this.mem_closure _ _] [],
  { rw ["[", expr one_smul, ",", expr sub_add_cancel, "]"] [] },
  { simp [] [] [] ["[", expr closure_Ico (@zero_lt_one expr‚Ñù() _ _), ",", expr zero_le_one, "]"] [] [] },
  { rintros [ident c, "‚ü®", ident hc0, ",", ident hc1, "‚ü©"],
    rw ["[", expr set.mem_preimage, ",", expr mem_ball, ",", expr dist_eq_norm, ",", expr add_sub_cancel, ",", expr norm_smul, ",", expr real.norm_eq_abs, ",", expr abs_of_nonneg hc0, ",", expr mul_comm, ",", "<-", expr mul_one r, "]"] [],
    rw ["[", expr mem_closed_ball, ",", expr dist_eq_norm, "]"] ["at", ident hy],
    apply [expr mul_lt_mul']; assumption }
end

theorem frontier_ball [SemiNormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) : Frontier (ball x r) = sphere x r :=
  by 
    rw [Frontier, closure_ball x hr, is_open_ball.interior_eq]
    ext x 
    exact (@eq_iff_le_not_lt ‚Ñù _ _ _).symm

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem interior_closed_ball
[semi_normed_space expr‚Ñù() E]
(x : E)
{r : expr‚Ñù()}
(hr : ¬´expr < ¬ª(0, r)) : ¬´expr = ¬ª(interior (closed_ball x r), ball x r) :=
begin
  refine [expr set.subset.antisymm _ ball_subset_interior_closed_ball],
  intros [ident y, ident hy],
  rcases [expr le_iff_lt_or_eq.1 ¬´expr $ ¬ª(mem_closed_ball.1, interior_subset hy), "with", ident hr, "|", ident rfl],
  { exact [expr hr] },
  set [] [ident f] [":", expr expr‚Ñù() ‚Üí E] [":="] [expr Œª c : expr‚Ñù(), ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(c, ¬´expr - ¬ª(y, x)), x)] [],
  suffices [] [":", expr ¬´expr ‚äÜ ¬ª(¬´expr ‚Åª¬π' ¬ª(f, closed_ball x (dist y x)), set.Icc ¬´expr- ¬ª(1) 1)],
  { have [ident hfc] [":", expr continuous f] [":=", expr (continuous_id.smul continuous_const).add continuous_const],
    have [ident hf1] [":", expr ¬´expr ‚àà ¬ª((1 : expr‚Ñù()), ¬´expr ‚Åª¬π' ¬ª(f, interior ¬´expr $ ¬ª(closed_ball x, dist y x)))] [],
    by simpa [] [] [] ["[", expr f, "]"] [] [],
    have [ident h1] [":", expr ¬´expr ‚àà ¬ª((1 : expr‚Ñù()), interior (set.Icc (¬´expr- ¬ª(1) : expr‚Ñù()) 1))] [":=", expr interior_mono this (preimage_interior_subset_interior_preimage hfc hf1)],
    contrapose [] [ident h1],
    simp [] [] [] [] [] [] },
  intros [ident c, ident hc],
  rw ["[", expr set.mem_Icc, ",", "<-", expr abs_le, ",", "<-", expr real.norm_eq_abs, ",", "<-", expr mul_le_mul_right hr, "]"] [],
  simpa [] [] [] ["[", expr f, ",", expr dist_eq_norm, ",", expr norm_smul, "]"] [] ["using", expr hc]
end

theorem frontier_closed_ball [SemiNormedSpace ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) :
  Frontier (closed_ball x r) = sphere x r :=
  by 
    rw [Frontier, closure_closed_ball, interior_closed_ball x hr, closed_ball_diff_ball]

theorem smul_ball {c : Œ±} (hc : c ‚â† 0) (x : E) (r : ‚Ñù) : c ‚Ä¢ ball x r = ball (c ‚Ä¢ x) (‚à•c‚à•*r) :=
  by 
    ext y 
    rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ hc]
    convLHS => rw [‚Üêinv_smul_smul‚ÇÄ hc x]
    simp [‚Üêdiv_eq_inv_mul, div_lt_iff (norm_pos_iff.2 hc), mul_comm‚Çì _ r, dist_smul]

theorem smul_closed_ball' {c : Œ±} (hc : c ‚â† 0) (x : E) (r : ‚Ñù) : c ‚Ä¢ closed_ball x r = closed_ball (c ‚Ä¢ x) (‚à•c‚à•*r) :=
  by 
    ext y 
    rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ hc]
    convLHS => rw [‚Üêinv_smul_smul‚ÇÄ hc x]
    simp [dist_smul, ‚Üêdiv_eq_inv_mul, div_le_iff (norm_pos_iff.2 hc), mul_comm‚Çì _ r]

theorem smul_closed_ball {E : Type _} [NormedGroup E] [NormedSpace Œ± E] (c : Œ±) (x : E) {r : ‚Ñù} (hr : 0 ‚â§ r) :
  c ‚Ä¢ closed_ball x r = closed_ball (c ‚Ä¢ x) (‚à•c‚à•*r) :=
  by 
    rcases eq_or_ne c 0 with (rfl | hc)
    ¬∑
      simp [hr, zero_smul_set, Set.singleton_zero, ‚Üênonempty_closed_ball]
    ¬∑
      exact smul_closed_ball' hc x r

variable(Œ±)

theorem ne_neg_of_mem_sphere [CharZero Œ±] {r : ‚Ñù} (hr : 0 < r) (x : sphere (0 : E) r) : x ‚â† -x :=
  fun h =>
    nonzero_of_mem_sphere hr x
      (eq_zero_of_eq_neg Œ±
        (by 
          convLHS => rw [h]
          simp ))

theorem ne_neg_of_mem_unit_sphere [CharZero Œ±] (x : sphere (0 : E) 1) : x ‚â† -x :=
  ne_neg_of_mem_sphere Œ±
    (by 
      normNum)
    x

variable{Œ±}

open NormedField

/-- The product of two seminormed spaces is a seminormed space, with the sup norm. -/
instance Prod.semiNormedSpace : SemiNormedSpace Œ± (E √ó F) :=
  { Prod.normedGroup, Prod.module with
    norm_smul_le :=
      fun s x =>
        le_of_eq‚Çì$
          by 
            simp [Prod.semi_norm_def, norm_smul, mul_max_of_nonneg] }

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- The product of finitely many seminormed spaces is a seminormed space, with the sup norm. -/
instance pi.semi_normed_space
{E : Œπ ‚Üí Type*}
[fintype Œπ]
[‚àÄ i, semi_normed_group (E i)]
[‚àÄ i, semi_normed_space Œ± (E i)] : semi_normed_space Œ± (‚àÄ i, E i) :=
{ norm_smul_le := Œª
  a
  f, ¬´expr $ ¬ª(le_of_eq, show ¬´expr = ¬ª((¬´expr‚Üë ¬ª(finset.sup finset.univ (Œª
      b : Œπ, ¬´expr‚à• ‚à•‚Çä¬ª(¬´expr ‚Ä¢ ¬ª(a, f b)))) : expr‚Ñù()), ¬´expr * ¬ª(¬´expr‚à• ‚à•‚Çä¬ª(a), ¬´expr‚Üë ¬ª(finset.sup finset.univ (Œª
       b : Œπ, ¬´expr‚à• ‚à•‚Çä¬ª(f b))))), by simp [] [] ["only"] ["[", expr (nnreal.coe_mul _ _).symm, ",", expr nnreal.mul_finset_sup, ",", expr nnnorm_smul, "]"] [] []) }

/-- A subspace of a seminormed space is also a normed space, with the restriction of the norm. -/
instance Submodule.semiNormedSpace {ùïú R : Type _} [HasScalar ùïú R] [NormedField ùïú] [Ring‚Çì R] {E : Type _}
  [SemiNormedGroup E] [SemiNormedSpace ùïú E] [Module R E] [IsScalarTower ùïú R E] (s : Submodule R E) :
  SemiNormedSpace ùïú s :=
  { norm_smul_le := fun c x => le_of_eq‚Çì$ norm_smul c (x : E) }

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚à•c‚à•`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
theorem rescale_to_shell_semi_normed
{c : Œ±}
(hc : ¬´expr < ¬ª(1, ¬´expr‚à• ‚à•¬ª(c)))
{Œµ : expr‚Ñù()}
(Œµpos : ¬´expr < ¬ª(0, Œµ))
{x : E}
(hx : ¬´expr ‚â† ¬ª(¬´expr‚à• ‚à•¬ª(x), 0)) : ¬´expr‚àÉ , ¬ª((d : Œ±), ¬´expr ‚àß ¬ª(¬´expr ‚â† ¬ª(d, 0), ¬´expr ‚àß ¬ª(¬´expr < ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(d, x)), Œµ), ¬´expr ‚àß ¬ª(¬´expr ‚â§ ¬ª(¬´expr / ¬ª(Œµ, ¬´expr‚à• ‚à•¬ª(c)), ¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(d, x))), ¬´expr ‚â§ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(d)), ¬´expr * ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œµ), ¬´expr‚à• ‚à•¬ª(c)), ¬´expr‚à• ‚à•¬ª(x))))))) :=
begin
  have [ident xŒµpos] [":", expr ¬´expr < ¬ª(0, ¬´expr / ¬ª(¬´expr‚à• ‚à•¬ª(x), Œµ))] [":=", expr div_pos ((ne.symm hx).le_iff_lt.1 (norm_nonneg x)) Œµpos],
  rcases [expr exists_mem_Ico_zpow xŒµpos hc, "with", "‚ü®", ident n, ",", ident hn, "‚ü©"],
  have [ident cpos] [":", expr ¬´expr < ¬ª(0, ¬´expr‚à• ‚à•¬ª(c))] [":=", expr lt_trans (zero_lt_one : ¬´expr < ¬ª((0 : expr‚Ñù()), 1)) hc],
  have [ident cnpos] [":", expr ¬´expr < ¬ª(0, ¬´expr‚à• ‚à•¬ª(¬´expr ^ ¬ª(c, ¬´expr + ¬ª(n, 1))))] [":=", expr by { rw [expr norm_zpow] [],
     exact [expr lt_trans xŒµpos hn.2] }],
  refine [expr ‚ü®¬´expr ‚Åª¬π¬ª(¬´expr ^ ¬ª(c, ¬´expr + ¬ª(n, 1))), _, _, _, _‚ü©],
  show [expr ¬´expr ‚â† ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr ^ ¬ª(c, ¬´expr + ¬ª(n, 1))), 0)],
  by rwa ["[", expr ne.def, ",", expr inv_eq_zero, ",", "<-", expr ne.def, ",", "<-", expr norm_pos_iff, "]"] [],
  show [expr ¬´expr < ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr ^ ¬ª(c, ¬´expr + ¬ª(n, 1))), x)), Œµ)],
  { rw ["[", expr norm_smul, ",", expr norm_inv, ",", "<-", expr div_eq_inv_mul, ",", expr div_lt_iff cnpos, ",", expr mul_comm, ",", expr norm_zpow, "]"] [],
    exact [expr (div_lt_iff Œµpos).1 hn.2] },
  show [expr ¬´expr ‚â§ ¬ª(¬´expr / ¬ª(Œµ, ¬´expr‚à• ‚à•¬ª(c)), ¬´expr‚à• ‚à•¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr ^ ¬ª(c, ¬´expr + ¬ª(n, 1))), x)))],
  { rw ["[", expr div_le_iff cpos, ",", expr norm_smul, ",", expr norm_inv, ",", expr norm_zpow, ",", expr zpow_add‚ÇÄ (ne_of_gt cpos), ",", expr zpow_one, ",", expr mul_inv_rev‚ÇÄ, ",", expr mul_comm, ",", "<-", expr mul_assoc, ",", "<-", expr mul_assoc, ",", expr mul_inv_cancel (ne_of_gt cpos), ",", expr one_mul, ",", "<-", expr div_eq_inv_mul, ",", expr le_div_iff (zpow_pos_of_pos cpos _), ",", expr mul_comm, "]"] [],
    exact [expr (le_div_iff Œµpos).1 hn.1] },
  show [expr ¬´expr ‚â§ ¬ª(¬´expr ‚Åª¬π¬ª(¬´expr‚à• ‚à•¬ª(¬´expr ‚Åª¬π¬ª(¬´expr ^ ¬ª(c, ¬´expr + ¬ª(n, 1))))), ¬´expr * ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œµ), ¬´expr‚à• ‚à•¬ª(c)), ¬´expr‚à• ‚à•¬ª(x)))],
  { have [] [":", expr ¬´expr = ¬ª(¬´expr * ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œµ), ¬´expr‚à• ‚à•¬ª(c)), ¬´expr‚à• ‚à•¬ª(x)), ¬´expr * ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œµ), ¬´expr‚à• ‚à•¬ª(x)), ¬´expr‚à• ‚à•¬ª(c)))] [],
    by ring [],
    rw ["[", expr norm_inv, ",", expr inv_inv‚ÇÄ, ",", expr norm_zpow, ",", expr zpow_add‚ÇÄ (ne_of_gt cpos), ",", expr zpow_one, ",", expr this, ",", "<-", expr div_eq_inv_mul, "]"] [],
    exact [expr mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _)] }
end

end SemiNormedSpace

section NormedSpace

variable[NormedField Œ±]

variable{E : Type _}[NormedGroup E][NormedSpace Œ± E]

variable{F : Type _}[NormedGroup F][NormedSpace Œ± F]

open NormedField

theorem interior_closed_ball' [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (r : ‚Ñù) :
  Interior (closed_ball x r) = ball x r :=
  by 
    rcases lt_trichotomy‚Çì r 0 with (hr | rfl | hr)
    ¬∑
      simp [closed_ball_eq_empty.2 hr, ball_eq_empty.2 hr.le]
    ¬∑
      rw [closed_ball_zero, ball_zero, interior_singleton]
    ¬∑
      exact interior_closed_ball x hr

theorem frontier_closed_ball' [NormedSpace ‚Ñù E] [Nontrivial E] (x : E) (r : ‚Ñù) :
  Frontier (closed_ball x r) = sphere x r :=
  by 
    rw [Frontier, closure_closed_ball, interior_closed_ball' x r, closed_ball_diff_ball]

variable{Œ±}

/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element can be moved by scalar multiplication to
any shell of width `‚à•c‚à•`. Also recap information on the norm of the rescaling element that shows
up in applications. -/
theorem rescale_to_shell {c : Œ±} (hc : 1 < ‚à•c‚à•) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
  ‚àÉ d : Œ±, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ x‚à• < Œµ ‚àß Œµ / ‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ x‚à• ‚àß ‚à•d‚à•‚Åª¬π ‚â§ (Œµ‚Åª¬π*‚à•c‚à•)*‚à•x‚à• :=
  rescale_to_shell_semi_normed hc Œµpos (ne_of_lt‚Çì (norm_pos_iff.2 hx)).symm

/-- The product of two normed spaces is a normed space, with the sup norm. -/
instance  : NormedSpace Œ± (E √ó F) :=
  { Prod.semiNormedSpace with  }

/-- The product of finitely many normed spaces is a normed space, with the sup norm. -/
instance Pi.normedSpace {E : Œπ ‚Üí Type _} [Fintype Œπ] [‚àÄ i, NormedGroup (E i)] [‚àÄ i, NormedSpace Œ± (E i)] :
  NormedSpace Œ± (‚àÄ i, E i) :=
  { Pi.semiNormedSpace with  }

section 

attribute [local instance] Matrix.normedGroup

/-- Normed space instance (using sup norm of sup norm) for matrices over a normed field.  Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
def Matrix.normedSpace {Œ± : Type _} [NormedField Œ±] {n m : Type _} [Fintype n] [Fintype m] :
  NormedSpace Œ± (Matrix n m Œ±) :=
  Pi.normedSpace

end 

/-- A subspace of a normed space is also a normed space, with the restriction of the norm. -/
instance Submodule.normedSpace {ùïú R : Type _} [HasScalar ùïú R] [NormedField ùïú] [Ring‚Çì R] {E : Type _} [NormedGroup E]
  [NormedSpace ùïú E] [Module R E] [IsScalarTower ùïú R E] (s : Submodule R E) : NormedSpace ùïú s :=
  { Submodule.semiNormedSpace s with  }

end NormedSpace

section NormedAlgebra

/-- A seminormed algebra `ùïú'` over `ùïú` is an algebra endowed with a seminorm for which the
embedding of `ùïú` in `ùïú'` is an isometry. -/
class SemiNormedAlgebra(ùïú : Type _)(ùïú' : Type _)[NormedField ùïú][SemiNormedRing ùïú'] extends Algebra ùïú ùïú' where 
  norm_algebra_map_eq : ‚àÄ (x : ùïú), ‚à•algebraMap ùïú ùïú' x‚à• = ‚à•x‚à•

/-- A normed algebra `ùïú'` over `ùïú` is an algebra endowed with a norm for which the embedding of
`ùïú` in `ùïú'` is an isometry. -/
class NormedAlgebra(ùïú : Type _)(ùïú' : Type _)[NormedField ùïú][NormedRing ùïú'] extends Algebra ùïú ùïú' where 
  norm_algebra_map_eq : ‚àÄ (x : ùïú), ‚à•algebraMap ùïú ùïú' x‚à• = ‚à•x‚à•

/-- A normed algebra is a seminormed algebra. -/
instance (priority := 100)NormedAlgebra.toSemiNormedAlgebra (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [NormedRing ùïú']
  [NormedAlgebra ùïú ùïú'] : SemiNormedAlgebra ùïú ùïú' :=
  { norm_algebra_map_eq := NormedAlgebra.norm_algebra_map_eq }

@[simp]
theorem norm_algebra_map_eq {ùïú : Type _} (ùïú' : Type _) [NormedField ùïú] [SemiNormedRing ùïú'] [h : SemiNormedAlgebra ùïú ùïú']
  (x : ùïú) : ‚à•algebraMap ùïú ùïú' x‚à• = ‚à•x‚à• :=
  SemiNormedAlgebra.norm_algebra_map_eq _

/-- In a normed algebra, the inclusion of the base field in the extended field is an isometry. -/
theorem algebra_map_isometry (ùïú : Type _) (ùïú' : Type _) [NormedField ùïú] [SemiNormedRing ùïú'] [SemiNormedAlgebra ùïú ùïú'] :
  Isometry (algebraMap ùïú ùïú') :=
  by 
    refine' isometry_emetric_iff_metric.2 fun x y => _ 
    rw [dist_eq_norm, dist_eq_norm, ‚ÜêRingHom.map_sub, norm_algebra_map_eq]

variable(ùïú : Type _)[NormedField ùïú]

variable(ùïú' : Type _)[SemiNormedRing ùïú']

instance (priority := 100)SemiNormedAlgebra.toSemiNormedSpace [h : SemiNormedAlgebra ùïú ùïú'] : SemiNormedSpace ùïú ùïú' :=
  { h with
    norm_smul_le :=
      fun s x =>
        calc ‚à•s ‚Ä¢ x‚à• = ‚à•(algebraMap ùïú ùïú') s*x‚à• :=
          by 
            rw [h.smul_def']
            rfl 
          _ ‚â§ ‚à•algebraMap ùïú ùïú' s‚à•*‚à•x‚à• := SemiNormedRing.norm_mul _ _ 
          _ = ‚à•s‚à•*‚à•x‚à• :=
          by 
            rw [norm_algebra_map_eq]
           }

/-- While this may appear identical to `semi_normed_algebra.to_semi_normed_space`, it contains an
implicit argument involving `normed_ring.to_semi_normed_ring` that typeclass inference has trouble
inferring.

Specifically, the following instance cannot be found without this
`semi_normed_algebra.to_semi_normed_space'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

See `semi_normed_space.to_module'` for a similar situation. -/
instance (priority := 100)SemiNormedAlgebra.toSemiNormedSpace' (ùïú : Type _) [NormedField ùïú] (ùïú' : Type _)
  [NormedRing ùïú'] [SemiNormedAlgebra ùïú ùïú'] : SemiNormedSpace ùïú ùïú' :=
  by 
    infer_instance

instance (priority := 100)NormedAlgebra.toNormedSpace (ùïú : Type _) [NormedField ùïú] (ùïú' : Type _) [NormedRing ùïú']
  [h : NormedAlgebra ùïú ùïú'] : NormedSpace ùïú ùïú' :=
  { h with norm_smul_le := SemiNormedSpace.norm_smul_le }

instance NormedAlgebra.id : NormedAlgebra ùïú ùïú :=
  { Algebra.id ùïú with
    norm_algebra_map_eq :=
      by 
        simp  }

variable(ùïú')[SemiNormedAlgebra ùïú ùïú']

include ùïú

theorem NormedAlgebra.norm_one : ‚à•(1 : ùïú')‚à• = 1 :=
  by 
    simpa using norm_algebra_map_eq ùïú' (1 : ùïú)

theorem NormedAlgebra.norm_one_class : NormOneClass ùïú' :=
  ‚ü®NormedAlgebra.norm_one ùïú ùïú'‚ü©

theorem NormedAlgebra.zero_ne_one : (0 : ùïú') ‚â† 1 :=
  by 
    refine' (ne_zero_of_norm_pos _).symm 
    rw [NormedAlgebra.norm_one ùïú ùïú']
    normNum

theorem NormedAlgebra.nontrivial : Nontrivial ùïú' :=
  ‚ü®‚ü®0, 1, NormedAlgebra.zero_ne_one ùïú ùïú'‚ü©‚ü©

end NormedAlgebra

section RestrictScalars

variable(ùïú :
    Type
      _)(ùïú' :
    Type
      _)[NormedField
      ùïú][NormedField
      ùïú'][NormedAlgebra ùïú
      ùïú'](E : Type _)[NormedGroup E][NormedSpace ùïú' E](F : Type _)[SemiNormedGroup F][SemiNormedSpace ùïú' F]

/-- Warning: This declaration should be used judiciously.
Please consider using `is_scalar_tower` instead.

`ùïú`-seminormed space structure induced by a `ùïú'`-seminormed space structure when `ùïú'` is a
seminormed algebra over `ùïú`. Not registered as an instance as `ùïú'` can not be inferred.

The type synonym `module.restrict_scalars ùïú ùïú' E` will be endowed with this instance by default.
-/
def SemiNormedSpace.restrictScalars : SemiNormedSpace ùïú F :=
  { RestrictScalars.module ùïú ùïú' F with
    norm_smul_le :=
      fun c x =>
        le_of_eq‚Çì$
          by 
            change ‚à•algebraMap ùïú ùïú' c ‚Ä¢ x‚à• = ‚à•c‚à•*‚à•x‚à•
            simp [norm_smul] }

/-- Warning: This declaration should be used judiciously.
Please consider using `is_scalar_tower` instead.

`ùïú`-normed space structure induced by a `ùïú'`-normed space structure when `ùïú'` is a
normed algebra over `ùïú`. Not registered as an instance as `ùïú'` can not be inferred.

The type synonym `restrict_scalars ùïú ùïú' E` will be endowed with this instance by default.
-/
def NormedSpace.restrictScalars : NormedSpace ùïú E :=
  { RestrictScalars.module ùïú ùïú' E with
    norm_smul_le :=
      fun c x =>
        le_of_eq‚Çì$
          by 
            change ‚à•algebraMap ùïú ùïú' c ‚Ä¢ x‚à• = ‚à•c‚à•*‚à•x‚à•
            simp [norm_smul] }

instance  {ùïú : Type _} {ùïú' : Type _} {F : Type _} [I : SemiNormedGroup F] : SemiNormedGroup (RestrictScalars ùïú ùïú' F) :=
  I

instance  {ùïú : Type _} {ùïú' : Type _} {E : Type _} [I : NormedGroup E] : NormedGroup (RestrictScalars ùïú ùïú' E) :=
  I

instance Module.RestrictScalars.semiNormedSpaceOrig {ùïú : Type _} {ùïú' : Type _} {F : Type _} [NormedField ùïú']
  [SemiNormedGroup F] [I : SemiNormedSpace ùïú' F] : SemiNormedSpace ùïú' (RestrictScalars ùïú ùïú' F) :=
  I

instance Module.RestrictScalars.normedSpaceOrig {ùïú : Type _} {ùïú' : Type _} {E : Type _} [NormedField ùïú'] [NormedGroup E]
  [I : NormedSpace ùïú' E] : NormedSpace ùïú' (RestrictScalars ùïú ùïú' E) :=
  I

instance  : SemiNormedSpace ùïú (RestrictScalars ùïú ùïú' F) :=
  (SemiNormedSpace.restrictScalars ùïú ùïú' F : SemiNormedSpace ùïú F)

instance  : NormedSpace ùïú (RestrictScalars ùïú ùïú' E) :=
  (NormedSpace.restrictScalars ùïú ùïú' E : NormedSpace ùïú E)

end RestrictScalars

section CauchyProduct

/-! ## Multiplying two infinite sums in a normed ring

In this section, we prove various results about `(‚àë' x : Œπ, f x) * (‚àë' y : Œπ', g y)` in a normed
ring. There are similar results proven in `topology/algebra/infinite_sum` (e.g `tsum_mul_tsum`),
but in a normed ring we get summability results which aren't true in general.

We first establish results about arbitrary index types, `Œ≤` and `Œ≥`, and then we specialize to
`Œ≤ = Œ≥ = ‚Ñï` to prove the Cauchy product formula
(see `tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm`).

### Arbitrary index types
-/


variable{Œπ' : Type _}[NormedRing Œ±]

open Finset

open_locale Classical

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem summable.mul_of_nonneg
{f : Œπ ‚Üí expr‚Ñù()}
{g : Œπ' ‚Üí expr‚Ñù()}
(hf : summable f)
(hg : summable g)
(hf' : ¬´expr ‚â§ ¬ª(0, f))
(hg' : ¬´expr ‚â§ ¬ª(0, g)) : summable (Œª x : ¬´expr √ó ¬ª(Œπ, Œπ'), ¬´expr * ¬ª(f x.1, g x.2)) :=
let ‚ü®s, hf‚ü© := hf in
let ‚ü®t, hg‚ü© := hg in
suffices this : ‚àÄ
u : finset ¬´expr √ó ¬ª(Œπ, Œπ'), ¬´expr ‚â§ ¬ª(¬´expr‚àë in , ¬ª((x), u, ¬´expr * ¬ª(f x.1, g x.2)), ¬´expr * ¬ª(s, t)), from summable_of_sum_le (Œª
 x, mul_nonneg (hf' _) (hg' _)) this,
assume u, calc
  ¬´expr ‚â§ ¬ª(¬´expr‚àë in , ¬ª((x), u, ¬´expr * ¬ª(f x.1, g x.2)), ¬´expr‚àë in , ¬ª((x), (u.image prod.fst).product (u.image prod.snd), ¬´expr * ¬ª(f x.1, g x.2))) : sum_mono_set_of_nonneg (Œª
   x, mul_nonneg (hf' _) (hg' _)) subset_product
  ¬´expr = ¬ª(..., ¬´expr‚àë in , ¬ª((x), u.image prod.fst, ¬´expr‚àë in , ¬ª((y), u.image prod.snd, ¬´expr * ¬ª(f x, g y)))) : sum_product
  ¬´expr = ¬ª(..., ¬´expr‚àë in , ¬ª((x), u.image prod.fst, ¬´expr * ¬ª(f x, ¬´expr‚àë in , ¬ª((y), u.image prod.snd, g y)))) : sum_congr rfl (Œª
   x _, mul_sum.symm)
  ¬´expr ‚â§ ¬ª(..., ¬´expr‚àë in , ¬ª((x), u.image prod.fst, ¬´expr * ¬ª(f x, t))) : sum_le_sum (Œª
   x _, mul_le_mul_of_nonneg_left (sum_le_has_sum _ (Œª _ _, hg' _) hg) (hf' _))
  ¬´expr = ¬ª(..., ¬´expr * ¬ª(¬´expr‚àë in , ¬ª((x), u.image prod.fst, f x), t)) : sum_mul.symm
  ¬´expr ‚â§ ¬ª(..., ¬´expr * ¬ª(s, t)) : mul_le_mul_of_nonneg_right (sum_le_has_sum _ (Œª
    _ _, hf' _) hf) ¬´expr $ ¬ª(hg.nonneg, Œª _, hg' _)

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem summable.mul_norm
{f : Œπ ‚Üí Œ±}
{g : Œπ' ‚Üí Œ±}
(hf : summable (Œª x, ¬´expr‚à• ‚à•¬ª(f x)))
(hg : summable (Œª x, ¬´expr‚à• ‚à•¬ª(g x))) : summable (Œª x : ¬´expr √ó ¬ª(Œπ, Œπ'), ¬´expr‚à• ‚à•¬ª(¬´expr * ¬ª(f x.1, g x.2))) :=
summable_of_nonneg_of_le (Œª
 x, norm_nonneg ¬´expr * ¬ª(f x.1, g x.2)) (Œª
 x, norm_mul_le (f x.1) (g x.2)) (hf.mul_of_nonneg hg (Œª
 x, ¬´expr $ ¬ª(norm_nonneg, f x)) (Œª x, ¬´expr $ ¬ª(norm_nonneg, g x)) : _)

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem summable_mul_of_summable_norm
[complete_space Œ±]
{f : Œπ ‚Üí Œ±}
{g : Œπ' ‚Üí Œ±}
(hf : summable (Œª x, ¬´expr‚à• ‚à•¬ª(f x)))
(hg : summable (Œª x, ¬´expr‚à• ‚à•¬ª(g x))) : summable (Œª x : ¬´expr √ó ¬ª(Œπ, Œπ'), ¬´expr * ¬ª(f x.1, g x.2)) :=
summable_of_summable_norm (hf.mul_norm hg)

/-- Product of two infinites sums indexed by arbitrary types.
    See also `tsum_mul_tsum` if `f` and `g` are *not* absolutely summable. -/
theorem tsum_mul_tsum_of_summable_norm [CompleteSpace Œ±] {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
  (hg : Summable fun x => ‚à•g x‚à•) : ((‚àë'x, f x)*‚àë'y, g y) = ‚àë'z : Œπ √ó Œπ', f z.1*g z.2 :=
  tsum_mul_tsum (summable_of_summable_norm hf) (summable_of_summable_norm hg) (summable_mul_of_summable_norm hf hg)

/-! ### `‚Ñï`-indexed families (Cauchy product)

We prove two versions of the Cauchy product formula. The first one is
`tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm`, where the `n`-th term is a sum over
`finset.range (n+1)` involving `nat` substraction.
In order to avoid `nat` substraction, we also provide
`tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm`,
where the `n`-th term is a sum over all pairs `(k, l)` such that `k+l=n`, which corresponds to the
`finset` `finset.nat.antidiagonal n`. -/


section Nat

open Finset.Nat

-- error in Analysis.NormedSpace.Basic: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem summable_norm_sum_mul_antidiagonal_of_summable_norm
{f g : expr‚Ñï() ‚Üí Œ±}
(hf : summable (Œª x, ¬´expr‚à• ‚à•¬ª(f x)))
(hg : summable (Œª
  x, ¬´expr‚à• ‚à•¬ª(g x))) : summable (Œª n, ¬´expr‚à• ‚à•¬ª(¬´expr‚àë in , ¬ª((kl), antidiagonal n, ¬´expr * ¬ª(f kl.1, g kl.2)))) :=
begin
  have [] [] [":=", expr summable_sum_mul_antidiagonal_of_summable_mul (summable.mul_of_nonneg hf hg (Œª
     _, norm_nonneg _) (Œª _, norm_nonneg _))],
  refine [expr summable_of_nonneg_of_le (Œª _, norm_nonneg _) _ this],
  intros [ident n],
  calc
    ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(¬´expr‚àë in , ¬ª((kl), antidiagonal n, ¬´expr * ¬ª(f kl.1, g kl.2))), ¬´expr‚àë in , ¬ª((kl), antidiagonal n, ¬´expr‚à• ‚à•¬ª(¬´expr * ¬ª(f kl.1, g kl.2)))) : norm_sum_le _ _
    ¬´expr ‚â§ ¬ª(..., ¬´expr‚àë in , ¬ª((kl), antidiagonal n, ¬´expr * ¬ª(¬´expr‚à• ‚à•¬ª(f kl.1), ¬´expr‚à• ‚à•¬ª(g kl.2)))) : sum_le_sum (Œª
     i _, norm_mul_le _ _)
end

/-- The Cauchy product formula for the product of two infinite sums indexed by `‚Ñï`,
    expressed by summing on `finset.nat.antidiagonal`.
    See also `tsum_mul_tsum_eq_tsum_sum_antidiagonal` if `f` and `g` are
    *not* absolutely summable. -/
theorem tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm [CompleteSpace Œ±] {f g : ‚Ñï ‚Üí Œ±}
  (hf : Summable fun x => ‚à•f x‚à•) (hg : Summable fun x => ‚à•g x‚à•) :
  ((‚àë'n, f n)*‚àë'n, g n) = ‚àë'n, ‚àëkl in antidiagonal n, f kl.1*g kl.2 :=
  tsum_mul_tsum_eq_tsum_sum_antidiagonal (summable_of_summable_norm hf) (summable_of_summable_norm hg)
    (summable_mul_of_summable_norm hf hg)

theorem summable_norm_sum_mul_range_of_summable_norm {f g : ‚Ñï ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
  (hg : Summable fun x => ‚à•g x‚à•) : Summable fun n => ‚à•‚àëk in range (n+1), f k*g (n - k)‚à• :=
  by 
    simpRw [‚Üêsum_antidiagonal_eq_sum_range_succ fun k l => f k*g l]
    exact summable_norm_sum_mul_antidiagonal_of_summable_norm hf hg

/-- The Cauchy product formula for the product of two infinite sums indexed by `‚Ñï`,
    expressed by summing on `finset.range`.
    See also `tsum_mul_tsum_eq_tsum_sum_range` if `f` and `g` are
    *not* absolutely summable. -/
theorem tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm [CompleteSpace Œ±] {f g : ‚Ñï ‚Üí Œ±} (hf : Summable fun x => ‚à•f x‚à•)
  (hg : Summable fun x => ‚à•g x‚à•) : ((‚àë'n, f n)*‚àë'n, g n) = ‚àë'n, ‚àëk in range (n+1), f k*g (n - k) :=
  by 
    simpRw [‚Üêsum_antidiagonal_eq_sum_range_succ fun k l => f k*g l]
    exact tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm hf hg

end Nat

end CauchyProduct

