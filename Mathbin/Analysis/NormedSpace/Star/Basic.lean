/-
Copyright (c) 2021 Fr√©d√©ric Dupuis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fr√©d√©ric Dupuis
-/
import Mathbin.Analysis.Normed.Group.Hom
import Mathbin.Analysis.NormedSpace.Basic
import Mathbin.Analysis.NormedSpace.LinearIsometry
import Mathbin.Algebra.Star.SelfAdjoint
import Mathbin.Algebra.Star.Unitary

/-!
# Normed star rings and algebras

A normed star group is a normed group with a compatible `star` which is isometric.

A C‚ãÜ-ring is a normed star group that is also a ring and that verifies the stronger
condition `‚à•x‚ãÜ * x‚à• = ‚à•x‚à•^2` for all `x`.  If a C‚ãÜ-ring is also a star algebra, then it is a
C‚ãÜ-algebra.

To get a C‚ãÜ-algebra `E` over field `ùïú`, use
`[normed_field ùïú] [star_ring ùïú] [normed_ring E] [star_ring E] [cstar_ring E]
 [normed_algebra ùïú E] [star_module ùïú E]`.

## TODO

- Show that `‚à•x‚ãÜ * x‚à• = ‚à•x‚à•^2` is equivalent to `‚à•x‚ãÜ * x‚à• = ‚à•x‚ãÜ‚à• * ‚à•x‚à•`, which is used as the
  definition of C*-algebras in some sources (e.g. Wikipedia).

-/


open TopologicalSpace

-- mathport name: ¬´expr ‚ãÜ¬ª
local postfix:max "‚ãÜ" => star

/-- A normed star group is a normed group with a compatible `star` which is isometric. -/
class NormedStarGroup (E : Type _) [SeminormedAddCommGroup E] [StarAddMonoid E] : Prop where
  norm_star : ‚àÄ x : E, ‚à•x‚ãÜ‚à• = ‚à•x‚à•

export NormedStarGroup (norm_star)

attribute [simp] norm_star

variable {ùïú E Œ± : Type _}

section NormedStarGroup

variable [SeminormedAddCommGroup E] [StarAddMonoid E] [NormedStarGroup E]

@[simp]
theorem nnnorm_star (x : E) : ‚à•star x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  Subtype.ext <| norm_star _

/-- The `star` map in a normed star group is a normed group homomorphism. -/
def starNormedAddGroupHom : NormedAddGroupHom E E :=
  { starAddEquiv with bound' := ‚ü®1, fun v => le_trans (norm_star _).le (one_mul _).symm.le‚ü© }

/-- The `star` map in a normed star group is an isometry -/
theorem starIsometry : Isometry (star : E ‚Üí E) :=
  show Isometry starAddEquiv from AddMonoidHomClass.isometryOfNorm starAddEquiv (show ‚àÄ x, ‚à•x‚ãÜ‚à• = ‚à•x‚à• from norm_star)

instance (priority := 100) NormedStarGroup.to_has_continuous_star : HasContinuousStar E :=
  ‚ü®starIsometry.Continuous‚ü©

end NormedStarGroup

instance RingHomIsometric.starRingEnd [NormedCommRing E] [StarRing E] [NormedStarGroup E] :
    RingHomIsometric (starRingEnd E) :=
  ‚ü®norm_star‚ü©

/-- A C*-ring is a normed star ring that satifies the stronger condition `‚à•x‚ãÜ * x‚à• = ‚à•x‚à•^2`
for every `x`. -/
class CstarRing (E : Type _) [NonUnitalNormedRing E] [StarRing E] : Prop where
  norm_star_mul_self : ‚àÄ {x : E}, ‚à•x‚ãÜ * x‚à• = ‚à•x‚à• * ‚à•x‚à•

instance : CstarRing ‚Ñù where norm_star_mul_self x := by simp only [star, id.def, norm_mul]

namespace CstarRing

section NonUnital

variable [NonUnitalNormedRing E] [StarRing E] [CstarRing E]

-- see Note [lower instance priority]
/-- In a C*-ring, star preserves the norm. -/
instance (priority := 100) toNormedStarGroup : NormedStarGroup E :=
  ‚ü®by
    intro x
    by_cases htriv:x = 0
    ¬∑ simp only [htriv, star_zero]
      
    ¬∑ have hnt : 0 < ‚à•x‚à• := norm_pos_iff.mpr htriv
      have hnt_star : 0 < ‚à•x‚ãÜ‚à• := norm_pos_iff.mpr ((AddEquiv.map_ne_zero_iff starAddEquiv).mpr htriv)
      have h‚ÇÅ :=
        calc
          ‚à•x‚à• * ‚à•x‚à• = ‚à•x‚ãÜ * x‚à• := norm_star_mul_self.symm
          _ ‚â§ ‚à•x‚ãÜ‚à• * ‚à•x‚à• := norm_mul_le _ _
          
      have h‚ÇÇ :=
        calc
          ‚à•x‚ãÜ‚à• * ‚à•x‚ãÜ‚à• = ‚à•x * x‚ãÜ‚à• := by rw [‚Üê norm_star_mul_self, star_star]
          _ ‚â§ ‚à•x‚à• * ‚à•x‚ãÜ‚à• := norm_mul_le _ _
          
      exact le_antisymm (le_of_mul_le_mul_right h‚ÇÇ hnt_star) (le_of_mul_le_mul_right h‚ÇÅ hnt)
      ‚ü©

theorem norm_self_mul_star {x : E} : ‚à•x * x‚ãÜ‚à• = ‚à•x‚à• * ‚à•x‚à• := by
  nth_rw 0 [‚Üê star_star x]
  simp only [norm_star_mul_self, norm_star]

theorem norm_star_mul_self' {x : E} : ‚à•x‚ãÜ * x‚à• = ‚à•x‚ãÜ‚à• * ‚à•x‚à• := by rw [norm_star_mul_self, norm_star]

theorem nnnorm_star_mul_self {x : E} : ‚à•x‚ãÜ * x‚à•‚Çä = ‚à•x‚à•‚Çä * ‚à•x‚à•‚Çä :=
  Subtype.ext norm_star_mul_self

@[simp]
theorem star_mul_self_eq_zero_iff (x : E) : star x * x = 0 ‚Üî x = 0 := by
  rw [‚Üê norm_eq_zero, norm_star_mul_self]
  exact mul_self_eq_zero.trans norm_eq_zero

theorem star_mul_self_ne_zero_iff (x : E) : star x * x ‚â† 0 ‚Üî x ‚â† 0 := by simp only [Ne.def, star_mul_self_eq_zero_iff]

@[simp]
theorem mul_star_self_eq_zero_iff (x : E) : x * star x = 0 ‚Üî x = 0 := by
  simpa only [star_eq_zero, star_star] using @star_mul_self_eq_zero_iff _ _ _ _ (star x)

theorem mul_star_self_ne_zero_iff (x : E) : x * star x ‚â† 0 ‚Üî x ‚â† 0 := by simp only [Ne.def, mul_star_self_eq_zero_iff]

end NonUnital

section ProdPi

variable {Œπ R‚ÇÅ R‚ÇÇ : Type _} {R : Œπ ‚Üí Type _}

variable [NonUnitalNormedRing R‚ÇÅ] [StarRing R‚ÇÅ] [CstarRing R‚ÇÅ]

variable [NonUnitalNormedRing R‚ÇÇ] [StarRing R‚ÇÇ] [CstarRing R‚ÇÇ]

variable [‚àÄ i, NonUnitalNormedRing (R i)] [‚àÄ i, StarRing (R i)]

/-- This instance exists to short circuit type class resolution because of problems with
inference involving Œ†-types. -/
instance _root_.pi.star_ring' : StarRing (‚àÄ i, R i) :=
  inferInstance

variable [Fintype Œπ] [‚àÄ i, CstarRing (R i)]

instance _root_.prod.cstar_ring :
    CstarRing (R‚ÇÅ √ó R‚ÇÇ) where norm_star_mul_self x := by
    unfold norm
    simp only [Prod.fst_mul, Prod.fst_star, Prod.snd_mul, Prod.snd_star, norm_star_mul_self, ‚Üê sq]
    refine' le_antisymm _ _
    ¬∑ refine' max_le _ _ <;> rw [sq_le_sq, abs_of_nonneg (norm_nonneg _)]
      exact (le_max_left _ _).trans (le_abs_self _)
      exact (le_max_right _ _).trans (le_abs_self _)
      
    ¬∑ rw [le_sup_iff]
      rcases le_total ‚à•x.fst‚à• ‚à•x.snd‚à• with (h | h) <;> simp [h]
      

instance _root_.pi.cstar_ring :
    CstarRing (‚àÄ i, R i) where norm_star_mul_self x := by
    simp only [norm, Pi.mul_apply, Pi.star_apply, nnnorm_star_mul_self, ‚Üê sq]
    norm_cast
    exact
      (Finset.comp_sup_eq_sup_comp_of_is_total (fun x : Nnreal => x ^ 2)
          (fun x y h => by simpa only [sq] using mul_le_mul' h h) (by simp)).symm

instance _root_.pi.cstar_ring' : CstarRing (Œπ ‚Üí R‚ÇÅ) :=
  Pi.cstarRing

end ProdPi

section Unital

variable [NormedRing E] [StarRing E] [CstarRing E]

@[simp]
theorem norm_one [Nontrivial E] : ‚à•(1 : E)‚à• = 1 := by
  have : 0 < ‚à•(1 : E)‚à• := norm_pos_iff.mpr one_ne_zero
  rw [‚Üê mul_left_inj' this.ne', ‚Üê norm_star_mul_self, mul_one, star_one, one_mul]

-- see Note [lower instance priority]
instance (priority := 100) [Nontrivial E] : NormOneClass E :=
  ‚ü®norm_one‚ü©

theorem norm_coe_unitary [Nontrivial E] (U : unitary E) : ‚à•(U : E)‚à• = 1 := by
  rw [‚Üê sq_eq_sq (norm_nonneg _) zero_le_one, one_pow 2, sq, ‚Üê CstarRing.norm_star_mul_self, unitary.coe_star_mul_self,
    CstarRing.norm_one]

@[simp]
theorem norm_of_mem_unitary [Nontrivial E] {U : E} (hU : U ‚àà unitary E) : ‚à•U‚à• = 1 :=
  norm_coe_unitary ‚ü®U, hU‚ü©

@[simp]
theorem norm_coe_unitary_mul (U : unitary E) (A : E) : ‚à•(U : E) * A‚à• = ‚à•A‚à• := by
  nontriviality E
  refine' le_antisymm _ _
  ¬∑ calc
      _ ‚â§ ‚à•(U : E)‚à• * ‚à•A‚à• := norm_mul_le _ _
      _ = ‚à•A‚à• := by rw [norm_coe_unitary, one_mul]
      
    
  ¬∑ calc
      _ = ‚à•(U : E)‚ãÜ * U * A‚à• := by rw [unitary.coe_star_mul_self U, one_mul]
      _ ‚â§ ‚à•(U : E)‚ãÜ‚à• * ‚à•(U : E) * A‚à• := by
        rw [mul_assoc]
        exact norm_mul_le _ _
      _ = ‚à•(U : E) * A‚à• := by rw [norm_star, norm_coe_unitary, one_mul]
      
    

@[simp]
theorem norm_unitary_smul (U : unitary E) (A : E) : ‚à•U ‚Ä¢ A‚à• = ‚à•A‚à• :=
  norm_coe_unitary_mul U A

theorem norm_mem_unitary_mul {U : E} (A : E) (hU : U ‚àà unitary E) : ‚à•U * A‚à• = ‚à•A‚à• :=
  norm_coe_unitary_mul ‚ü®U, hU‚ü© A

@[simp]
theorem norm_mul_coe_unitary (A : E) (U : unitary E) : ‚à•A * U‚à• = ‚à•A‚à• :=
  calc
    _ = ‚à•((U : E)‚ãÜ * A‚ãÜ)‚ãÜ‚à• := by simp only [star_star, star_mul]
    _ = ‚à•(U : E)‚ãÜ * A‚ãÜ‚à• := by rw [norm_star]
    _ = ‚à•A‚ãÜ‚à• := norm_mem_unitary_mul (star A) (unitary.star_mem U.Prop)
    _ = ‚à•A‚à• := norm_star _
    

theorem norm_mul_mem_unitary (A : E) {U : E} (hU : U ‚àà unitary E) : ‚à•A * U‚à• = ‚à•A‚à• :=
  norm_mul_coe_unitary A ‚ü®U, hU‚ü©

end Unital

end CstarRing

theorem IsSelfAdjoint.nnnorm_pow_two_pow [NormedRing E] [StarRing E] [CstarRing E] {x : E} (hx : IsSelfAdjoint x)
    (n : ‚Ñï) : ‚à•x ^ 2 ^ n‚à•‚Çä = ‚à•x‚à•‚Çä ^ 2 ^ n := by
  induction' n with k hk
  ¬∑ simp only [pow_zero, pow_one]
    
  ¬∑ rw [pow_succ, pow_mul', sq]
    nth_rw 0 [‚Üê self_adjoint.mem_iff.mp hx]
    rw [‚Üê star_pow, CstarRing.nnnorm_star_mul_self, ‚Üê sq, hk, pow_mul']
    

theorem selfAdjoint.nnnorm_pow_two_pow [NormedRing E] [StarRing E] [CstarRing E] (x : selfAdjoint E) (n : ‚Ñï) :
    ‚à•x ^ 2 ^ n‚à•‚Çä = ‚à•x‚à•‚Çä ^ 2 ^ n :=
  x.Prop.nnnorm_pow_two_pow _

section star‚Çó·µ¢

variable [CommSemiring ùïú] [StarRing ùïú]

variable [SeminormedAddCommGroup E] [StarAddMonoid E] [NormedStarGroup E]

variable [Module ùïú E] [StarModule ùïú E]

variable (ùïú)

/-- `star` bundled as a linear isometric equivalence -/
def star‚Çó·µ¢ : E ‚âÉ‚Çó·µ¢‚ãÜ[ùïú] E :=
  { starAddEquiv with map_smul' := star_smul, norm_map' := norm_star }

variable {ùïú}

@[simp]
theorem coe_star‚Çó·µ¢ : (star‚Çó·µ¢ ùïú : E ‚Üí E) = star :=
  rfl

theorem star‚Çó·µ¢_apply {x : E} : star‚Çó·µ¢ ùïú x = star x :=
  rfl

end star‚Çó·µ¢

