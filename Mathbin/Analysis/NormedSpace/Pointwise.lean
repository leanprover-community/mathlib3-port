/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Ya√´l Dillies

! This file was ported from Lean 3 source module analysis.normed_space.pointwise
! leanprover-community/mathlib commit bc91ed7093bf098d253401e69df601fc33dde156
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Normed.Group.AddTorsor
import Mathbin.Analysis.Normed.Group.Pointwise
import Mathbin.Analysis.NormedSpace.Basic

/-!
# Properties of pointwise scalar multiplication of sets in normed spaces.

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We explore the relationships between scalar multiplication of sets in vector spaces, and the norm.
Notably, we express arbitrary balls as rescaling of other balls, and we show that the
multiplication of bounded sets remain bounded.
-/


open Metric Set

open Pointwise Topology

variable {ùïú E : Type _}

section SMulZeroClass

variable [SeminormedAddCommGroup ùïú] [SeminormedAddCommGroup E]

variable [SMulZeroClass ùïú E] [BoundedSMul ùïú E]

/- warning: ediam_smul_le -> ediam_smul_le is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : SeminormedAddCommGroup.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : SMulZeroClass.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2))))))] [_inst_4 : BoundedSMul.{u1, u2} ùïú E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} ùïú _inst_1) (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (AddZeroClass.toHasZero.{u1} ùïú (AddMonoid.toAddZeroClass.{u1} ùïú (SubNegMonoid.toAddMonoid.{u1} ùïú (AddGroup.toSubNegMonoid.{u1} ùïú (SeminormedAddGroup.toAddGroup.{u1} ùïú (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} ùïú _inst_1)))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2)))))) (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2)))))) _inst_3)] (c : ùïú) (s : Set.{u2} E), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EMetric.diam.{u2} E (PseudoMetricSpace.toPseudoEMetricSpace.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2)) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2)))))) _inst_3)) c s)) (SMul.smul.{0, 0} NNReal ENNReal (SMulZeroClass.toHasSmul.{0, 0} NNReal ENNReal (AddZeroClass.toHasZero.{0} ENNReal (AddMonoid.toAddZeroClass.{0} ENNReal (AddCommMonoid.toAddMonoid.{0} ENNReal (NonUnitalNonAssocSemiring.toAddCommMonoid.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))))) (SMulWithZero.toSmulZeroClass.{0, 0} NNReal ENNReal (MulZeroClass.toHasZero.{0} NNReal (MulZeroOneClass.toMulZeroClass.{0} NNReal (MonoidWithZero.toMulZeroOneClass.{0} NNReal (Semiring.toMonoidWithZero.{0} NNReal NNReal.semiring)))) (AddZeroClass.toHasZero.{0} ENNReal (AddMonoid.toAddZeroClass.{0} ENNReal (AddCommMonoid.toAddMonoid.{0} ENNReal (NonUnitalNonAssocSemiring.toAddCommMonoid.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))))) (MulActionWithZero.toSMulWithZero.{0, 0} NNReal ENNReal (Semiring.toMonoidWithZero.{0} NNReal NNReal.semiring) (AddZeroClass.toHasZero.{0} ENNReal (AddMonoid.toAddZeroClass.{0} ENNReal (AddCommMonoid.toAddMonoid.{0} ENNReal (NonUnitalNonAssocSemiring.toAddCommMonoid.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))))) (Module.toMulActionWithZero.{0, 0} NNReal ENNReal NNReal.semiring (NonUnitalNonAssocSemiring.toAddCommMonoid.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))) (ENNReal.module.{0} ENNReal (NonUnitalNonAssocSemiring.toAddCommMonoid.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))) (Semiring.toModule.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))))) (NNNorm.nnnorm.{u1} ùïú (SeminormedAddGroup.toNNNorm.{u1} ùïú (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} ùïú _inst_1)) c) (EMetric.diam.{u2} E (PseudoMetricSpace.toPseudoEMetricSpace.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2)) s))
but is expected to have type
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : SeminormedAddCommGroup.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : SMulZeroClass.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))))] [_inst_4 : BoundedSMul.{u1, u2} ùïú E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} ùïú _inst_1) (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (NegZeroClass.toZero.{u1} ùïú (SubNegZeroMonoid.toNegZeroClass.{u1} ùïú (SubtractionMonoid.toSubNegZeroMonoid.{u1} ùïú (SubtractionCommMonoid.toSubtractionMonoid.{u1} ùïú (AddCommGroup.toDivisionAddCommMonoid.{u1} ùïú (SeminormedAddCommGroup.toAddCommGroup.{u1} ùïú _inst_1)))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) _inst_3)] (c : ùïú) (s : Set.{u2} E), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EMetric.diam.{u2} E (PseudoMetricSpace.toPseudoEMetricSpace.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2)) (HSMul.hSMul.{u1, u2, u2} ùïú (Set.{u2} E) (Set.{u2} E) (instHSMul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) _inst_3))) c s)) (HSMul.hSMul.{0, 0, 0} NNReal ENNReal ENNReal (instHSMul.{0, 0} NNReal ENNReal (Algebra.toSMul.{0, 0} NNReal ENNReal instNNRealCommSemiring (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal))) (ENNReal.instAlgebraNNRealInstNNRealCommSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal))) (Algebra.id.{0} ENNReal (CanonicallyOrderedCommSemiring.toCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal))))) (NNNorm.nnnorm.{u1} ùïú (SeminormedAddGroup.toNNNorm.{u1} ùïú (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} ùïú _inst_1)) c) (EMetric.diam.{u2} E (PseudoMetricSpace.toPseudoEMetricSpace.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2)) s))
Case conversion may be inaccurate. Consider using '#align ediam_smul_le ediam_smul_le‚Çì'. -/
theorem ediam_smul_le (c : ùïú) (s : Set E) : EMetric.diam (c ‚Ä¢ s) ‚â§ ‚Äñc‚Äñ‚Çä ‚Ä¢ EMetric.diam s :=
  (lipschitzWith_smul c).ediam_image_le s
#align ediam_smul_le ediam_smul_le

end SMulZeroClass

section DivisionRing

variable [NormedDivisionRing ùïú] [SeminormedAddCommGroup E]

variable [Module ùïú E] [BoundedSMul ùïú E]

/- warning: ediam_smul‚ÇÄ -> ediam_smul‚ÇÄ is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align ediam_smul‚ÇÄ ediam_smul‚ÇÄ‚Çì'. -/
theorem ediam_smul‚ÇÄ (c : ùïú) (s : Set E) : EMetric.diam (c ‚Ä¢ s) = ‚Äñc‚Äñ‚Çä ‚Ä¢ EMetric.diam s :=
  by
  refine' le_antisymm (ediam_smul_le c s) _
  obtain rfl | hc := eq_or_ne c 0
  ¬∑ obtain rfl | hs := s.eq_empty_or_nonempty
    ¬∑ simp
    simp [zero_smul_set hs, ‚Üê Set.singleton_zero]
  ¬∑ have := (lipschitzWith_smul c‚Åª¬π).ediam_image_le (c ‚Ä¢ s)
    rwa [‚Üê smul_eq_mul, ‚Üê ENNReal.smul_def, Set.image_smul, inv_smul_smul‚ÇÄ hc s, nnnorm_inv,
      ENNReal.le_inv_smul_iff (nnnorm_ne_zero_iff.mpr hc)] at this
#align ediam_smul‚ÇÄ ediam_smul‚ÇÄ

/- warning: diam_smul‚ÇÄ -> diam_smul‚ÇÄ is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedDivisionRing.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : Module.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))] [_inst_4 : BoundedSMul.{u1, u2} ùïú E (SeminormedRing.toPseudoMetricSpace.{u1} ùïú (NormedRing.toSeminormedRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))) (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (MulZeroClass.toHasZero.{u1} ùïú (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} ùïú (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} ùïú (NonAssocRing.toNonUnitalNonAssocRing.{u1} ùïú (Ring.toNonAssocRing.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2)))))) (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1)))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) _inst_3))))] (c : ùïú) (x : Set.{u2} E), Eq.{1} Real (Metric.diam.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1)))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) _inst_3))))) c x)) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (Norm.norm.{u1} ùïú (NormedDivisionRing.toHasNorm.{u1} ùïú _inst_1) c) (Metric.diam.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) x))
but is expected to have type
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedDivisionRing.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : Module.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))] [_inst_4 : BoundedSMul.{u1, u2} ùïú E (SeminormedRing.toPseudoMetricSpace.{u1} ùïú (NormedRing.toSeminormedRing.{u1} ùïú (NormedDivisionRing.toNormedRing.{u1} ùïú _inst_1))) (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (MonoidWithZero.toZero.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (MonoidWithZero.toZero.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1)))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) _inst_3))))] (c : ùïú) (x : Set.{u2} E), Eq.{1} Real (Metric.diam.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (HSMul.hSMul.{u1, u2, u2} ùïú (Set.{u2} E) (Set.{u2} E) (instHSMul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (MonoidWithZero.toZero.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1)))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (DivisionRing.toDivisionSemiring.{u1} ùïú (NormedDivisionRing.toDivisionRing.{u1} ùïú _inst_1))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) _inst_3)))))) c x)) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (Norm.norm.{u1} ùïú (NormedDivisionRing.toNorm.{u1} ùïú _inst_1) c) (Metric.diam.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) x))
Case conversion may be inaccurate. Consider using '#align diam_smul‚ÇÄ diam_smul‚ÇÄ‚Çì'. -/
theorem diam_smul‚ÇÄ (c : ùïú) (x : Set E) : diam (c ‚Ä¢ x) = ‚Äñc‚Äñ * diam x := by
  simp_rw [diam, ediam_smul‚ÇÄ, ENNReal.toReal_smul, NNReal.smul_def, coe_nnnorm, smul_eq_mul]
#align diam_smul‚ÇÄ diam_smul‚ÇÄ

/- warning: inf_edist_smul‚ÇÄ -> infEdist_smul‚ÇÄ is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align inf_edist_smul‚ÇÄ infEdist_smul‚ÇÄ‚Çì'. -/
theorem infEdist_smul‚ÇÄ {c : ùïú} (hc : c ‚â† 0) (s : Set E) (x : E) :
    EMetric.infEdist (c ‚Ä¢ x) (c ‚Ä¢ s) = ‚Äñc‚Äñ‚Çä ‚Ä¢ EMetric.infEdist x s :=
  by
  simp_rw [EMetric.infEdist]
  have : Function.Surjective ((¬∑ ‚Ä¢ ¬∑) c : E ‚Üí E) :=
    Function.RightInverse.surjective (smul_inv_smul‚ÇÄ hc)
  trans ‚®Ö (y) (H : y ‚àà s), ‚Äñc‚Äñ‚Çä ‚Ä¢ edist x y
  ¬∑ refine' (this.infi_congr _ fun y => _).symm
    simp_rw [smul_mem_smul_set_iff‚ÇÄ hc, edist_smul‚ÇÄ]
  ¬∑ have : (‚Äñc‚Äñ‚Çä : ENNReal) ‚â† 0 := by simp [hc]
    simp_rw [ENNReal.smul_def, smul_eq_mul, ENNReal.mul_iInf_of_ne this ENNReal.coe_ne_top]
#align inf_edist_smul‚ÇÄ infEdist_smul‚ÇÄ

/- warning: inf_dist_smul‚ÇÄ -> infDist_smul‚ÇÄ is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align inf_dist_smul‚ÇÄ infDist_smul‚ÇÄ‚Çì'. -/
theorem infDist_smul‚ÇÄ {c : ùïú} (hc : c ‚â† 0) (s : Set E) (x : E) :
    Metric.infDist (c ‚Ä¢ x) (c ‚Ä¢ s) = ‚Äñc‚Äñ * Metric.infDist x s := by
  simp_rw [Metric.infDist, infEdist_smul‚ÇÄ hc, ENNReal.toReal_smul, NNReal.smul_def, coe_nnnorm,
    smul_eq_mul]
#align inf_dist_smul‚ÇÄ infDist_smul‚ÇÄ

end DivisionRing

variable [NormedField ùïú]

section SeminormedAddCommGroup

variable [SeminormedAddCommGroup E] [NormedSpace ùïú E]

/- warning: smul_ball -> smul_ball is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u1} ùïú c (OfNat.ofNat.{u1} ùïú 0 (OfNat.mk.{u1} ùïú 0 (Zero.zero.{u1} ùïú (MulZeroClass.toHasZero.{u1} ùïú (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} ùïú (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} ùïú (NonAssocRing.toNonUnitalNonAssocRing.{u1} ùïú (Ring.toNonAssocRing.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))))))) -> (forall (x : E) (r : Real), Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3)))))) c (Metric.ball.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) x r)) (Metric.ball.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (SMul.smul.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c) r)))
but is expected to have type
  forall {ùïú : Type.{u2}} {E : Type.{u1}} [_inst_1 : NormedField.{u2} ùïú] [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_3 : NormedSpace.{u2, u1} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u2} ùïú c (OfNat.ofNat.{u2} ùïú 0 (Zero.toOfNat0.{u2} ùïú (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))))))) -> (forall (x : E) (r : Real), Eq.{succ u1} (Set.{u1} E) (HSMul.hSMul.{u2, u1, u1} ùïú (Set.{u1} E) (Set.{u1} E) (instHSMul.{u2, u1} ùïú (Set.{u1} E) (Set.smulSet.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3))))))) c (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x r)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSMul.hSMul.{u2, u1, u1} ùïú E E (instHSMul.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3)))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (Norm.norm.{u2} ùïú (NormedField.toNorm.{u2} ùïú _inst_1) c) r)))
Case conversion may be inaccurate. Consider using '#align smul_ball smul_ball‚Çì'. -/
theorem smul_ball {c : ùïú} (hc : c ‚â† 0) (x : E) (r : ‚Ñù) : c ‚Ä¢ ball x r = ball (c ‚Ä¢ x) (‚Äñc‚Äñ * r) :=
  by
  ext y
  rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ hc]
  conv_lhs => rw [‚Üê inv_smul_smul‚ÇÄ hc x]
  simp [‚Üê div_eq_inv_mul, div_lt_iff (norm_pos_iff.2 hc), mul_comm _ r, dist_smul‚ÇÄ]
#align smul_ball smul_ball

/- warning: smul_unit_ball -> smul_unitBall is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u1} ùïú c (OfNat.ofNat.{u1} ùïú 0 (OfNat.mk.{u1} ùïú 0 (Zero.zero.{u1} ùïú (MulZeroClass.toHasZero.{u1} ùïú (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} ùïú (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} ùïú (NonAssocRing.toNonUnitalNonAssocRing.{u1} ùïú (Ring.toNonAssocRing.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))))))) -> (Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3)))))) c (Metric.ball.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (OfNat.ofNat.{u2} E 0 (OfNat.mk.{u2} E 0 (Zero.zero.{u2} E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2))))))))) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne))))) (Metric.ball.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (OfNat.ofNat.{u2} E 0 (OfNat.mk.{u2} E 0 (Zero.zero.{u2} E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (SeminormedAddGroup.toAddGroup.{u2} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u2} E _inst_2))))))))) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c)))
but is expected to have type
  forall {ùïú : Type.{u2}} {E : Type.{u1}} [_inst_1 : NormedField.{u2} ùïú] [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_3 : NormedSpace.{u2, u1} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u2} ùïú c (OfNat.ofNat.{u2} ùïú 0 (Zero.toOfNat0.{u2} ùïú (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))))))) -> (Eq.{succ u1} (Set.{u1} E) (HSMul.hSMul.{u2, u1, u1} ùïú (Set.{u1} E) (Set.{u1} E) (instHSMul.{u2, u1} ùïú (Set.{u1} E) (Set.smulSet.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3))))))) c (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal)))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) (Norm.norm.{u2} ùïú (NormedField.toNorm.{u2} ùïú _inst_1) c)))
Case conversion may be inaccurate. Consider using '#align smul_unit_ball smul_unitBall‚Çì'. -/
theorem smul_unitBall {c : ùïú} (hc : c ‚â† 0) : c ‚Ä¢ ball (0 : E) (1 : ‚Ñù) = ball (0 : E) ‚Äñc‚Äñ := by
  rw [smul_ball hc, smul_zero, mul_one]
#align smul_unit_ball smul_unitBall

/- warning: smul_sphere' -> smul_sphere' is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u1} ùïú c (OfNat.ofNat.{u1} ùïú 0 (OfNat.mk.{u1} ùïú 0 (Zero.zero.{u1} ùïú (MulZeroClass.toHasZero.{u1} ùïú (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} ùïú (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} ùïú (NonAssocRing.toNonUnitalNonAssocRing.{u1} ùïú (Ring.toNonAssocRing.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))))))) -> (forall (x : E) (r : Real), Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3)))))) c (Metric.sphere.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) x r)) (Metric.sphere.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (SMul.smul.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c) r)))
but is expected to have type
  forall {ùïú : Type.{u2}} {E : Type.{u1}} [_inst_1 : NormedField.{u2} ùïú] [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_3 : NormedSpace.{u2, u1} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u2} ùïú c (OfNat.ofNat.{u2} ùïú 0 (Zero.toOfNat0.{u2} ùïú (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))))))) -> (forall (x : E) (r : Real), Eq.{succ u1} (Set.{u1} E) (HSMul.hSMul.{u2, u1, u1} ùïú (Set.{u1} E) (Set.{u1} E) (instHSMul.{u2, u1} ùïú (Set.{u1} E) (Set.smulSet.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3))))))) c (Metric.sphere.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x r)) (Metric.sphere.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSMul.hSMul.{u2, u1, u1} ùïú E E (instHSMul.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3)))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (Norm.norm.{u2} ùïú (NormedField.toNorm.{u2} ùïú _inst_1) c) r)))
Case conversion may be inaccurate. Consider using '#align smul_sphere' smul_sphere'‚Çì'. -/
theorem smul_sphere' {c : ùïú} (hc : c ‚â† 0) (x : E) (r : ‚Ñù) :
    c ‚Ä¢ sphere x r = sphere (c ‚Ä¢ x) (‚Äñc‚Äñ * r) :=
  by
  ext y
  rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ hc]
  conv_lhs => rw [‚Üê inv_smul_smul‚ÇÄ hc x]
  simp only [mem_sphere, dist_smul‚ÇÄ, norm_inv, ‚Üê div_eq_inv_mul, div_eq_iff (norm_pos_iff.2 hc).ne',
    mul_comm r]
#align smul_sphere' smul_sphere'

/- warning: smul_closed_ball' -> smul_closedBall' is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : SeminormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u1} ùïú c (OfNat.ofNat.{u1} ùïú 0 (OfNat.mk.{u1} ùïú 0 (Zero.zero.{u1} ùïú (MulZeroClass.toHasZero.{u1} ùïú (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} ùïú (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} ùïú (NonAssocRing.toNonUnitalNonAssocRing.{u1} ùïú (Ring.toNonAssocRing.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))))))) -> (forall (x : E) (r : Real), Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3)))))) c (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) x r)) (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E _inst_2) (SMul.smul.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 _inst_2 _inst_3))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c) r)))
but is expected to have type
  forall {ùïú : Type.{u2}} {E : Type.{u1}} [_inst_1 : NormedField.{u2} ùïú] [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_3 : NormedSpace.{u2, u1} ùïú E _inst_1 _inst_2] {c : ùïú}, (Ne.{succ u2} ùïú c (OfNat.ofNat.{u2} ùïú 0 (Zero.toOfNat0.{u2} ùïú (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))))))) -> (forall (x : E) (r : Real), Eq.{succ u1} (Set.{u1} E) (HSMul.hSMul.{u2, u1, u1} ùïú (Set.{u1} E) (Set.{u1} E) (instHSMul.{u2, u1} ùïú (Set.{u1} E) (Set.smulSet.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3))))))) c (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x r)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSMul.hSMul.{u2, u1, u1} ùïú E E (instHSMul.{u2, u1} ùïú E (SMulZeroClass.toSMul.{u2, u1} ùïú E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u2, u1} ùïú E (CommMonoidWithZero.toZero.{u2} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u2} ùïú (Semifield.toCommGroupWithZero.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u1} ùïú E (Semiring.toMonoidWithZero.{u2} ùïú (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1))))) (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{u2, u1} ùïú E (DivisionSemiring.toSemiring.{u2} ùïú (Semifield.toDivisionSemiring.{u2} ùïú (Field.toSemifield.{u2} ùïú (NormedField.toField.{u2} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{u2, u1} ùïú E _inst_1 _inst_2 _inst_3)))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (Norm.norm.{u2} ùïú (NormedField.toNorm.{u2} ùïú _inst_1) c) r)))
Case conversion may be inaccurate. Consider using '#align smul_closed_ball' smul_closedBall'‚Çì'. -/
theorem smul_closedBall' {c : ùïú} (hc : c ‚â† 0) (x : E) (r : ‚Ñù) :
    c ‚Ä¢ closedBall x r = closedBall (c ‚Ä¢ x) (‚Äñc‚Äñ * r) := by
  simp only [‚Üê ball_union_sphere, Set.smul_set_union, smul_ball hc, smul_sphere' hc]
#align smul_closed_ball' smul_closedBall'

#print Metric.Bounded.smul /-
theorem Metric.Bounded.smul {s : Set E} (hs : Bounded s) (c : ùïú) : Bounded (c ‚Ä¢ s) :=
  by
  obtain ‚ü®R, hR‚ü© : ‚àÉ R : ‚Ñù, ‚àÄ x ‚àà s, ‚Äñx‚Äñ ‚â§ R := hs.exists_norm_le
  refine' bounded_iff_forall_norm_le.2 ‚ü®‚Äñc‚Äñ * R, fun z hz => _‚ü©
  obtain ‚ü®y, ys, rfl‚ü© : ‚àÉ y : E, y ‚àà s ‚àß c ‚Ä¢ y = z := mem_smul_set.1 hz
  calc
    ‚Äñc ‚Ä¢ y‚Äñ = ‚Äñc‚Äñ * ‚Äñy‚Äñ := norm_smul _ _
    _ ‚â§ ‚Äñc‚Äñ * R := mul_le_mul_of_nonneg_left (hR y ys) (norm_nonneg _)
    
#align metric.bounded.smul Metric.Bounded.smul
-/

/- warning: eventually_singleton_add_smul_subset -> eventually_singleton_add_smul_subset is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align eventually_singleton_add_smul_subset eventually_singleton_add_smul_subset‚Çì'. -/
/-- If `s` is a bounded set, then for small enough `r`, the set `{x} + r ‚Ä¢ s` is contained in any
fixed neighborhood of `x`. -/
theorem eventually_singleton_add_smul_subset {x : E} {s : Set E} (hs : Bounded s) {u : Set E}
    (hu : u ‚àà ùìù x) : ‚àÄ·∂† r in ùìù (0 : ùïú), {x} + r ‚Ä¢ s ‚äÜ u :=
  by
  obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© : ‚àÉ (Œµ : _)(hŒµ : 0 < Œµ), closed_ball x Œµ ‚äÜ u :=
    nhds_basis_closed_ball.mem_iff.1 hu
  obtain ‚ü®R, Rpos, hR‚ü© : ‚àÉ R : ‚Ñù, 0 < R ‚àß s ‚äÜ closed_ball 0 R := hs.subset_ball_lt 0 0
  have : Metric.closedBall (0 : ùïú) (Œµ / R) ‚àà ùìù (0 : ùïú) := closed_ball_mem_nhds _ (div_pos Œµpos Rpos)
  filter_upwards [this]with r hr
  simp only [image_add_left, singleton_add]
  intro y hy
  obtain ‚ü®z, zs, hz‚ü© : ‚àÉ z : E, z ‚àà s ‚àß r ‚Ä¢ z = -x + y := by simpa [mem_smul_set] using hy
  have I : ‚Äñr ‚Ä¢ z‚Äñ ‚â§ Œµ :=
    calc
      ‚Äñr ‚Ä¢ z‚Äñ = ‚Äñr‚Äñ * ‚Äñz‚Äñ := norm_smul _ _
      _ ‚â§ Œµ / R * R :=
        (mul_le_mul (mem_closedBall_zero_iff.1 hr) (mem_closedBall_zero_iff.1 (hR zs))
          (norm_nonneg _) (div_pos Œµpos Rpos).le)
      _ = Œµ := by field_simp [Rpos.ne']
      
  have : y = x + r ‚Ä¢ z := by simp only [hz, add_neg_cancel_left]
  apply hŒµ
  simpa only [this, dist_eq_norm, add_sub_cancel', mem_closed_ball] using I
#align eventually_singleton_add_smul_subset eventually_singleton_add_smul_subset

variable [NormedSpace ‚Ñù E] {x y z : E} {Œ¥ Œµ : ‚Ñù}

/- warning: smul_unit_ball_of_pos -> smul_unitBall_of_pos is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {r : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r) -> (Eq.{succ u1} (Set.{u1} E) (SMul.smul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toHasSmul.{0, u1} Real E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2))))) (SMulWithZero.toSmulZeroClass.{0, u1} Real E (MulZeroClass.toHasZero.{0} Real (MulZeroOneClass.toMulZeroClass.{0} Real (MonoidWithZero.toMulZeroOneClass.{0} Real (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2))))) (Module.toMulActionWithZero.{0, u1} Real E (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{0, u1} Real E Real.normedField _inst_2 _inst_4)))))) r (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (OfNat.ofNat.{u1} E 0 (OfNat.mk.{u1} E 0 (Zero.zero.{u1} E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))))) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (OfNat.ofNat.{u1} E 0 (OfNat.mk.{u1} E 0 (Zero.zero.{u1} E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))))) r))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {r : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r) -> (Eq.{succ u1} (Set.{u1} E) (HSMul.hSMul.{0, u1, u1} Real (Set.{u1} E) (Set.{u1} E) (instHSMul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toSMul.{0, u1} Real E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{0, u1} Real E Real.instZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E Real.instMonoidWithZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E Real.semiring (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{0, u1} Real E Real.normedField _inst_2 _inst_4))))))) r (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal)))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) r))
Case conversion may be inaccurate. Consider using '#align smul_unit_ball_of_pos smul_unitBall_of_pos‚Çì'. -/
/-- In a real normed space, the image of the unit ball under scalar multiplication by a positive
constant `r` is the ball of radius `r`. -/
theorem smul_unitBall_of_pos {r : ‚Ñù} (hr : 0 < r) : r ‚Ä¢ ball 0 1 = ball (0 : E) r := by
  rw [smul_unitBall hr.ne', Real.norm_of_nonneg hr.le]
#align smul_unit_ball_of_pos smul_unitBall_of_pos

/- warning: exists_dist_eq -> exists_dist_eq is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] (x : E) (z : E) {a : Real} {b : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) a) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) b) -> (Eq.{1} Real (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) a b) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne)))) -> (Exists.{succ u1} E (fun (y : E) => And (Eq.{1} Real (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) b (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z))) (Eq.{1} Real (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) a (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z)))))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] (x : E) (z : E) {a : Real} {b : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) a) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) b) -> (Eq.{1} Real (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) a b) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal))) -> (Exists.{succ u1} E (fun (y : E) => And (Eq.{1} Real (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) b (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z))) (Eq.{1} Real (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) a (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z)))))
Case conversion may be inaccurate. Consider using '#align exists_dist_eq exists_dist_eq‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem exists_dist_eq (x z : E) {a b : ‚Ñù} (ha : 0 ‚â§ a) (hb : 0 ‚â§ b) (hab : a + b = 1) :
    ‚àÉ y, dist x y = b * dist x z ‚àß dist y z = a * dist x z :=
  by
  use a ‚Ä¢ x + b ‚Ä¢ z
  nth_rw 1 [‚Üê one_smul ‚Ñù x]
  nth_rw 4 [‚Üê one_smul ‚Ñù z]
  simp [dist_eq_norm, ‚Üê hab, add_smul, ‚Üê smul_sub, norm_smul_of_nonneg, ha, hb]
#align exists_dist_eq exists_dist_eq

/- warning: exists_dist_le_le -> exists_dist_le_le is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LE.le.{0} Real Real.hasLe (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LE.le.{0} Real Real.hasLe (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LE.le.{0} Real Real.instLEReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LE.le.{0} Real Real.instLEReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
Case conversion may be inaccurate. Consider using '#align exists_dist_le_le exists_dist_le_le‚Çì'. -/
theorem exists_dist_le_le (hŒ¥ : 0 ‚â§ Œ¥) (hŒµ : 0 ‚â§ Œµ) (h : dist x z ‚â§ Œµ + Œ¥) :
    ‚àÉ y, dist x y ‚â§ Œ¥ ‚àß dist y z ‚â§ Œµ :=
  by
  obtain rfl | hŒµ' := hŒµ.eq_or_lt
  ¬∑ exact ‚ü®z, by rwa [zero_add] at h, (dist_self _).le‚ü©
  have hŒµŒ¥ := add_pos_of_pos_of_nonneg hŒµ' hŒ¥
  refine'
    (exists_dist_eq x z (div_nonneg hŒµ <| add_nonneg hŒµ hŒ¥) (div_nonneg hŒ¥ <| add_nonneg hŒµ hŒ¥) <|
          by rw [‚Üê add_div, div_self hŒµŒ¥.ne']).imp
      fun y hy => _
  rw [hy.1, hy.2, div_mul_comm, div_mul_comm Œµ]
  rw [‚Üê div_le_one hŒµŒ¥] at h
  exact ‚ü®mul_le_of_le_one_left hŒ¥ h, mul_le_of_le_one_left hŒµ h‚ü©
#align exists_dist_le_le exists_dist_le_le

/- warning: exists_dist_le_lt -> exists_dist_le_lt is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LE.le.{0} Real Real.hasLe (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LE.le.{0} Real Real.instLEReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
Case conversion may be inaccurate. Consider using '#align exists_dist_le_lt exists_dist_le_lt‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem exists_dist_le_lt (hŒ¥ : 0 ‚â§ Œ¥) (hŒµ : 0 < Œµ) (h : dist x z < Œµ + Œ¥) :
    ‚àÉ y, dist x y ‚â§ Œ¥ ‚àß dist y z < Œµ :=
  by
  refine'
    (exists_dist_eq x z (div_nonneg hŒµ.le <| add_nonneg hŒµ.le hŒ¥)
            (div_nonneg hŒ¥ <| add_nonneg hŒµ.le hŒ¥) <|
          by rw [‚Üê add_div, div_self (add_pos_of_pos_of_nonneg hŒµ hŒ¥).ne']).imp
      fun y hy => _
  rw [hy.1, hy.2, div_mul_comm, div_mul_comm Œµ]
  rw [‚Üê div_lt_one (add_pos_of_pos_of_nonneg hŒµ hŒ¥)] at h
  exact ‚ü®mul_le_of_le_one_left hŒ¥ h.le, mul_lt_of_lt_one_left hŒµ h‚ü©
#align exists_dist_le_lt exists_dist_le_lt

/- warning: exists_dist_lt_le -> exists_dist_lt_le is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LE.le.{0} Real Real.hasLe (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LE.le.{0} Real Real.instLEReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
Case conversion may be inaccurate. Consider using '#align exists_dist_lt_le exists_dist_lt_le‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem exists_dist_lt_le (hŒ¥ : 0 < Œ¥) (hŒµ : 0 ‚â§ Œµ) (h : dist x z < Œµ + Œ¥) :
    ‚àÉ y, dist x y < Œ¥ ‚àß dist y z ‚â§ Œµ :=
  by
  obtain ‚ü®y, yz, xy‚ü© :=
    exists_dist_le_lt hŒµ hŒ¥ (show dist z x < Œ¥ + Œµ by simpa only [dist_comm, add_comm] using h)
  exact ‚ü®y, by simp [dist_comm x y, dist_comm y z, *]‚ü©
#align exists_dist_lt_le exists_dist_lt_le

/- warning: exists_dist_lt_lt -> exists_dist_lt_lt is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LT.lt.{0} Real Real.hasLt (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {z : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x z) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)) -> (Exists.{succ u1} E (fun (y : E) => And (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y) Œ¥) (LT.lt.{0} Real Real.instLTReal (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) y z) Œµ)))
Case conversion may be inaccurate. Consider using '#align exists_dist_lt_lt exists_dist_lt_lt‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem exists_dist_lt_lt (hŒ¥ : 0 < Œ¥) (hŒµ : 0 < Œµ) (h : dist x z < Œµ + Œ¥) :
    ‚àÉ y, dist x y < Œ¥ ‚àß dist y z < Œµ :=
  by
  refine'
    (exists_dist_eq x z (div_nonneg hŒµ.le <| add_nonneg hŒµ.le hŒ¥.le)
            (div_nonneg hŒ¥.le <| add_nonneg hŒµ.le hŒ¥.le) <|
          by rw [‚Üê add_div, div_self (add_pos hŒµ hŒ¥).ne']).imp
      fun y hy => _
  rw [hy.1, hy.2, div_mul_comm, div_mul_comm Œµ]
  rw [‚Üê div_lt_one (add_pos hŒµ hŒ¥)] at h
  exact ‚ü®mul_lt_of_lt_one_left hŒ¥ h, mul_lt_of_lt_one_left hŒµ h‚ü©
#align exists_dist_lt_lt exists_dist_lt_lt

/- warning: disjoint_ball_ball_iff -> disjoint_ball_ball_iff is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.completeBooleanAlgebra.{u1} E)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} E) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} E) (Set.booleanAlgebra.{u1} E))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LE.le.{0} Real Real.hasLe (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} E) (Preorder.toLE.{u1} (Set.{u1} E) (PartialOrder.toPreorder.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LE.le.{0} Real Real.instLEReal (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
Case conversion may be inaccurate. Consider using '#align disjoint_ball_ball_iff disjoint_ball_ball_iff‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem disjoint_ball_ball_iff (hŒ¥ : 0 < Œ¥) (hŒµ : 0 < Œµ) :
    Disjoint (ball x Œ¥) (ball y Œµ) ‚Üî Œ¥ + Œµ ‚â§ dist x y :=
  by
  refine' ‚ü®fun h => le_of_not_lt fun hxy => _, ball_disjoint_ball‚ü©
  rw [add_comm] at hxy
  obtain ‚ü®z, hxz, hzy‚ü© := exists_dist_lt_lt hŒ¥ hŒµ hxy
  rw [dist_comm] at hxz
  exact h.le_bot ‚ü®hxz, hzy‚ü©
#align disjoint_ball_ball_iff disjoint_ball_ball_iff

/- warning: disjoint_ball_closed_ball_iff -> disjoint_ball_closedBall_iff is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.completeBooleanAlgebra.{u1} E)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} E) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} E) (Set.booleanAlgebra.{u1} E))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LE.le.{0} Real Real.hasLe (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} E) (Preorder.toLE.{u1} (Set.{u1} E) (PartialOrder.toPreorder.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LE.le.{0} Real Real.instLEReal (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
Case conversion may be inaccurate. Consider using '#align disjoint_ball_closed_ball_iff disjoint_ball_closedBall_iff‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem disjoint_ball_closedBall_iff (hŒ¥ : 0 < Œ¥) (hŒµ : 0 ‚â§ Œµ) :
    Disjoint (ball x Œ¥) (closedBall y Œµ) ‚Üî Œ¥ + Œµ ‚â§ dist x y :=
  by
  refine' ‚ü®fun h => le_of_not_lt fun hxy => _, ball_disjoint_closed_ball‚ü©
  rw [add_comm] at hxy
  obtain ‚ü®z, hxz, hzy‚ü© := exists_dist_lt_le hŒ¥ hŒµ hxy
  rw [dist_comm] at hxz
  exact h.le_bot ‚ü®hxz, hzy‚ü©
#align disjoint_ball_closed_ball_iff disjoint_ball_closedBall_iff

/- warning: disjoint_closed_ball_ball_iff -> disjoint_closedBall_ball_iff is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.completeBooleanAlgebra.{u1} E)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} E) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} E) (Set.booleanAlgebra.{u1} E))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LE.le.{0} Real Real.hasLe (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} E) (Preorder.toLE.{u1} (Set.{u1} E) (PartialOrder.toPreorder.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LE.le.{0} Real Real.instLEReal (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
Case conversion may be inaccurate. Consider using '#align disjoint_closed_ball_ball_iff disjoint_closedBall_ball_iff‚Çì'. -/
-- This is also true for `‚Ñö`-normed spaces
theorem disjoint_closedBall_ball_iff (hŒ¥ : 0 ‚â§ Œ¥) (hŒµ : 0 < Œµ) :
    Disjoint (closedBall x Œ¥) (ball y Œµ) ‚Üî Œ¥ + Œµ ‚â§ dist x y := by
  rw [disjoint_comm, disjoint_ball_closedBall_iff hŒµ hŒ¥, add_comm, dist_comm] <;> infer_instance
#align disjoint_closed_ball_ball_iff disjoint_closedBall_ball_iff

/- warning: disjoint_closed_ball_closed_ball_iff -> disjoint_closedBall_closedBall_iff is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.completeBooleanAlgebra.{u1} E)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} E) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} E) (Set.booleanAlgebra.{u1} E))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LT.lt.{0} Real Real.hasLt (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toHasDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {x : E} {y : E} {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (Iff (Disjoint.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} E) (Preorder.toLE.{u1} (Set.{u1} E) (PartialOrder.toPreorder.{u1} (Set.{u1} E) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} E) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} E) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} E) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} E) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} E) (Set.instCompleteBooleanAlgebraSet.{u1} E)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) y Œµ)) (LT.lt.{0} Real Real.instLTReal (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œ¥ Œµ) (Dist.dist.{u1} E (PseudoMetricSpace.toDist.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x y)))
Case conversion may be inaccurate. Consider using '#align disjoint_closed_ball_closed_ball_iff disjoint_closedBall_closedBall_iff‚Çì'. -/
theorem disjoint_closedBall_closedBall_iff (hŒ¥ : 0 ‚â§ Œ¥) (hŒµ : 0 ‚â§ Œµ) :
    Disjoint (closedBall x Œ¥) (closedBall y Œµ) ‚Üî Œ¥ + Œµ < dist x y :=
  by
  refine' ‚ü®fun h => lt_of_not_ge fun hxy => _, closed_ball_disjoint_closed_ball‚ü©
  rw [add_comm] at hxy
  obtain ‚ü®z, hxz, hzy‚ü© := exists_dist_le_le hŒ¥ hŒµ hxy
  rw [dist_comm] at hxz
  exact h.le_bot ‚ü®hxz, hzy‚ü©
#align disjoint_closed_ball_closed_ball_iff disjoint_closedBall_closedBall_iff

open Emetric ENNReal

/- warning: inf_edist_thickening -> infEdist_thickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (s : Set.{u1} E) (x : E), Eq.{1} ENNReal (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x s) (ENNReal.ofReal Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (s : Set.{u1} E) (x : E), Eq.{1} ENNReal (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x s) (ENNReal.ofReal Œ¥)))
Case conversion may be inaccurate. Consider using '#align inf_edist_thickening infEdist_thickening‚Çì'. -/
@[simp]
theorem infEdist_thickening (hŒ¥ : 0 < Œ¥) (s : Set E) (x : E) :
    infEdist x (thickening Œ¥ s) = infEdist x s - ENNReal.ofReal Œ¥ :=
  by
  obtain hs | hs := lt_or_le (inf_edist x s) (ENNReal.ofReal Œ¥)
  ¬∑ rw [inf_edist_zero_of_mem, tsub_eq_zero_of_le hs.le]; exact hs
  refine' (tsub_le_iff_right.2 inf_edist_le_inf_edist_thickening_add).antisymm' _
  refine' le_sub_of_add_le_right of_real_ne_top _
  refine' le_inf_edist.2 fun z hz => le_of_forall_lt' fun r h => _
  cases r
  ¬∑
    exact
      add_lt_top.2
        ‚ü®lt_top_iff_ne_top.2 <| inf_edist_ne_top ‚ü®z, self_subset_thickening hŒ¥ _ hz‚ü©,
          of_real_lt_top‚ü©
  have hr : 0 < ‚Üër - Œ¥ := by
    refine' sub_pos_of_lt _
    have := hs.trans_lt ((inf_edist_le_edist_of_mem hz).trans_lt h)
    rw [of_real_eq_coe_nnreal hŒ¥.le, some_eq_coe] at this
    exact_mod_cast this
  rw [some_eq_coe, edist_lt_coe, ‚Üê dist_lt_coe, ‚Üê add_sub_cancel'_right Œ¥ ‚Üër] at h
  obtain ‚ü®y, hxy, hyz‚ü© := exists_dist_lt_lt hr hŒ¥ h
  refine'
    (ENNReal.add_lt_add_right of_real_ne_top <|
          inf_edist_lt_iff.2 ‚ü®_, mem_thickening_iff.2 ‚ü®_, hz, hyz‚ü©, edist_lt_ofReal.2 hxy‚ü©).trans_le
      _
  rw [‚Üê of_real_add hr.le hŒ¥.le, sub_add_cancel, of_real_coe_nnreal]
  exact le_rfl
#align inf_edist_thickening infEdist_thickening

/- warning: thickening_thickening -> thickening_thickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥) s))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥) s))
Case conversion may be inaccurate. Consider using '#align thickening_thickening thickening_thickening‚Çì'. -/
@[simp]
theorem thickening_thickening (hŒµ : 0 < Œµ) (hŒ¥ : 0 < Œ¥) (s : Set E) :
    thickening Œµ (thickening Œ¥ s) = thickening (Œµ + Œ¥) s :=
  (thickening_thickening_subset _ _ _).antisymm fun x =>
    by
    simp_rw [mem_thickening_iff]
    rintro ‚ü®z, hz, hxz‚ü©
    rw [add_comm] at hxz
    obtain ‚ü®y, hxy, hyz‚ü© := exists_dist_lt_lt hŒµ hŒ¥ hxz
    exact ‚ü®y, ‚ü®_, hz, hyz‚ü©, hxy‚ü©
#align thickening_thickening thickening_thickening

/- warning: cthickening_thickening -> cthickening_thickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥) s))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥) s))
Case conversion may be inaccurate. Consider using '#align cthickening_thickening cthickening_thickening‚Çì'. -/
@[simp]
theorem cthickening_thickening (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 < Œ¥) (s : Set E) :
    cthickening Œµ (thickening Œ¥ s) = cthickening (Œµ + Œ¥) s :=
  (cthickening_thickening_subset hŒµ _ _).antisymm fun x =>
    by
    simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hŒµ hŒ¥.le, infEdist_thickening hŒ¥]
    exact tsub_le_iff_right.2
#align cthickening_thickening cthickening_thickening

/- warning: closure_thickening -> closure_thickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (closure.{u1} E (UniformSpace.toTopologicalSpace.{u1} E (PseudoMetricSpace.toUniformSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2))) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (closure.{u1} E (UniformSpace.toTopologicalSpace.{u1} E (PseudoMetricSpace.toUniformSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2))) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s))
Case conversion may be inaccurate. Consider using '#align closure_thickening closure_thickening‚Çì'. -/
-- Note: `interior (cthickening Œ¥ s) ‚â† thickening Œ¥ s` in general
@[simp]
theorem closure_thickening (hŒ¥ : 0 < Œ¥) (s : Set E) : closure (thickening Œ¥ s) = cthickening Œ¥ s :=
  by rw [‚Üê cthickening_zero, cthickening_thickening le_rfl hŒ¥, zero_add]; infer_instance
#align closure_thickening closure_thickening

/- warning: inf_edist_cthickening -> infEdist_cthickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] (Œ¥ : Real) (s : Set.{u1} E) (x : E), Eq.{1} ENNReal (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x s) (ENNReal.ofReal Œ¥))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] (Œ¥ : Real) (s : Set.{u1} E) (x : E), Eq.{1} ENNReal (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (EMetric.infEdist.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) x s) (ENNReal.ofReal Œ¥))
Case conversion may be inaccurate. Consider using '#align inf_edist_cthickening infEdist_cthickening‚Çì'. -/
@[simp]
theorem infEdist_cthickening (Œ¥ : ‚Ñù) (s : Set E) (x : E) :
    infEdist x (cthickening Œ¥ s) = infEdist x s - ENNReal.ofReal Œ¥ :=
  by
  obtain hŒ¥ | hŒ¥ := le_or_lt Œ¥ 0
  ¬∑ rw [cthickening_of_nonpos hŒ¥, inf_edist_closure, of_real_of_nonpos hŒ¥, tsub_zero]
  ¬∑ rw [‚Üê closure_thickening hŒ¥, inf_edist_closure, infEdist_thickening hŒ¥] <;> infer_instance
#align inf_edist_cthickening infEdist_cthickening

/- warning: thickening_cthickening -> thickening_cthickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥) s))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥) s))
Case conversion may be inaccurate. Consider using '#align thickening_cthickening thickening_cthickening‚Çì'. -/
@[simp]
theorem thickening_cthickening (hŒµ : 0 < Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set E) :
    thickening Œµ (cthickening Œ¥ s) = thickening (Œµ + Œ¥) s :=
  by
  obtain rfl | hŒ¥ := hŒ¥.eq_or_lt
  ¬∑ rw [cthickening_zero, thickening_closure, add_zero]
  ¬∑ rw [‚Üê closure_thickening hŒ¥, thickening_closure, thickening_thickening hŒµ hŒ¥] <;> infer_instance
#align thickening_cthickening thickening_cthickening

/- warning: cthickening_cthickening -> cthickening_cthickening is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥) s))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (s : Set.{u1} E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œ¥ s)) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥) s))
Case conversion may be inaccurate. Consider using '#align cthickening_cthickening cthickening_cthickening‚Çì'. -/
@[simp]
theorem cthickening_cthickening (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set E) :
    cthickening Œµ (cthickening Œ¥ s) = cthickening (Œµ + Œ¥) s :=
  (cthickening_cthickening_subset hŒµ hŒ¥ _).antisymm fun x =>
    by
    simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hŒµ hŒ¥, infEdist_cthickening]
    exact tsub_le_iff_right.2
#align cthickening_cthickening cthickening_cthickening

/- warning: thickening_ball -> thickening_ball is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align thickening_ball thickening_ball‚Çì'. -/
@[simp]
theorem thickening_ball (hŒµ : 0 < Œµ) (hŒ¥ : 0 < Œ¥) (x : E) :
    thickening Œµ (ball x Œ¥) = ball x (Œµ + Œ¥) := by
  rw [‚Üê thickening_singleton, thickening_thickening hŒµ hŒ¥, thickening_singleton] <;> infer_instance
#align thickening_ball thickening_ball

/- warning: thickening_closed_ball -> thickening_closedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.thickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align thickening_closed_ball thickening_closedBall‚Çì'. -/
@[simp]
theorem thickening_closedBall (hŒµ : 0 < Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (x : E) :
    thickening Œµ (closedBall x Œ¥) = ball x (Œµ + Œ¥) := by
  rw [‚Üê cthickening_singleton _ hŒ¥, thickening_cthickening hŒµ hŒ¥, thickening_singleton] <;>
    infer_instance
#align thickening_closed_ball thickening_closedBall

/- warning: cthickening_ball -> cthickening_ball is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align cthickening_ball cthickening_ball‚Çì'. -/
@[simp]
theorem cthickening_ball (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 < Œ¥) (x : E) :
    cthickening Œµ (ball x Œ¥) = closedBall x (Œµ + Œ¥) := by
  rw [‚Üê thickening_singleton, cthickening_thickening hŒµ hŒ¥,
      cthickening_singleton _ (add_nonneg hŒµ hŒ¥.le)] <;>
    infer_instance
#align cthickening_ball cthickening_ball

/- warning: cthickening_closed_ball -> cthickening_closedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (Metric.cthickening.{u1} E (PseudoMetricSpace.toPseudoEMetricSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)) Œµ (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) x (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align cthickening_closed_ball cthickening_closedBall‚Çì'. -/
@[simp]
theorem cthickening_closedBall (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (x : E) :
    cthickening Œµ (closedBall x Œ¥) = closedBall x (Œµ + Œ¥) := by
  rw [‚Üê cthickening_singleton _ hŒ¥, cthickening_cthickening hŒµ hŒ¥,
      cthickening_singleton _ (add_nonneg hŒµ hŒ¥)] <;>
    infer_instance
#align cthickening_closed_ball cthickening_closedBall

/- warning: ball_add_ball -> ball_add_ball is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align ball_add_ball ball_add_ball‚Çì'. -/
theorem ball_add_ball (hŒµ : 0 < Œµ) (hŒ¥ : 0 < Œ¥) (a b : E) :
    ball a Œµ + ball b Œ¥ = ball (a + b) (Œµ + Œ¥) := by
  rw [ball_add, thickening_ball hŒµ hŒ¥ b, Metric.vadd_ball, vadd_eq_add]
#align ball_add_ball ball_add_ball

/- warning: ball_sub_ball -> ball_sub_ball is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align ball_sub_ball ball_sub_ball‚Çì'. -/
theorem ball_sub_ball (hŒµ : 0 < Œµ) (hŒ¥ : 0 < Œ¥) (a b : E) :
    ball a Œµ - ball b Œ¥ = ball (a - b) (Œµ + Œ¥) := by
  simp_rw [sub_eq_add_neg, neg_ball, ball_add_ball hŒµ hŒ¥]
#align ball_sub_ball ball_sub_ball

/- warning: ball_add_closed_ball -> ball_add_closedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align ball_add_closed_ball ball_add_closedBall‚Çì'. -/
theorem ball_add_closedBall (hŒµ : 0 < Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (a b : E) :
    ball a Œµ + closedBall b Œ¥ = ball (a + b) (Œµ + Œ¥) := by
  rw [ball_add, thickening_closedBall hŒµ hŒ¥ b, Metric.vadd_ball, vadd_eq_add]
#align ball_add_closed_ball ball_add_closedBall

/- warning: ball_sub_closed_ball -> ball_sub_closedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align ball_sub_closed_ball ball_sub_closedBall‚Çì'. -/
theorem ball_sub_closedBall (hŒµ : 0 < Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (a b : E) :
    ball a Œµ - closedBall b Œ¥ = ball (a - b) (Œµ + Œ¥) := by
  simp_rw [sub_eq_add_neg, neg_closedBall, ball_add_closedBall hŒµ hŒ¥]
#align ball_sub_closed_ball ball_sub_closedBall

/- warning: closed_ball_add_ball -> closedBall_add_ball is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align closed_ball_add_ball closedBall_add_ball‚Çì'. -/
theorem closedBall_add_ball (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 < Œ¥) (a b : E) :
    closedBall a Œµ + ball b Œ¥ = ball (a + b) (Œµ + Œ¥) := by
  rw [add_comm, ball_add_closedBall hŒ¥ hŒµ b, add_comm, add_comm Œ¥]
#align closed_ball_add_ball closedBall_add_ball

/- warning: closed_ball_sub_ball -> closedBall_sub_ball is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align closed_ball_sub_ball closedBall_sub_ball‚Çì'. -/
theorem closedBall_sub_ball (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 < Œ¥) (a b : E) :
    closedBall a Œµ - ball b Œ¥ = ball (a - b) (Œµ + Œ¥) := by
  simp_rw [sub_eq_add_neg, neg_ball, closedBall_add_ball hŒµ hŒ¥]
#align closed_ball_sub_ball closedBall_sub_ball

/- warning: closed_ball_add_closed_ball -> closedBall_add_closedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real} [_inst_5 : ProperSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)], (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real} [_inst_5 : ProperSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)], (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HAdd.hAdd.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHAdd.{u1} (Set.{u1} E) (Set.add.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HAdd.hAdd.{u1, u1, u1} E E E (instHAdd.{u1} E (AddZeroClass.toAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align closed_ball_add_closed_ball closedBall_add_closedBall‚Çì'. -/
theorem closedBall_add_closedBall [ProperSpace E] (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (a b : E) :
    closedBall a Œµ + closedBall b Œ¥ = closedBall (a + b) (Œµ + Œ¥) := by
  rw [(is_compact_closed_ball _ _).add_closedBall hŒ¥ b, cthickening_closedBall hŒ¥ hŒµ a,
    Metric.vadd_closedBall, vadd_eq_add, add_comm, add_comm Œ¥]
#align closed_ball_add_closed_ball closedBall_add_closedBall

/- warning: closed_ball_sub_closed_ball -> closedBall_sub_closedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real} [_inst_5 : ProperSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)], (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œµ) -> (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toHasSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.hasAdd) Œµ Œ¥)))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : SeminormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField _inst_2] {Œ¥ : Real} {Œµ : Real} [_inst_5 : ProperSpace.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2)], (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œµ) -> (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) Œ¥) -> (forall (a : E) (b : E), Eq.{succ u1} (Set.{u1} E) (HSub.hSub.{u1, u1, u1} (Set.{u1} E) (Set.{u1} E) (Set.{u1} E) (instHSub.{u1} (Set.{u1} E) (Set.sub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) a Œµ) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) b Œ¥)) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E _inst_2) (HSub.hSub.{u1, u1, u1} E E E (instHSub.{u1} E (SubNegMonoid.toSub.{u1} E (AddGroup.toSubNegMonoid.{u1} E (SeminormedAddGroup.toAddGroup.{u1} E (SeminormedAddCommGroup.toSeminormedAddGroup.{u1} E _inst_2))))) a b) (HAdd.hAdd.{0, 0, 0} Real Real Real (instHAdd.{0} Real Real.instAddReal) Œµ Œ¥)))
Case conversion may be inaccurate. Consider using '#align closed_ball_sub_closed_ball closedBall_sub_closedBall‚Çì'. -/
theorem closedBall_sub_closedBall [ProperSpace E] (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (a b : E) :
    closedBall a Œµ - closedBall b Œ¥ = closedBall (a - b) (Œµ + Œ¥) := by
  simp_rw [sub_eq_add_neg, neg_closedBall, closedBall_add_closedBall hŒµ hŒ¥]
#align closed_ball_sub_closed_ball closedBall_sub_closedBall

end SeminormedAddCommGroup

section NormedAddCommGroup

variable [NormedAddCommGroup E] [NormedSpace ùïú E]

/- warning: smul_closed_ball -> smul_closedBall is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : NormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] (c : ùïú) (x : E) {r : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r) -> (Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2))) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3)))))) c (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) x r)) (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (SMul.smul.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2))) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c) r)))
but is expected to have type
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : NormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] (c : ùïú) (x : E) {r : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r) -> (Eq.{succ u2} (Set.{u2} E) (HSMul.hSMul.{u1, u2, u2} ùïú (Set.{u2} E) (Set.{u2} E) (instHSMul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (CommMonoidWithZero.toZero.{u1} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u1} ùïú (Semifield.toCommGroupWithZero.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3))))))) c (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) x r)) (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (HSMul.hSMul.{u1, u2, u2} ùïú E E (instHSMul.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (CommMonoidWithZero.toZero.{u1} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u1} ùïú (Semifield.toCommGroupWithZero.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3)))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (Norm.norm.{u1} ùïú (NormedField.toNorm.{u1} ùïú _inst_1) c) r)))
Case conversion may be inaccurate. Consider using '#align smul_closed_ball smul_closedBall‚Çì'. -/
theorem smul_closedBall (c : ùïú) (x : E) {r : ‚Ñù} (hr : 0 ‚â§ r) :
    c ‚Ä¢ closedBall x r = closedBall (c ‚Ä¢ x) (‚Äñc‚Äñ * r) :=
  by
  rcases eq_or_ne c 0 with (rfl | hc)
  ¬∑ simp [hr, zero_smul_set, Set.singleton_zero, ‚Üê nonempty_closed_ball]
  ¬∑ exact smul_closedBall' hc x r
#align smul_closed_ball smul_closedBall

/- warning: smul_closed_unit_ball -> smul_closedUnitBall is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : NormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] (c : ùïú), Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2))) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3)))))) c (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (OfNat.ofNat.{u2} E 0 (OfNat.mk.{u2} E 0 (Zero.zero.{u2} E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (NormedAddGroup.toAddGroup.{u2} E (NormedAddCommGroup.toNormedAddGroup.{u2} E _inst_2))))))))) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne))))) (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (OfNat.ofNat.{u2} E 0 (OfNat.mk.{u2} E 0 (Zero.zero.{u2} E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (SubNegMonoid.toAddMonoid.{u2} E (AddGroup.toSubNegMonoid.{u2} E (NormedAddGroup.toAddGroup.{u2} E (NormedAddCommGroup.toNormedAddGroup.{u2} E _inst_2))))))))) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c))
but is expected to have type
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : NormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] (c : ùïú), Eq.{succ u2} (Set.{u2} E) (HSMul.hSMul.{u1, u2, u2} ùïú (Set.{u2} E) (Set.{u2} E) (instHSMul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (CommMonoidWithZero.toZero.{u1} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u1} ùïú (Semifield.toCommGroupWithZero.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3))))))) c (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (OfNat.ofNat.{u2} E 0 (Zero.toOfNat0.{u2} E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))))) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal)))) (Metric.closedBall.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (OfNat.ofNat.{u2} E 0 (Zero.toOfNat0.{u2} E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))))) (Norm.norm.{u1} ùïú (NormedField.toNorm.{u1} ùïú _inst_1) c))
Case conversion may be inaccurate. Consider using '#align smul_closed_unit_ball smul_closedUnitBall‚Çì'. -/
theorem smul_closedUnitBall (c : ùïú) : c ‚Ä¢ closedBall (0 : E) (1 : ‚Ñù) = closedBall (0 : E) ‚Äñc‚Äñ := by
  rw [smul_closedBall _ _ zero_le_one, smul_zero, mul_one]
#align smul_closed_unit_ball smul_closedUnitBall

variable [NormedSpace ‚Ñù E]

/- warning: smul_closed_unit_ball_of_nonneg -> smul_closedUnitBall_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] {r : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r) -> (Eq.{succ u1} (Set.{u1} E) (SMul.smul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toHasSmul.{0, u1} Real E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{0, u1} Real E (MulZeroClass.toHasZero.{0} Real (MulZeroOneClass.toMulZeroClass.{0} Real (MonoidWithZero.toMulZeroOneClass.{0} Real (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2))) (NormedSpace.toModule.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) _inst_4)))))) r (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (OfNat.mk.{u1} E 0 (Zero.zero.{u1} E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2))))))))) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (OfNat.mk.{u1} E 0 (Zero.zero.{u1} E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2))))))))) r))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] {r : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r) -> (Eq.{succ u1} (Set.{u1} E) (HSMul.hSMul.{0, u1, u1} Real (Set.{u1} E) (Set.{u1} E) (instHSMul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toSMul.{0, u1} Real E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{0, u1} Real E Real.instZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E Real.instMonoidWithZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E Real.semiring (AddCommGroup.toAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) _inst_4))))))) r (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal)))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) r))
Case conversion may be inaccurate. Consider using '#align smul_closed_unit_ball_of_nonneg smul_closedUnitBall_of_nonneg‚Çì'. -/
/-- In a real normed space, the image of the unit closed ball under multiplication by a nonnegative
number `r` is the closed ball of radius `r` with center at the origin. -/
theorem smul_closedUnitBall_of_nonneg {r : ‚Ñù} (hr : 0 ‚â§ r) :
    r ‚Ä¢ closedBall 0 1 = closedBall (0 : E) r := by rw [smul_closedUnitBall, Real.norm_of_nonneg hr]
#align smul_closed_unit_ball_of_nonneg smul_closedUnitBall_of_nonneg

/- warning: normed_space.sphere_nonempty -> NormedSpace.sphere_nonempty is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] [_inst_5 : Nontrivial.{u1} E] {x : E} {r : Real}, Iff (Set.Nonempty.{u1} E (Metric.sphere.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) x r)) (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r)
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] [_inst_5 : Nontrivial.{u1} E] {x : E} {r : Real}, Iff (Set.Nonempty.{u1} E (Metric.sphere.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) x r)) (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r)
Case conversion may be inaccurate. Consider using '#align normed_space.sphere_nonempty NormedSpace.sphere_nonempty‚Çì'. -/
/-- In a nontrivial real normed space, a sphere is nonempty if and only if its radius is
nonnegative. -/
@[simp]
theorem NormedSpace.sphere_nonempty [Nontrivial E] {x : E} {r : ‚Ñù} :
    (sphere x r).Nonempty ‚Üî 0 ‚â§ r :=
  by
  obtain ‚ü®y, hy‚ü© := exists_ne x
  refine'
    ‚ü®fun h => nonempty_closed_ball.1 (h.mono sphere_subset_closed_ball), fun hr =>
      ‚ü®r ‚Ä¢ ‚Äñy - x‚Äñ‚Åª¬π ‚Ä¢ (y - x) + x, _‚ü©‚ü©
  have : ‚Äñy - x‚Äñ ‚â† 0 := by simpa [sub_eq_zero]
  simp [norm_smul, this, Real.norm_of_nonneg hr]
#align normed_space.sphere_nonempty NormedSpace.sphere_nonempty

/- warning: smul_sphere -> smul_sphere is a dubious translation:
lean 3 declaration is
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : NormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] [_inst_4 : NormedSpace.{0, u2} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] [_inst_5 : Nontrivial.{u2} E] (c : ùïú) (x : E) {r : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r) -> (Eq.{succ u2} (Set.{u2} E) (SMul.smul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2))) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3)))))) c (Metric.sphere.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) x r)) (Metric.sphere.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (SMul.smul.{u1, u2} ùïú E (SMulZeroClass.toHasSmul.{u1, u2} ùïú E (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} ùïú E (MulZeroClass.toHasZero.{u1} ùïú (MulZeroOneClass.toMulZeroClass.{u1} ùïú (MonoidWithZero.toMulZeroOneClass.{u1} ùïú (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1))))) (AddZeroClass.toHasZero.{u2} E (AddMonoid.toAddZeroClass.{u2} E (AddCommMonoid.toAddMonoid.{u2} E (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (Ring.toSemiring.{u1} ùïú (NormedRing.toRing.{u1} ùïú (NormedCommRing.toNormedRing.{u1} ùïú (NormedField.toNormedCommRing.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (SeminormedAddCommGroup.toAddCommGroup.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2))) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (Norm.norm.{u1} ùïú (NormedField.toHasNorm.{u1} ùïú _inst_1) c) r)))
but is expected to have type
  forall {ùïú : Type.{u1}} {E : Type.{u2}} [_inst_1 : NormedField.{u1} ùïú] [_inst_2 : NormedAddCommGroup.{u2} E] [_inst_3 : NormedSpace.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] [_inst_4 : NormedSpace.{0, u2} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)] [_inst_5 : Nontrivial.{u2} E] (c : ùïú) (x : E) {r : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r) -> (Eq.{succ u2} (Set.{u2} E) (HSMul.hSMul.{u1, u2, u2} ùïú (Set.{u2} E) (Set.{u2} E) (instHSMul.{u1, u2} ùïú (Set.{u2} E) (Set.smulSet.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (CommMonoidWithZero.toZero.{u1} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u1} ùïú (Semifield.toCommGroupWithZero.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3))))))) c (Metric.sphere.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) x r)) (Metric.sphere.{u2} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u2} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2)) (HSMul.hSMul.{u1, u2, u2} ùïú E E (instHSMul.{u1, u2} ùïú E (SMulZeroClass.toSMul.{u1, u2} ùïú E (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} ùïú E (CommMonoidWithZero.toZero.{u1} ùïú (CommGroupWithZero.toCommMonoidWithZero.{u1} ùïú (Semifield.toCommGroupWithZero.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} ùïú E (Semiring.toMonoidWithZero.{u1} ùïú (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1))))) (NegZeroClass.toZero.{u2} E (SubNegZeroMonoid.toNegZeroClass.{u2} E (SubtractionMonoid.toSubNegZeroMonoid.{u2} E (SubtractionCommMonoid.toSubtractionMonoid.{u2} E (AddCommGroup.toDivisionAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} ùïú E (DivisionSemiring.toSemiring.{u1} ùïú (Semifield.toDivisionSemiring.{u1} ùïú (Field.toSemifield.{u1} ùïú (NormedField.toField.{u1} ùïú _inst_1)))) (AddCommGroup.toAddCommMonoid.{u2} E (NormedAddCommGroup.toAddCommGroup.{u2} E _inst_2)) (NormedSpace.toModule.{u1, u2} ùïú E _inst_1 (NormedAddCommGroup.toSeminormedAddCommGroup.{u2} E _inst_2) _inst_3)))))) c x) (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (Norm.norm.{u1} ùïú (NormedField.toNorm.{u1} ùïú _inst_1) c) r)))
Case conversion may be inaccurate. Consider using '#align smul_sphere smul_sphere‚Çì'. -/
theorem smul_sphere [Nontrivial E] (c : ùïú) (x : E) {r : ‚Ñù} (hr : 0 ‚â§ r) :
    c ‚Ä¢ sphere x r = sphere (c ‚Ä¢ x) (‚Äñc‚Äñ * r) :=
  by
  rcases eq_or_ne c 0 with (rfl | hc)
  ¬∑ simp [zero_smul_set, Set.singleton_zero, hr]
  ¬∑ exact smul_sphere' hc x r
#align smul_sphere smul_sphere

/- warning: affinity_unit_ball -> affinity_unitBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] {r : Real}, (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (VAdd.vadd.{u1, u1} E (Set.{u1} E) (Set.vaddSet.{u1, u1} E E (Add.toVAdd.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2)))))))) x (SMul.smul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toHasSmul.{0, u1} Real E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{0, u1} Real E (MulZeroClass.toHasZero.{0} Real (MulZeroOneClass.toMulZeroClass.{0} Real (MonoidWithZero.toMulZeroOneClass.{0} Real (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2))) (NormedSpace.toModule.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) _inst_4)))))) r (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (OfNat.mk.{u1} E 0 (Zero.zero.{u1} E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2))))))))) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne)))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) x r))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] {r : Real}, (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (HVAdd.hVAdd.{u1, u1, u1} E (Set.{u1} E) (Set.{u1} E) (instHVAdd.{u1, u1} E (Set.{u1} E) (Set.vaddSet.{u1, u1} E E (AddAction.toVAdd.{u1, u1} E E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2)))) (AddTorsor.toAddAction.{u1, u1} E E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2)) (NormedAddTorsor.toAddTorsor.{u1, u1} E E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (SeminormedAddCommGroup.toNormedAddTorsor.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2))))))) x (HSMul.hSMul.{0, u1, u1} Real (Set.{u1} E) (Set.{u1} E) (instHSMul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toSMul.{0, u1} Real E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{0, u1} Real E Real.instZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E Real.instMonoidWithZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E Real.semiring (AddCommGroup.toAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) _inst_4))))))) r (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal))))) (Metric.ball.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) x r))
Case conversion may be inaccurate. Consider using '#align affinity_unit_ball affinity_unitBall‚Çì'. -/
/-- Any ball `metric.ball x r`, `0 < r` is the image of the unit ball under `Œª y, x + r ‚Ä¢ y`. -/
theorem affinity_unitBall {r : ‚Ñù} (hr : 0 < r) (x : E) : x +·µ• r ‚Ä¢ ball 0 1 = ball x r := by
  rw [smul_unitBall_of_pos hr, vadd_ball_zero]
#align affinity_unit_ball affinity_unitBall

/- warning: affinity_unit_closed_ball -> affinity_unitClosedBall is a dubious translation:
lean 3 declaration is
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] {r : Real}, (LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) r) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (VAdd.vadd.{u1, u1} E (Set.{u1} E) (Set.vaddSet.{u1, u1} E E (Add.toVAdd.{u1} E (AddZeroClass.toHasAdd.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2)))))))) x (SMul.smul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toHasSmul.{0, u1} Real E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSmulZeroClass.{0, u1} Real E (MulZeroClass.toHasZero.{0} Real (MulZeroOneClass.toMulZeroClass.{0} Real (MonoidWithZero.toMulZeroOneClass.{0} Real (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E (Semiring.toMonoidWithZero.{0} Real (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField))))) (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (AddCommMonoid.toAddMonoid.{u1} E (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E (Ring.toSemiring.{0} Real (NormedRing.toRing.{0} Real (NormedCommRing.toNormedRing.{0} Real (NormedField.toNormedCommRing.{0} Real Real.normedField)))) (AddCommGroup.toAddCommMonoid.{u1} E (SeminormedAddCommGroup.toAddCommGroup.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2))) (NormedSpace.toModule.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) _inst_4)))))) r (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (OfNat.mk.{u1} E 0 (Zero.zero.{u1} E (AddZeroClass.toHasZero.{u1} E (AddMonoid.toAddZeroClass.{u1} E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2))))))))) (OfNat.ofNat.{0} Real 1 (OfNat.mk.{0} Real 1 (One.one.{0} Real Real.hasOne)))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) x r))
but is expected to have type
  forall {E : Type.{u1}} [_inst_2 : NormedAddCommGroup.{u1} E] [_inst_4 : NormedSpace.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)] {r : Real}, (LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) r) -> (forall (x : E), Eq.{succ u1} (Set.{u1} E) (HVAdd.hVAdd.{u1, u1, u1} E (Set.{u1} E) (Set.{u1} E) (instHVAdd.{u1, u1} E (Set.{u1} E) (Set.vaddSet.{u1, u1} E E (AddAction.toVAdd.{u1, u1} E E (SubNegMonoid.toAddMonoid.{u1} E (AddGroup.toSubNegMonoid.{u1} E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2)))) (AddTorsor.toAddAction.{u1, u1} E E (NormedAddGroup.toAddGroup.{u1} E (NormedAddCommGroup.toNormedAddGroup.{u1} E _inst_2)) (NormedAddTorsor.toAddTorsor.{u1, u1} E E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (SeminormedAddCommGroup.toNormedAddTorsor.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2))))))) x (HSMul.hSMul.{0, u1, u1} Real (Set.{u1} E) (Set.{u1} E) (instHSMul.{0, u1} Real (Set.{u1} E) (Set.smulSet.{0, u1} Real E (SMulZeroClass.toSMul.{0, u1} Real E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (SMulWithZero.toSMulZeroClass.{0, u1} Real E Real.instZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (MulActionWithZero.toSMulWithZero.{0, u1} Real E Real.instMonoidWithZeroReal (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))) (Module.toMulActionWithZero.{0, u1} Real E Real.semiring (AddCommGroup.toAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)) (NormedSpace.toModule.{0, u1} Real E Real.normedField (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2) _inst_4))))))) r (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) (OfNat.ofNat.{u1} E 0 (Zero.toOfNat0.{u1} E (NegZeroClass.toZero.{u1} E (SubNegZeroMonoid.toNegZeroClass.{u1} E (SubtractionMonoid.toSubNegZeroMonoid.{u1} E (SubtractionCommMonoid.toSubtractionMonoid.{u1} E (AddCommGroup.toDivisionAddCommMonoid.{u1} E (NormedAddCommGroup.toAddCommGroup.{u1} E _inst_2)))))))) (OfNat.ofNat.{0} Real 1 (One.toOfNat1.{0} Real Real.instOneReal))))) (Metric.closedBall.{u1} E (SeminormedAddCommGroup.toPseudoMetricSpace.{u1} E (NormedAddCommGroup.toSeminormedAddCommGroup.{u1} E _inst_2)) x r))
Case conversion may be inaccurate. Consider using '#align affinity_unit_closed_ball affinity_unitClosedBall‚Çì'. -/
/-- Any closed ball `metric.closed_ball x r`, `0 ‚â§ r` is the image of the unit closed ball under
`Œª y, x + r ‚Ä¢ y`. -/
theorem affinity_unitClosedBall {r : ‚Ñù} (hr : 0 ‚â§ r) (x : E) :
    x +·µ• r ‚Ä¢ closedBall 0 1 = closedBall x r := by
  rw [smul_closedUnitBall, Real.norm_of_nonneg hr, vadd_closedBall_zero]
#align affinity_unit_closed_ball affinity_unitClosedBall

end NormedAddCommGroup

