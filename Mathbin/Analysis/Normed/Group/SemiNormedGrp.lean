/-
Copyright (c) 2021 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Riccardo Brasca
-/
import Analysis.Normed.Group.Hom
import CategoryTheory.Limits.Shapes.ZeroMorphisms
import CategoryTheory.ConcreteCategory.BundledHom
import CategoryTheory.Elementwise

#align_import analysis.normed.group.SemiNormedGroup from "leanprover-community/mathlib"@"cff8231f04dfa33fd8f2f45792eebd862ef30cad"

/-!
# The category of seminormed groups

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We define `SemiNormedGroup`, the category of seminormed groups and normed group homs between them,
as well as `SemiNormedGroup‚ÇÅ`, the subcategory of norm non-increasing morphisms.
-/


noncomputable section

universe u

open CategoryTheory

#print SemiNormedGrp /-
/-- The category of seminormed abelian groups and bounded group homomorphisms. -/
def SemiNormedGrp : Type (u + 1) :=
  Bundled SeminormedAddCommGroup
#align SemiNormedGroup SemiNormedGrp
-/

namespace SemiNormedGrp

#print SemiNormedGrp.bundledHom /-
instance bundledHom : BundledHom @NormedAddGroupHom :=
  ‚ü®@NormedAddGroupHom.toFun, @NormedAddGroupHom.id, @NormedAddGroupHom.comp,
    @NormedAddGroupHom.coe_inj‚ü©
#align SemiNormedGroup.bundled_hom SemiNormedGrp.bundledHom
-/

deriving instance LargeCategory, ConcreteCategory for SemiNormedGrp

instance : CoeSort SemiNormedGrp (Type u) :=
  Bundled.hasCoeToSort

/- warning: SemiNormedGroup.of clashes with SemiNormedGrp.of -> SemiNormedGrp.of
Case conversion may be inaccurate. Consider using '#align SemiNormedGroup.of SemiNormedGrp.of‚Çì'. -/
#print SemiNormedGrp.of /-
/-- Construct a bundled `SemiNormedGroup` from the underlying type and typeclass. -/
def of (M : Type u) [SeminormedAddCommGroup M] : SemiNormedGrp :=
  Bundled.of M
#align SemiNormedGroup.of SemiNormedGrp.of
-/

instance (M : SemiNormedGrp) : SeminormedAddCommGroup M :=
  M.str

#print SemiNormedGrp.coe_of /-
@[simp]
theorem coe_of (V : Type u) [SeminormedAddCommGroup V] : (SemiNormedGrp.of V : Type u) = V :=
  rfl
#align SemiNormedGroup.coe_of SemiNormedGrp.coe_of
-/

#print SemiNormedGrp.coe_id /-
@[simp]
theorem coe_id (V : SemiNormedGrp) : ‚áë(ùüô V) = id :=
  rfl
#align SemiNormedGroup.coe_id SemiNormedGrp.coe_id
-/

#print SemiNormedGrp.coe_comp /-
@[simp]
theorem coe_comp {M N K : SemiNormedGrp} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : M ‚Üí K) = g ‚àò f :=
  rfl
#align SemiNormedGroup.coe_comp SemiNormedGrp.coe_comp
-/

instance : Inhabited SemiNormedGrp :=
  ‚ü®of PUnit‚ü©

#print SemiNormedGrp.ofUnique /-
instance ofUnique (V : Type u) [SeminormedAddCommGroup V] [i : Unique V] :
    Unique (SemiNormedGrp.of V) :=
  i
#align SemiNormedGroup.of_unique SemiNormedGrp.ofUnique
-/

instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGrp where

#print SemiNormedGrp.zero_apply /-
@[simp]
theorem zero_apply {V W : SemiNormedGrp} (x : V) : (0 : V ‚ü∂ W) x = 0 :=
  rfl
#align SemiNormedGroup.zero_apply SemiNormedGrp.zero_apply
-/

#print SemiNormedGrp.isZero_of_subsingleton /-
theorem isZero_of_subsingleton (V : SemiNormedGrp) [Subsingleton V] : Limits.IsZero V :=
  by
  refine' ‚ü®fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©, fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©‚ü©
  ¬∑ ext; have : x = 0 := Subsingleton.elim _ _; simp only [this, map_zero]
  ¬∑ ext; apply Subsingleton.elim
#align SemiNormedGroup.is_zero_of_subsingleton SemiNormedGrp.isZero_of_subsingleton
-/

#print SemiNormedGrp.hasZeroObject /-
instance hasZeroObject : Limits.HasZeroObject SemiNormedGrp.{u} :=
  ‚ü®‚ü®of PUnit, isZero_of_subsingleton _‚ü©‚ü©
#align SemiNormedGroup.has_zero_object SemiNormedGrp.hasZeroObject
-/

#print SemiNormedGrp.iso_isometry_of_normNoninc /-
theorem iso_isometry_of_normNoninc {V W : SemiNormedGrp} (i : V ‚âÖ W) (h1 : i.hom.NormNoninc)
    (h2 : i.inv.NormNoninc) : Isometry i.hom :=
  by
  apply AddMonoidHomClass.isometry_of_norm
  intro v
  apply le_antisymm (h1 v)
  calc
    ‚Äñv‚Äñ = ‚Äñi.inv (i.hom v)‚Äñ := by rw [iso.hom_inv_id_apply]
    _ ‚â§ ‚Äñi.hom v‚Äñ := h2 _
#align SemiNormedGroup.iso_isometry_of_norm_noninc SemiNormedGrp.iso_isometry_of_normNoninc
-/

end SemiNormedGrp

#print SemiNormedGrp‚ÇÅ /-
/-- `SemiNormedGroup‚ÇÅ` is a type synonym for `SemiNormedGroup`,
which we shall equip with the category structure consisting only of the norm non-increasing maps.
-/
def SemiNormedGrp‚ÇÅ : Type (u + 1) :=
  Bundled SeminormedAddCommGroup
#align SemiNormedGroup‚ÇÅ SemiNormedGrp‚ÇÅ
-/

namespace SemiNormedGrp‚ÇÅ

instance : CoeSort SemiNormedGrp‚ÇÅ (Type u) :=
  Bundled.hasCoeToSort

instance : LargeCategory.{u} SemiNormedGrp‚ÇÅ
    where
  hom X Y := { f : NormedAddGroupHom X Y // f.NormNoninc }
  id X := ‚ü®NormedAddGroupHom.id X, NormedAddGroupHom.NormNoninc.id‚ü©
  comp X Y Z f g := ‚ü®(g : NormedAddGroupHom Y Z).comp (f : NormedAddGroupHom X Y), g.2.comp f.2‚ü©

#print SemiNormedGrp‚ÇÅ.hom_ext /-
@[ext]
theorem hom_ext {M N : SemiNormedGrp‚ÇÅ} (f g : M ‚ü∂ N) (w : (f : M ‚Üí N) = (g : M ‚Üí N)) : f = g :=
  Subtype.eq (NormedAddGroupHom.ext (congr_fun w))
#align SemiNormedGroup‚ÇÅ.hom_ext SemiNormedGrp‚ÇÅ.hom_ext
-/

instance : ConcreteCategory.{u} SemiNormedGrp‚ÇÅ
    where
  forget :=
    { obj := fun X => X
      map := fun X Y f => f }
  forget_faithful := { }

#print SemiNormedGrp‚ÇÅ.of /-
/-- Construct a bundled `SemiNormedGroup‚ÇÅ` from the underlying type and typeclass. -/
def of (M : Type u) [SeminormedAddCommGroup M] : SemiNormedGrp‚ÇÅ :=
  Bundled.of M
#align SemiNormedGroup‚ÇÅ.of SemiNormedGrp‚ÇÅ.of
-/

instance (M : SemiNormedGrp‚ÇÅ) : SeminormedAddCommGroup M :=
  M.str

#print SemiNormedGrp‚ÇÅ.mkHom /-
/-- Promote a morphism in `SemiNormedGroup` to a morphism in `SemiNormedGroup‚ÇÅ`. -/
def mkHom {M N : SemiNormedGrp} (f : M ‚ü∂ N) (i : f.NormNoninc) :
    SemiNormedGrp‚ÇÅ.of M ‚ü∂ SemiNormedGrp‚ÇÅ.of N :=
  ‚ü®f, i‚ü©
#align SemiNormedGroup‚ÇÅ.mk_hom SemiNormedGrp‚ÇÅ.mkHom
-/

#print SemiNormedGrp‚ÇÅ.mkHom_apply /-
@[simp]
theorem mkHom_apply {M N : SemiNormedGrp} (f : M ‚ü∂ N) (i : f.NormNoninc) (x) : mkHom f i x = f x :=
  rfl
#align SemiNormedGroup‚ÇÅ.mk_hom_apply SemiNormedGrp‚ÇÅ.mkHom_apply
-/

#print SemiNormedGrp‚ÇÅ.mkIso /-
/-- Promote an isomorphism in `SemiNormedGroup` to an isomorphism in `SemiNormedGroup‚ÇÅ`. -/
@[simps]
def mkIso {M N : SemiNormedGrp} (f : M ‚âÖ N) (i : f.hom.NormNoninc) (i' : f.inv.NormNoninc) :
    SemiNormedGrp‚ÇÅ.of M ‚âÖ SemiNormedGrp‚ÇÅ.of N
    where
  hom := mkHom f.hom i
  inv := mkHom f.inv i'
  hom_inv_id' := by apply Subtype.eq; exact f.hom_inv_id
  inv_hom_id' := by apply Subtype.eq; exact f.inv_hom_id
#align SemiNormedGroup‚ÇÅ.mk_iso SemiNormedGrp‚ÇÅ.mkIso
-/

instance : HasForget‚ÇÇ SemiNormedGrp‚ÇÅ SemiNormedGrp
    where forget‚ÇÇ :=
    { obj := fun X => X
      map := fun X Y f => f.1 }

#print SemiNormedGrp‚ÇÅ.coe_of /-
@[simp]
theorem coe_of (V : Type u) [SeminormedAddCommGroup V] : (SemiNormedGrp‚ÇÅ.of V : Type u) = V :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_of SemiNormedGrp‚ÇÅ.coe_of
-/

#print SemiNormedGrp‚ÇÅ.coe_id /-
@[simp]
theorem coe_id (V : SemiNormedGrp‚ÇÅ) : ‚áë(ùüô V) = id :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_id SemiNormedGrp‚ÇÅ.coe_id
-/

#print SemiNormedGrp‚ÇÅ.coe_comp /-
@[simp]
theorem coe_comp {M N K : SemiNormedGrp‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : M ‚Üí K) = g ‚àò f :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_comp SemiNormedGrp‚ÇÅ.coe_comp
-/

-- If `coe_fn_coe_base` fires before `coe_comp`, `coe_comp'` puts us back in normal form.
@[simp]
theorem coe_comp' {M N K : SemiNormedGrp‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
    (f ‚â´ g : NormedAddGroupHom M K) = (‚Üëg : NormedAddGroupHom N K).comp ‚Üëf :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_comp' SemiNormedGrp‚ÇÅ.coe_comp'

instance : Inhabited SemiNormedGrp‚ÇÅ :=
  ‚ü®of PUnit‚ü©

#print SemiNormedGrp‚ÇÅ.ofUnique /-
instance ofUnique (V : Type u) [SeminormedAddCommGroup V] [i : Unique V] :
    Unique (SemiNormedGrp‚ÇÅ.of V) :=
  i
#align SemiNormedGroup‚ÇÅ.of_unique SemiNormedGrp‚ÇÅ.ofUnique
-/

instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGrp‚ÇÅ
    where
  Zero X Y := { zero := ‚ü®0, NormedAddGroupHom.NormNoninc.zero‚ü© }
  comp_zero X Y f Z := by ext; rfl
  zero_comp X Y Z f := by ext; simp [coeFn_coe_base']

#print SemiNormedGrp‚ÇÅ.zero_apply /-
@[simp]
theorem zero_apply {V W : SemiNormedGrp‚ÇÅ} (x : V) : (0 : V ‚ü∂ W) x = 0 :=
  rfl
#align SemiNormedGroup‚ÇÅ.zero_apply SemiNormedGrp‚ÇÅ.zero_apply
-/

#print SemiNormedGrp‚ÇÅ.isZero_of_subsingleton /-
theorem isZero_of_subsingleton (V : SemiNormedGrp‚ÇÅ) [Subsingleton V] : Limits.IsZero V :=
  by
  refine' ‚ü®fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©, fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©‚ü©
  ¬∑ ext; have : x = 0 := Subsingleton.elim _ _; simp only [this, map_zero]
    exact map_zero f.1
  ¬∑ ext; apply Subsingleton.elim
#align SemiNormedGroup‚ÇÅ.is_zero_of_subsingleton SemiNormedGrp‚ÇÅ.isZero_of_subsingleton
-/

#print SemiNormedGrp‚ÇÅ.hasZeroObject /-
instance hasZeroObject : Limits.HasZeroObject SemiNormedGrp‚ÇÅ.{u} :=
  ‚ü®‚ü®of PUnit, isZero_of_subsingleton _‚ü©‚ü©
#align SemiNormedGroup‚ÇÅ.has_zero_object SemiNormedGrp‚ÇÅ.hasZeroObject
-/

#print SemiNormedGrp‚ÇÅ.iso_isometry /-
theorem iso_isometry {V W : SemiNormedGrp‚ÇÅ} (i : V ‚âÖ W) : Isometry i.hom :=
  by
  change Isometry (i.hom : V ‚Üí+ W)
  refine' AddMonoidHomClass.isometry_of_norm i.hom _
  intro v
  apply le_antisymm (i.hom.2 v)
  calc
    ‚Äñv‚Äñ = ‚Äñi.inv (i.hom v)‚Äñ := by rw [iso.hom_inv_id_apply]
    _ ‚â§ ‚Äñi.hom v‚Äñ := i.inv.2 _
#align SemiNormedGroup‚ÇÅ.iso_isometry SemiNormedGrp‚ÇÅ.iso_isometry
-/

end SemiNormedGrp‚ÇÅ

