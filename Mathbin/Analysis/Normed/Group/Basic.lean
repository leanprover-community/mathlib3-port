/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl, Ya√´l Dillies
-/
import Mathbin.Algebra.Module.Ulift
import Mathbin.Analysis.Normed.Group.Seminorm
import Mathbin.Order.LiminfLimsup
import Mathbin.Topology.Algebra.UniformGroup
import Mathbin.Topology.MetricSpace.Algebra
import Mathbin.Topology.MetricSpace.Isometry
import Mathbin.Topology.Sequences

/-!
# Normed (semi)groups

In this file we define 10 classes:

* `has_norm`, `has_nnnorm`: auxiliary classes endowing a type `Œ±` with a function `norm : Œ± ‚Üí ‚Ñù`
  (notation: `‚à•x‚à•`) and `nnnorm : Œ± ‚Üí ‚Ñù‚â•0` (notation: `‚à•x‚à•‚Çä`), respectively;
* `seminormed_..._group`: A seminormed (additive) (commutative) group is an (additive) (commutative)
  group with a norm and a compatible pseudometric space structure:
  `‚àÄ x y, dist x y = ‚à•x / y‚à•` or `‚àÄ x y, dist x y = ‚à•x - y‚à•`, depending on the group operation.
* `normed_..._group`: A normed (additive) (commutative) group is an (additive) (commutative) group
  with a norm and a compatible metric space structure.

We also prove basic properties of (semi)normed groups and provide some instances.

## Notes

The current convention `dist x y = ‚à•x - y‚à•` means that the distance is invariant under right
addition, but actions in mathlib are usually from the left. This means we might want to change it to
`dist x y = ‚à•-x + y‚à•`.

The normed group hierarchy would lend itself well to a mixin design (that is, having
`seminormed_group` and `seminormed_add_group` not extend `group` and `add_group`), but we choose not
to for performance concerns.

## Tags

normed group
-/


variable {ùìï ùïú Œ± Œπ Œ∫ E F G : Type _}

open Filter Function Metric

open BigOperators Ennreal Filter Nnreal uniformity Pointwise TopologicalSpace

/-- Auxiliary class, endowing a type `E` with a function `norm : E ‚Üí ‚Ñù` with notation `‚à•x‚à•`. This
class is designed to be extended in more interesting classes specifying the properties of the norm.
-/
@[notation_class]
class HasNorm (E : Type _) where
  norm : E ‚Üí ‚Ñù
#align has_norm HasNorm

/-- Auxiliary class, endowing a type `Œ±` with a function `nnnorm : Œ± ‚Üí ‚Ñù‚â•0` with notation `‚à•x‚à•‚Çä`. -/
@[notation_class]
class HasNnnorm (E : Type _) where
  nnnorm : E ‚Üí ‚Ñù‚â•0
#align has_nnnorm HasNnnorm

export HasNorm (norm)

export HasNnnorm (nnnorm)

-- mathport name: ¬´expr‚à• ‚à•¬ª
notation "‚à•" e "‚à•" => norm e

-- mathport name: ¬´expr‚à• ‚à•‚Çä¬ª
notation "‚à•" e "‚à•‚Çä" => nnnorm e

/-- A seminormed group is an additive group endowed with a norm for which `dist x y = ‚à•x - y‚à•`
defines a pseudometric space structure. -/
class SeminormedAddGroup (E : Type _) extends HasNorm E, AddGroup E, PseudoMetricSpace E where
  dist := fun x y => ‚à•x - y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x - y‚à• := by obviously
#align seminormed_add_group SeminormedAddGroup

/-- A seminormed group is a group endowed with a norm for which `dist x y = ‚à•x / y‚à•` defines a
pseudometric space structure. -/
@[to_additive]
class SeminormedGroup (E : Type _) extends HasNorm E, Group E, PseudoMetricSpace E where
  dist := fun x y => ‚à•x / y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x / y‚à• := by obviously
#align seminormed_group SeminormedGroup

/-- A normed group is an additive group endowed with a norm for which `dist x y = ‚à•x - y‚à•` defines a
metric space structure. -/
class NormedAddGroup (E : Type _) extends HasNorm E, AddGroup E, MetricSpace E where
  dist := fun x y => ‚à•x - y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x - y‚à• := by obviously
#align normed_add_group NormedAddGroup

/-- A normed group is a group endowed with a norm for which `dist x y = ‚à•x / y‚à•` defines a metric
space structure. -/
@[to_additive]
class NormedGroup (E : Type _) extends HasNorm E, Group E, MetricSpace E where
  dist := fun x y => ‚à•x / y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x / y‚à• := by obviously
#align normed_group NormedGroup

/-- A seminormed group is an additive group endowed with a norm for which `dist x y = ‚à•x - y‚à•`
defines a pseudometric space structure. -/
class SeminormedAddCommGroup (E : Type _) extends HasNorm E, AddCommGroup E, PseudoMetricSpace E where
  dist := fun x y => ‚à•x - y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x - y‚à• := by obviously
#align seminormed_add_comm_group SeminormedAddCommGroup

/-- A seminormed group is a group endowed with a norm for which `dist x y = ‚à•x / y‚à•`
defines a pseudometric space structure. -/
@[to_additive]
class SeminormedCommGroup (E : Type _) extends HasNorm E, CommGroup E, PseudoMetricSpace E where
  dist := fun x y => ‚à•x / y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x / y‚à• := by obviously
#align seminormed_comm_group SeminormedCommGroup

/-- A normed group is an additive group endowed with a norm for which `dist x y = ‚à•x - y‚à•` defines a
metric space structure. -/
class NormedAddCommGroup (E : Type _) extends HasNorm E, AddCommGroup E, MetricSpace E where
  dist := fun x y => ‚à•x - y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x - y‚à• := by obviously
#align normed_add_comm_group NormedAddCommGroup

/-- A normed group is a group endowed with a norm for which `dist x y = ‚à•x / y‚à•` defines a metric
space structure. -/
@[to_additive]
class NormedCommGroup (E : Type _) extends HasNorm E, CommGroup E, MetricSpace E where
  dist := fun x y => ‚à•x / y‚à•
  dist_eq : ‚àÄ x y, dist x y = ‚à•x / y‚à• := by obviously
#align normed_comm_group NormedCommGroup

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) NormedGroup.toSeminormedGroup [NormedGroup E] : SeminormedGroup E :=
  { ‚ÄπNormedGroup E‚Ä∫ with }
#align normed_group.to_seminormed_group NormedGroup.toSeminormedGroup

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) NormedCommGroup.toSeminormedCommGroup [NormedCommGroup E] : SeminormedCommGroup E :=
  { ‚ÄπNormedCommGroup E‚Ä∫ with }
#align normed_comm_group.to_seminormed_comm_group NormedCommGroup.toSeminormedCommGroup

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) SeminormedCommGroup.toSeminormedGroup [SeminormedCommGroup E] : SeminormedGroup E :=
  { ‚ÄπSeminormedCommGroup E‚Ä∫ with }
#align seminormed_comm_group.to_seminormed_group SeminormedCommGroup.toSeminormedGroup

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) NormedCommGroup.toNormedGroup [NormedCommGroup E] : NormedGroup E :=
  { ‚ÄπNormedCommGroup E‚Ä∫ with }
#align normed_comm_group.to_normed_group NormedCommGroup.toNormedGroup

-- See note [reducible non-instances]
/-- Construct a `normed_group` from a `seminormed_group` satisfying `‚àÄ x, ‚à•x‚à• = 0 ‚Üí x = 1`. This
avoids having to go back to the `(pseudo_)metric_space` level when declaring a `normed_group`
instance as a special case of a more general `seminormed_group` instance. -/
@[to_additive
      "Construct a `normed_add_group` from a `seminormed_add_group` satisfying\n`‚àÄ x, ‚à•x‚à• = 0 ‚Üí x = 0`. This avoids having to go back to the `(pseudo_)metric_space` level when\ndeclaring a `normed_add_group` instance as a special case of a more general `seminormed_add_group`\ninstance.",
  reducible]
def NormedGroup.ofSeparation [SeminormedGroup E] (h : ‚àÄ x : E, ‚à•x‚à• = 0 ‚Üí x = 1) : NormedGroup E :=
  { ‚ÄπSeminormedGroup E‚Ä∫ with
    toMetricSpace :=
      { eq_of_dist_eq_zero := fun x y hxy => div_eq_one.1 $ h _ $ by rwa [‚Üê ‚ÄπSeminormedGroup E‚Ä∫.dist_eq] } }
#align normed_group.of_separation NormedGroup.ofSeparation

-- See note [reducible non-instances]
/-- Construct a `normed_comm_group` from a `seminormed_comm_group` satisfying
`‚àÄ x, ‚à•x‚à• = 0 ‚Üí x = 1`. This avoids having to go back to the `(pseudo_)metric_space` level when
declaring a `normed_comm_group` instance as a special case of a more general `seminormed_comm_group`
instance. -/
@[to_additive
      "Construct a `normed_add_comm_group` from a `seminormed_add_comm_group` satisfying\n`‚àÄ x, ‚à•x‚à• = 0 ‚Üí x = 0`. This avoids having to go back to the `(pseudo_)metric_space` level when\ndeclaring a `normed_add_comm_group` instance as a special case of a more general\n`seminormed_add_comm_group` instance.",
  reducible]
def NormedCommGroup.ofSeparation [SeminormedCommGroup E] (h : ‚àÄ x : E, ‚à•x‚à• = 0 ‚Üí x = 1) : NormedCommGroup E :=
  { ‚ÄπSeminormedCommGroup E‚Ä∫, NormedGroup.ofSeparation h with }
#align normed_comm_group.of_separation NormedCommGroup.ofSeparation

/-- Construct a seminormed group from a multiplication-invariant distance. -/
@[to_additive "Construct a seminormed group from a translation-invariant distance."]
def SeminormedGroup.ofMulDist [HasNorm E] [Group E] [PseudoMetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) :
    SeminormedGroup E where dist_eq x y := by
    rw [h‚ÇÅ]
    apply le_antisymm
    ¬∑ simpa only [div_eq_mul_inv, ‚Üê mul_right_inv y] using h‚ÇÇ _ _ _
      
    ¬∑ simpa only [div_mul_cancel', one_mul] using h‚ÇÇ (x / y) 1 y
      
#align seminormed_group.of_mul_dist SeminormedGroup.ofMulDist

/-- Construct a seminormed group from a multiplication-invariant pseudodistance. -/
@[to_additive "Construct a seminormed group from a translation-invariant pseudodistance."]
def SeminormedGroup.ofMulDist' [HasNorm E] [Group E] [PseudoMetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) :
    SeminormedGroup E where dist_eq x y := by
    rw [h‚ÇÅ]
    apply le_antisymm
    ¬∑ simpa only [div_mul_cancel', one_mul] using h‚ÇÇ (x / y) 1 y
      
    ¬∑ simpa only [div_eq_mul_inv, ‚Üê mul_right_inv y] using h‚ÇÇ _ _ _
      
#align seminormed_group.of_mul_dist' SeminormedGroup.ofMulDist'

/-- Construct a seminormed group from a multiplication-invariant pseudodistance. -/
@[to_additive "Construct a seminormed group from a translation-invariant pseudodistance."]
def SeminormedCommGroup.ofMulDist [HasNorm E] [CommGroup E] [PseudoMetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) : SeminormedCommGroup E :=
  { SeminormedGroup.ofMulDist h‚ÇÅ h‚ÇÇ with }
#align seminormed_comm_group.of_mul_dist SeminormedCommGroup.ofMulDist

/-- Construct a seminormed group from a multiplication-invariant pseudodistance. -/
@[to_additive "Construct a seminormed group from a translation-invariant pseudodistance."]
def SeminormedCommGroup.ofMulDist' [HasNorm E] [CommGroup E] [PseudoMetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) : SeminormedCommGroup E :=
  { SeminormedGroup.ofMulDist' h‚ÇÅ h‚ÇÇ with }
#align seminormed_comm_group.of_mul_dist' SeminormedCommGroup.ofMulDist'

/-- Construct a normed group from a multiplication-invariant distance. -/
@[to_additive "Construct a normed group from a translation-invariant distance."]
def NormedGroup.ofMulDist [HasNorm E] [Group E] [MetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) : NormedGroup E :=
  { SeminormedGroup.ofMulDist h‚ÇÅ h‚ÇÇ with }
#align normed_group.of_mul_dist NormedGroup.ofMulDist

/-- Construct a normed group from a multiplication-invariant pseudodistance. -/
@[to_additive "Construct a normed group from a translation-invariant pseudodistance."]
def NormedGroup.ofMulDist' [HasNorm E] [Group E] [MetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) : NormedGroup E :=
  { SeminormedGroup.ofMulDist' h‚ÇÅ h‚ÇÇ with }
#align normed_group.of_mul_dist' NormedGroup.ofMulDist'

/-- Construct a normed group from a multiplication-invariant pseudodistance. -/
@[to_additive "Construct a normed group from a translation-invariant pseudodistance."]
def NormedCommGroup.ofMulDist [HasNorm E] [CommGroup E] [MetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) : NormedCommGroup E :=
  { NormedGroup.ofMulDist h‚ÇÅ h‚ÇÇ with }
#align normed_comm_group.of_mul_dist NormedCommGroup.ofMulDist

/-- Construct a normed group from a multiplication-invariant pseudodistance. -/
@[to_additive "Construct a normed group from a translation-invariant pseudodistance."]
def NormedCommGroup.ofMulDist' [HasNorm E] [CommGroup E] [MetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚à•x‚à• = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) : NormedCommGroup E :=
  { NormedGroup.ofMulDist' h‚ÇÅ h‚ÇÇ with }
#align normed_comm_group.of_mul_dist' NormedCommGroup.ofMulDist'

/-- Construct a seminormed group from a seminorm, i.e., registering the pseudodistance and the
pseudometric space structure from the seminorm properties. Note that in most cases this instance
creates bad definitional equalities (e.g., it does not take into account a possibly existing
`uniform_space` instance on `E`). -/
@[to_additive
      "Construct a seminormed group from a seminorm, i.e., registering the pseudodistance*\nand the pseudometric space structure from the seminorm properties. Note that in most cases this\ninstance creates bad definitional equalities (e.g., it does not take into account a possibly\nexisting `uniform_space` instance on `E`)."]
def GroupSeminorm.toSeminormedGroup [Group E] (f : GroupSeminorm E) : SeminormedGroup E where
  dist x y := f (x / y)
  norm := f
  dist_eq x y := rfl
  dist_self x := by simp only [div_self', map_one_eq_zero]
  dist_triangle := le_map_div_add_map_div f
  dist_comm := map_div_rev f
#align group_seminorm.to_seminormed_group GroupSeminorm.toSeminormedGroup

/-- Construct a seminormed group from a seminorm, i.e., registering the pseudodistance and the
pseudometric space structure from the seminorm properties. Note that in most cases this instance
creates bad definitional equalities (e.g., it does not take into account a possibly existing
`uniform_space` instance on `E`). -/
@[to_additive
      "Construct a seminormed group from a seminorm, i.e., registering the pseudodistance*\nand the pseudometric space structure from the seminorm properties. Note that in most cases this\ninstance creates bad definitional equalities (e.g., it does not take into account a possibly\nexisting `uniform_space` instance on `E`)."]
def GroupSeminorm.toSeminormedCommGroup [CommGroup E] (f : GroupSeminorm E) : SeminormedCommGroup E :=
  { f.toSeminormedGroup with }
#align group_seminorm.to_seminormed_comm_group GroupSeminorm.toSeminormedCommGroup

/-- Construct a normed group from a norm, i.e., registering the distance and the metric space
structure from the norm properties. Note that in most cases this instance creates bad definitional
equalities (e.g., it does not take into account a possibly existing `uniform_space` instance on
`E`). -/
@[to_additive
      "Construct a normed group from a norm, i.e., registering the distance and the metric\nspace structure from the norm properties. Note that in most cases this instance creates bad\ndefinitional equalities (e.g., it does not take into account a possibly existing `uniform_space`\ninstance on `E`)."]
def GroupNorm.toNormedGroup [Group E] (f : GroupNorm E) : NormedGroup E :=
  { f.toGroupSeminorm.toSeminormedGroup with
    eq_of_dist_eq_zero := fun x y h => div_eq_one.1 $ eq_one_of_map_eq_zero f h }
#align group_norm.to_normed_group GroupNorm.toNormedGroup

/-- Construct a normed group from a norm, i.e., registering the distance and the metric space
structure from the norm properties. Note that in most cases this instance creates bad definitional
equalities (e.g., it does not take into account a possibly existing `uniform_space` instance on
`E`). -/
@[to_additive
      "Construct a normed group from a norm, i.e., registering the distance and the metric\nspace structure from the norm properties. Note that in most cases this instance creates bad\ndefinitional equalities (e.g., it does not take into account a possibly existing `uniform_space`\ninstance on `E`)."]
def GroupNorm.toNormedCommGroup [CommGroup E] (f : GroupNorm E) : NormedCommGroup E :=
  { f.toNormedGroup with }
#align group_norm.to_normed_comm_group GroupNorm.toNormedCommGroup

instance : NormedAddCommGroup PUnit where
  norm := Function.const _ 0
  dist_eq _ _ := rfl

@[simp]
theorem PUnit.norm_eq_zero (r : PUnit) : ‚à•r‚à• = 0 :=
  rfl
#align punit.norm_eq_zero PUnit.norm_eq_zero

section SeminormedGroup

variable [SeminormedGroup E] [SeminormedGroup F] [SeminormedGroup G] {s : Set E} {a a‚ÇÅ a‚ÇÇ b b‚ÇÅ b‚ÇÇ : E} {r r‚ÇÅ r‚ÇÇ : ‚Ñù}

@[to_additive]
theorem dist_eq_norm_div (a b : E) : dist a b = ‚à•a / b‚à• :=
  SeminormedGroup.dist_eq _ _
#align dist_eq_norm_div dist_eq_norm_div

@[to_additive]
theorem dist_eq_norm_div' (a b : E) : dist a b = ‚à•b / a‚à• := by rw [dist_comm, dist_eq_norm_div]
#align dist_eq_norm_div' dist_eq_norm_div'

alias dist_eq_norm_sub ‚Üê dist_eq_norm

alias dist_eq_norm_sub' ‚Üê dist_eq_norm'

@[simp, to_additive]
theorem dist_one_right (a : E) : dist a 1 = ‚à•a‚à• := by rw [dist_eq_norm_div, div_one]
#align dist_one_right dist_one_right

@[simp, to_additive]
theorem dist_one_left : dist (1 : E) = norm :=
  funext $ fun a => by rw [dist_comm, dist_one_right]
#align dist_one_left dist_one_left

@[to_additive]
theorem Isometry.norm_map_of_map_one {f : E ‚Üí F} (hi : Isometry f) (h‚ÇÅ : f 1 = 1) (x : E) : ‚à•f x‚à• = ‚à•x‚à• := by
  rw [‚Üê dist_one_right, ‚Üê h‚ÇÅ, hi.dist_eq, dist_one_right]
#align isometry.norm_map_of_map_one Isometry.norm_map_of_map_one

@[to_additive tendsto_norm_cocompact_at_top]
theorem tendsto_norm_cocompact_at_top' [ProperSpace E] : Tendsto norm (cocompact E) atTop := by
  simpa only [dist_one_right] using tendsto_dist_right_cocompact_at_top (1 : E)
#align tendsto_norm_cocompact_at_top' tendsto_norm_cocompact_at_top'

@[to_additive]
theorem norm_div_rev (a b : E) : ‚à•a / b‚à• = ‚à•b / a‚à• := by simpa only [dist_eq_norm_div] using dist_comm a b
#align norm_div_rev norm_div_rev

@[simp, to_additive norm_neg]
theorem norm_inv' (a : E) : ‚à•a‚Åª¬π‚à• = ‚à•a‚à• := by simpa using norm_div_rev 1 a
#align norm_inv' norm_inv'

@[simp, to_additive]
theorem dist_mul_right (a‚ÇÅ a‚ÇÇ b : E) : dist (a‚ÇÅ * b) (a‚ÇÇ * b) = dist a‚ÇÅ a‚ÇÇ := by simp [dist_eq_norm_div]
#align dist_mul_right dist_mul_right

@[simp, to_additive]
theorem dist_mul_self_right (a b : E) : dist b (a * b) = ‚à•a‚à• := by rw [‚Üê dist_one_left, ‚Üê dist_mul_right 1 a b, one_mul]
#align dist_mul_self_right dist_mul_self_right

@[simp, to_additive]
theorem dist_mul_self_left (a b : E) : dist (a * b) b = ‚à•a‚à• := by rw [dist_comm, dist_mul_self_right]
#align dist_mul_self_left dist_mul_self_left

@[to_additive]
theorem dist_div_right (a‚ÇÅ a‚ÇÇ b : E) : dist (a‚ÇÅ / b) (a‚ÇÇ / b) = dist a‚ÇÅ a‚ÇÇ := by
  simpa only [div_eq_mul_inv] using dist_mul_right _ _ _
#align dist_div_right dist_div_right

@[simp, to_additive]
theorem dist_div_eq_dist_mul_left (a b c : E) : dist (a / b) c = dist a (c * b) := by
  rw [‚Üê dist_mul_right _ _ b, div_mul_cancel']
#align dist_div_eq_dist_mul_left dist_div_eq_dist_mul_left

@[simp, to_additive]
theorem dist_div_eq_dist_mul_right (a b c : E) : dist a (b / c) = dist (a * c) b := by
  rw [‚Üê dist_mul_right _ _ c, div_mul_cancel']
#align dist_div_eq_dist_mul_right dist_div_eq_dist_mul_right

/-- In a (semi)normed group, inversion `x ‚Ü¶ x‚Åª¬π` tends to infinity at infinity. TODO: use
`bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`. -/
@[to_additive
      "In a (semi)normed group, negation `x ‚Ü¶ -x` tends to infinity at infinity. TODO: use\n`bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`."]
theorem Filter.tendsto_inv_cobounded : Tendsto (Inv.inv : E ‚Üí E) (comap norm atTop) (comap norm atTop) := by
  simpa only [norm_inv', tendsto_comap_iff, (¬∑ ‚àò ¬∑)] using tendsto_comap
#align filter.tendsto_inv_cobounded Filter.tendsto_inv_cobounded

/-- **Triangle inequality** for the norm. -/
@[to_additive norm_add_le "**Triangle inequality** for the norm."]
theorem norm_mul_le' (a b : E) : ‚à•a * b‚à• ‚â§ ‚à•a‚à• + ‚à•b‚à• := by simpa [dist_eq_norm_div] using dist_triangle a 1 b‚Åª¬π
#align norm_mul_le' norm_mul_le'

@[to_additive]
theorem norm_mul_le_of_le (h‚ÇÅ : ‚à•a‚ÇÅ‚à• ‚â§ r‚ÇÅ) (h‚ÇÇ : ‚à•a‚ÇÇ‚à• ‚â§ r‚ÇÇ) : ‚à•a‚ÇÅ * a‚ÇÇ‚à• ‚â§ r‚ÇÅ + r‚ÇÇ :=
  (norm_mul_le' a‚ÇÅ a‚ÇÇ).trans $ add_le_add h‚ÇÅ h‚ÇÇ
#align norm_mul_le_of_le norm_mul_le_of_le

@[to_additive norm_add‚ÇÉ_le]
theorem norm_mul‚ÇÉ_le (a b c : E) : ‚à•a * b * c‚à• ‚â§ ‚à•a‚à• + ‚à•b‚à• + ‚à•c‚à• :=
  norm_mul_le_of_le (norm_mul_le' _ _) le_rfl
#align norm_mul‚ÇÉ_le norm_mul‚ÇÉ_le

@[simp, to_additive norm_nonneg]
theorem norm_nonneg' (a : E) : 0 ‚â§ ‚à•a‚à• := by
  rw [‚Üê dist_one_right]
  exact dist_nonneg
#align norm_nonneg' norm_nonneg'

section

open Tactic Tactic.Positivity

/-- Extension for the `positivity` tactic: norms are nonnegative. -/
@[positivity]
unsafe def _root_.tactic.positivity_norm : expr ‚Üí tactic strictness
  | q(‚à•$(a)‚à•) => nonnegative <$> mk_app `` norm_nonneg [a] <|> nonnegative <$> mk_app `` norm_nonneg' [a]
  | _ => failed
#align _root_.tactic.positivity_norm _root_.tactic.positivity_norm

end

@[simp, to_additive norm_zero]
theorem norm_one' : ‚à•(1 : E)‚à• = 0 := by rw [‚Üê dist_one_right, dist_self]
#align norm_one' norm_one'

@[to_additive]
theorem ne_one_of_norm_ne_zero : ‚à•a‚à• ‚â† 0 ‚Üí a ‚â† 1 :=
  mt $ by
    rintro rfl
    exact norm_one'
#align ne_one_of_norm_ne_zero ne_one_of_norm_ne_zero

@[nontriviality, to_additive norm_of_subsingleton]
theorem norm_of_subsingleton' [Subsingleton E] (a : E) : ‚à•a‚à• = 0 := by rw [Subsingleton.elim a 1, norm_one']
#align norm_of_subsingleton' norm_of_subsingleton'

attribute [nontriviality] norm_of_subsingleton

@[to_additive zero_lt_one_add_norm_sq]
theorem zero_lt_one_add_norm_sq' (x : E) : 0 < 1 + ‚à•x‚à• ^ 2 := by positivity
#align zero_lt_one_add_norm_sq' zero_lt_one_add_norm_sq'

@[to_additive]
theorem norm_div_le (a b : E) : ‚à•a / b‚à• ‚â§ ‚à•a‚à• + ‚à•b‚à• := by simpa [dist_eq_norm_div] using dist_triangle a 1 b
#align norm_div_le norm_div_le

@[to_additive]
theorem norm_div_le_of_le {r‚ÇÅ r‚ÇÇ : ‚Ñù} (H‚ÇÅ : ‚à•a‚ÇÅ‚à• ‚â§ r‚ÇÅ) (H‚ÇÇ : ‚à•a‚ÇÇ‚à• ‚â§ r‚ÇÇ) : ‚à•a‚ÇÅ / a‚ÇÇ‚à• ‚â§ r‚ÇÅ + r‚ÇÇ :=
  (norm_div_le a‚ÇÅ a‚ÇÇ).trans $ add_le_add H‚ÇÅ H‚ÇÇ
#align norm_div_le_of_le norm_div_le_of_le

@[to_additive]
theorem dist_le_norm_mul_norm (a b : E) : dist a b ‚â§ ‚à•a‚à• + ‚à•b‚à• := by
  rw [dist_eq_norm_div]
  apply norm_div_le
#align dist_le_norm_mul_norm dist_le_norm_mul_norm

@[to_additive abs_norm_sub_norm_le]
theorem abs_norm_sub_norm_le' (a b : E) : |‚à•a‚à• - ‚à•b‚à•| ‚â§ ‚à•a / b‚à• := by
  simpa [dist_eq_norm_div] using abs_dist_sub_le a b 1
#align abs_norm_sub_norm_le' abs_norm_sub_norm_le'

@[to_additive norm_sub_norm_le]
theorem norm_sub_norm_le' (a b : E) : ‚à•a‚à• - ‚à•b‚à• ‚â§ ‚à•a / b‚à• :=
  (le_abs_self _).trans (abs_norm_sub_norm_le' a b)
#align norm_sub_norm_le' norm_sub_norm_le'

@[to_additive dist_norm_norm_le]
theorem dist_norm_norm_le' (a b : E) : dist ‚à•a‚à• ‚à•b‚à• ‚â§ ‚à•a / b‚à• :=
  abs_norm_sub_norm_le' a b
#align dist_norm_norm_le' dist_norm_norm_le'

@[to_additive]
theorem norm_le_norm_add_norm_div' (u v : E) : ‚à•u‚à• ‚â§ ‚à•v‚à• + ‚à•u / v‚à• := by
  rw [add_comm]
  refine' (norm_mul_le' _ _).trans_eq' _
  rw [div_mul_cancel']
#align norm_le_norm_add_norm_div' norm_le_norm_add_norm_div'

@[to_additive]
theorem norm_le_norm_add_norm_div (u v : E) : ‚à•v‚à• ‚â§ ‚à•u‚à• + ‚à•u / v‚à• := by
  rw [norm_div_rev]
  exact norm_le_norm_add_norm_div' v u
#align norm_le_norm_add_norm_div norm_le_norm_add_norm_div

alias norm_le_norm_add_norm_sub' ‚Üê norm_le_insert'

alias norm_le_norm_add_norm_sub ‚Üê norm_le_insert

@[to_additive]
theorem norm_le_mul_norm_add (u v : E) : ‚à•u‚à• ‚â§ ‚à•u * v‚à• + ‚à•v‚à• :=
  calc
    ‚à•u‚à• = ‚à•u * v / v‚à• := by rw [mul_div_cancel'']
    _ ‚â§ ‚à•u * v‚à• + ‚à•v‚à• := norm_div_le _ _
    
#align norm_le_mul_norm_add norm_le_mul_norm_add

@[to_additive ball_eq]
theorem ball_eq' (y : E) (Œµ : ‚Ñù) : ball y Œµ = { x | ‚à•x / y‚à• < Œµ } :=
  Set.ext $ fun a => by simp [dist_eq_norm_div]
#align ball_eq' ball_eq'

@[to_additive]
theorem ball_one_eq (r : ‚Ñù) : ball (1 : E) r = { x | ‚à•x‚à• < r } :=
  Set.ext $ fun a => by simp
#align ball_one_eq ball_one_eq

@[to_additive mem_ball_iff_norm]
theorem mem_ball_iff_norm'' : b ‚àà ball a r ‚Üî ‚à•b / a‚à• < r := by rw [mem_ball, dist_eq_norm_div]
#align mem_ball_iff_norm'' mem_ball_iff_norm''

@[to_additive mem_ball_iff_norm']
theorem mem_ball_iff_norm''' : b ‚àà ball a r ‚Üî ‚à•a / b‚à• < r := by rw [mem_ball', dist_eq_norm_div]
#align mem_ball_iff_norm''' mem_ball_iff_norm'''

@[simp, to_additive]
theorem mem_ball_one_iff : a ‚àà ball (1 : E) r ‚Üî ‚à•a‚à• < r := by rw [mem_ball, dist_one_right]
#align mem_ball_one_iff mem_ball_one_iff

@[to_additive mem_closed_ball_iff_norm]
theorem mem_closed_ball_iff_norm'' : b ‚àà closedBall a r ‚Üî ‚à•b / a‚à• ‚â§ r := by rw [mem_closed_ball, dist_eq_norm_div]
#align mem_closed_ball_iff_norm'' mem_closed_ball_iff_norm''

@[simp, to_additive]
theorem mem_closed_ball_one_iff : a ‚àà closedBall (1 : E) r ‚Üî ‚à•a‚à• ‚â§ r := by rw [mem_closed_ball, dist_one_right]
#align mem_closed_ball_one_iff mem_closed_ball_one_iff

@[to_additive mem_closed_ball_iff_norm']
theorem mem_closed_ball_iff_norm''' : b ‚àà closedBall a r ‚Üî ‚à•a / b‚à• ‚â§ r := by rw [mem_closed_ball', dist_eq_norm_div]
#align mem_closed_ball_iff_norm''' mem_closed_ball_iff_norm'''

@[to_additive norm_le_of_mem_closed_ball]
theorem norm_le_of_mem_closed_ball' (h : b ‚àà closedBall a r) : ‚à•b‚à• ‚â§ ‚à•a‚à• + r :=
  (norm_le_norm_add_norm_div' _ _).trans $ add_le_add_left (by rwa [‚Üê dist_eq_norm_div]) _
#align norm_le_of_mem_closed_ball' norm_le_of_mem_closed_ball'

@[to_additive norm_le_norm_add_const_of_dist_le]
theorem norm_le_norm_add_const_of_dist_le' : dist a b ‚â§ r ‚Üí ‚à•a‚à• ‚â§ ‚à•b‚à• + r :=
  norm_le_of_mem_closed_ball'
#align norm_le_norm_add_const_of_dist_le' norm_le_norm_add_const_of_dist_le'

@[to_additive norm_lt_of_mem_ball]
theorem norm_lt_of_mem_ball' (h : b ‚àà ball a r) : ‚à•b‚à• < ‚à•a‚à• + r :=
  (norm_le_norm_add_norm_div' _ _).trans_lt $ add_lt_add_left (by rwa [‚Üê dist_eq_norm_div]) _
#align norm_lt_of_mem_ball' norm_lt_of_mem_ball'

@[to_additive]
theorem norm_div_sub_norm_div_le_norm_div (u v w : E) : ‚à•u / w‚à• - ‚à•v / w‚à• ‚â§ ‚à•u / v‚à• := by
  simpa only [div_div_div_cancel_right'] using norm_sub_norm_le' (u / w) (v / w)
#align norm_div_sub_norm_div_le_norm_div norm_div_sub_norm_div_le_norm_div

@[to_additive bounded_iff_forall_norm_le]
theorem bounded_iff_forall_norm_le' : Bounded s ‚Üî ‚àÉ C, ‚àÄ x ‚àà s, ‚à•x‚à• ‚â§ C := by
  simpa only [Set.subset_def, mem_closed_ball_one_iff] using bounded_iff_subset_ball (1 : E)
#align bounded_iff_forall_norm_le' bounded_iff_forall_norm_le'

alias bounded_iff_forall_norm_le' ‚Üî Metric.Bounded.exists_norm_le' _

alias bounded_iff_forall_norm_le ‚Üî Metric.Bounded.exists_norm_le _

attribute [to_additive Metric.Bounded.exists_norm_le] Metric.Bounded.exists_norm_le'

@[to_additive Metric.Bounded.exists_pos_norm_le]
theorem Metric.Bounded.exists_pos_norm_le' (hs : Metric.Bounded s) : ‚àÉ R > 0, ‚àÄ x ‚àà s, ‚à•x‚à• ‚â§ R :=
  let ‚ü®R‚ÇÄ, hR‚ÇÄ‚ü© := hs.exists_norm_le'
  ‚ü®max R‚ÇÄ 1, by positivity, fun x hx => (hR‚ÇÄ x hx).trans $ le_max_left _ _‚ü©
#align metric.bounded.exists_pos_norm_le' Metric.Bounded.exists_pos_norm_le'

@[simp, to_additive mem_sphere_iff_norm]
theorem mem_sphere_iff_norm' : b ‚àà sphere a r ‚Üî ‚à•b / a‚à• = r := by simp [dist_eq_norm_div]
#align mem_sphere_iff_norm' mem_sphere_iff_norm'

@[simp, to_additive]
theorem mem_sphere_one_iff_norm : a ‚àà sphere (1 : E) r ‚Üî ‚à•a‚à• = r := by simp [dist_eq_norm_div]
#align mem_sphere_one_iff_norm mem_sphere_one_iff_norm

@[simp, to_additive norm_eq_of_mem_sphere]
theorem norm_eq_of_mem_sphere' (x : sphere (1 : E) r) : ‚à•(x : E)‚à• = r :=
  mem_sphere_one_iff_norm.mp x.2
#align norm_eq_of_mem_sphere' norm_eq_of_mem_sphere'

@[to_additive]
theorem ne_one_of_mem_sphere (hr : r ‚â† 0) (x : sphere (1 : E) r) : (x : E) ‚â† 1 :=
  ne_one_of_norm_ne_zero $ by rwa [norm_eq_of_mem_sphere' x]
#align ne_one_of_mem_sphere ne_one_of_mem_sphere

@[to_additive ne_zero_of_mem_unit_sphere]
theorem ne_one_of_mem_unit_sphere (x : sphere (1 : E) 1) : (x : E) ‚â† 1 :=
  ne_one_of_mem_sphere one_ne_zero _
#align ne_one_of_mem_unit_sphere ne_one_of_mem_unit_sphere

variable (E)

/-- The norm of a seminormed group as a group seminorm. -/
@[to_additive "The norm of a seminormed group as an additive group seminorm."]
def normGroupSeminorm : GroupSeminorm E :=
  ‚ü®norm, norm_one', norm_mul_le', norm_inv'‚ü©
#align norm_group_seminorm normGroupSeminorm

@[simp, to_additive]
theorem coe_norm_group_seminorm : ‚áë(normGroupSeminorm E) = norm :=
  rfl
#align coe_norm_group_seminorm coe_norm_group_seminorm

variable {E}

namespace Isometric

-- TODO This material is superseded by similar constructions such as
-- `affine_isometry_equiv.const_vadd`; deduplicate
/-- Multiplication `y ‚Ü¶ y * x` as an `isometry`. -/
@[to_additive "Addition `y ‚Ü¶ y + x` as an `isometry`"]
protected def mulRight (x : E) : E ‚âÉ·µ¢ E :=
  { Equiv.mulRight x with isometryToFun := Isometry.ofDistEq $ fun y z => dist_mul_right _ _ _ }
#align isometric.mul_right Isometric.mulRight

@[simp, to_additive]
theorem mul_right_to_equiv (x : E) : (Isometric.mulRight x).toEquiv = Equiv.mulRight x :=
  rfl
#align isometric.mul_right_to_equiv Isometric.mul_right_to_equiv

@[simp, to_additive]
theorem coe_mul_right (x : E) : (Isometric.mulRight x : E ‚Üí E) = fun y => y * x :=
  rfl
#align isometric.coe_mul_right Isometric.coe_mul_right

@[to_additive]
theorem mul_right_apply (x y : E) : (Isometric.mulRight x : E ‚Üí E) y = y * x :=
  rfl
#align isometric.mul_right_apply Isometric.mul_right_apply

@[simp, to_additive]
theorem mul_right_symm (x : E) : (Isometric.mulRight x).symm = Isometric.mulRight x‚Åª¬π :=
  ext $ fun y => rfl
#align isometric.mul_right_symm Isometric.mul_right_symm

end Isometric

@[to_additive]
theorem NormedCommGroup.tendsto_nhds_one {f : Œ± ‚Üí E} {l : Filter Œ±} :
    Tendsto f l (ùìù 1) ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† x in l, ‚à•f x‚à• < Œµ :=
  Metric.tendsto_nhds.trans $ by simp only [dist_one_right]
#align normed_comm_group.tendsto_nhds_one NormedCommGroup.tendsto_nhds_one

@[to_additive]
theorem NormedCommGroup.tendsto_nhds_nhds {f : E ‚Üí F} {x : E} {y : F} :
    Tendsto f (ùìù x) (ùìù y) ‚Üî ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ x', ‚à•x' / x‚à• < Œ¥ ‚Üí ‚à•f x' / y‚à• < Œµ := by
  simp_rw [Metric.tendsto_nhds_nhds, dist_eq_norm_div]
#align normed_comm_group.tendsto_nhds_nhds NormedCommGroup.tendsto_nhds_nhds

@[to_additive]
theorem NormedCommGroup.cauchy_seq_iff [Nonempty Œ±] [SemilatticeSup Œ±] {u : Œ± ‚Üí E} :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ m, N ‚â§ m ‚Üí ‚àÄ n, N ‚â§ n ‚Üí ‚à•u m / u n‚à• < Œµ := by
  simp [Metric.cauchy_seq_iff, dist_eq_norm_div]
#align normed_comm_group.cauchy_seq_iff NormedCommGroup.cauchy_seq_iff

@[to_additive]
theorem NormedCommGroup.nhds_basis_norm_lt (x : E) : (ùìù x).HasBasis (fun Œµ : ‚Ñù => 0 < Œµ) fun Œµ => { y | ‚à•y / x‚à• < Œµ } :=
  by
  simp_rw [‚Üê ball_eq']
  exact Metric.nhds_basis_ball
#align normed_comm_group.nhds_basis_norm_lt NormedCommGroup.nhds_basis_norm_lt

@[to_additive]
theorem NormedCommGroup.nhds_one_basis_norm_lt : (ùìù (1 : E)).HasBasis (fun Œµ : ‚Ñù => 0 < Œµ) fun Œµ => { y | ‚à•y‚à• < Œµ } :=
  by
  convert NormedCommGroup.nhds_basis_norm_lt (1 : E)
  simp
#align normed_comm_group.nhds_one_basis_norm_lt NormedCommGroup.nhds_one_basis_norm_lt

@[to_additive]
theorem NormedCommGroup.uniformity_basis_dist :
    (ùì§ E).HasBasis (fun Œµ : ‚Ñù => 0 < Œµ) fun Œµ => { p : E √ó E | ‚à•p.fst / p.snd‚à• < Œµ } := by
  convert Metric.uniformity_basis_dist
  simp [dist_eq_norm_div]
#align normed_comm_group.uniformity_basis_dist NormedCommGroup.uniformity_basis_dist

open Finset

/-- A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C` such that
for all `x`, one has `‚à•f x‚à• ‚â§ C * ‚à•x‚à•`. The analogous condition for a linear map of
(semi)normed spaces is in `normed_space.operator_norm`. -/
@[to_additive
      "A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C`\nsuch that for all `x`, one has `‚à•f x‚à• ‚â§ C * ‚à•x‚à•`. The analogous condition for a linear map of\n(semi)normed spaces is in `normed_space.operator_norm`."]
theorem MonoidHomClass.lipschitzOfBound [MonoidHomClass ùìï E F] (f : ùìï) (C : ‚Ñù) (h : ‚àÄ x, ‚à•f x‚à• ‚â§ C * ‚à•x‚à•) :
    LipschitzWith (Real.toNnreal C) f :=
  LipschitzWith.ofDistLe' $ fun x y => by simpa only [dist_eq_norm_div, map_div] using h (x / y)
#align monoid_hom_class.lipschitz_of_bound MonoidHomClass.lipschitzOfBound

@[to_additive]
theorem lipschitz_on_with_iff_norm_div_le {f : E ‚Üí F} {C : ‚Ñù‚â•0} :
    LipschitzOnWith C f s ‚Üî ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà s ‚Üí ‚àÄ ‚¶Éy‚¶Ñ, y ‚àà s ‚Üí ‚à•f x / f y‚à• ‚â§ C * ‚à•x / y‚à• := by
  simp only [lipschitz_on_with_iff_dist_le_mul, dist_eq_norm_div]
#align lipschitz_on_with_iff_norm_div_le lipschitz_on_with_iff_norm_div_le

alias lipschitz_on_with_iff_norm_div_le ‚Üî LipschitzOnWith.norm_div_le _

attribute [to_additive] LipschitzOnWith.norm_div_le

@[to_additive]
theorem LipschitzOnWith.norm_div_le_of_le {f : E ‚Üí F} {C : ‚Ñù‚â•0} (h : LipschitzOnWith C f s) (ha : a ‚àà s) (hb : b ‚àà s)
    (hr : ‚à•a / b‚à• ‚â§ r) : ‚à•f a / f b‚à• ‚â§ C * r :=
  (h.norm_div_le ha hb).trans $ mul_le_mul_of_nonneg_left hr C.2
#align lipschitz_on_with.norm_div_le_of_le LipschitzOnWith.norm_div_le_of_le

@[to_additive]
theorem lipschitz_with_iff_norm_div_le {f : E ‚Üí F} {C : ‚Ñù‚â•0} : LipschitzWith C f ‚Üî ‚àÄ x y, ‚à•f x / f y‚à• ‚â§ C * ‚à•x / y‚à• :=
  by simp only [lipschitz_with_iff_dist_le_mul, dist_eq_norm_div]
#align lipschitz_with_iff_norm_div_le lipschitz_with_iff_norm_div_le

alias lipschitz_with_iff_norm_div_le ‚Üî LipschitzWith.norm_div_le _

attribute [to_additive] LipschitzWith.norm_div_le

@[to_additive]
theorem LipschitzWith.norm_div_le_of_le {f : E ‚Üí F} {C : ‚Ñù‚â•0} (h : LipschitzWith C f) (hr : ‚à•a / b‚à• ‚â§ r) :
    ‚à•f a / f b‚à• ‚â§ C * r :=
  (h.norm_div_le _ _).trans $ mul_le_mul_of_nonneg_left hr C.2
#align lipschitz_with.norm_div_le_of_le LipschitzWith.norm_div_le_of_le

/-- A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C` such that
for all `x`, one has `‚à•f x‚à• ‚â§ C * ‚à•x‚à•`. -/
@[to_additive
      "A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C`\nsuch that for all `x`, one has `‚à•f x‚à• ‚â§ C * ‚à•x‚à•`"]
theorem MonoidHomClass.continuous_of_bound [MonoidHomClass ùìï E F] (f : ùìï) (C : ‚Ñù) (h : ‚àÄ x, ‚à•f x‚à• ‚â§ C * ‚à•x‚à•) :
    Continuous f :=
  (MonoidHomClass.lipschitzOfBound f C h).Continuous
#align monoid_hom_class.continuous_of_bound MonoidHomClass.continuous_of_bound

@[to_additive]
theorem MonoidHomClass.uniform_continuous_of_bound [MonoidHomClass ùìï E F] (f : ùìï) (C : ‚Ñù) (h : ‚àÄ x, ‚à•f x‚à• ‚â§ C * ‚à•x‚à•) :
    UniformContinuous f :=
  (MonoidHomClass.lipschitzOfBound f C h).UniformContinuous
#align monoid_hom_class.uniform_continuous_of_bound MonoidHomClass.uniform_continuous_of_bound

@[to_additive IsCompact.exists_bound_of_continuous_on]
theorem IsCompact.exists_bound_of_continuous_on' [TopologicalSpace Œ±] {s : Set Œ±} (hs : IsCompact s) {f : Œ± ‚Üí E}
    (hf : ContinuousOn f s) : ‚àÉ C, ‚àÄ x ‚àà s, ‚à•f x‚à• ‚â§ C :=
  (bounded_iff_forall_norm_le'.1 (hs.image_of_continuous_on hf).Bounded).imp $ fun C hC x hx =>
    hC _ $ Set.mem_image_of_mem _ hx
#align is_compact.exists_bound_of_continuous_on' IsCompact.exists_bound_of_continuous_on'

@[to_additive]
theorem MonoidHomClass.isometry_iff_norm [MonoidHomClass ùìï E F] (f : ùìï) : Isometry f ‚Üî ‚àÄ x, ‚à•f x‚à• = ‚à•x‚à• := by
  simp only [isometry_iff_dist_eq, dist_eq_norm_div, ‚Üê map_div]
  refine' ‚ü®fun h x => _, fun h x y => h _‚ü©
  simpa using h x 1
#align monoid_hom_class.isometry_iff_norm MonoidHomClass.isometry_iff_norm

alias MonoidHomClass.isometry_iff_norm ‚Üî _ MonoidHomClass.isometryOfNorm

attribute [to_additive] MonoidHomClass.isometryOfNorm

section Nnnorm

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) SeminormedGroup.toHasNnnorm : HasNnnorm E :=
  ‚ü®fun a => ‚ü®‚à•a‚à•, norm_nonneg' a‚ü©‚ü©
#align seminormed_group.to_has_nnnorm SeminormedGroup.toHasNnnorm

@[simp, norm_cast, to_additive coe_nnnorm]
theorem coe_nnnorm' (a : E) : (‚à•a‚à•‚Çä : ‚Ñù) = ‚à•a‚à• :=
  rfl
#align coe_nnnorm' coe_nnnorm'

@[simp, to_additive coe_comp_nnnorm]
theorem coe_comp_nnnorm' : (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù) ‚àò (nnnorm : E ‚Üí ‚Ñù‚â•0) = norm :=
  rfl
#align coe_comp_nnnorm' coe_comp_nnnorm'

@[to_additive norm_to_nnreal]
theorem norm_to_nnreal' : ‚à•a‚à•.toNnreal = ‚à•a‚à•‚Çä :=
  @Real.to_nnreal_coe ‚à•a‚à•‚Çä
#align norm_to_nnreal' norm_to_nnreal'

@[to_additive]
theorem nndist_eq_nnnorm_div (a b : E) : nndist a b = ‚à•a / b‚à•‚Çä :=
  Nnreal.eq $ dist_eq_norm_div _ _
#align nndist_eq_nnnorm_div nndist_eq_nnnorm_div

alias nndist_eq_nnnorm_sub ‚Üê nndist_eq_nnnorm

@[simp, to_additive nnnorm_zero]
theorem nnnorm_one' : ‚à•(1 : E)‚à•‚Çä = 0 :=
  Nnreal.eq norm_one'
#align nnnorm_one' nnnorm_one'

@[to_additive]
theorem ne_one_of_nnnorm_ne_zero {a : E} : ‚à•a‚à•‚Çä ‚â† 0 ‚Üí a ‚â† 1 :=
  mt $ by
    rintro rfl
    exact nnnorm_one'
#align ne_one_of_nnnorm_ne_zero ne_one_of_nnnorm_ne_zero

@[to_additive nnnorm_add_le]
theorem nnnorm_mul_le' (a b : E) : ‚à•a * b‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä + ‚à•b‚à•‚Çä :=
  Nnreal.coe_le_coe.1 $ norm_mul_le' a b
#align nnnorm_mul_le' nnnorm_mul_le'

@[simp, to_additive nnnorm_neg]
theorem nnnorm_inv' (a : E) : ‚à•a‚Åª¬π‚à•‚Çä = ‚à•a‚à•‚Çä :=
  Nnreal.eq $ norm_inv' a
#align nnnorm_inv' nnnorm_inv'

@[to_additive]
theorem nnnorm_div_le (a b : E) : ‚à•a / b‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä + ‚à•b‚à•‚Çä :=
  Nnreal.coe_le_coe.1 $ norm_div_le _ _
#align nnnorm_div_le nnnorm_div_le

@[to_additive nndist_nnnorm_nnnorm_le]
theorem nndist_nnnorm_nnnorm_le' (a b : E) : nndist ‚à•a‚à•‚Çä ‚à•b‚à•‚Çä ‚â§ ‚à•a / b‚à•‚Çä :=
  Nnreal.coe_le_coe.1 $ dist_norm_norm_le' a b
#align nndist_nnnorm_nnnorm_le' nndist_nnnorm_nnnorm_le'

@[to_additive]
theorem nnnorm_le_nnnorm_add_nnnorm_div (a b : E) : ‚à•b‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä + ‚à•a / b‚à•‚Çä :=
  norm_le_norm_add_norm_div _ _
#align nnnorm_le_nnnorm_add_nnnorm_div nnnorm_le_nnnorm_add_nnnorm_div

@[to_additive]
theorem nnnorm_le_nnnorm_add_nnnorm_div' (a b : E) : ‚à•a‚à•‚Çä ‚â§ ‚à•b‚à•‚Çä + ‚à•a / b‚à•‚Çä :=
  norm_le_norm_add_norm_div' _ _
#align nnnorm_le_nnnorm_add_nnnorm_div' nnnorm_le_nnnorm_add_nnnorm_div'

alias nnnorm_le_nnnorm_add_nnnorm_sub' ‚Üê nnnorm_le_insert'

alias nnnorm_le_nnnorm_add_nnnorm_sub ‚Üê nnnorm_le_insert

@[to_additive]
theorem nnnorm_le_mul_nnnorm_add (a b : E) : ‚à•a‚à•‚Çä ‚â§ ‚à•a * b‚à•‚Çä + ‚à•b‚à•‚Çä :=
  norm_le_mul_norm_add _ _
#align nnnorm_le_mul_nnnorm_add nnnorm_le_mul_nnnorm_add

@[to_additive of_real_norm_eq_coe_nnnorm]
theorem of_real_norm_eq_coe_nnnorm' (a : E) : Ennreal.ofReal ‚à•a‚à• = ‚à•a‚à•‚Çä :=
  Ennreal.of_real_eq_coe_nnreal _
#align of_real_norm_eq_coe_nnnorm' of_real_norm_eq_coe_nnnorm'

@[to_additive]
theorem edist_eq_coe_nnnorm_div (a b : E) : edist a b = ‚à•a / b‚à•‚Çä := by
  rw [edist_dist, dist_eq_norm_div, of_real_norm_eq_coe_nnnorm']
#align edist_eq_coe_nnnorm_div edist_eq_coe_nnnorm_div

@[to_additive edist_eq_coe_nnnorm]
theorem edist_eq_coe_nnnorm' (x : E) : edist x 1 = (‚à•x‚à•‚Çä : ‚Ñù‚â•0‚àû) := by rw [edist_eq_coe_nnnorm_div, div_one]
#align edist_eq_coe_nnnorm' edist_eq_coe_nnnorm'

@[to_additive]
theorem mem_emetric_ball_one_iff {r : ‚Ñù‚â•0‚àû} : a ‚àà Emetric.ball (1 : E) r ‚Üî ‚Üë‚à•a‚à•‚Çä < r := by
  rw [Emetric.mem_ball, edist_eq_coe_nnnorm']
#align mem_emetric_ball_one_iff mem_emetric_ball_one_iff

@[simp, to_additive]
theorem edist_mul_right (a‚ÇÅ a‚ÇÇ b : E) : edist (a‚ÇÅ * b) (a‚ÇÇ * b) = edist a‚ÇÅ a‚ÇÇ := by simp [edist_dist]
#align edist_mul_right edist_mul_right

@[simp, to_additive]
theorem edist_div_right (a‚ÇÅ a‚ÇÇ b : E) : edist (a‚ÇÅ / b) (a‚ÇÇ / b) = edist a‚ÇÅ a‚ÇÇ := by
  simpa only [div_eq_mul_inv] using edist_mul_right _ _ _
#align edist_div_right edist_div_right

@[to_additive]
theorem MonoidHomClass.lipschitzOfBoundNnnorm [MonoidHomClass ùìï E F] (f : ùìï) (C : ‚Ñù‚â•0) (h : ‚àÄ x, ‚à•f x‚à•‚Çä ‚â§ C * ‚à•x‚à•‚Çä) :
    LipschitzWith C f :=
  @Real.to_nnreal_coe C ‚ñ∏ MonoidHomClass.lipschitzOfBound f C h
#align monoid_hom_class.lipschitz_of_bound_nnnorm MonoidHomClass.lipschitzOfBoundNnnorm

@[to_additive]
theorem MonoidHomClass.antilipschitzOfBound [MonoidHomClass ùìï E F] (f : ùìï) {K : ‚Ñù‚â•0} (h : ‚àÄ x, ‚à•x‚à• ‚â§ K * ‚à•f x‚à•) :
    AntilipschitzWith K f :=
  AntilipschitzWith.ofLeMulDist $ fun x y => by simpa only [dist_eq_norm_div, map_div] using h (x / y)
#align monoid_hom_class.antilipschitz_of_bound MonoidHomClass.antilipschitzOfBound

@[to_additive]
theorem MonoidHomClass.bound_of_antilipschitz [MonoidHomClass ùìï E F] (f : ùìï) {K : ‚Ñù‚â•0} (h : AntilipschitzWith K f) (x) :
    ‚à•x‚à• ‚â§ K * ‚à•f x‚à• := by simpa only [dist_one_right, map_one] using h.le_mul_dist x 1
#align monoid_hom_class.bound_of_antilipschitz MonoidHomClass.bound_of_antilipschitz

end Nnnorm

@[to_additive]
theorem tendsto_iff_norm_tendsto_one {f : Œ± ‚Üí E} {a : Filter Œ±} {b : E} :
    Tendsto f a (ùìù b) ‚Üî Tendsto (fun e => ‚à•f e / b‚à•) a (ùìù 0) := by
  convert tendsto_iff_dist_tendsto_zero
  simp [dist_eq_norm_div]
#align tendsto_iff_norm_tendsto_one tendsto_iff_norm_tendsto_one

@[to_additive]
theorem tendsto_one_iff_norm_tendsto_one {f : Œ± ‚Üí E} {a : Filter Œ±} :
    Tendsto f a (ùìù 1) ‚Üî Tendsto (fun e => ‚à•f e‚à•) a (ùìù 0) := by
  rw [tendsto_iff_norm_tendsto_one]
  simp only [div_one]
#align tendsto_one_iff_norm_tendsto_one tendsto_one_iff_norm_tendsto_one

@[to_additive]
theorem comap_norm_nhds_one : comap norm (ùìù 0) = ùìù (1 : E) := by
  simpa only [dist_one_right] using nhds_comap_dist (1 : E)
#align comap_norm_nhds_one comap_norm_nhds_one

/-- Special case of the sandwich theorem: if the norm of `f` is eventually bounded by a real
function `a` which tends to `0`, then `f` tends to `1`. In this pair of lemmas (`squeeze_one_norm'`
and `squeeze_one_norm`), following a convention of similar lemmas in `topology.metric_space.basic`
and `topology.algebra.order`, the `'` version is phrased using "eventually" and the non-`'` version
is phrased absolutely. -/
@[to_additive
      "Special case of the sandwich theorem: if the norm of `f` is eventually bounded by a\nreal function `a` which tends to `0`, then `f` tends to `1`. In this pair of lemmas\n(`squeeze_zero_norm'` and `squeeze_zero_norm`), following a convention of similar lemmas in\n`topology.metric_space.basic` and `topology.algebra.order`, the `'` version is phrased using\n\"eventually\" and the non-`'` version is phrased absolutely."]
theorem squeeze_one_norm' {f : Œ± ‚Üí E} {a : Œ± ‚Üí ‚Ñù} {t‚ÇÄ : Filter Œ±} (h : ‚àÄ·∂† n in t‚ÇÄ, ‚à•f n‚à• ‚â§ a n)
    (h' : Tendsto a t‚ÇÄ (ùìù 0)) : Tendsto f t‚ÇÄ (ùìù 1) :=
  tendsto_one_iff_norm_tendsto_one.2 $ squeeze_zero' (eventually_of_forall $ fun n => norm_nonneg' _) h h'
#align squeeze_one_norm' squeeze_one_norm'

/-- Special case of the sandwich theorem: if the norm of `f` is bounded by a real function `a` which
tends to `0`, then `f` tends to `1`. -/
@[to_additive
      "Special case of the sandwich theorem: if the norm of `f` is bounded by a real\nfunction `a` which tends to `0`, then `f` tends to `0`."]
theorem squeeze_one_norm {f : Œ± ‚Üí E} {a : Œ± ‚Üí ‚Ñù} {t‚ÇÄ : Filter Œ±} (h : ‚àÄ n, ‚à•f n‚à• ‚â§ a n) :
    Tendsto a t‚ÇÄ (ùìù 0) ‚Üí Tendsto f t‚ÇÄ (ùìù 1) :=
  squeeze_one_norm' $ eventually_of_forall h
#align squeeze_one_norm squeeze_one_norm

@[to_additive]
theorem tendsto_norm_div_self (x : E) : Tendsto (fun a => ‚à•a / x‚à•) (ùìù x) (ùìù 0) := by
  simpa [dist_eq_norm_div] using tendsto_id.dist (tendsto_const_nhds : tendsto (fun a => (x : E)) (ùìù x) _)
#align tendsto_norm_div_self tendsto_norm_div_self

@[to_additive tendsto_norm]
theorem tendsto_norm' {x : E} : Tendsto (fun a => ‚à•a‚à•) (ùìù x) (ùìù ‚à•x‚à•) := by
  simpa using tendsto_id.dist (tendsto_const_nhds : tendsto (fun a => (1 : E)) _ _)
#align tendsto_norm' tendsto_norm'

@[to_additive]
theorem tendsto_norm_one : Tendsto (fun a : E => ‚à•a‚à•) (ùìù 1) (ùìù 0) := by simpa using tendsto_norm_div_self (1 : E)
#align tendsto_norm_one tendsto_norm_one

@[continuity, to_additive continuous_norm]
theorem continuous_norm' : Continuous fun a : E => ‚à•a‚à• := by
  simpa using continuous_id.dist (continuous_const : Continuous fun a => (1 : E))
#align continuous_norm' continuous_norm'

@[continuity, to_additive continuous_nnnorm]
theorem continuous_nnnorm' : Continuous fun a : E => ‚à•a‚à•‚Çä :=
  continuous_norm'.subtype_mk _
#align continuous_nnnorm' continuous_nnnorm'

@[to_additive lipschitzWithOneNorm]
theorem lipschitzWithOneNorm' : LipschitzWith 1 (norm : E ‚Üí ‚Ñù) := by
  simpa only [dist_one_left] using LipschitzWith.distRight (1 : E)
#align lipschitz_with_one_norm' lipschitzWithOneNorm'

@[to_additive lipschitzWithOneNnnorm]
theorem lipschitzWithOneNnnorm' : LipschitzWith 1 (HasNnnorm.nnnorm : E ‚Üí ‚Ñù‚â•0) :=
  lipschitzWithOneNorm'
#align lipschitz_with_one_nnnorm' lipschitzWithOneNnnorm'

@[to_additive uniform_continuous_norm]
theorem uniform_continuous_norm' : UniformContinuous (norm : E ‚Üí ‚Ñù) :=
  lipschitzWithOneNorm'.UniformContinuous
#align uniform_continuous_norm' uniform_continuous_norm'

@[to_additive uniform_continuous_nnnorm]
theorem uniform_continuous_nnnorm' : UniformContinuous fun a : E => ‚à•a‚à•‚Çä :=
  uniform_continuous_norm'.subtype_mk _
#align uniform_continuous_nnnorm' uniform_continuous_nnnorm'

@[to_additive]
theorem mem_closure_one_iff_norm {x : E} : x ‚àà closure ({1} : Set E) ‚Üî ‚à•x‚à• = 0 := by
  rw [‚Üê closed_ball_zero', mem_closed_ball_one_iff, (norm_nonneg' x).le_iff_eq]
#align mem_closure_one_iff_norm mem_closure_one_iff_norm

@[to_additive]
theorem closure_one_eq : closure ({1} : Set E) = { x | ‚à•x‚à• = 0 } :=
  Set.ext fun x => mem_closure_one_iff_norm
#align closure_one_eq closure_one_eq

/-- A helper lemma used to prove that the (scalar or usual) product of a function that tends to one
and a bounded function tends to one. This lemma is formulated for any binary operation
`op : E ‚Üí F ‚Üí G` with an estimate `‚à•op x y‚à• ‚â§ A * ‚à•x‚à• * ‚à•y‚à•` for some constant A instead of
multiplication so that it can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`. -/
@[to_additive
      "A helper lemma used to prove that the (scalar or usual) product of a function that\ntends to zero and a bounded function tends to zero. This lemma is formulated for any binary\noperation `op : E ‚Üí F ‚Üí G` with an estimate `‚à•op x y‚à• ‚â§ A * ‚à•x‚à• * ‚à•y‚à•` for some constant A instead\nof multiplication so that it can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`."]
theorem Filter.Tendsto.op_one_is_bounded_under_le' {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} (hf : Tendsto f l (ùìù 1))
    (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò g)) (op : E ‚Üí F ‚Üí G) (h_op : ‚àÉ A, ‚àÄ x y, ‚à•op x y‚à• ‚â§ A * ‚à•x‚à• * ‚à•y‚à•) :
    Tendsto (fun x => op (f x) (g x)) l (ùìù 1) := by
  cases' h_op with A h_op
  rcases hg with ‚ü®C, hC‚ü©
  rw [eventually_map] at hC
  rw [NormedCommGroup.tendsto_nhds_one] at hf‚ä¢
  intro Œµ Œµ‚ÇÄ
  rcases exists_pos_mul_lt Œµ‚ÇÄ (A * C) with ‚ü®Œ¥, Œ¥‚ÇÄ, hŒ¥‚ü©
  filter_upwards [hf Œ¥ Œ¥‚ÇÄ, hC] with i hf hg
  refine' (h_op _ _).trans_lt _
  cases' le_total A 0 with hA hA
  ¬∑ exact
      (mul_nonpos_of_nonpos_of_nonneg (mul_nonpos_of_nonpos_of_nonneg hA $ norm_nonneg' _) $ norm_nonneg' _).trans_lt Œµ‚ÇÄ
    
  calc
    A * ‚à•f i‚à• * ‚à•g i‚à• ‚â§ A * Œ¥ * C :=
      mul_le_mul (mul_le_mul_of_nonneg_left hf.le hA) hg (norm_nonneg' _) (mul_nonneg hA Œ¥‚ÇÄ.le)
    _ = A * C * Œ¥ := mul_right_comm _ _ _
    _ < Œµ := hŒ¥
    
#align filter.tendsto.op_one_is_bounded_under_le' Filter.Tendsto.op_one_is_bounded_under_le'

/-- A helper lemma used to prove that the (scalar or usual) product of a function that tends to one
and a bounded function tends to one. This lemma is formulated for any binary operation
`op : E ‚Üí F ‚Üí G` with an estimate `‚à•op x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à•` instead of multiplication so that it
can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`. -/
@[to_additive
      "A helper lemma used to prove that the (scalar or usual) product of a function that\ntends to zero and a bounded function tends to zero. This lemma is formulated for any binary\noperation `op : E ‚Üí F ‚Üí G` with an estimate `‚à•op x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à•` instead of multiplication so that\nit can be applied to `(*)`, `flip (*)`, `(‚Ä¢)`, and `flip (‚Ä¢)`."]
theorem Filter.Tendsto.op_one_is_bounded_under_le {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} (hf : Tendsto f l (ùìù 1))
    (hg : IsBoundedUnder (¬∑ ‚â§ ¬∑) l (norm ‚àò g)) (op : E ‚Üí F ‚Üí G) (h_op : ‚àÄ x y, ‚à•op x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à•) :
    Tendsto (fun x => op (f x) (g x)) l (ùìù 1) :=
  hf.op_one_is_bounded_under_le' hg op ‚ü®1, fun x y => (one_mul ‚à•x‚à•).symm ‚ñ∏ h_op x y‚ü©
#align filter.tendsto.op_one_is_bounded_under_le Filter.Tendsto.op_one_is_bounded_under_le

section

variable {l : Filter Œ±} {f : Œ± ‚Üí E}

@[to_additive Filter.Tendsto.norm]
theorem Filter.Tendsto.norm' (h : Tendsto f l (ùìù a)) : Tendsto (fun x => ‚à•f x‚à•) l (ùìù ‚à•a‚à•) :=
  tendsto_norm'.comp h
#align filter.tendsto.norm' Filter.Tendsto.norm'

@[to_additive Filter.Tendsto.nnnorm]
theorem Filter.Tendsto.nnnorm' (h : Tendsto f l (ùìù a)) : Tendsto (fun x => ‚à•f x‚à•‚Çä) l (ùìù ‚à•a‚à•‚Çä) :=
  Tendsto.comp continuous_nnnorm'.ContinuousAt h
#align filter.tendsto.nnnorm' Filter.Tendsto.nnnorm'

end

section

variable [TopologicalSpace Œ±] {f : Œ± ‚Üí E}

@[to_additive Continuous.norm]
theorem Continuous.norm' : Continuous f ‚Üí Continuous fun x => ‚à•f x‚à• :=
  continuous_norm'.comp
#align continuous.norm' Continuous.norm'

@[to_additive Continuous.nnnorm]
theorem Continuous.nnnorm' : Continuous f ‚Üí Continuous fun x => ‚à•f x‚à•‚Çä :=
  continuous_nnnorm'.comp
#align continuous.nnnorm' Continuous.nnnorm'

@[to_additive ContinuousAt.norm]
theorem ContinuousAt.norm' {a : Œ±} (h : ContinuousAt f a) : ContinuousAt (fun x => ‚à•f x‚à•) a :=
  h.norm'
#align continuous_at.norm' ContinuousAt.norm'

@[to_additive ContinuousAt.nnnorm]
theorem ContinuousAt.nnnorm' {a : Œ±} (h : ContinuousAt f a) : ContinuousAt (fun x => ‚à•f x‚à•‚Çä) a :=
  h.nnnorm'
#align continuous_at.nnnorm' ContinuousAt.nnnorm'

@[to_additive ContinuousWithinAt.norm]
theorem ContinuousWithinAt.norm' {s : Set Œ±} {a : Œ±} (h : ContinuousWithinAt f s a) :
    ContinuousWithinAt (fun x => ‚à•f x‚à•) s a :=
  h.norm'
#align continuous_within_at.norm' ContinuousWithinAt.norm'

@[to_additive ContinuousWithinAt.nnnorm]
theorem ContinuousWithinAt.nnnorm' {s : Set Œ±} {a : Œ±} (h : ContinuousWithinAt f s a) :
    ContinuousWithinAt (fun x => ‚à•f x‚à•‚Çä) s a :=
  h.nnnorm'
#align continuous_within_at.nnnorm' ContinuousWithinAt.nnnorm'

@[to_additive ContinuousOn.norm]
theorem ContinuousOn.norm' {s : Set Œ±} (h : ContinuousOn f s) : ContinuousOn (fun x => ‚à•f x‚à•) s := fun x hx =>
  (h x hx).norm'
#align continuous_on.norm' ContinuousOn.norm'

@[to_additive ContinuousOn.nnnorm]
theorem ContinuousOn.nnnorm' {s : Set Œ±} (h : ContinuousOn f s) : ContinuousOn (fun x => ‚à•f x‚à•‚Çä) s := fun x hx =>
  (h x hx).nnnorm'
#align continuous_on.nnnorm' ContinuousOn.nnnorm'

end

/-- If `‚à•y‚à• ‚Üí ‚àû`, then we can assume `y ‚â† x` for any fixed `x`. -/
@[to_additive eventually_ne_of_tendsto_norm_at_top "If `‚à•y‚à•‚Üí‚àû`, then we can assume `y‚â†x` for any\nfixed `x`"]
theorem eventually_ne_of_tendsto_norm_at_top' {l : Filter Œ±} {f : Œ± ‚Üí E} (h : Tendsto (fun y => ‚à•f y‚à•) l atTop)
    (x : E) : ‚àÄ·∂† y in l, f y ‚â† x :=
  (h.eventually_ne_at_top _).mono $ fun x => ne_of_apply_ne norm
#align eventually_ne_of_tendsto_norm_at_top' eventually_ne_of_tendsto_norm_at_top'

@[to_additive]
theorem SeminormedCommGroup.mem_closure_iff : a ‚àà closure s ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ b ‚àà s, ‚à•a / b‚à• < Œµ := by
  simp [Metric.mem_closure_iff, dist_eq_norm_div]
#align seminormed_comm_group.mem_closure_iff SeminormedCommGroup.mem_closure_iff

@[to_additive norm_le_zero_iff']
theorem norm_le_zero_iff''' [T0Space E] {a : E} : ‚à•a‚à• ‚â§ 0 ‚Üî a = 1 := by
  letI : NormedGroup E := { ‚ÄπSeminormedGroup E‚Ä∫ with toMetricSpace := Metric.ofT0PseudoMetricSpace E }
  rw [‚Üê dist_one_right, dist_le_zero]
#align norm_le_zero_iff''' norm_le_zero_iff'''

@[to_additive norm_eq_zero']
theorem norm_eq_zero''' [T0Space E] {a : E} : ‚à•a‚à• = 0 ‚Üî a = 1 :=
  (norm_nonneg' a).le_iff_eq.symm.trans norm_le_zero_iff'''
#align norm_eq_zero''' norm_eq_zero'''

@[to_additive norm_pos_iff']
theorem norm_pos_iff''' [T0Space E] {a : E} : 0 < ‚à•a‚à• ‚Üî a ‚â† 1 := by rw [‚Üê not_le, norm_le_zero_iff''']
#align norm_pos_iff''' norm_pos_iff'''

@[to_additive]
theorem SeminormedGroup.tendsto_uniformly_on_one {f : Œπ ‚Üí Œ∫ ‚Üí G} {s : Set Œ∫} {l : Filter Œπ} :
    TendstoUniformlyOn f 1 l s ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† i in l, ‚àÄ x ‚àà s, ‚à•f i x‚à• < Œµ := by
  simp_rw [tendsto_uniformly_on_iff, Pi.one_apply, dist_one_left]
#align seminormed_group.tendsto_uniformly_on_one SeminormedGroup.tendsto_uniformly_on_one

@[to_additive]
theorem SeminormedGroup.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_one {f : Œπ ‚Üí Œ∫ ‚Üí G} {l : Filter Œπ}
    {l' : Filter Œ∫} :
    UniformCauchySeqOnFilter f l l' ‚Üî
      TendstoUniformlyOnFilter (fun n : Œπ √ó Œπ => fun z => f n.fst z / f n.snd z) 1 (l √ó·∂† l) l' :=
  by
  refine' ‚ü®fun hf u hu => _, fun hf u hu => _‚ü©
  ¬∑ obtain ‚ü®Œµ, hŒµ, H‚ü© := uniformity_basis_dist.mem_uniformity_iff.mp hu
    refine'
      (hf { p : G √ó G | dist p.fst p.snd < Œµ } $ dist_mem_uniformity hŒµ).mono fun x hx =>
        H 1 (f x.fst.fst x.snd / f x.fst.snd x.snd) _
    simpa [dist_eq_norm_div, norm_div_rev] using hx
    
  ¬∑ obtain ‚ü®Œµ, hŒµ, H‚ü© := uniformity_basis_dist.mem_uniformity_iff.mp hu
    refine'
      (hf { p : G √ó G | dist p.fst p.snd < Œµ } $ dist_mem_uniformity hŒµ).mono fun x hx =>
        H (f x.fst.fst x.snd) (f x.fst.snd x.snd) _
    simpa [dist_eq_norm_div, norm_div_rev] using hx
    
#align
  seminormed_group.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_one SeminormedGroup.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_one

@[to_additive]
theorem SeminormedGroup.uniform_cauchy_seq_on_iff_tendsto_uniformly_on_one {f : Œπ ‚Üí Œ∫ ‚Üí G} {s : Set Œ∫} {l : Filter Œπ} :
    UniformCauchySeqOn f l s ‚Üî TendstoUniformlyOn (fun n : Œπ √ó Œπ => fun z => f n.fst z / f n.snd z) 1 (l √ó·∂† l) s := by
  rw [tendsto_uniformly_on_iff_tendsto_uniformly_on_filter, uniform_cauchy_seq_on_iff_uniform_cauchy_seq_on_filter,
    SeminormedGroup.uniform_cauchy_seq_on_filter_iff_tendsto_uniformly_on_filter_one]
#align
  seminormed_group.uniform_cauchy_seq_on_iff_tendsto_uniformly_on_one SeminormedGroup.uniform_cauchy_seq_on_iff_tendsto_uniformly_on_one

end SeminormedGroup

section Induced

variable (E F)

-- See note [reducible non-instances]
/-- A group homomorphism from a `group` to a `seminormed_group` induces a `seminormed_group`
structure on the domain. -/
@[reducible,
  to_additive
      "A group homomorphism from an `add_group` to a `seminormed_add_group` induces a\n`seminormed_add_group` structure on the domain."]
def SeminormedGroup.induced [Group E] [SeminormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) : SeminormedGroup E :=
  { PseudoMetricSpace.induced f _ with norm := fun x => ‚à•f x‚à•,
    dist_eq := fun x y => by simpa only [map_div, ‚Üê dist_eq_norm_div] }
#align seminormed_group.induced SeminormedGroup.induced

-- See note [reducible non-instances]
/-- A group homomorphism from a `comm_group` to a `seminormed_group` induces a
`seminormed_comm_group` structure on the domain. -/
@[reducible,
  to_additive
      "A group homomorphism from an `add_comm_group` to a `seminormed_add_group` induces a\n`seminormed_add_comm_group` structure on the domain."]
def SeminormedCommGroup.induced [CommGroup E] [SeminormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) :
    SeminormedCommGroup E :=
  { SeminormedGroup.induced E F f with }
#align seminormed_comm_group.induced SeminormedCommGroup.induced

-- See note [reducible non-instances].
/-- An injective group homomorphism from a `group` to a `normed_group` induces a `normed_group`
structure on the domain. -/
@[reducible,
  to_additive
      "An injective group homomorphism from an `add_group` to a `normed_add_group` induces a\n`normed_add_group` structure on the domain."]
def NormedGroup.induced [Group E] [NormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) (h : Injective f) : NormedGroup E :=
  { SeminormedGroup.induced E F f, MetricSpace.induced f h _ with }
#align normed_group.induced NormedGroup.induced

-- See note [reducible non-instances].
/-- An injective group homomorphism from an `comm_group` to a `normed_group` induces a
`normed_comm_group` structure on the domain. -/
@[reducible,
  to_additive
      "An injective group homomorphism from an `comm_group` to a `normed_comm_group` induces a\n`normed_comm_group` structure on the domain."]
def NormedCommGroup.induced [CommGroup E] [NormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) (h : Injective f) :
    NormedCommGroup E :=
  { SeminormedGroup.induced E F f, MetricSpace.induced f h _ with }
#align normed_comm_group.induced NormedCommGroup.induced

end Induced

section SeminormedCommGroup

variable [SeminormedCommGroup E] [SeminormedCommGroup F] {a a‚ÇÅ a‚ÇÇ b b‚ÇÅ b‚ÇÇ : E} {r r‚ÇÅ r‚ÇÇ : ‚Ñù}

@[simp, to_additive]
theorem dist_mul_left (a b‚ÇÅ b‚ÇÇ : E) : dist (a * b‚ÇÅ) (a * b‚ÇÇ) = dist b‚ÇÅ b‚ÇÇ := by simp [dist_eq_norm_div]
#align dist_mul_left dist_mul_left

@[to_additive]
theorem dist_inv (x y : E) : dist x‚Åª¬π y = dist x y‚Åª¬π := by
  simp_rw [dist_eq_norm_div, ‚Üê norm_inv' (x‚Åª¬π / y), inv_div, div_inv_eq_mul, mul_comm]
#align dist_inv dist_inv

@[simp, to_additive]
theorem dist_inv_inv (a b : E) : dist a‚Åª¬π b‚Åª¬π = dist a b := by rw [dist_inv, inv_inv]
#align dist_inv_inv dist_inv_inv

@[simp, to_additive]
theorem dist_div_left (a b‚ÇÅ b‚ÇÇ : E) : dist (a / b‚ÇÅ) (a / b‚ÇÇ) = dist b‚ÇÅ b‚ÇÇ := by
  simp only [div_eq_mul_inv, dist_mul_left, dist_inv_inv]
#align dist_div_left dist_div_left

@[simp, to_additive]
theorem dist_self_mul_right (a b : E) : dist a (a * b) = ‚à•b‚à• := by rw [‚Üê dist_one_left, ‚Üê dist_mul_left a 1 b, mul_one]
#align dist_self_mul_right dist_self_mul_right

@[simp, to_additive]
theorem dist_self_mul_left (a b : E) : dist (a * b) a = ‚à•b‚à• := by rw [dist_comm, dist_self_mul_right]
#align dist_self_mul_left dist_self_mul_left

@[simp, to_additive]
theorem dist_self_div_right (a b : E) : dist a (a / b) = ‚à•b‚à• := by rw [div_eq_mul_inv, dist_self_mul_right, norm_inv']
#align dist_self_div_right dist_self_div_right

@[simp, to_additive]
theorem dist_self_div_left (a b : E) : dist (a / b) a = ‚à•b‚à• := by rw [dist_comm, dist_self_div_right]
#align dist_self_div_left dist_self_div_left

@[to_additive]
theorem dist_mul_mul_le (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : E) : dist (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) ‚â§ dist a‚ÇÅ b‚ÇÅ + dist a‚ÇÇ b‚ÇÇ := by
  simpa only [dist_mul_left, dist_mul_right] using dist_triangle (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ)
#align dist_mul_mul_le dist_mul_mul_le

@[to_additive]
theorem dist_mul_mul_le_of_le (h‚ÇÅ : dist a‚ÇÅ b‚ÇÅ ‚â§ r‚ÇÅ) (h‚ÇÇ : dist a‚ÇÇ b‚ÇÇ ‚â§ r‚ÇÇ) : dist (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) ‚â§ r‚ÇÅ + r‚ÇÇ :=
  (dist_mul_mul_le a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ).trans $ add_le_add h‚ÇÅ h‚ÇÇ
#align dist_mul_mul_le_of_le dist_mul_mul_le_of_le

@[to_additive]
theorem dist_div_div_le (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : E) : dist (a‚ÇÅ / a‚ÇÇ) (b‚ÇÅ / b‚ÇÇ) ‚â§ dist a‚ÇÅ b‚ÇÅ + dist a‚ÇÇ b‚ÇÇ := by
  simpa only [div_eq_mul_inv, dist_inv_inv] using dist_mul_mul_le a‚ÇÅ a‚ÇÇ‚Åª¬π b‚ÇÅ b‚ÇÇ‚Åª¬π
#align dist_div_div_le dist_div_div_le

@[to_additive]
theorem dist_div_div_le_of_le (h‚ÇÅ : dist a‚ÇÅ b‚ÇÅ ‚â§ r‚ÇÅ) (h‚ÇÇ : dist a‚ÇÇ b‚ÇÇ ‚â§ r‚ÇÇ) : dist (a‚ÇÅ / a‚ÇÇ) (b‚ÇÅ / b‚ÇÇ) ‚â§ r‚ÇÅ + r‚ÇÇ :=
  (dist_div_div_le a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ).trans $ add_le_add h‚ÇÅ h‚ÇÇ
#align dist_div_div_le_of_le dist_div_div_le_of_le

@[to_additive]
theorem abs_dist_sub_le_dist_mul_mul (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : E) : |dist a‚ÇÅ b‚ÇÅ - dist a‚ÇÇ b‚ÇÇ| ‚â§ dist (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) := by
  simpa only [dist_mul_left, dist_mul_right, dist_comm b‚ÇÇ] using abs_dist_sub_le (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) (b‚ÇÅ * a‚ÇÇ)
#align abs_dist_sub_le_dist_mul_mul abs_dist_sub_le_dist_mul_mul

theorem norm_multiset_sum_le {E} [SeminormedAddCommGroup E] (m : Multiset E) : ‚à•m.Sum‚à• ‚â§ (m.map fun x => ‚à•x‚à•).Sum :=
  m.le_sum_of_subadditive norm norm_zero norm_add_le
#align norm_multiset_sum_le norm_multiset_sum_le

@[to_additive]
theorem norm_multiset_prod_le (m : Multiset E) : ‚à•m.Prod‚à• ‚â§ (m.map $ fun x => ‚à•x‚à•).Sum := by
  rw [‚Üê Multiplicative.of_add_le, of_add_multiset_prod, Multiset.map_map]
  refine' Multiset.le_prod_of_submultiplicative (Multiplicative.ofAdd ‚àò norm) _ (fun x y => _) _
  ¬∑ simp only [comp_app, norm_one', of_add_zero]
    
  ¬∑ exact norm_mul_le' _ _
    
#align norm_multiset_prod_le norm_multiset_prod_le

theorem norm_sum_le {E} [SeminormedAddCommGroup E] (s : Finset Œπ) (f : Œπ ‚Üí E) : ‚à•‚àë i in s, f i‚à• ‚â§ ‚àë i in s, ‚à•f i‚à• :=
  s.le_sum_of_subadditive norm norm_zero norm_add_le f
#align norm_sum_le norm_sum_le

@[to_additive]
theorem norm_prod_le (s : Finset Œπ) (f : Œπ ‚Üí E) : ‚à•‚àè i in s, f i‚à• ‚â§ ‚àë i in s, ‚à•f i‚à• := by
  rw [‚Üê Multiplicative.of_add_le, of_add_sum]
  refine' Finset.le_prod_of_submultiplicative (Multiplicative.ofAdd ‚àò norm) _ (fun x y => _) _ _
  ¬∑ simp only [comp_app, norm_one', of_add_zero]
    
  ¬∑ exact norm_mul_le' _ _
    
#align norm_prod_le norm_prod_le

@[to_additive]
theorem norm_prod_le_of_le (s : Finset Œπ) {f : Œπ ‚Üí E} {n : Œπ ‚Üí ‚Ñù} (h : ‚àÄ b ‚àà s, ‚à•f b‚à• ‚â§ n b) :
    ‚à•‚àè b in s, f b‚à• ‚â§ ‚àë b in s, n b :=
  (norm_prod_le s f).trans $ Finset.sum_le_sum h
#align norm_prod_le_of_le norm_prod_le_of_le

@[to_additive]
theorem dist_prod_prod_le_of_le (s : Finset Œπ) {f a : Œπ ‚Üí E} {d : Œπ ‚Üí ‚Ñù} (h : ‚àÄ b ‚àà s, dist (f b) (a b) ‚â§ d b) :
    dist (‚àè b in s, f b) (‚àè b in s, a b) ‚â§ ‚àë b in s, d b := by
  simp only [dist_eq_norm_div, ‚Üê Finset.prod_div_distrib] at *
  exact norm_prod_le_of_le s h
#align dist_prod_prod_le_of_le dist_prod_prod_le_of_le

@[to_additive]
theorem dist_prod_prod_le (s : Finset Œπ) (f a : Œπ ‚Üí E) :
    dist (‚àè b in s, f b) (‚àè b in s, a b) ‚â§ ‚àë b in s, dist (f b) (a b) :=
  dist_prod_prod_le_of_le s $ fun _ _ => le_rfl
#align dist_prod_prod_le dist_prod_prod_le

@[to_additive]
theorem mul_mem_ball_iff_norm : a * b ‚àà ball a r ‚Üî ‚à•b‚à• < r := by rw [mem_ball_iff_norm'', mul_div_cancel''']
#align mul_mem_ball_iff_norm mul_mem_ball_iff_norm

@[to_additive]
theorem mul_mem_closed_ball_iff_norm : a * b ‚àà closedBall a r ‚Üî ‚à•b‚à• ‚â§ r := by
  rw [mem_closed_ball_iff_norm'', mul_div_cancel''']
#align mul_mem_closed_ball_iff_norm mul_mem_closed_ball_iff_norm

@[simp, to_additive]
theorem preimage_mul_ball (a b : E) (r : ‚Ñù) : (¬∑ * ¬∑) b ‚Åª¬π' ball a r = ball (a / b) r := by
  ext c
  simp only [dist_eq_norm_div, Set.mem_preimage, mem_ball, div_div_eq_mul_div, mul_comm]
#align preimage_mul_ball preimage_mul_ball

@[simp, to_additive]
theorem preimage_mul_closed_ball (a b : E) (r : ‚Ñù) : (¬∑ * ¬∑) b ‚Åª¬π' closedBall a r = closedBall (a / b) r := by
  ext c
  simp only [dist_eq_norm_div, Set.mem_preimage, mem_closed_ball, div_div_eq_mul_div, mul_comm]
#align preimage_mul_closed_ball preimage_mul_closed_ball

@[simp, to_additive]
theorem preimage_mul_sphere (a b : E) (r : ‚Ñù) : (¬∑ * ¬∑) b ‚Åª¬π' sphere a r = sphere (a / b) r := by
  ext c
  simp only [Set.mem_preimage, mem_sphere_iff_norm', div_div_eq_mul_div, mul_comm]
#align preimage_mul_sphere preimage_mul_sphere

namespace Isometric

/-- Multiplication `y ‚Ü¶ x * y` as an `isometry`. -/
@[to_additive "Addition `y ‚Ü¶ x + y` as an `isometry`"]
protected def mulLeft (x : E) : E ‚âÉ·µ¢ E where
  isometryToFun := Isometry.ofDistEq $ fun y z => dist_mul_left _ _ _
  toEquiv := Equiv.mulLeft x
#align isometric.mul_left Isometric.mulLeft

@[simp, to_additive]
theorem mul_left_to_equiv (x : E) : (Isometric.mulLeft x).toEquiv = Equiv.mulLeft x :=
  rfl
#align isometric.mul_left_to_equiv Isometric.mul_left_to_equiv

@[simp, to_additive]
theorem coe_mul_left (x : E) : ‚áë(Isometric.mulLeft x) = (¬∑ * ¬∑) x :=
  rfl
#align isometric.coe_mul_left Isometric.coe_mul_left

@[simp, to_additive]
theorem mul_left_symm (x : E) : (Isometric.mulLeft x).symm = Isometric.mulLeft x‚Åª¬π :=
  ext $ fun y => rfl
#align isometric.mul_left_symm Isometric.mul_left_symm

variable (E)

/-- Inversion `x ‚Ü¶ x‚Åª¬π` as an `isometry`. -/
@[to_additive "Negation `x ‚Ü¶ -x` as an `isometry`."]
protected def inv : E ‚âÉ·µ¢ E where
  isometryToFun := Isometry.ofDistEq $ fun x y => dist_inv_inv _ _
  toEquiv := Equiv.inv E
#align isometric.inv Isometric.inv

variable {E}

@[simp, to_additive]
theorem inv_symm : (Isometric.inv E).symm = Isometric.inv E :=
  rfl
#align isometric.inv_symm Isometric.inv_symm

@[simp, to_additive]
theorem inv_to_equiv : (Isometric.inv E).toEquiv = Equiv.inv E :=
  rfl
#align isometric.inv_to_equiv Isometric.inv_to_equiv

@[simp, to_additive]
theorem coe_inv : ‚áë(Isometric.inv E) = Inv.inv :=
  rfl
#align isometric.coe_inv Isometric.coe_inv

end Isometric

open Finset

@[to_additive]
theorem controlled_prod_of_mem_closure {s : Subgroup E} (hg : a ‚àà closure (s : Set E)) {b : ‚Ñï ‚Üí ‚Ñù}
    (b_pos : ‚àÄ n, 0 < b n) :
    ‚àÉ v : ‚Ñï ‚Üí E,
      Tendsto (fun n => ‚àè i in range (n + 1), v i) atTop (ùìù a) ‚àß
        (‚àÄ n, v n ‚àà s) ‚àß ‚à•v 0 / a‚à• < b 0 ‚àß ‚àÄ n, 0 < n ‚Üí ‚à•v n‚à• < b n :=
  by
  obtain ‚ü®u : ‚Ñï ‚Üí E, u_in : ‚àÄ n, u n ‚àà s, lim_u : tendsto u at_top (ùìù a)‚ü© := mem_closure_iff_seq_limit.mp hg
  obtain ‚ü®n‚ÇÄ, hn‚ÇÄ‚ü© : ‚àÉ n‚ÇÄ, ‚àÄ n ‚â• n‚ÇÄ, ‚à•u n / a‚à• < b 0 :=
    haveI : { x | ‚à•x / a‚à• < b 0 } ‚àà ùìù a := by
      simp_rw [‚Üê dist_eq_norm_div]
      exact Metric.ball_mem_nhds _ (b_pos _)
    filter.tendsto_at_top'.mp lim_u _ this
  set z : ‚Ñï ‚Üí E := fun n => u (n + n‚ÇÄ)
  have lim_z : tendsto z at_top (ùìù a) := lim_u.comp (tendsto_add_at_top_nat n‚ÇÄ)
  have mem_ùì§ : ‚àÄ n, { p : E √ó E | ‚à•p.1 / p.2‚à• < b (n + 1) } ‚àà ùì§ E := fun n => by
    simpa [‚Üê dist_eq_norm_div] using Metric.dist_mem_uniformity (b_pos $ n + 1)
  obtain ‚ü®œÜ : ‚Ñï ‚Üí ‚Ñï, œÜ_extr : StrictMono œÜ, hœÜ : ‚àÄ n, ‚à•z (œÜ $ n + 1) / z (œÜ n)‚à• < b (n + 1)‚ü© :=
    lim_z.cauchy_seq.subseq_mem mem_ùì§
  set w : ‚Ñï ‚Üí E := z ‚àò œÜ
  have hw : tendsto w at_top (ùìù a) := lim_z.comp œÜ_extr.tendsto_at_top
  set v : ‚Ñï ‚Üí E := fun i => if i = 0 then w 0 else w i / w (i - 1)
  refine' ‚ü®v, tendsto.congr (Finset.eq_prod_range_div' w) hw, _, hn‚ÇÄ _ (n‚ÇÄ.le_add_left _), _‚ü©
  ¬∑ rintro ‚ü®‚ü©
    ¬∑ change w 0 ‚àà s
      apply u_in
      
    ¬∑ apply s.div_mem <;> apply u_in
      
    
  ¬∑ intro l hl
    obtain ‚ü®k, rfl‚ü© : ‚àÉ k, l = k + 1
    exact Nat.exists_eq_succ_of_ne_zero hl.ne'
    apply hœÜ
    
#align controlled_prod_of_mem_closure controlled_prod_of_mem_closure

@[to_additive]
theorem controlled_prod_of_mem_closure_range {j : E ‚Üí* F} {b : F} (hb : b ‚àà closure (j.range : Set F)) {f : ‚Ñï ‚Üí ‚Ñù}
    (b_pos : ‚àÄ n, 0 < f n) :
    ‚àÉ a : ‚Ñï ‚Üí E,
      Tendsto (fun n => ‚àè i in range (n + 1), j (a i)) atTop (ùìù b) ‚àß
        ‚à•j (a 0) / b‚à• < f 0 ‚àß ‚àÄ n, 0 < n ‚Üí ‚à•j (a n)‚à• < f n :=
  by
  obtain ‚ü®v, sum_v, v_in, hv‚ÇÄ, hv_pos‚ü© := controlled_prod_of_mem_closure hb b_pos
  choose g hg using v_in
  refine' ‚ü®g, by simpa [‚Üê hg] using sum_v, by simpa [hg 0] using hv‚ÇÄ, fun n hn => by simpa [hg] using hv_pos n hn‚ü©
#align controlled_prod_of_mem_closure_range controlled_prod_of_mem_closure_range

@[to_additive]
theorem nndist_mul_mul_le (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : E) : nndist (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) ‚â§ nndist a‚ÇÅ b‚ÇÅ + nndist a‚ÇÇ b‚ÇÇ :=
  Nnreal.coe_le_coe.1 $ dist_mul_mul_le a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ
#align nndist_mul_mul_le nndist_mul_mul_le

@[to_additive]
theorem edist_mul_mul_le (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : E) : edist (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) ‚â§ edist a‚ÇÅ b‚ÇÅ + edist a‚ÇÇ b‚ÇÇ := by
  simp only [edist_nndist]
  norm_cast
  apply nndist_mul_mul_le
#align edist_mul_mul_le edist_mul_mul_le

@[simp, to_additive]
theorem edist_mul_left (a b‚ÇÅ b‚ÇÇ : E) : edist (a * b‚ÇÅ) (a * b‚ÇÇ) = edist b‚ÇÅ b‚ÇÇ := by simp [edist_dist]
#align edist_mul_left edist_mul_left

@[to_additive]
theorem edist_inv (a b : E) : edist a‚Åª¬π b = edist a b‚Åª¬π := by simp_rw [edist_dist, dist_inv]
#align edist_inv edist_inv

@[simp, to_additive]
theorem edist_inv_inv (x y : E) : edist x‚Åª¬π y‚Åª¬π = edist x y := by rw [edist_inv, inv_inv]
#align edist_inv_inv edist_inv_inv

@[simp, to_additive]
theorem edist_div_left (a b‚ÇÅ b‚ÇÇ : E) : edist (a / b‚ÇÅ) (a / b‚ÇÇ) = edist b‚ÇÅ b‚ÇÇ := by
  simp only [div_eq_mul_inv, edist_mul_left, edist_inv_inv]
#align edist_div_left edist_div_left

@[to_additive]
theorem nnnorm_multiset_prod_le (m : Multiset E) : ‚à•m.Prod‚à•‚Çä ‚â§ (m.map fun x => ‚à•x‚à•‚Çä).Sum :=
  Nnreal.coe_le_coe.1 $ by
    push_cast
    rw [Multiset.map_map]
    exact norm_multiset_prod_le _
#align nnnorm_multiset_prod_le nnnorm_multiset_prod_le

@[to_additive]
theorem nnnorm_prod_le (s : Finset Œπ) (f : Œπ ‚Üí E) : ‚à•‚àè a in s, f a‚à•‚Çä ‚â§ ‚àë a in s, ‚à•f a‚à•‚Çä :=
  Nnreal.coe_le_coe.1 $ by
    push_cast
    exact norm_prod_le _ _
#align nnnorm_prod_le nnnorm_prod_le

@[to_additive]
theorem nnnorm_prod_le_of_le (s : Finset Œπ) {f : Œπ ‚Üí E} {n : Œπ ‚Üí ‚Ñù‚â•0} (h : ‚àÄ b ‚àà s, ‚à•f b‚à•‚Çä ‚â§ n b) :
    ‚à•‚àè b in s, f b‚à•‚Çä ‚â§ ‚àë b in s, n b :=
  (norm_prod_le_of_le s h).trans_eq Nnreal.coe_sum.symm
#align nnnorm_prod_le_of_le nnnorm_prod_le_of_le

namespace Real

instance : HasNorm ‚Ñù where norm r := |r|

@[simp]
theorem norm_eq_abs (r : ‚Ñù) : ‚à•r‚à• = |r| :=
  rfl
#align real.norm_eq_abs Real.norm_eq_abs

instance : NormedAddCommGroup ‚Ñù :=
  ‚ü®fun r y => rfl‚ü©

theorem norm_of_nonneg (hr : 0 ‚â§ r) : ‚à•r‚à• = r :=
  abs_of_nonneg hr
#align real.norm_of_nonneg Real.norm_of_nonneg

theorem norm_of_nonpos (hr : r ‚â§ 0) : ‚à•r‚à• = -r :=
  abs_of_nonpos hr
#align real.norm_of_nonpos Real.norm_of_nonpos

theorem le_norm_self (r : ‚Ñù) : r ‚â§ ‚à•r‚à• :=
  le_abs_self r
#align real.le_norm_self Real.le_norm_self

@[simp]
theorem norm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à• = n :=
  abs_of_nonneg n.cast_nonneg
#align real.norm_coe_nat Real.norm_coe_nat

@[simp]
theorem nnnorm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à•‚Çä = n :=
  Nnreal.eq $ norm_coe_nat _
#align real.nnnorm_coe_nat Real.nnnorm_coe_nat

@[simp]
theorem norm_two : ‚à•(2 : ‚Ñù)‚à• = 2 :=
  abs_of_pos (@zero_lt_two ‚Ñù _ _)
#align real.norm_two Real.norm_two

@[simp]
theorem nnnorm_two : ‚à•(2 : ‚Ñù)‚à•‚Çä = 2 :=
  Nnreal.eq $ by simp
#align real.nnnorm_two Real.nnnorm_two

theorem nnnorm_of_nonneg (hr : 0 ‚â§ r) : ‚à•r‚à•‚Çä = ‚ü®r, hr‚ü© :=
  Nnreal.eq $ norm_of_nonneg hr
#align real.nnnorm_of_nonneg Real.nnnorm_of_nonneg

theorem ennnorm_eq_of_real (hr : 0 ‚â§ r) : (‚à•r‚à•‚Çä : ‚Ñù‚â•0‚àû) = Ennreal.ofReal r := by
  rw [‚Üê of_real_norm_eq_coe_nnnorm, norm_of_nonneg hr]
#align real.ennnorm_eq_of_real Real.ennnorm_eq_of_real

theorem to_nnreal_eq_nnnorm_of_nonneg (hr : 0 ‚â§ r) : r.toNnreal = ‚à•r‚à•‚Çä := by
  rw [Real.to_nnreal_of_nonneg hr]
  congr
  rw [Real.norm_eq_abs, abs_of_nonneg hr]
#align real.to_nnreal_eq_nnnorm_of_nonneg Real.to_nnreal_eq_nnnorm_of_nonneg

theorem of_real_le_ennnorm (r : ‚Ñù) : Ennreal.ofReal r ‚â§ ‚à•r‚à•‚Çä := by
  obtain hr | hr := le_total 0 r
  ¬∑ exact (Real.ennnorm_eq_of_real hr).ge
    
  ¬∑ rw [Ennreal.of_real_eq_zero.2 hr]
    exact bot_le
    
#align real.of_real_le_ennnorm Real.of_real_le_ennnorm

end Real

namespace LipschitzWith

variable [PseudoEmetricSpace Œ±] {K Kf Kg : ‚Ñù‚â•0} {f g : Œ± ‚Üí E}

@[to_additive]
theorem inv (hf : LipschitzWith K f) : LipschitzWith K fun x => (f x)‚Åª¬π := fun x y =>
  (edist_inv_inv _ _).trans_le $ hf x y
#align lipschitz_with.inv LipschitzWith.inv

@[to_additive add]
theorem mul' (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) : LipschitzWith (Kf + Kg) fun x => f x * g x :=
  fun x y =>
  calc
    edist (f x * g x) (f y * g y) ‚â§ edist (f x) (f y) + edist (g x) (g y) := edist_mul_mul_le _ _ _ _
    _ ‚â§ Kf * edist x y + Kg * edist x y := add_le_add (hf x y) (hg x y)
    _ = (Kf + Kg) * edist x y := (add_mul _ _ _).symm
    
#align lipschitz_with.mul' LipschitzWith.mul'

@[to_additive]
theorem div (hf : LipschitzWith Kf f) (hg : LipschitzWith Kg g) : LipschitzWith (Kf + Kg) fun x => f x / g x := by
  simpa only [div_eq_mul_inv] using hf.mul' hg.inv
#align lipschitz_with.div LipschitzWith.div

end LipschitzWith

namespace AntilipschitzWith

variable [PseudoEmetricSpace Œ±] {K Kf Kg : ‚Ñù‚â•0} {f g : Œ± ‚Üí E}

@[to_additive]
theorem mulLipschitzWith (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg g) (hK : Kg < Kf‚Åª¬π) :
    AntilipschitzWith (Kf‚Åª¬π - Kg)‚Åª¬π fun x => f x * g x := by
  letI : PseudoMetricSpace Œ± := PseudoEmetricSpace.toPseudoMetricSpace hf.edist_ne_top
  refine' AntilipschitzWith.ofLeMulDist fun x y => _
  rw [Nnreal.coe_inv, ‚Üê div_eq_inv_mul]
  rw [le_div_iff (Nnreal.coe_pos.2 $ tsub_pos_iff_lt.2 hK)]
  rw [mul_comm, Nnreal.coe_sub hK.le, sub_mul]
  calc
    ‚ÜëKf‚Åª¬π * dist x y - Kg * dist x y ‚â§ dist (f x) (f y) - dist (g x) (g y) :=
      sub_le_sub (hf.mul_le_dist x y) (hg.dist_le_mul x y)
    _ ‚â§ _ := le_trans (le_abs_self _) (abs_dist_sub_le_dist_mul_mul _ _ _ _)
    
#align antilipschitz_with.mul_lipschitz_with AntilipschitzWith.mulLipschitzWith

@[to_additive]
theorem mulDivLipschitzWith (hf : AntilipschitzWith Kf f) (hg : LipschitzWith Kg (g / f)) (hK : Kg < Kf‚Åª¬π) :
    AntilipschitzWith (Kf‚Åª¬π - Kg)‚Åª¬π g := by
  simpa only [Pi.div_apply, mul_div_cancel'_right] using hf.mul_lipschitz_with hg hK
#align antilipschitz_with.mul_div_lipschitz_with AntilipschitzWith.mulDivLipschitzWith

@[to_additive]
theorem le_mul_norm_div {f : E ‚Üí F} (hf : AntilipschitzWith K f) (x y : E) : ‚à•x / y‚à• ‚â§ K * ‚à•f x / f y‚à• := by
  simp [‚Üê dist_eq_norm_div, hf.le_mul_dist x y]
#align antilipschitz_with.le_mul_norm_div AntilipschitzWith.le_mul_norm_div

end AntilipschitzWith

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) SeminormedCommGroup.toHasLipschitzMul : HasLipschitzMul E :=
  ‚ü®‚ü®1 + 1, LipschitzWith.prodFst.mul' LipschitzWith.prodSnd‚ü©‚ü©
#align seminormed_comm_group.to_has_lipschitz_mul SeminormedCommGroup.toHasLipschitzMul

-- See note [lower instance priority]
/-- A seminormed group is a uniform group, i.e., multiplication and division are uniformly
continuous. -/
@[to_additive
      "A seminormed group is a uniform additive group, i.e., addition and\nsubtraction are uniformly continuous."]
instance (priority := 100) SeminormedCommGroup.to_uniform_group : UniformGroup E :=
  ‚ü®(LipschitzWith.prodFst.div LipschitzWith.prodSnd).UniformContinuous‚ü©
#align seminormed_comm_group.to_uniform_group SeminormedCommGroup.to_uniform_group

-- short-circuit type class inference
-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) SeminormedCommGroup.to_topological_group : TopologicalGroup E :=
  inferInstance
#align seminormed_comm_group.to_topological_group SeminormedCommGroup.to_topological_group

@[to_additive]
theorem cauchySeqProdOfEventuallyEq {u v : ‚Ñï ‚Üí E} {N : ‚Ñï} (huv : ‚àÄ n ‚â• N, u n = v n)
    (hv : CauchySeq fun n => ‚àè k in range (n + 1), v k) : CauchySeq fun n => ‚àè k in range (n + 1), u k := by
  let d : ‚Ñï ‚Üí E := fun n => ‚àè k in range (n + 1), u k / v k
  rw [show (fun n => ‚àè k in range (n + 1), u k) = d * fun n => ‚àè k in range (n + 1), v k by
      ext n
      simp [d]]
  suffices ‚àÄ n ‚â• N, d n = d N by exact (tendsto_at_top_of_eventually_const this).CauchySeq.mul hv
  intro n hn
  dsimp [d]
  rw [eventually_constant_prod _ hn]
  intro m hm
  simp [huv m hm]
#align cauchy_seq_prod_of_eventually_eq cauchySeqProdOfEventuallyEq

end SeminormedCommGroup

section NormedGroup

variable [NormedGroup E] [NormedGroup F] {a b : E}

@[simp, to_additive norm_eq_zero]
theorem norm_eq_zero'' : ‚à•a‚à• = 0 ‚Üî a = 1 :=
  norm_eq_zero'''
#align norm_eq_zero'' norm_eq_zero''

@[to_additive norm_ne_zero_iff]
theorem norm_ne_zero_iff' : ‚à•a‚à• ‚â† 0 ‚Üî a ‚â† 1 :=
  norm_eq_zero''.Not
#align norm_ne_zero_iff' norm_ne_zero_iff'

@[simp, to_additive norm_pos_iff]
theorem norm_pos_iff'' : 0 < ‚à•a‚à• ‚Üî a ‚â† 1 :=
  norm_pos_iff'''
#align norm_pos_iff'' norm_pos_iff''

@[simp, to_additive norm_le_zero_iff]
theorem norm_le_zero_iff'' : ‚à•a‚à• ‚â§ 0 ‚Üî a = 1 :=
  norm_le_zero_iff'''
#align norm_le_zero_iff'' norm_le_zero_iff''

@[to_additive]
theorem norm_div_eq_zero_iff : ‚à•a / b‚à• = 0 ‚Üî a = b := by rw [norm_eq_zero'', div_eq_one]
#align norm_div_eq_zero_iff norm_div_eq_zero_iff

@[to_additive]
theorem norm_div_pos_iff : 0 < ‚à•a / b‚à• ‚Üî a ‚â† b := by
  rw [(norm_nonneg' _).lt_iff_ne, ne_comm]
  exact norm_div_eq_zero_iff.not
#align norm_div_pos_iff norm_div_pos_iff

@[to_additive]
theorem eq_of_norm_div_le_zero (h : ‚à•a / b‚à• ‚â§ 0) : a = b := by rwa [‚Üê div_eq_one, ‚Üê norm_le_zero_iff'']
#align eq_of_norm_div_le_zero eq_of_norm_div_le_zero

alias norm_div_eq_zero_iff ‚Üî eq_of_norm_div_eq_zero _

attribute [to_additive] eq_of_norm_div_eq_zero

@[simp, to_additive nnnorm_eq_zero]
theorem nnnorm_eq_zero' : ‚à•a‚à•‚Çä = 0 ‚Üî a = 1 := by rw [‚Üê Nnreal.coe_eq_zero, coe_nnnorm', norm_eq_zero'']
#align nnnorm_eq_zero' nnnorm_eq_zero'

@[to_additive nnnorm_ne_zero_iff]
theorem nnnorm_ne_zero_iff' : ‚à•a‚à•‚Çä ‚â† 0 ‚Üî a ‚â† 1 :=
  nnnorm_eq_zero'.Not
#align nnnorm_ne_zero_iff' nnnorm_ne_zero_iff'

@[to_additive]
theorem tendsto_norm_div_self_punctured_nhds (a : E) : Tendsto (fun x => ‚à•x / a‚à•) (ùìù[‚â†] a) (ùìù[>] 0) :=
  (tendsto_norm_div_self a).inf $ tendsto_principal_principal.2 $ fun x hx => norm_pos_iff''.2 $ div_ne_one.2 hx
#align tendsto_norm_div_self_punctured_nhds tendsto_norm_div_self_punctured_nhds

@[to_additive]
theorem tendsto_norm_nhds_within_one : Tendsto (norm : E ‚Üí ‚Ñù) (ùìù[‚â†] 1) (ùìù[>] 0) :=
  tendsto_norm_one.inf $ tendsto_principal_principal.2 $ fun x => norm_pos_iff''.2
#align tendsto_norm_nhds_within_one tendsto_norm_nhds_within_one

variable (E)

/-- The norm of a normed group as a group norm. -/
@[to_additive "The norm of a normed group as an additive group norm."]
def normGroupNorm : GroupNorm E :=
  { normGroupSeminorm _ with eq_one_of_map_eq_zero' := fun _ => norm_eq_zero''.1 }
#align norm_group_norm normGroupNorm

@[simp]
theorem coe_norm_group_norm : ‚áë(normGroupNorm E) = norm :=
  rfl
#align coe_norm_group_norm coe_norm_group_norm

end NormedGroup

section NormedAddGroup

variable [NormedAddGroup E] [TopologicalSpace Œ±] {f : Œ± ‚Üí E}

/-! Some relations with `has_compact_support` -/


theorem has_compact_support_norm_iff : (HasCompactSupport fun x => ‚à•f x‚à•) ‚Üî HasCompactSupport f :=
  has_compact_support_comp_left $ fun x => norm_eq_zero
#align has_compact_support_norm_iff has_compact_support_norm_iff

alias has_compact_support_norm_iff ‚Üî _ HasCompactSupport.norm

theorem Continuous.bounded_above_of_compact_support (hf : Continuous f) (h : HasCompactSupport f) :
    ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C := by simpa [bdd_above_def] using hf.norm.bdd_above_range_of_has_compact_support h.norm
#align continuous.bounded_above_of_compact_support Continuous.bounded_above_of_compact_support

end NormedAddGroup

/-! ### `ulift` -/


namespace ULift

section HasNorm

variable [HasNorm E]

instance : HasNorm (ULift E) :=
  ‚ü®fun x => ‚à•x.down‚à•‚ü©

theorem norm_def (x : ULift E) : ‚à•x‚à• = ‚à•x.down‚à• :=
  rfl
#align ulift.norm_def ULift.norm_def

@[simp]
theorem norm_up (x : E) : ‚à•ULift.up x‚à• = ‚à•x‚à• :=
  rfl
#align ulift.norm_up ULift.norm_up

@[simp]
theorem norm_down (x : ULift E) : ‚à•x.down‚à• = ‚à•x‚à• :=
  rfl
#align ulift.norm_down ULift.norm_down

end HasNorm

section HasNnnorm

variable [HasNnnorm E]

instance : HasNnnorm (ULift E) :=
  ‚ü®fun x => ‚à•x.down‚à•‚Çä‚ü©

theorem nnnorm_def (x : ULift E) : ‚à•x‚à•‚Çä = ‚à•x.down‚à•‚Çä :=
  rfl
#align ulift.nnnorm_def ULift.nnnorm_def

@[simp]
theorem nnnorm_up (x : E) : ‚à•ULift.up x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align ulift.nnnorm_up ULift.nnnorm_up

@[simp]
theorem nnnorm_down (x : ULift E) : ‚à•x.down‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align ulift.nnnorm_down ULift.nnnorm_down

end HasNnnorm

@[to_additive]
instance seminormedGroup [SeminormedGroup E] : SeminormedGroup (ULift E) :=
  SeminormedGroup.induced _ _ (‚ü®ULift.down, rfl, fun _ _ => rfl‚ü© : ULift E ‚Üí* E)
#align ulift.seminormed_group ULift.seminormedGroup

@[to_additive]
instance seminormedCommGroup [SeminormedCommGroup E] : SeminormedCommGroup (ULift E) :=
  SeminormedCommGroup.induced _ _ (‚ü®ULift.down, rfl, fun _ _ => rfl‚ü© : ULift E ‚Üí* E)
#align ulift.seminormed_comm_group ULift.seminormedCommGroup

@[to_additive]
instance normedGroup [NormedGroup E] : NormedGroup (ULift E) :=
  NormedGroup.induced _ _ (‚ü®ULift.down, rfl, fun _ _ => rfl‚ü© : ULift E ‚Üí* E) down_injective
#align ulift.normed_group ULift.normedGroup

@[to_additive]
instance normedCommGroup [NormedCommGroup E] : NormedCommGroup (ULift E) :=
  NormedCommGroup.induced _ _ (‚ü®ULift.down, rfl, fun _ _ => rfl‚ü© : ULift E ‚Üí* E) down_injective
#align ulift.normed_comm_group ULift.normedCommGroup

end ULift

/-! ### `additive`, `multiplicative` -/


section AdditiveMultiplicative

open Additive Multiplicative

section HasNorm

variable [HasNorm E]

instance : HasNorm (Additive E) :=
  ‚ÄπHasNorm E‚Ä∫

instance : HasNorm (Multiplicative E) :=
  ‚ÄπHasNorm E‚Ä∫

@[simp]
theorem norm_to_mul (x) : ‚à•(toMul x : E)‚à• = ‚à•x‚à• :=
  rfl
#align norm_to_mul norm_to_mul

@[simp]
theorem norm_of_mul (x : E) : ‚à•ofMul x‚à• = ‚à•x‚à• :=
  rfl
#align norm_of_mul norm_of_mul

@[simp]
theorem norm_to_add (x) : ‚à•(toAdd x : E)‚à• = ‚à•x‚à• :=
  rfl
#align norm_to_add norm_to_add

@[simp]
theorem norm_of_add (x : E) : ‚à•ofAdd x‚à• = ‚à•x‚à• :=
  rfl
#align norm_of_add norm_of_add

end HasNorm

section HasNnnorm

variable [HasNnnorm E]

instance : HasNnnorm (Additive E) :=
  ‚ÄπHasNnnorm E‚Ä∫

instance : HasNnnorm (Multiplicative E) :=
  ‚ÄπHasNnnorm E‚Ä∫

@[simp]
theorem nnnorm_to_mul (x) : ‚à•(toMul x : E)‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align nnnorm_to_mul nnnorm_to_mul

@[simp]
theorem nnnorm_of_mul (x : E) : ‚à•ofMul x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align nnnorm_of_mul nnnorm_of_mul

@[simp]
theorem nnnorm_to_add (x) : ‚à•(toAdd x : E)‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align nnnorm_to_add nnnorm_to_add

@[simp]
theorem nnnorm_of_add (x : E) : ‚à•ofAdd x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align nnnorm_of_add nnnorm_of_add

end HasNnnorm

instance [SeminormedGroup E] : SeminormedAddGroup (Additive E) where dist_eq := dist_eq_norm_div

instance [SeminormedAddGroup E] : SeminormedGroup (Multiplicative E) where dist_eq := dist_eq_norm_sub

instance [SeminormedCommGroup E] : SeminormedAddCommGroup (Additive E) :=
  { Additive.seminormedAddGroup with }

instance [SeminormedAddCommGroup E] : SeminormedCommGroup (Multiplicative E) :=
  { Multiplicative.seminormedGroup with }

instance [NormedGroup E] : NormedAddGroup (Additive E) :=
  { Additive.seminormedAddGroup with }

instance [NormedAddGroup E] : NormedGroup (Multiplicative E) :=
  { Multiplicative.seminormedGroup with }

instance [NormedCommGroup E] : NormedAddCommGroup (Additive E) :=
  { Additive.seminormedAddGroup with }

instance [NormedAddCommGroup E] : NormedCommGroup (Multiplicative E) :=
  { Multiplicative.seminormedGroup with }

end AdditiveMultiplicative

/-! ### Order dual -/


section OrderDual

open OrderDual

section HasNorm

variable [HasNorm E]

instance : HasNorm E·µí·µà :=
  ‚ÄπHasNorm E‚Ä∫

@[simp]
theorem norm_to_dual (x : E) : ‚à•toDual x‚à• = ‚à•x‚à• :=
  rfl
#align norm_to_dual norm_to_dual

@[simp]
theorem norm_of_dual (x : E·µí·µà) : ‚à•ofDual x‚à• = ‚à•x‚à• :=
  rfl
#align norm_of_dual norm_of_dual

end HasNorm

section HasNnnorm

variable [HasNnnorm E]

instance : HasNnnorm E·µí·µà :=
  ‚ÄπHasNnnorm E‚Ä∫

@[simp]
theorem nnnorm_to_dual (x : E) : ‚à•toDual x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align nnnorm_to_dual nnnorm_to_dual

@[simp]
theorem nnnorm_of_dual (x : E·µí·µà) : ‚à•ofDual x‚à•‚Çä = ‚à•x‚à•‚Çä :=
  rfl
#align nnnorm_of_dual nnnorm_of_dual

end HasNnnorm

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) [SeminormedGroup E] : SeminormedGroup E·µí·µà :=
  ‚ÄπSeminormedGroup E‚Ä∫

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) [SeminormedCommGroup E] : SeminormedCommGroup E·µí·µà :=
  ‚ÄπSeminormedCommGroup E‚Ä∫

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) [NormedGroup E] : NormedGroup E·µí·µà :=
  ‚ÄπNormedGroup E‚Ä∫

-- See note [lower instance priority]
@[to_additive]
instance (priority := 100) [NormedCommGroup E] : NormedCommGroup E·µí·µà :=
  ‚ÄπNormedCommGroup E‚Ä∫

end OrderDual

/-! ### Binary product of normed groups -/


section HasNorm

variable [HasNorm E] [HasNorm F] {x : E √ó F} {r : ‚Ñù}

instance : HasNorm (E √ó F) :=
  ‚ü®fun x => ‚à•x.1‚à• ‚äî ‚à•x.2‚à•‚ü©

theorem Prod.norm_def (x : E √ó F) : ‚à•x‚à• = max ‚à•x.1‚à• ‚à•x.2‚à• :=
  rfl
#align prod.norm_def Prod.norm_def

theorem norm_fst_le (x : E √ó F) : ‚à•x.1‚à• ‚â§ ‚à•x‚à• :=
  le_max_left _ _
#align norm_fst_le norm_fst_le

theorem norm_snd_le (x : E √ó F) : ‚à•x.2‚à• ‚â§ ‚à•x‚à• :=
  le_max_right _ _
#align norm_snd_le norm_snd_le

theorem norm_prod_le_iff : ‚à•x‚à• ‚â§ r ‚Üî ‚à•x.1‚à• ‚â§ r ‚àß ‚à•x.2‚à• ‚â§ r :=
  max_le_iff
#align norm_prod_le_iff norm_prod_le_iff

end HasNorm

section SeminormedGroup

variable [SeminormedGroup E] [SeminormedGroup F]

/-- Product of seminormed groups, using the sup norm. -/
@[to_additive "Product of seminormed groups, using the sup norm."]
instance : SeminormedGroup (E √ó F) :=
  ‚ü®fun x y => by simp only [Prod.norm_def, Prod.dist_eq, dist_eq_norm_div, Prod.fst_div, Prod.snd_div]‚ü©

@[to_additive Prod.nnnorm_def']
theorem Prod.nnorm_def (x : E √ó F) : ‚à•x‚à•‚Çä = max ‚à•x.1‚à•‚Çä ‚à•x.2‚à•‚Çä :=
  rfl
#align prod.nnorm_def Prod.nnorm_def

end SeminormedGroup

/-- Product of seminormed groups, using the sup norm. -/
@[to_additive "Product of seminormed groups, using the sup norm."]
instance [SeminormedCommGroup E] [SeminormedCommGroup F] : SeminormedCommGroup (E √ó F) :=
  { Prod.seminormedGroup with }

/-- Product of normed groups, using the sup norm. -/
@[to_additive "Product of normed groups, using the sup norm."]
instance [NormedGroup E] [NormedGroup F] : NormedGroup (E √ó F) :=
  { Prod.seminormedGroup with }

/-- Product of normed groups, using the sup norm. -/
@[to_additive "Product of normed groups, using the sup norm."]
instance [NormedCommGroup E] [NormedCommGroup F] : NormedCommGroup (E √ó F) :=
  { Prod.seminormedGroup with }

/-! ### Finite product of normed groups -/


section Pi

variable {œÄ : Œπ ‚Üí Type _} [Fintype Œπ]

section SeminormedGroup

variable [‚àÄ i, SeminormedGroup (œÄ i)] [SeminormedGroup E] (f : ‚àÄ i, œÄ i) {x : ‚àÄ i, œÄ i} {r : ‚Ñù}

/-- Finite product of seminormed groups, using the sup norm. -/
@[to_additive "Finite product of seminormed groups, using the sup norm."]
instance : SeminormedGroup (‚àÄ i, œÄ i) where
  norm f := ‚Üë(Finset.univ.sup fun b => ‚à•f b‚à•‚Çä)
  dist_eq x y :=
    congr_arg (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù) $
      congr_arg (Finset.sup Finset.univ) $
        funext $ fun a => show nndist (x a) (y a) = ‚à•x a / y a‚à•‚Çä from nndist_eq_nnnorm_div (x a) (y a)

@[to_additive Pi.norm_def]
theorem Pi.norm_def' : ‚à•f‚à• = ‚Üë(Finset.univ.sup fun b => ‚à•f b‚à•‚Çä) :=
  rfl
#align pi.norm_def' Pi.norm_def'

@[to_additive Pi.nnnorm_def]
theorem Pi.nnnorm_def' : ‚à•f‚à•‚Çä = Finset.univ.sup fun b => ‚à•f b‚à•‚Çä :=
  Subtype.eta _ _
#align pi.nnnorm_def' Pi.nnnorm_def'

/-- The seminorm of an element in a product space is `‚â§ r` if and only if the norm of each
component is. -/
@[to_additive pi_norm_le_iff_of_nonneg
      "The seminorm of an element in a product space is `‚â§ r` if\nand only if the norm of each component is."]
theorem pi_norm_le_iff_of_nonneg' (hr : 0 ‚â§ r) : ‚à•x‚à• ‚â§ r ‚Üî ‚àÄ i, ‚à•x i‚à• ‚â§ r := by
  simp only [‚Üê dist_one_right, dist_pi_le_iff hr, Pi.one_apply]
#align pi_norm_le_iff_of_nonneg' pi_norm_le_iff_of_nonneg'

@[to_additive pi_nnnorm_le_iff]
theorem pi_nnnorm_le_iff' {r : ‚Ñù‚â•0} : ‚à•x‚à•‚Çä ‚â§ r ‚Üî ‚àÄ i, ‚à•x i‚à•‚Çä ‚â§ r :=
  pi_norm_le_iff_of_nonneg' r.coe_nonneg
#align pi_nnnorm_le_iff' pi_nnnorm_le_iff'

@[to_additive pi_norm_le_iff_of_nonempty]
theorem pi_norm_le_iff_of_nonempty' [Nonempty Œπ] : ‚à•f‚à• ‚â§ r ‚Üî ‚àÄ b, ‚à•f b‚à• ‚â§ r := by
  by_cases hr:0 ‚â§ r
  ¬∑ exact pi_norm_le_iff_of_nonneg' hr
    
  ¬∑ exact
      iff_of_false (fun h => hr $ (norm_nonneg' _).trans h) fun h =>
        hr $ (norm_nonneg' _).trans $ h $ Classical.arbitrary _
    
#align pi_norm_le_iff_of_nonempty' pi_norm_le_iff_of_nonempty'

/-- The seminorm of an element in a product space is `< r` if and only if the norm of each
component is. -/
@[to_additive pi_norm_lt_iff
      "The seminorm of an element in a product space is `< r` if and only if\nthe norm of each component is."]
theorem pi_norm_lt_iff' (hr : 0 < r) : ‚à•x‚à• < r ‚Üî ‚àÄ i, ‚à•x i‚à• < r := by
  simp only [‚Üê dist_one_right, dist_pi_lt_iff hr, Pi.one_apply]
#align pi_norm_lt_iff' pi_norm_lt_iff'

@[to_additive pi_nnnorm_lt_iff]
theorem pi_nnnorm_lt_iff' {r : ‚Ñù‚â•0} (hr : 0 < r) : ‚à•x‚à•‚Çä < r ‚Üî ‚àÄ i, ‚à•x i‚à•‚Çä < r :=
  pi_norm_lt_iff' hr
#align pi_nnnorm_lt_iff' pi_nnnorm_lt_iff'

@[to_additive norm_le_pi_norm]
theorem norm_le_pi_norm' (i : Œπ) : ‚à•f i‚à• ‚â§ ‚à•f‚à• :=
  (pi_norm_le_iff_of_nonneg' $ norm_nonneg' _).1 le_rfl i
#align norm_le_pi_norm' norm_le_pi_norm'

@[to_additive nnnorm_le_pi_nnnorm]
theorem nnnorm_le_pi_nnnorm' (i : Œπ) : ‚à•f i‚à•‚Çä ‚â§ ‚à•f‚à•‚Çä :=
  norm_le_pi_norm' _ i
#align nnnorm_le_pi_nnnorm' nnnorm_le_pi_nnnorm'

@[to_additive pi_norm_const_le]
theorem pi_norm_const_le' (a : E) : ‚à•fun _ : Œπ => a‚à• ‚â§ ‚à•a‚à• :=
  (pi_norm_le_iff_of_nonneg' $ norm_nonneg' _).2 $ fun _ => le_rfl
#align pi_norm_const_le' pi_norm_const_le'

@[to_additive pi_nnnorm_const_le]
theorem pi_nnnorm_const_le' (a : E) : ‚à•fun _ : Œπ => a‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä :=
  pi_norm_const_le' _
#align pi_nnnorm_const_le' pi_nnnorm_const_le'

@[simp, to_additive pi_norm_const]
theorem pi_norm_const' [Nonempty Œπ] (a : E) : ‚à•fun i : Œπ => a‚à• = ‚à•a‚à• := by
  simpa only [‚Üê dist_one_right] using dist_pi_const a 1
#align pi_norm_const' pi_norm_const'

@[simp, to_additive pi_nnnorm_const]
theorem pi_nnnorm_const' [Nonempty Œπ] (a : E) : ‚à•fun i : Œπ => a‚à•‚Çä = ‚à•a‚à•‚Çä :=
  Nnreal.eq $ pi_norm_const' a
#align pi_nnnorm_const' pi_nnnorm_const'

/-- The $L^1$ norm is less than the $L^\infty$ norm scaled by the cardinality. -/
@[to_additive Pi.sum_norm_apply_le_norm "The $L^1$ norm is less than the $L^\\infty$ norm scaled by\nthe cardinality."]
theorem Pi.sum_norm_apply_le_norm' : (‚àë i, ‚à•f i‚à•) ‚â§ Fintype.card Œπ ‚Ä¢ ‚à•f‚à• :=
  Finset.sum_le_card_nsmul _ _ _ $ fun i hi => norm_le_pi_norm' _ i
#align pi.sum_norm_apply_le_norm' Pi.sum_norm_apply_le_norm'

/-- The $L^1$ norm is less than the $L^\infty$ norm scaled by the cardinality. -/
@[to_additive Pi.sum_nnnorm_apply_le_nnnorm
      "The $L^1$ norm is less than the $L^\\infty$ norm scaled\nby the cardinality."]
theorem Pi.sum_nnnorm_apply_le_nnnorm' : (‚àë i, ‚à•f i‚à•‚Çä) ‚â§ Fintype.card Œπ ‚Ä¢ ‚à•f‚à•‚Çä :=
  Nnreal.coe_sum.trans_le $ Pi.sum_norm_apply_le_norm' _
#align pi.sum_nnnorm_apply_le_nnnorm' Pi.sum_nnnorm_apply_le_nnnorm'

end SeminormedGroup

/-- Finite product of seminormed groups, using the sup norm. -/
@[to_additive "Finite product of seminormed groups, using the sup norm."]
instance Pi.seminormedCommGroup [‚àÄ i, SeminormedCommGroup (œÄ i)] : SeminormedCommGroup (‚àÄ i, œÄ i) :=
  { Pi.seminormedGroup with }
#align pi.seminormed_comm_group Pi.seminormedCommGroup

/-- Finite product of normed groups, using the sup norm. -/
@[to_additive "Finite product of seminormed groups, using the sup norm."]
instance Pi.normedGroup [‚àÄ i, NormedGroup (œÄ i)] : NormedGroup (‚àÄ i, œÄ i) :=
  { Pi.seminormedGroup with }
#align pi.normed_group Pi.normedGroup

/-- Finite product of normed groups, using the sup norm. -/
@[to_additive "Finite product of seminormed groups, using the sup norm."]
instance Pi.normedCommGroup [‚àÄ i, NormedCommGroup (œÄ i)] : NormedCommGroup (‚àÄ i, œÄ i) :=
  { Pi.seminormedGroup with }
#align pi.normed_comm_group Pi.normedCommGroup

end Pi

/-! ### Subgroups of normed groups -/


namespace Subgroup

section SeminormedGroup

variable [SeminormedGroup E] {s : Subgroup E}

/-- A subgroup of a seminormed group is also a seminormed group,
with the restriction of the norm. -/
@[to_additive "A subgroup of a seminormed group is also a seminormed group,\nwith the restriction of the norm."]
instance seminormedGroup : SeminormedGroup s :=
  SeminormedGroup.induced _ _ s.Subtype
#align subgroup.seminormed_group Subgroup.seminormedGroup

/-- If `x` is an element of a subgroup `s` of a seminormed group `E`, its norm in `s` is equal to
its norm in `E`. -/
@[simp,
  to_additive
      "If `x` is an element of a subgroup `s` of a seminormed group `E`, its norm in\n`s` is equal to its norm in `E`."]
theorem coe_norm (x : s) : ‚à•x‚à• = ‚à•(x : E)‚à• :=
  rfl
#align subgroup.coe_norm Subgroup.coe_norm

/-- If `x` is an element of a subgroup `s` of a seminormed group `E`, its norm in `s` is equal to
its norm in `E`.

This is a reversed version of the `simp` lemma `subgroup.coe_norm` for use by `norm_cast`. -/
@[norm_cast,
  to_additive
      "If `x` is an element of a subgroup `s` of a seminormed group `E`, its norm\nin `s` is equal to its norm in `E`.\n\nThis is a reversed version of the `simp` lemma `add_subgroup.coe_norm` for use by `norm_cast`."]
theorem norm_coe {s : Subgroup E} (x : s) : ‚à•(x : E)‚à• = ‚à•x‚à• :=
  rfl
#align subgroup.norm_coe Subgroup.norm_coe

end SeminormedGroup

@[to_additive]
instance seminormedCommGroup [SeminormedCommGroup E] {s : Subgroup E} : SeminormedCommGroup s :=
  SeminormedCommGroup.induced _ _ s.Subtype
#align subgroup.seminormed_comm_group Subgroup.seminormedCommGroup

@[to_additive]
instance normedGroup [NormedGroup E] {s : Subgroup E} : NormedGroup s :=
  NormedGroup.induced _ _ s.Subtype Subtype.coe_injective
#align subgroup.normed_group Subgroup.normedGroup

@[to_additive]
instance normedCommGroup [NormedCommGroup E] {s : Subgroup E} : NormedCommGroup s :=
  NormedCommGroup.induced _ _ s.Subtype Subtype.coe_injective
#align subgroup.normed_comm_group Subgroup.normedCommGroup

end Subgroup

/-! ### Submodules of normed groups -/


namespace Submodule

-- See note [implicit instance arguments]
/-- A submodule of a seminormed group is also a seminormed group, with the restriction of the norm.
-/
instance seminormedAddCommGroup {_ : Ring ùïú} [SeminormedAddCommGroup E] {_ : Module ùïú E} (s : Submodule ùïú E) :
    SeminormedAddCommGroup s :=
  SeminormedAddCommGroup.induced _ _ s.Subtype.toAddMonoidHom
#align submodule.seminormed_add_comm_group Submodule.seminormedAddCommGroup

-- See note [implicit instance arguments].
/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `s` is equal to its
norm in `E`. -/
@[simp]
theorem coe_norm {_ : Ring ùïú} [SeminormedAddCommGroup E] {_ : Module ùïú E} {s : Submodule ùïú E} (x : s) :
    ‚à•x‚à• = ‚à•(x : E)‚à• :=
  rfl
#align submodule.coe_norm Submodule.coe_norm

-- See note [implicit instance arguments].
/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `E` is equal to its
norm in `s`.

This is a reversed version of the `simp` lemma `submodule.coe_norm` for use by `norm_cast`. -/
@[norm_cast]
theorem norm_coe {_ : Ring ùïú} [SeminormedAddCommGroup E] {_ : Module ùïú E} {s : Submodule ùïú E} (x : s) :
    ‚à•(x : E)‚à• = ‚à•x‚à• :=
  rfl
#align submodule.norm_coe Submodule.norm_coe

-- See note [implicit instance arguments].
/-- A submodule of a normed group is also a normed group, with the restriction of the norm. -/
instance {_ : Ring ùïú} [NormedAddCommGroup E] {_ : Module ùïú E} (s : Submodule ùïú E) : NormedAddCommGroup s :=
  { Submodule.seminormedAddCommGroup s with }

end Submodule

