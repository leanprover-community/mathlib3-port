/-
Copyright (c) 2021 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Riccardo Brasca

! This file was ported from Lean 3 source module analysis.normed.group.SemiNormedGroup
! leanprover-community/mathlib commit 44b58b42794e5abe2bf86397c38e26b587e07e59
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Normed.Group.Hom
import Mathbin.CategoryTheory.Limits.Shapes.ZeroMorphisms
import Mathbin.CategoryTheory.ConcreteCategory.BundledHom
import Mathbin.CategoryTheory.Elementwise

/-!
# The category of seminormed groups

We define `SemiNormedGroup`, the category of seminormed groups and normed group homs between them,
as well as `SemiNormedGroup‚ÇÅ`, the subcategory of norm non-increasing morphisms.
-/


noncomputable section

universe u

open CategoryTheory

/-- The category of seminormed abelian groups and bounded group homomorphisms. -/
def SemiNormedGroupCat : Type (u + 1) :=
  Bundled SeminormedAddCommGroup
#align SemiNormedGroup SemiNormedGroupCat

namespace SemiNormedGroupCat

instance bundledHom : BundledHom @NormedAddGroupHom :=
  ‚ü®@NormedAddGroupHom.toFun, @NormedAddGroupHom.id, @NormedAddGroupHom.comp,
    @NormedAddGroupHom.coe_inj‚ü©
#align SemiNormedGroup.bundled_hom SemiNormedGroupCat.bundledHom

deriving instance LargeCategory, ConcreteCategory for SemiNormedGroupCat

instance : CoeSort SemiNormedGroupCat (Type u) :=
  bundled.has_coe_to_sort

/-- Construct a bundled `SemiNormedGroup` from the underlying type and typeclass. -/
def of (M : Type u) [SeminormedAddCommGroup M] : SemiNormedGroupCat :=
  Bundled.of M
#align SemiNormedGroup.of SemiNormedGroupCat.of

instance (M : SemiNormedGroupCat) : SeminormedAddCommGroup M :=
  M.str

@[simp]
theorem coe_of (V : Type u) [SeminormedAddCommGroup V] : (SemiNormedGroupCat.of V : Type u) = V :=
  rfl
#align SemiNormedGroup.coe_of SemiNormedGroupCat.coe_of

@[simp]
theorem coe_id (V : SemiNormedGroupCat) : ‚áë(ùüô V) = id :=
  rfl
#align SemiNormedGroup.coe_id SemiNormedGroupCat.coe_id

@[simp]
theorem coe_comp {M N K : SemiNormedGroupCat} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : M ‚Üí K) = g ‚àò f :=
  rfl
#align SemiNormedGroup.coe_comp SemiNormedGroupCat.coe_comp

instance : Inhabited SemiNormedGroupCat :=
  ‚ü®of PUnit‚ü©

instance ofUnique (V : Type u) [SeminormedAddCommGroup V] [i : Unique V] :
    Unique (SemiNormedGroupCat.of V) :=
  i
#align SemiNormedGroup.of_unique SemiNormedGroupCat.ofUnique

instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGroupCat where

@[simp]
theorem zero_apply {V W : SemiNormedGroupCat} (x : V) : (0 : V ‚ü∂ W) x = 0 :=
  rfl
#align SemiNormedGroup.zero_apply SemiNormedGroupCat.zero_apply

theorem is_zero_of_subsingleton (V : SemiNormedGroupCat) [Subsingleton V] : Limits.IsZero V :=
  by
  refine' ‚ü®fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©, fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©‚ü©
  ¬∑ ext
    have : x = 0 := Subsingleton.elim _ _
    simp only [this, map_zero]
  ¬∑ ext
    apply Subsingleton.elim
#align SemiNormedGroup.is_zero_of_subsingleton SemiNormedGroupCat.is_zero_of_subsingleton

instance has_zero_object : Limits.HasZeroObject SemiNormedGroupCat.{u} :=
  ‚ü®‚ü®of PUnit, is_zero_of_subsingleton _‚ü©‚ü©
#align SemiNormedGroup.has_zero_object SemiNormedGroupCat.has_zero_object

theorem iso_isometry_of_norm_noninc {V W : SemiNormedGroupCat} (i : V ‚âÖ W) (h1 : i.hom.NormNoninc)
    (h2 : i.inv.NormNoninc) : Isometry i.hom :=
  by
  apply AddMonoidHomClass.isometry_of_norm
  intro v
  apply le_antisymm (h1 v)
  calc
    ‚Äñv‚Äñ = ‚Äñi.inv (i.hom v)‚Äñ := by rw [iso.hom_inv_id_apply]
    _ ‚â§ ‚Äñi.hom v‚Äñ := h2 _
    
#align SemiNormedGroup.iso_isometry_of_norm_noninc SemiNormedGroupCat.iso_isometry_of_norm_noninc

end SemiNormedGroupCat

/-- `SemiNormedGroup‚ÇÅ` is a type synonym for `SemiNormedGroup`,
which we shall equip with the category structure consisting only of the norm non-increasing maps.
-/
def SemiNormedGroup‚ÇÅCat : Type (u + 1) :=
  Bundled SeminormedAddCommGroup
#align SemiNormedGroup‚ÇÅ SemiNormedGroup‚ÇÅCat

namespace SemiNormedGroup‚ÇÅCat

instance : CoeSort SemiNormedGroup‚ÇÅCat (Type u) :=
  bundled.has_coe_to_sort

instance : LargeCategory.{u} SemiNormedGroup‚ÇÅCat
    where
  hom X Y := { f : NormedAddGroupHom X Y // f.NormNoninc }
  id X := ‚ü®NormedAddGroupHom.id X, NormedAddGroupHom.NormNoninc.id‚ü©
  comp X Y Z f g := ‚ü®(g : NormedAddGroupHom Y Z).comp (f : NormedAddGroupHom X Y), g.2.comp f.2‚ü©

@[ext]
theorem hom_ext {M N : SemiNormedGroup‚ÇÅCat} (f g : M ‚ü∂ N) (w : (f : M ‚Üí N) = (g : M ‚Üí N)) : f = g :=
  Subtype.eq (NormedAddGroupHom.ext (congr_fun w))
#align SemiNormedGroup‚ÇÅ.hom_ext SemiNormedGroup‚ÇÅCat.hom_ext

instance : ConcreteCategory.{u} SemiNormedGroup‚ÇÅCat
    where
  forget :=
    { obj := fun X => X
      map := fun X Y f => f }
  forget_faithful := { }

/-- Construct a bundled `SemiNormedGroup‚ÇÅ` from the underlying type and typeclass. -/
def of (M : Type u) [SeminormedAddCommGroup M] : SemiNormedGroup‚ÇÅCat :=
  Bundled.of M
#align SemiNormedGroup‚ÇÅ.of SemiNormedGroup‚ÇÅCat.of

instance (M : SemiNormedGroup‚ÇÅCat) : SeminormedAddCommGroup M :=
  M.str

/-- Promote a morphism in `SemiNormedGroup` to a morphism in `SemiNormedGroup‚ÇÅ`. -/
def mkHom {M N : SemiNormedGroupCat} (f : M ‚ü∂ N) (i : f.NormNoninc) :
    SemiNormedGroup‚ÇÅCat.of M ‚ü∂ SemiNormedGroup‚ÇÅCat.of N :=
  ‚ü®f, i‚ü©
#align SemiNormedGroup‚ÇÅ.mk_hom SemiNormedGroup‚ÇÅCat.mkHom

@[simp]
theorem mk_hom_apply {M N : SemiNormedGroupCat} (f : M ‚ü∂ N) (i : f.NormNoninc) (x) :
    mkHom f i x = f x :=
  rfl
#align SemiNormedGroup‚ÇÅ.mk_hom_apply SemiNormedGroup‚ÇÅCat.mk_hom_apply

/-- Promote an isomorphism in `SemiNormedGroup` to an isomorphism in `SemiNormedGroup‚ÇÅ`. -/
@[simps]
def mkIso {M N : SemiNormedGroupCat} (f : M ‚âÖ N) (i : f.hom.NormNoninc) (i' : f.inv.NormNoninc) :
    SemiNormedGroup‚ÇÅCat.of M ‚âÖ SemiNormedGroup‚ÇÅCat.of N
    where
  hom := mkHom f.hom i
  inv := mkHom f.inv i'
  hom_inv_id' := by
    apply Subtype.eq
    exact f.hom_inv_id
  inv_hom_id' := by
    apply Subtype.eq
    exact f.inv_hom_id
#align SemiNormedGroup‚ÇÅ.mk_iso SemiNormedGroup‚ÇÅCat.mkIso

instance : HasForget‚ÇÇ SemiNormedGroup‚ÇÅCat SemiNormedGroupCat
    where forget‚ÇÇ :=
    { obj := fun X => X
      map := fun X Y f => f.1 }

@[simp]
theorem coe_of (V : Type u) [SeminormedAddCommGroup V] : (SemiNormedGroup‚ÇÅCat.of V : Type u) = V :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_of SemiNormedGroup‚ÇÅCat.coe_of

@[simp]
theorem coe_id (V : SemiNormedGroup‚ÇÅCat) : ‚áë(ùüô V) = id :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_id SemiNormedGroup‚ÇÅCat.coe_id

@[simp]
theorem coe_comp {M N K : SemiNormedGroup‚ÇÅCat} (f : M ‚ü∂ N) (g : N ‚ü∂ K) : (f ‚â´ g : M ‚Üí K) = g ‚àò f :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_comp SemiNormedGroup‚ÇÅCat.coe_comp

-- If `coe_fn_coe_base` fires before `coe_comp`, `coe_comp'` puts us back in normal form.
@[simp]
theorem coe_comp' {M N K : SemiNormedGroup‚ÇÅCat} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
    (f ‚â´ g : NormedAddGroupHom M K) = (‚Üëg : NormedAddGroupHom N K).comp ‚Üëf :=
  rfl
#align SemiNormedGroup‚ÇÅ.coe_comp' SemiNormedGroup‚ÇÅCat.coe_comp'

instance : Inhabited SemiNormedGroup‚ÇÅCat :=
  ‚ü®of PUnit‚ü©

instance ofUnique (V : Type u) [SeminormedAddCommGroup V] [i : Unique V] :
    Unique (SemiNormedGroup‚ÇÅCat.of V) :=
  i
#align SemiNormedGroup‚ÇÅ.of_unique SemiNormedGroup‚ÇÅCat.ofUnique

instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGroup‚ÇÅCat
    where
  HasZero X Y := { zero := ‚ü®0, NormedAddGroupHom.NormNoninc.zero‚ü© }
  comp_zero' X Y f Z := by
    ext
    rfl
  zero_comp' X Y Z f := by
    ext
    simp [coe_fn_coe_base']

@[simp]
theorem zero_apply {V W : SemiNormedGroup‚ÇÅCat} (x : V) : (0 : V ‚ü∂ W) x = 0 :=
  rfl
#align SemiNormedGroup‚ÇÅ.zero_apply SemiNormedGroup‚ÇÅCat.zero_apply

theorem is_zero_of_subsingleton (V : SemiNormedGroup‚ÇÅCat) [Subsingleton V] : Limits.IsZero V :=
  by
  refine' ‚ü®fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©, fun X => ‚ü®‚ü®‚ü®0‚ü©, fun f => _‚ü©‚ü©‚ü©
  ¬∑ ext
    have : x = 0 := Subsingleton.elim _ _
    simp only [this, map_zero]
    exact map_zero f.1
  ¬∑ ext
    apply Subsingleton.elim
#align SemiNormedGroup‚ÇÅ.is_zero_of_subsingleton SemiNormedGroup‚ÇÅCat.is_zero_of_subsingleton

instance has_zero_object : Limits.HasZeroObject SemiNormedGroup‚ÇÅCat.{u} :=
  ‚ü®‚ü®of PUnit, is_zero_of_subsingleton _‚ü©‚ü©
#align SemiNormedGroup‚ÇÅ.has_zero_object SemiNormedGroup‚ÇÅCat.has_zero_object

theorem iso_isometry {V W : SemiNormedGroup‚ÇÅCat} (i : V ‚âÖ W) : Isometry i.hom :=
  by
  change Isometry (i.hom : V ‚Üí+ W)
  refine' AddMonoidHomClass.isometry_of_norm i.hom _
  intro v
  apply le_antisymm (i.hom.2 v)
  calc
    ‚Äñv‚Äñ = ‚Äñi.inv (i.hom v)‚Äñ := by rw [iso.hom_inv_id_apply]
    _ ‚â§ ‚Äñi.hom v‚Äñ := i.inv.2 _
    
#align SemiNormedGroup‚ÇÅ.iso_isometry SemiNormedGroup‚ÇÅCat.iso_isometry

end SemiNormedGroup‚ÇÅCat

