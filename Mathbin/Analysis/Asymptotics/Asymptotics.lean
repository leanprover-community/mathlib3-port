import Mathbin.Analysis.NormedSpace.Basic 
import Mathbin.Topology.LocalHomeomorph

/-!
# Asymptotics

We introduce these relations:

* `is_O_with c f g l` : "f is big O of g along l with constant c";
* `is_O f g l` : "f is big O of g along l";
* `is_o f g l` : "f is little o of g along l".

Here `l` is any filter on the domain of `f` and `g`, which are assumed to be the same. The codomains
of `f` and `g` do not need to be the same; all that is needed that there is a norm associated with
these types, and it is the norm that is compared asymptotically.

The relation `is_O_with c` is introduced to factor out common algebraic arguments in the proofs of
similar properties of `is_O` and `is_o`. Usually proofs outside of this file should use `is_O`
instead.

Often the ranges of `f` and `g` will be the real numbers, in which case the norm is the absolute
value. In general, we have

  `is_O f g l ‚Üî is_O (Œª x, ‚à•f x‚à•) (Œª x, ‚à•g x‚à•) l`,

and similarly for `is_o`. But our setup allows us to use the notions e.g. with functions
to the integers, rationals, complex numbers, or any normed vector space without mentioning the
norm explicitly.

If `f` and `g` are functions to a normed field like the reals or complex numbers and `g` is always
nonzero, we have

  `is_o f g l ‚Üî tendsto (Œª x, f x / (g x)) l (ùìù 0)`.

In fact, the right-to-left direction holds without the hypothesis on `g`, and in the other direction
it suffices to assume that `f` is zero wherever `g` is. (This generalization is useful in defining
the Fr√©chet derivative.)
-/


open Filter Set

open_locale TopologicalSpace BigOperators Classical Filter Nnreal

namespace Asymptotics

variable {Œ± : Type _} {Œ≤ : Type _} {E : Type _} {F : Type _} {G : Type _} {E' : Type _} {F' : Type _} {G' : Type _}
  {R : Type _} {R' : Type _} {ùïú : Type _} {ùïú' : Type _}

variable [HasNorm E] [HasNorm F] [HasNorm G] [NormedGroup E'] [NormedGroup F'] [NormedGroup G'] [NormedRing R]
  [NormedRing R'] [NormedField ùïú] [NormedField ùïú'] {c c' : ‚Ñù} {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G} {f' : Œ± ‚Üí E'}
  {g' : Œ± ‚Üí F'} {k' : Œ± ‚Üí G'} {l l' : Filter Œ±}

section Defs

/-! ### Definitions -/


/-- This version of the Landau notation `is_O_with C f g l` where `f` and `g` are two functions on
a type `Œ±` and `l` is a filter on `Œ±`, means that eventually for `l`, `‚à•f‚à•` is bounded by `C * ‚à•g‚à•`.
In other words, `‚à•f‚à• / ‚à•g‚à•` is eventually bounded by `C`, modulo division by zero issues that are
avoided by this definition. Probably you want to use `is_O` instead of this relation. -/
irreducible_def is_O_with (c : ‚Ñù) (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) (l : Filter Œ±) : Prop :=
  ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à•

/-- Definition of `is_O_with`. We record it in a lemma as we will set `is_O_with` to be irreducible
at the end of this file. -/
theorem is_O_with_iff {c : ‚Ñù} {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} : is_O_with c f g l ‚Üî ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  by 
    rw [is_O_with]

alias is_O_with_iff ‚Üî Asymptotics.IsOWith.bound Asymptotics.IsOWith.of_bound

/-- The Landau notation `is_O f g l` where `f` and `g` are two functions on a type `Œ±` and `l` is
a filter on `Œ±`, means that eventually for `l`, `‚à•f‚à•` is bounded by a constant multiple of `‚à•g‚à•`.
In other words, `‚à•f‚à• / ‚à•g‚à•` is eventually bounded, modulo division by zero issues that are avoided
by this definition. -/
irreducible_def is_O (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) (l : Filter Œ±) : Prop :=
  ‚àÉ c : ‚Ñù, is_O_with c f g l

/-- Definition of `is_O` in terms of `is_O_with`. We record it in a lemma as we will set
`is_O` to be irreducible at the end of this file. -/
theorem is_O_iff_is_O_with {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} : is_O f g l ‚Üî ‚àÉ c : ‚Ñù, is_O_with c f g l :=
  by 
    rw [is_O]

/-- Definition of `is_O` in terms of filters. We record it in a lemma as we will set
`is_O` to be irreducible at the end of this file. -/
theorem is_O_iff {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} : is_O f g l ‚Üî ‚àÉ c : ‚Ñù, ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  by 
    simp [is_O, is_O_with]

theorem is_O.of_bound (c : ‚Ñù) {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} (h : ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à•) : is_O f g l :=
  is_O_iff.2 ‚ü®c, h‚ü©

theorem is_O.bound {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} : is_O f g l ‚Üí ‚àÉ c : ‚Ñù, ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  is_O_iff.1

/-- The Landau notation `is_o f g l` where `f` and `g` are two functions on a type `Œ±` and `l` is
a filter on `Œ±`, means that eventually for `l`, `‚à•f‚à•` is bounded by an arbitrarily small constant
multiple of `‚à•g‚à•`. In other words, `‚à•f‚à• / ‚à•g‚à•` tends to `0` along `l`, modulo division by zero
issues that are avoided by this definition. -/
irreducible_def is_o (f : Œ± ‚Üí E) (g : Œ± ‚Üí F) (l : Filter Œ±) : Prop :=
  ‚àÄ ‚¶Éc : ‚Ñù‚¶Ñ, 0 < c ‚Üí is_O_with c f g l

/-- Definition of `is_o` in terms of `is_O_with`. We record it in a lemma as we will set
`is_o` to be irreducible at the end of this file. -/
theorem is_o_iff_forall_is_O_with {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} :
  is_o f g l ‚Üî ‚àÄ ‚¶Éc : ‚Ñù‚¶Ñ, 0 < c ‚Üí is_O_with c f g l :=
  by 
    rw [is_o]

alias is_o_iff_forall_is_O_with ‚Üî Asymptotics.IsO‚Çì.forall_is_O_with Asymptotics.IsO‚Çì.of_is_O_with

/-- Definition of `is_o` in terms of filters. We record it in a lemma as we will set
`is_o` to be irreducible at the end of this file. -/
theorem is_o_iff {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} : is_o f g l ‚Üî ‚àÄ ‚¶Éc : ‚Ñù‚¶Ñ, 0 < c ‚Üí ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  by 
    simp only [is_o, is_O_with]

alias is_o_iff ‚Üî Asymptotics.IsO‚Çì.bound Asymptotics.IsO‚Çì.of_bound

theorem is_o.def {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} (h : is_o f g l) {c : ‚Ñù} (hc : 0 < c) :
  ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  is_o_iff.1 h hc

theorem is_o.def' {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} (h : is_o f g l) {c : ‚Ñù} (hc : 0 < c) : is_O_with c f g l :=
  is_O_with_iff.2$ is_o_iff.1 h hc

end Defs

/-! ### Conversions -/


theorem is_O_with.is_O (h : is_O_with c f g l) : is_O f g l :=
  by 
    rw [is_O] <;> exact ‚ü®c, h‚ü©

theorem is_o.is_O_with (hgf : is_o f g l) : is_O_with 1 f g l :=
  hgf.def' zero_lt_one

theorem is_o.is_O (hgf : is_o f g l) : is_O f g l :=
  hgf.is_O_with.is_O

theorem is_O.is_O_with {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {l : Filter Œ±} : is_O f g l ‚Üí ‚àÉ c : ‚Ñù, is_O_with c f g l :=
  is_O_iff_is_O_with.1

theorem is_O_with.weaken (h : is_O_with c f g' l) (hc : c ‚â§ c') : is_O_with c' f g' l :=
  is_O_with.of_bound$
    mem_of_superset h.bound$
      fun x hx =>
        calc ‚à•f x‚à• ‚â§ c*‚à•g' x‚à• := hx 
          _ ‚â§ _ := mul_le_mul_of_nonneg_right hc (norm_nonneg _)
          

theorem is_O_with.exists_pos (h : is_O_with c f g' l) : ‚àÉ (c' : _)(H : 0 < c'), is_O_with c' f g' l :=
  ‚ü®max c 1, lt_of_lt_of_le‚Çì zero_lt_one (le_max_right‚Çì c 1), h.weaken$ le_max_left‚Çì c 1‚ü©

theorem is_O.exists_pos (h : is_O f g' l) : ‚àÉ (c : _)(H : 0 < c), is_O_with c f g' l :=
  let ‚ü®c, hc‚ü© := h.is_O_with 
  hc.exists_pos

theorem is_O_with.exists_nonneg (h : is_O_with c f g' l) : ‚àÉ (c' : _)(H : 0 ‚â§ c'), is_O_with c' f g' l :=
  let ‚ü®c, cpos, hc‚ü© := h.exists_pos
  ‚ü®c, le_of_lt‚Çì cpos, hc‚ü©

theorem is_O.exists_nonneg (h : is_O f g' l) : ‚àÉ (c : _)(H : 0 ‚â§ c), is_O_with c f g' l :=
  let ‚ü®c, hc‚ü© := h.is_O_with 
  hc.exists_nonneg

/-- `f = O(g)` if and only if `is_O_with c f g` for all sufficiently large `c`. -/
theorem is_O_iff_eventually_is_O_with : is_O f g' l ‚Üî ‚àÄ·∂†c in at_top, is_O_with c f g' l :=
  is_O_iff_is_O_with.trans ‚ü®fun ‚ü®c, hc‚ü© => mem_at_top_sets.2 ‚ü®c, fun c' hc' => hc.weaken hc'‚ü©, fun h => h.exists‚ü©

/-- `f = O(g)` if and only if `‚àÄ·∂† x in l, ‚à•f x‚à• ‚â§ c * ‚à•g x‚à•` for all sufficiently large `c`. -/
theorem is_O_iff_eventually : is_O f g' l ‚Üî ‚àÄ·∂†c in at_top, ‚àÄ·∂†x in l, ‚à•f x‚à• ‚â§ c*‚à•g' x‚à• :=
  is_O_iff_eventually_is_O_with.trans$
    by 
      simp only [is_O_with]

/-! ### Subsingleton -/


@[nontriviality]
theorem is_o_of_subsingleton [Subsingleton E'] : is_o f' g' l :=
  is_o.of_bound$
    fun c hc =>
      by 
        simp [Subsingleton.elim‚Çì (f' _) 0, mul_nonneg hc.le]

@[nontriviality]
theorem is_O_of_subsingleton [Subsingleton E'] : is_O f' g' l :=
  is_o_of_subsingleton.IsO

/-! ### Congruence -/


theorem is_O_with_congr {c‚ÇÅ c‚ÇÇ} {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hc : c‚ÇÅ = c‚ÇÇ) (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ)
  (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : is_O_with c‚ÇÅ f‚ÇÅ g‚ÇÅ l ‚Üî is_O_with c‚ÇÇ f‚ÇÇ g‚ÇÇ l :=
  by 
    unfold is_O_with 
    subst c‚ÇÇ 
    apply Filter.eventually_congr 
    filterUpwards [hf, hg]
    intro x e‚ÇÅ e‚ÇÇ 
    rw [e‚ÇÅ, e‚ÇÇ]

theorem is_O_with.congr' {c‚ÇÅ c‚ÇÇ} {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hc : c‚ÇÅ = c‚ÇÇ) (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ)
  (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) : is_O_with c‚ÇÅ f‚ÇÅ g‚ÇÅ l ‚Üí is_O_with c‚ÇÇ f‚ÇÇ g‚ÇÇ l :=
  (is_O_with_congr hc hf hg).mp

theorem is_O_with.congr {c‚ÇÅ c‚ÇÇ} {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hc : c‚ÇÅ = c‚ÇÇ) (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x)
  (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) : is_O_with c‚ÇÅ f‚ÇÅ g‚ÇÅ l ‚Üí is_O_with c‚ÇÇ f‚ÇÇ g‚ÇÇ l :=
  fun h => h.congr' hc (univ_mem' hf) (univ_mem' hg)

theorem is_O_with.congr_left {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {l : Filter Œ±} (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) :
  is_O_with c f‚ÇÅ g l ‚Üí is_O_with c f‚ÇÇ g l :=
  is_O_with.congr rfl hf fun _ => rfl

theorem is_O_with.congr_right {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) :
  is_O_with c f g‚ÇÅ l ‚Üí is_O_with c f g‚ÇÇ l :=
  is_O_with.congr rfl (fun _ => rfl) hg

theorem is_O_with.congr_const {c‚ÇÅ c‚ÇÇ} {l : Filter Œ±} (hc : c‚ÇÅ = c‚ÇÇ) : is_O_with c‚ÇÅ f g l ‚Üí is_O_with c‚ÇÇ f g l :=
  is_O_with.congr hc (fun _ => rfl) fun _ => rfl

theorem is_O_congr {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
  is_O f‚ÇÅ g‚ÇÅ l ‚Üî is_O f‚ÇÇ g‚ÇÇ l :=
  by 
    unfold is_O 
    exact exists_congr fun c => is_O_with_congr rfl hf hg

theorem is_O.congr' {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
  is_O f‚ÇÅ g‚ÇÅ l ‚Üí is_O f‚ÇÇ g‚ÇÇ l :=
  (is_O_congr hf hg).mp

theorem is_O.congr {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) :
  is_O f‚ÇÅ g‚ÇÅ l ‚Üí is_O f‚ÇÇ g‚ÇÇ l :=
  fun h => h.congr' (univ_mem' hf) (univ_mem' hg)

theorem is_O.congr_left {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {l : Filter Œ±} (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) : is_O f‚ÇÅ g l ‚Üí is_O f‚ÇÇ g l :=
  is_O.congr hf fun _ => rfl

theorem is_O.congr_right {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí E} {l : Filter Œ±} (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) : is_O f g‚ÇÅ l ‚Üí is_O f g‚ÇÇ l :=
  is_O.congr (fun _ => rfl) hg

theorem is_o_congr {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
  is_o f‚ÇÅ g‚ÇÅ l ‚Üî is_o f‚ÇÇ g‚ÇÇ l :=
  by 
    unfold is_o 
    exact ball_congr fun c hc => is_O_with_congr (Eq.refl c) hf hg

theorem is_o.congr' {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hf : f‚ÇÅ =·∂†[l] f‚ÇÇ) (hg : g‚ÇÅ =·∂†[l] g‚ÇÇ) :
  is_o f‚ÇÅ g‚ÇÅ l ‚Üí is_o f‚ÇÇ g‚ÇÇ l :=
  (is_o_congr hf hg).mp

theorem is_o.congr {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F} {l : Filter Œ±} (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) :
  is_o f‚ÇÅ g‚ÇÅ l ‚Üí is_o f‚ÇÇ g‚ÇÇ l :=
  fun h => h.congr' (univ_mem' hf) (univ_mem' hg)

theorem is_o.congr_left {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E} {l : Filter Œ±} (hf : ‚àÄ x, f‚ÇÅ x = f‚ÇÇ x) : is_o f‚ÇÅ g l ‚Üí is_o f‚ÇÇ g l :=
  is_o.congr hf fun _ => rfl

theorem is_o.congr_right {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí E} {l : Filter Œ±} (hg : ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x) : is_o f g‚ÇÅ l ‚Üí is_o f g‚ÇÇ l :=
  is_o.congr (fun _ => rfl) hg

/-! ### Filter operations and transitivity -/


theorem is_O_with.comp_tendsto (hcfg : is_O_with c f g l) {k : Œ≤ ‚Üí Œ±} {l' : Filter Œ≤} (hk : tendsto k l' l) :
  is_O_with c (f ‚àò k) (g ‚àò k) l' :=
  is_O_with.of_bound$ hk hcfg.bound

theorem is_O.comp_tendsto (hfg : is_O f g l) {k : Œ≤ ‚Üí Œ±} {l' : Filter Œ≤} (hk : tendsto k l' l) :
  is_O (f ‚àò k) (g ‚àò k) l' :=
  is_O_iff_is_O_with.2$ hfg.is_O_with.imp fun c h => h.comp_tendsto hk

theorem is_o.comp_tendsto (hfg : is_o f g l) {k : Œ≤ ‚Üí Œ±} {l' : Filter Œ≤} (hk : tendsto k l' l) :
  is_o (f ‚àò k) (g ‚àò k) l' :=
  is_o.of_is_O_with$ fun c cpos => (hfg.forall_is_O_with cpos).comp_tendsto hk

@[simp]
theorem is_O_with_map {k : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} : is_O_with c f g (map k l) ‚Üî is_O_with c (f ‚àò k) (g ‚àò k) l :=
  by 
    unfold is_O_with 
    exact mem_map

@[simp]
theorem is_O_map {k : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} : is_O f g (map k l) ‚Üî is_O (f ‚àò k) (g ‚àò k) l :=
  by 
    simp only [is_O, is_O_with_map]

@[simp]
theorem is_o_map {k : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} : is_o f g (map k l) ‚Üî is_o (f ‚àò k) (g ‚àò k) l :=
  by 
    simp only [is_o, is_O_with_map]

theorem is_O_with.mono (h : is_O_with c f g l') (hl : l ‚â§ l') : is_O_with c f g l :=
  is_O_with.of_bound$ hl h.bound

theorem is_O.mono (h : is_O f g l') (hl : l ‚â§ l') : is_O f g l :=
  is_O_iff_is_O_with.2$ h.is_O_with.imp fun c h => h.mono hl

theorem is_o.mono (h : is_o f g l') (hl : l ‚â§ l') : is_o f g l :=
  is_o.of_is_O_with$ fun c cpos => (h.forall_is_O_with cpos).mono hl

theorem is_O_with.trans (hfg : is_O_with c f g l) (hgk : is_O_with c' g k l) (hc : 0 ‚â§ c) : is_O_with (c*c') f k l :=
  by 
    unfold is_O_with  at *
    filterUpwards [hfg, hgk]
    intro x hx hx' 
    calc ‚à•f x‚à• ‚â§ c*‚à•g x‚à• := hx _ ‚â§ c*c'*‚à•k x‚à• := mul_le_mul_of_nonneg_left hx' hc _ = (c*c')*‚à•k x‚à• :=
      (mul_assoc‚Çì _ _ _).symm

theorem is_O.trans (hfg : is_O f g' l) (hgk : is_O g' k l) : is_O f k l :=
  let ‚ü®c, cnonneg, hc‚ü© := hfg.exists_nonneg 
  let ‚ü®c', hc'‚ü© := hgk.is_O_with
  (hc.trans hc' cnonneg).IsO

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_o.trans_is_O_with (hfg : is_o f g l) (hgk : is_O_with c g k l) (hc : ¬´expr < ¬ª(0, c)) : is_o f k l :=
begin
  unfold [ident is_o] ["at", "*"],
  intros [ident c', ident c'pos],
  have [] [":", expr ¬´expr < ¬ª(0, ¬´expr / ¬ª(c', c))] [],
  from [expr div_pos c'pos hc],
  exact [expr ((hfg this).trans hgk (le_of_lt this)).congr_const (div_mul_cancel _ (ne_of_gt hc))]
end

theorem is_o.trans_is_O (hfg : is_o f g l) (hgk : is_O g k' l) : is_o f k' l :=
  let ‚ü®c, cpos, hc‚ü© := hgk.exists_pos 
  hfg.trans_is_O_with hc cpos

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_O_with.trans_is_o (hfg : is_O_with c f g l) (hgk : is_o g k l) (hc : ¬´expr < ¬ª(0, c)) : is_o f k l :=
begin
  unfold [ident is_o] ["at", "*"],
  intros [ident c', ident c'pos],
  have [] [":", expr ¬´expr < ¬ª(0, ¬´expr / ¬ª(c', c))] [],
  from [expr div_pos c'pos hc],
  exact [expr (hfg.trans (hgk this) (le_of_lt hc)).congr_const (mul_div_cancel' _ (ne_of_gt hc))]
end

theorem is_O.trans_is_o (hfg : is_O f g' l) (hgk : is_o g' k l) : is_o f k l :=
  let ‚ü®c, cpos, hc‚ü© := hfg.exists_pos 
  hc.trans_is_o hgk cpos

theorem is_o.trans (hfg : is_o f g l) (hgk : is_o g k' l) : is_o f k' l :=
  hfg.trans_is_O hgk.is_O

theorem is_o.trans' (hfg : is_o f g' l) (hgk : is_o g' k l) : is_o f k l :=
  hfg.is_O.trans_is_o hgk

section 

variable (l)

theorem is_O_with_of_le' (hfg : ‚àÄ x, ‚à•f x‚à• ‚â§ c*‚à•g x‚à•) : is_O_with c f g l :=
  is_O_with.of_bound$ univ_mem' hfg

theorem is_O_with_of_le (hfg : ‚àÄ x, ‚à•f x‚à• ‚â§ ‚à•g x‚à•) : is_O_with 1 f g l :=
  is_O_with_of_le' l$
    fun x =>
      by 
        rw [one_mul‚Çì]
        exact hfg x

theorem is_O_of_le' (hfg : ‚àÄ x, ‚à•f x‚à• ‚â§ c*‚à•g x‚à•) : is_O f g l :=
  (is_O_with_of_le' l hfg).IsO

theorem is_O_of_le (hfg : ‚àÄ x, ‚à•f x‚à• ‚â§ ‚à•g x‚à•) : is_O f g l :=
  (is_O_with_of_le l hfg).IsO

end 

theorem is_O_with_refl (f : Œ± ‚Üí E) (l : Filter Œ±) : is_O_with 1 f f l :=
  is_O_with_of_le l$ fun _ => le_refl‚Çì _

theorem is_O_refl (f : Œ± ‚Üí E) (l : Filter Œ±) : is_O f f l :=
  (is_O_with_refl f l).IsO

theorem is_O_with.trans_le (hfg : is_O_with c f g l) (hgk : ‚àÄ x, ‚à•g x‚à• ‚â§ ‚à•k x‚à•) (hc : 0 ‚â§ c) : is_O_with c f k l :=
  (hfg.trans (is_O_with_of_le l hgk) hc).congr_const$ mul_one‚Çì c

theorem is_O.trans_le (hfg : is_O f g' l) (hgk : ‚àÄ x, ‚à•g' x‚à• ‚â§ ‚à•k x‚à•) : is_O f k l :=
  hfg.trans (is_O_of_le l hgk)

theorem is_o.trans_le (hfg : is_o f g l) (hgk : ‚àÄ x, ‚à•g x‚à• ‚â§ ‚à•k x‚à•) : is_o f k l :=
  hfg.trans_is_O_with (is_O_with_of_le _ hgk) zero_lt_one

section Bot

variable (c f g)

@[simp]
theorem is_O_with_bot : is_O_with c f g ‚ä• :=
  is_O_with.of_bound$ trivial‚Çì

@[simp]
theorem is_O_bot : is_O f g ‚ä• :=
  (is_O_with_bot 1 f g).IsO

@[simp]
theorem is_o_bot : is_o f g ‚ä• :=
  is_o.of_is_O_with$ fun c _ => is_O_with_bot c f g

end Bot

theorem is_O_with.join (h : is_O_with c f g l) (h' : is_O_with c f g l') : is_O_with c f g (l‚äîl') :=
  is_O_with.of_bound$ mem_sup.2 ‚ü®h.bound, h'.bound‚ü©

theorem is_O_with.join' (h : is_O_with c f g' l) (h' : is_O_with c' f g' l') : is_O_with (max c c') f g' (l‚äîl') :=
  is_O_with.of_bound$ mem_sup.2 ‚ü®(h.weaken$ le_max_left‚Çì c c').bound, (h'.weaken$ le_max_right‚Çì c c').bound‚ü©

theorem is_O.join (h : is_O f g' l) (h' : is_O f g' l') : is_O f g' (l‚äîl') :=
  let ‚ü®c, hc‚ü© := h.is_O_with 
  let ‚ü®c', hc'‚ü© := h'.is_O_with
  (hc.join' hc').IsO

theorem is_o.join (h : is_o f g l) (h' : is_o f g l') : is_o f g (l‚äîl') :=
  is_o.of_is_O_with$ fun c cpos => (h.forall_is_O_with cpos).join (h'.forall_is_O_with cpos)

/-! ### Simplification : norm -/


@[simp]
theorem is_O_with_norm_right : is_O_with c f (fun x => ‚à•g' x‚à•) l ‚Üî is_O_with c f g' l :=
  by 
    simp only [is_O_with, norm_norm]

alias is_O_with_norm_right ‚Üî Asymptotics.IsOWith.of_norm_right Asymptotics.IsOWith.norm_right

@[simp]
theorem is_O_norm_right : is_O f (fun x => ‚à•g' x‚à•) l ‚Üî is_O f g' l :=
  by 
    unfold is_O 
    exact exists_congr fun _ => is_O_with_norm_right

alias is_O_norm_right ‚Üî Asymptotics.IsO.of_norm_right Asymptotics.IsO.norm_right

@[simp]
theorem is_o_norm_right : is_o f (fun x => ‚à•g' x‚à•) l ‚Üî is_o f g' l :=
  by 
    unfold is_o 
    exact forall_congr‚Çì fun _ => forall_congr‚Çì$ fun _ => is_O_with_norm_right

alias is_o_norm_right ‚Üî Asymptotics.IsO‚Çì.of_norm_right Asymptotics.IsO‚Çì.norm_right

@[simp]
theorem is_O_with_norm_left : is_O_with c (fun x => ‚à•f' x‚à•) g l ‚Üî is_O_with c f' g l :=
  by 
    simp only [is_O_with, norm_norm]

alias is_O_with_norm_left ‚Üî Asymptotics.IsOWith.of_norm_left Asymptotics.IsOWith.norm_left

@[simp]
theorem is_O_norm_left : is_O (fun x => ‚à•f' x‚à•) g l ‚Üî is_O f' g l :=
  by 
    unfold is_O 
    exact exists_congr fun _ => is_O_with_norm_left

alias is_O_norm_left ‚Üî Asymptotics.IsO.of_norm_left Asymptotics.IsO.norm_left

@[simp]
theorem is_o_norm_left : is_o (fun x => ‚à•f' x‚à•) g l ‚Üî is_o f' g l :=
  by 
    unfold is_o 
    exact forall_congr‚Çì fun _ => forall_congr‚Çì$ fun _ => is_O_with_norm_left

alias is_o_norm_left ‚Üî Asymptotics.IsO‚Çì.of_norm_left Asymptotics.IsO‚Çì.norm_left

theorem is_O_with_norm_norm : is_O_with c (fun x => ‚à•f' x‚à•) (fun x => ‚à•g' x‚à•) l ‚Üî is_O_with c f' g' l :=
  is_O_with_norm_left.trans is_O_with_norm_right

alias is_O_with_norm_norm ‚Üî Asymptotics.IsOWith.of_norm_norm Asymptotics.IsOWith.norm_norm

theorem is_O_norm_norm : is_O (fun x => ‚à•f' x‚à•) (fun x => ‚à•g' x‚à•) l ‚Üî is_O f' g' l :=
  is_O_norm_left.trans is_O_norm_right

alias is_O_norm_norm ‚Üî Asymptotics.IsO.of_norm_norm Asymptotics.IsO.norm_norm

theorem is_o_norm_norm : is_o (fun x => ‚à•f' x‚à•) (fun x => ‚à•g' x‚à•) l ‚Üî is_o f' g' l :=
  is_o_norm_left.trans is_o_norm_right

alias is_o_norm_norm ‚Üî Asymptotics.IsO‚Çì.of_norm_norm Asymptotics.IsO‚Çì.norm_norm

/-! ### Simplification: negate -/


@[simp]
theorem is_O_with_neg_right : is_O_with c f (fun x => -g' x) l ‚Üî is_O_with c f g' l :=
  by 
    simp only [is_O_with, norm_neg]

alias is_O_with_neg_right ‚Üî Asymptotics.IsOWith.of_neg_right Asymptotics.IsOWith.neg_right

@[simp]
theorem is_O_neg_right : is_O f (fun x => -g' x) l ‚Üî is_O f g' l :=
  by 
    unfold is_O 
    exact exists_congr fun _ => is_O_with_neg_right

alias is_O_neg_right ‚Üî Asymptotics.IsO.of_neg_right Asymptotics.IsO.neg_right

@[simp]
theorem is_o_neg_right : is_o f (fun x => -g' x) l ‚Üî is_o f g' l :=
  by 
    unfold is_o 
    exact forall_congr‚Çì fun _ => forall_congr‚Çì fun _ => is_O_with_neg_right

alias is_o_neg_right ‚Üî Asymptotics.IsO‚Çì.of_neg_right Asymptotics.IsO‚Çì.neg_right

@[simp]
theorem is_O_with_neg_left : is_O_with c (fun x => -f' x) g l ‚Üî is_O_with c f' g l :=
  by 
    simp only [is_O_with, norm_neg]

alias is_O_with_neg_left ‚Üî Asymptotics.IsOWith.of_neg_left Asymptotics.IsOWith.neg_left

@[simp]
theorem is_O_neg_left : is_O (fun x => -f' x) g l ‚Üî is_O f' g l :=
  by 
    unfold is_O 
    exact exists_congr fun _ => is_O_with_neg_left

alias is_O_neg_left ‚Üî Asymptotics.IsO.of_neg_left Asymptotics.IsO.neg_left

@[simp]
theorem is_o_neg_left : is_o (fun x => -f' x) g l ‚Üî is_o f' g l :=
  by 
    unfold is_o 
    exact forall_congr‚Çì fun _ => forall_congr‚Çì fun _ => is_O_with_neg_left

alias is_o_neg_left ‚Üî Asymptotics.IsO‚Çì.of_neg_right Asymptotics.IsO‚Çì.neg_left

/-! ### Product of functions (right) -/


theorem is_O_with_fst_prod : is_O_with 1 f' (fun x => (f' x, g' x)) l :=
  is_O_with_of_le l$ fun x => le_max_left‚Çì _ _

theorem is_O_with_snd_prod : is_O_with 1 g' (fun x => (f' x, g' x)) l :=
  is_O_with_of_le l$ fun x => le_max_right‚Çì _ _

theorem is_O_fst_prod : is_O f' (fun x => (f' x, g' x)) l :=
  is_O_with_fst_prod.IsO

theorem is_O_snd_prod : is_O g' (fun x => (f' x, g' x)) l :=
  is_O_with_snd_prod.IsO

theorem is_O_fst_prod' {f' : Œ± ‚Üí E' √ó F'} : is_O (fun x => (f' x).1) f' l :=
  by 
    simpa [is_O, is_O_with] using is_O_fst_prod

theorem is_O_snd_prod' {f' : Œ± ‚Üí E' √ó F'} : is_O (fun x => (f' x).2) f' l :=
  by 
    simpa [is_O, is_O_with] using is_O_snd_prod

section 

variable (f' k')

theorem is_O_with.prod_rightl (h : is_O_with c f g' l) (hc : 0 ‚â§ c) : is_O_with c f (fun x => (g' x, k' x)) l :=
  (h.trans is_O_with_fst_prod hc).congr_const (mul_one‚Çì c)

theorem is_O.prod_rightl (h : is_O f g' l) : is_O f (fun x => (g' x, k' x)) l :=
  let ‚ü®c, cnonneg, hc‚ü© := h.exists_nonneg
  (hc.prod_rightl k' cnonneg).IsO

theorem is_o.prod_rightl (h : is_o f g' l) : is_o f (fun x => (g' x, k' x)) l :=
  is_o.of_is_O_with$ fun c cpos => (h.forall_is_O_with cpos).prod_rightl k' (le_of_lt‚Çì cpos)

theorem is_O_with.prod_rightr (h : is_O_with c f g' l) (hc : 0 ‚â§ c) : is_O_with c f (fun x => (f' x, g' x)) l :=
  (h.trans is_O_with_snd_prod hc).congr_const (mul_one‚Çì c)

theorem is_O.prod_rightr (h : is_O f g' l) : is_O f (fun x => (f' x, g' x)) l :=
  let ‚ü®c, cnonneg, hc‚ü© := h.exists_nonneg
  (hc.prod_rightr f' cnonneg).IsO

theorem is_o.prod_rightr (h : is_o f g' l) : is_o f (fun x => (f' x, g' x)) l :=
  is_o.of_is_O_with$ fun c cpos => (h.forall_is_O_with cpos).prod_rightr f' (le_of_lt‚Çì cpos)

end 

theorem is_O_with.prod_left_same (hf : is_O_with c f' k' l) (hg : is_O_with c g' k' l) :
  is_O_with c (fun x => (f' x, g' x)) k' l :=
  by 
    rw [is_O_with_iff] at * <;> filterUpwards [hf, hg] fun x => max_le‚Çì

theorem is_O_with.prod_left (hf : is_O_with c f' k' l) (hg : is_O_with c' g' k' l) :
  is_O_with (max c c') (fun x => (f' x, g' x)) k' l :=
  (hf.weaken$ le_max_left‚Çì c c').prod_left_same (hg.weaken$ le_max_right‚Çì c c')

theorem is_O_with.prod_left_fst (h : is_O_with c (fun x => (f' x, g' x)) k' l) : is_O_with c f' k' l :=
  (is_O_with_fst_prod.trans h zero_le_one).congr_const$ one_mul‚Çì c

theorem is_O_with.prod_left_snd (h : is_O_with c (fun x => (f' x, g' x)) k' l) : is_O_with c g' k' l :=
  (is_O_with_snd_prod.trans h zero_le_one).congr_const$ one_mul‚Çì c

theorem is_O_with_prod_left : is_O_with c (fun x => (f' x, g' x)) k' l ‚Üî is_O_with c f' k' l ‚àß is_O_with c g' k' l :=
  ‚ü®fun h => ‚ü®h.prod_left_fst, h.prod_left_snd‚ü©, fun h => h.1.prod_left_same h.2‚ü©

theorem is_O.prod_left (hf : is_O f' k' l) (hg : is_O g' k' l) : is_O (fun x => (f' x, g' x)) k' l :=
  let ‚ü®c, hf‚ü© := hf.is_O_with 
  let ‚ü®c', hg‚ü© := hg.is_O_with
  (hf.prod_left hg).IsO

theorem is_O.prod_left_fst (h : is_O (fun x => (f' x, g' x)) k' l) : is_O f' k' l :=
  is_O_fst_prod.trans h

theorem is_O.prod_left_snd (h : is_O (fun x => (f' x, g' x)) k' l) : is_O g' k' l :=
  is_O_snd_prod.trans h

@[simp]
theorem is_O_prod_left : is_O (fun x => (f' x, g' x)) k' l ‚Üî is_O f' k' l ‚àß is_O g' k' l :=
  ‚ü®fun h => ‚ü®h.prod_left_fst, h.prod_left_snd‚ü©, fun h => h.1.prodLeft h.2‚ü©

theorem is_o.prod_left (hf : is_o f' k' l) (hg : is_o g' k' l) : is_o (fun x => (f' x, g' x)) k' l :=
  is_o.of_is_O_with$ fun c hc => (hf.forall_is_O_with hc).prod_left_same (hg.forall_is_O_with hc)

theorem is_o.prod_left_fst (h : is_o (fun x => (f' x, g' x)) k' l) : is_o f' k' l :=
  is_O_fst_prod.trans_is_o h

theorem is_o.prod_left_snd (h : is_o (fun x => (f' x, g' x)) k' l) : is_o g' k' l :=
  is_O_snd_prod.trans_is_o h

@[simp]
theorem is_o_prod_left : is_o (fun x => (f' x, g' x)) k' l ‚Üî is_o f' k' l ‚àß is_o g' k' l :=
  ‚ü®fun h => ‚ü®h.prod_left_fst, h.prod_left_snd‚ü©, fun h => h.1.prodLeft h.2‚ü©

theorem is_O_with.eq_zero_imp (h : is_O_with c f' g' l) : ‚àÄ·∂†x in l, g' x = 0 ‚Üí f' x = 0 :=
  eventually.mono h.bound$
    fun x hx hg =>
      norm_le_zero_iff.1$
        by 
          simpa [hg] using hx

theorem is_O.eq_zero_imp (h : is_O f' g' l) : ‚àÄ·∂†x in l, g' x = 0 ‚Üí f' x = 0 :=
  let ‚ü®C, hC‚ü© := h.is_O_with 
  hC.eq_zero_imp

/-! ### Addition and subtraction -/


section add_sub

variable {c‚ÇÅ c‚ÇÇ : ‚Ñù} {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'}

theorem is_O_with.add (h‚ÇÅ : is_O_with c‚ÇÅ f‚ÇÅ g l) (h‚ÇÇ : is_O_with c‚ÇÇ f‚ÇÇ g l) :
  is_O_with (c‚ÇÅ+c‚ÇÇ) (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  by 
    rw [is_O_with] at * <;>
      filterUpwards [h‚ÇÅ, h‚ÇÇ]
        fun x hx‚ÇÅ hx‚ÇÇ =>
          calc ‚à•f‚ÇÅ x+f‚ÇÇ x‚à• ‚â§ (c‚ÇÅ*‚à•g x‚à•)+c‚ÇÇ*‚à•g x‚à• := norm_add_le_of_le hx‚ÇÅ hx‚ÇÇ 
            _ = (c‚ÇÅ+c‚ÇÇ)*‚à•g x‚à• := (add_mul‚Çì _ _ _).symm
            

theorem is_O.add (h‚ÇÅ : is_O f‚ÇÅ g l) (h‚ÇÇ : is_O f‚ÇÇ g l) : is_O (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  let ‚ü®c‚ÇÅ, hc‚ÇÅ‚ü© := h‚ÇÅ.is_O_with 
  let ‚ü®c‚ÇÇ, hc‚ÇÇ‚ü© := h‚ÇÇ.is_O_with
  (hc‚ÇÅ.add hc‚ÇÇ).IsO

theorem is_o.add (h‚ÇÅ : is_o f‚ÇÅ g l) (h‚ÇÇ : is_o f‚ÇÇ g l) : is_o (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  is_o.of_is_O_with$
    fun c cpos =>
      ((h‚ÇÅ.forall_is_O_with$ half_pos cpos).add (h‚ÇÇ.forall_is_O_with$ half_pos cpos)).congr_const (add_halves c)

theorem is_o.add_add {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F'} (h‚ÇÅ : is_o f‚ÇÅ g‚ÇÅ l) (h‚ÇÇ : is_o f‚ÇÇ g‚ÇÇ l) :
  is_o (fun x => f‚ÇÅ x+f‚ÇÇ x) (fun x => ‚à•g‚ÇÅ x‚à•+‚à•g‚ÇÇ x‚à•) l :=
  by 
    refine' (h‚ÇÅ.trans_le$ fun x => _).add (h‚ÇÇ.trans_le _) <;> simp [Real.norm_eq_abs, abs_of_nonneg, add_nonneg]

theorem is_O.add_is_o (h‚ÇÅ : is_O f‚ÇÅ g l) (h‚ÇÇ : is_o f‚ÇÇ g l) : is_O (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  h‚ÇÅ.add h‚ÇÇ.is_O

theorem is_o.add_is_O (h‚ÇÅ : is_o f‚ÇÅ g l) (h‚ÇÇ : is_O f‚ÇÇ g l) : is_O (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  h‚ÇÅ.is_O.add h‚ÇÇ

theorem is_O_with.add_is_o (h‚ÇÅ : is_O_with c‚ÇÅ f‚ÇÅ g l) (h‚ÇÇ : is_o f‚ÇÇ g l) (hc : c‚ÇÅ < c‚ÇÇ) :
  is_O_with c‚ÇÇ (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  (h‚ÇÅ.add (h‚ÇÇ.forall_is_O_with (sub_pos.2 hc))).congr_const (add_sub_cancel'_right _ _)

theorem is_o.add_is_O_with (h‚ÇÅ : is_o f‚ÇÅ g l) (h‚ÇÇ : is_O_with c‚ÇÅ f‚ÇÇ g l) (hc : c‚ÇÅ < c‚ÇÇ) :
  is_O_with c‚ÇÇ (fun x => f‚ÇÅ x+f‚ÇÇ x) g l :=
  (h‚ÇÇ.add_is_o h‚ÇÅ hc).congr_left$ fun _ => add_comm‚Çì _ _

theorem is_O_with.sub (h‚ÇÅ : is_O_with c‚ÇÅ f‚ÇÅ g l) (h‚ÇÇ : is_O_with c‚ÇÇ f‚ÇÇ g l) :
  is_O_with (c‚ÇÅ+c‚ÇÇ) (fun x => f‚ÇÅ x - f‚ÇÇ x) g l :=
  by 
    simpa only [sub_eq_add_neg] using h‚ÇÅ.add h‚ÇÇ.neg_left

theorem is_O_with.sub_is_o (h‚ÇÅ : is_O_with c‚ÇÅ f‚ÇÅ g l) (h‚ÇÇ : is_o f‚ÇÇ g l) (hc : c‚ÇÅ < c‚ÇÇ) :
  is_O_with c‚ÇÇ (fun x => f‚ÇÅ x - f‚ÇÇ x) g l :=
  by 
    simpa only [sub_eq_add_neg] using h‚ÇÅ.add_is_o h‚ÇÇ.neg_left hc

theorem is_O.sub (h‚ÇÅ : is_O f‚ÇÅ g l) (h‚ÇÇ : is_O f‚ÇÇ g l) : is_O (fun x => f‚ÇÅ x - f‚ÇÇ x) g l :=
  by 
    simpa only [sub_eq_add_neg] using h‚ÇÅ.add h‚ÇÇ.neg_left

theorem is_o.sub (h‚ÇÅ : is_o f‚ÇÅ g l) (h‚ÇÇ : is_o f‚ÇÇ g l) : is_o (fun x => f‚ÇÅ x - f‚ÇÇ x) g l :=
  by 
    simpa only [sub_eq_add_neg] using h‚ÇÅ.add h‚ÇÇ.neg_left

end add_sub

/-! ### Lemmas about `is_O (f‚ÇÅ - f‚ÇÇ) g l` / `is_o (f‚ÇÅ - f‚ÇÇ) g l` treated as a binary relation -/


section IsOOAsRel

variable {f‚ÇÅ f‚ÇÇ f‚ÇÉ : Œ± ‚Üí E'}

theorem is_O_with.symm (h : is_O_with c (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) : is_O_with c (fun x => f‚ÇÇ x - f‚ÇÅ x) g l :=
  h.neg_left.congr_left$ fun x => neg_sub _ _

theorem is_O_with_comm : is_O_with c (fun x => f‚ÇÅ x - f‚ÇÇ x) g l ‚Üî is_O_with c (fun x => f‚ÇÇ x - f‚ÇÅ x) g l :=
  ‚ü®is_O_with.symm, is_O_with.symm‚ü©

theorem is_O.symm (h : is_O (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) : is_O (fun x => f‚ÇÇ x - f‚ÇÅ x) g l :=
  h.neg_left.congr_left$ fun x => neg_sub _ _

theorem is_O_comm : is_O (fun x => f‚ÇÅ x - f‚ÇÇ x) g l ‚Üî is_O (fun x => f‚ÇÇ x - f‚ÇÅ x) g l :=
  ‚ü®is_O.symm, is_O.symm‚ü©

theorem is_o.symm (h : is_o (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) : is_o (fun x => f‚ÇÇ x - f‚ÇÅ x) g l :=
  by 
    simpa only [neg_sub] using h.neg_left

theorem is_o_comm : is_o (fun x => f‚ÇÅ x - f‚ÇÇ x) g l ‚Üî is_o (fun x => f‚ÇÇ x - f‚ÇÅ x) g l :=
  ‚ü®is_o.symm, is_o.symm‚ü©

theorem is_O_with.triangle (h‚ÇÅ : is_O_with c (fun x => f‚ÇÅ x - f‚ÇÇ x) g l)
  (h‚ÇÇ : is_O_with c' (fun x => f‚ÇÇ x - f‚ÇÉ x) g l) : is_O_with (c+c') (fun x => f‚ÇÅ x - f‚ÇÉ x) g l :=
  (h‚ÇÅ.add h‚ÇÇ).congr_left$ fun x => sub_add_sub_cancel _ _ _

theorem is_O.triangle (h‚ÇÅ : is_O (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) (h‚ÇÇ : is_O (fun x => f‚ÇÇ x - f‚ÇÉ x) g l) :
  is_O (fun x => f‚ÇÅ x - f‚ÇÉ x) g l :=
  (h‚ÇÅ.add h‚ÇÇ).congr_left$ fun x => sub_add_sub_cancel _ _ _

theorem is_o.triangle (h‚ÇÅ : is_o (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) (h‚ÇÇ : is_o (fun x => f‚ÇÇ x - f‚ÇÉ x) g l) :
  is_o (fun x => f‚ÇÅ x - f‚ÇÉ x) g l :=
  (h‚ÇÅ.add h‚ÇÇ).congr_left$ fun x => sub_add_sub_cancel _ _ _

theorem is_O.congr_of_sub (h : is_O (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) : is_O f‚ÇÅ g l ‚Üî is_O f‚ÇÇ g l :=
  ‚ü®fun h' => (h'.sub h).congr_left fun x => sub_sub_cancel _ _,
    fun h' => (h.add h').congr_left fun x => sub_add_cancel _ _‚ü©

theorem is_o.congr_of_sub (h : is_o (fun x => f‚ÇÅ x - f‚ÇÇ x) g l) : is_o f‚ÇÅ g l ‚Üî is_o f‚ÇÇ g l :=
  ‚ü®fun h' => (h'.sub h).congr_left fun x => sub_sub_cancel _ _,
    fun h' => (h.add h').congr_left fun x => sub_add_cancel _ _‚ü©

end IsOOAsRel

/-! ### Zero, one, and other constants -/


section ZeroConst

variable (g g' l)

theorem is_o_zero : is_o (fun x => (0 : E')) g' l :=
  is_o.of_bound$
    fun c hc =>
      univ_mem'$
        fun x =>
          by 
            simpa using mul_nonneg (le_of_lt‚Çì hc) (norm_nonneg$ g' x)

theorem is_O_with_zero (hc : 0 ‚â§ c) : is_O_with c (fun x => (0 : E')) g' l :=
  is_O_with.of_bound$
    univ_mem'$
      fun x =>
        by 
          simpa using mul_nonneg hc (norm_nonneg$ g' x)

theorem is_O_with_zero' : is_O_with 0 (fun x => (0 : E')) g l :=
  is_O_with.of_bound$
    univ_mem'$
      fun x =>
        by 
          simp 

theorem is_O_zero : is_O (fun x => (0 : E')) g l :=
  is_O_iff_is_O_with.2 ‚ü®0, is_O_with_zero' _ _‚ü©

theorem is_O_refl_left : is_O (fun x => f' x - f' x) g' l :=
  (is_O_zero g' l).congr_left$ fun x => (sub_self _).symm

theorem is_o_refl_left : is_o (fun x => f' x - f' x) g' l :=
  (is_o_zero g' l).congr_left$ fun x => (sub_self _).symm

variable {g g' l}

@[simp]
theorem is_O_with_zero_right_iff : is_O_with c f' (fun x => (0 : F')) l ‚Üî ‚àÄ·∂†x in l, f' x = 0 :=
  by 
    simp only [is_O_with, exists_prop, true_and‚Çì, norm_zero, mul_zero, norm_le_zero_iff]

@[simp]
theorem is_O_zero_right_iff : is_O f' (fun x => (0 : F')) l ‚Üî ‚àÄ·∂†x in l, f' x = 0 :=
  ‚ü®fun h =>
      let ‚ü®c, hc‚ü© := h.is_O_with 
      is_O_with_zero_right_iff.1 hc,
    fun h => (is_O_with_zero_right_iff.2 h : is_O_with 1 _ _ _).IsO‚ü©

@[simp]
theorem is_o_zero_right_iff : is_o f' (fun x => (0 : F')) l ‚Üî ‚àÄ·∂†x in l, f' x = 0 :=
  ‚ü®fun h => is_O_zero_right_iff.1 h.is_O, fun h => is_o.of_is_O_with$ fun c hc => is_O_with_zero_right_iff.2 h‚ü©

theorem is_O_with_const_const (c : E) {c' : F'} (hc' : c' ‚â† 0) (l : Filter Œ±) :
  is_O_with (‚à•c‚à• / ‚à•c'‚à•) (fun x : Œ± => c) (fun x => c') l :=
  by 
    unfold is_O_with 
    apply univ_mem' 
    intro x 
    rw [mem_set_of_eq, div_mul_cancel]
    rwa [Ne.def, norm_eq_zero]

theorem is_O_const_const (c : E) {c' : F'} (hc' : c' ‚â† 0) (l : Filter Œ±) : is_O (fun x : Œ± => c) (fun x => c') l :=
  (is_O_with_const_const c hc' l).IsO

end ZeroConst

@[simp]
theorem is_O_with_top : is_O_with c f g ‚ä§ ‚Üî ‚àÄ x, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  by 
    rw [is_O_with] <;> rfl

@[simp]
theorem is_O_top : is_O f g ‚ä§ ‚Üî ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C*‚à•g x‚à• :=
  by 
    rw [is_O_iff] <;> rfl

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[simp] theorem is_o_top : ¬´expr ‚Üî ¬ª(is_o f' g' ¬´expr‚ä§¬ª(), ‚àÄ x, ¬´expr = ¬ª(f' x, 0)) :=
begin
  refine [expr ‚ü®_, Œª h, (is_o_zero g' ¬´expr‚ä§¬ª()).congr (Œª x, (h x).symm) (Œª x, rfl)‚ü©],
  simp [] [] ["only"] ["[", expr is_o_iff, ",", expr eventually_top, "]"] [] [],
  refine [expr Œª h x, norm_le_zero_iff.1 _],
  have [] [":", expr tendsto (Œª
    c : expr‚Ñù(), ¬´expr * ¬ª(c, ¬´expr‚à• ‚à•¬ª(g' x))) ¬´exprùìù[ ] ¬ª(Ioi 0, 0) (exprùìù() 0)] [":=", expr ((continuous_id.mul continuous_const).tendsto' _ _ (zero_mul _)).mono_left inf_le_left],
  exact [expr le_of_tendsto_of_tendsto tendsto_const_nhds this ¬´expr $ ¬ª(eventually_nhds_within_iff.2, ¬´expr $ ¬ª(eventually_of_forall, Œª
     c hc, h hc x))]
end

@[simp]
theorem is_O_with_principal {s : Set Œ±} : is_O_with c f g (ùìü s) ‚Üî ‚àÄ x _ : x ‚àà s, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  by 
    rw [is_O_with] <;> rfl

theorem is_O_principal {s : Set Œ±} : is_O f g (ùìü s) ‚Üî ‚àÉ c, ‚àÄ x _ : x ‚àà s, ‚à•f x‚à• ‚â§ c*‚à•g x‚à• :=
  by 
    rw [is_O_iff] <;> rfl

theorem is_O_with_const_one (c : E) (l : Filter Œ±) : is_O_with ‚à•c‚à• (fun x : Œ± => c) (fun x => (1 : ùïú)) l :=
  by 
    refine' (is_O_with_const_const c _ l).congr_const _
    ¬∑
      rw [norm_one, div_one]
    ¬∑
      exact one_ne_zero

theorem is_O_const_one (c : E) (l : Filter Œ±) : is_O (fun x : Œ± => c) (fun x => (1 : ùïú)) l :=
  (is_O_with_const_one c l).IsO

section 

variable (ùïú)

theorem is_o_const_iff_is_o_one {c : F'} (hc : c ‚â† 0) : is_o f (fun x => c) l ‚Üî is_o f (fun x => (1 : ùïú)) l :=
  ‚ü®fun h => h.trans_is_O$ is_O_const_one c l, fun h => h.trans_is_O$ is_O_const_const _ hc _‚ü©

end 

theorem is_o_const_iff {c : F'} (hc : c ‚â† 0) : is_o f' (fun x => c) l ‚Üî tendsto f' l (ùìù 0) :=
  (is_o_const_iff_is_o_one ‚Ñù hc).trans
    (by 
      clear hc c 
      simp only [is_o, is_O_with, norm_one, mul_one‚Çì, metric.nhds_basis_closed_ball.tendsto_right_iff,
        Metric.mem_closed_ball, dist_zero_right])

theorem is_o_const_const_iff [ne_bot l] {d : E'} {c : F'} (hc : c ‚â† 0) : is_o (fun x => d) (fun x => c) l ‚Üî d = 0 :=
  by 
    rw [is_o_const_iff hc]
    refine' ‚ü®fun h => tendsto_nhds_unique tendsto_const_nhds h, _‚ü©
    rintro rfl 
    exact tendsto_const_nhds

theorem is_o_id_const {c : F'} (hc : c ‚â† 0) : is_o (fun x : E' => x) (fun x => c) (ùìù 0) :=
  (is_o_const_iff hc).mpr (continuous_id.Tendsto 0)

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_O_const_of_tendsto
{y : E'}
(h : tendsto f' l (exprùìù() y))
{c : F'}
(hc : ¬´expr ‚â† ¬ª(c, 0)) : is_O f' (Œª x, c) l :=
begin
  refine [expr is_O.trans _ (is_O_const_const ¬´expr + ¬ª(¬´expr‚à• ‚à•¬ª(y), 1) hc l)],
  refine [expr is_O.of_bound 1 _],
  simp [] [] ["only"] ["[", expr is_O_with, ",", expr one_mul, "]"] [] [],
  have [] [":", expr tendsto (Œª x, ¬´expr‚à• ‚à•¬ª(f' x)) l (exprùìù() ¬´expr‚à• ‚à•¬ª(y))] [],
  from [expr (continuous_norm.tendsto _).comp h],
  have [ident Iy] [":", expr ¬´expr < ¬ª(¬´expr‚à• ‚à•¬ª(y), ¬´expr‚à• ‚à•¬ª(¬´expr + ¬ª(¬´expr‚à• ‚à•¬ª(y), 1)))] [],
  from [expr lt_of_lt_of_le (lt_add_one _) (le_abs_self _)],
  exact [expr this (ge_mem_nhds Iy)]
end

section 

variable (ùïú)

theorem is_o_one_iff : is_o f' (fun x => (1 : ùïú)) l ‚Üî tendsto f' l (ùìù 0) :=
  is_o_const_iff one_ne_zero

theorem is_O_one_of_tendsto {y : E'} (h : tendsto f' l (ùìù y)) : is_O f' (fun x => (1 : ùïú)) l :=
  is_O_const_of_tendsto h one_ne_zero

theorem is_O.trans_tendsto_nhds (hfg : is_O f g' l) {y : F'} (hg : tendsto g' l (ùìù y)) : is_O f (fun x => (1 : ùïú)) l :=
  hfg.trans$ is_O_one_of_tendsto ùïú hg

end 

theorem is_O.trans_tendsto (hfg : is_O f' g' l) (hg : tendsto g' l (ùìù 0)) : tendsto f' l (ùìù 0) :=
  (is_o_one_iff ‚Ñù).1$ hfg.trans_is_o$ (is_o_one_iff ‚Ñù).2 hg

theorem is_o.trans_tendsto (hfg : is_o f' g' l) (hg : tendsto g' l (ùìù 0)) : tendsto f' l (ùìù 0) :=
  hfg.is_O.trans_tendsto hg

/-! ### Multiplication by a constant -/


theorem is_O_with_const_mul_self (c : R) (f : Œ± ‚Üí R) (l : Filter Œ±) : is_O_with ‚à•c‚à• (fun x => c*f x) f l :=
  is_O_with_of_le' _$ fun x => norm_mul_le _ _

theorem is_O_const_mul_self (c : R) (f : Œ± ‚Üí R) (l : Filter Œ±) : is_O (fun x => c*f x) f l :=
  (is_O_with_const_mul_self c f l).IsO

theorem is_O_with.const_mul_left {f : Œ± ‚Üí R} (h : is_O_with c f g l) (c' : R) :
  is_O_with (‚à•c'‚à•*c) (fun x => c'*f x) g l :=
  (is_O_with_const_mul_self c' f l).trans h (norm_nonneg c')

theorem is_O.const_mul_left {f : Œ± ‚Üí R} (h : is_O f g l) (c' : R) : is_O (fun x => c'*f x) g l :=
  let ‚ü®c, hc‚ü© := h.is_O_with
  (hc.const_mul_left c').IsO

theorem is_O_with_self_const_mul' (u : Units R) (f : Œ± ‚Üí R) (l : Filter Œ±) :
  is_O_with ‚à•(¬´expr‚Üë ¬ª (u‚Åª¬π) : R)‚à• f (fun x => ¬´expr‚Üë ¬ª u*f x) l :=
  (is_O_with_const_mul_self (¬´expr‚Üë ¬ª (u‚Åª¬π)) _ l).congr_left$ fun x => u.inv_mul_cancel_left (f x)

theorem is_O_with_self_const_mul (c : ùïú) (hc : c ‚â† 0) (f : Œ± ‚Üí ùïú) (l : Filter Œ±) :
  is_O_with (‚à•c‚à•‚Åª¬π) f (fun x => c*f x) l :=
  (is_O_with_self_const_mul' (Units.mk0 c hc) f l).congr_const$ NormedField.norm_inv c

theorem is_O_self_const_mul' {c : R} (hc : IsUnit c) (f : Œ± ‚Üí R) (l : Filter Œ±) : is_O f (fun x => c*f x) l :=
  let ‚ü®u, hu‚ü© := hc 
  hu ‚ñ∏ (is_O_with_self_const_mul' u f l).IsO

theorem is_O_self_const_mul (c : ùïú) (hc : c ‚â† 0) (f : Œ± ‚Üí ùïú) (l : Filter Œ±) : is_O f (fun x => c*f x) l :=
  is_O_self_const_mul' (IsUnit.mk0 c hc) f l

theorem is_O_const_mul_left_iff' {f : Œ± ‚Üí R} {c : R} (hc : IsUnit c) : is_O (fun x => c*f x) g l ‚Üî is_O f g l :=
  ‚ü®(is_O_self_const_mul' hc f l).trans, fun h => h.const_mul_left c‚ü©

theorem is_O_const_mul_left_iff {f : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) : is_O (fun x => c*f x) g l ‚Üî is_O f g l :=
  is_O_const_mul_left_iff'$ IsUnit.mk0 c hc

theorem is_o.const_mul_left {f : Œ± ‚Üí R} (h : is_o f g l) (c : R) : is_o (fun x => c*f x) g l :=
  (is_O_const_mul_self c f l).trans_is_o h

theorem is_o_const_mul_left_iff' {f : Œ± ‚Üí R} {c : R} (hc : IsUnit c) : is_o (fun x => c*f x) g l ‚Üî is_o f g l :=
  ‚ü®(is_O_self_const_mul' hc f l).trans_is_o, fun h => h.const_mul_left c‚ü©

theorem is_o_const_mul_left_iff {f : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) : is_o (fun x => c*f x) g l ‚Üî is_o f g l :=
  is_o_const_mul_left_iff'$ IsUnit.mk0 c hc

theorem is_O_with.of_const_mul_right {g : Œ± ‚Üí R} {c : R} (hc' : 0 ‚â§ c') (h : is_O_with c' f (fun x => c*g x) l) :
  is_O_with (c'*‚à•c‚à•) f g l :=
  h.trans (is_O_with_const_mul_self c g l) hc'

theorem is_O.of_const_mul_right {g : Œ± ‚Üí R} {c : R} (h : is_O f (fun x => c*g x) l) : is_O f g l :=
  let ‚ü®c, cnonneg, hc‚ü© := h.exists_nonneg
  (hc.of_const_mul_right cnonneg).IsO

theorem is_O_with.const_mul_right' {g : Œ± ‚Üí R} {u : Units R} {c' : ‚Ñù} (hc' : 0 ‚â§ c') (h : is_O_with c' f g l) :
  is_O_with (c'*‚à•(¬´expr‚Üë ¬ª (u‚Åª¬π) : R)‚à•) f (fun x => ¬´expr‚Üë ¬ª u*g x) l :=
  h.trans (is_O_with_self_const_mul' _ _ _) hc'

theorem is_O_with.const_mul_right {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) {c' : ‚Ñù} (hc' : 0 ‚â§ c') (h : is_O_with c' f g l) :
  is_O_with (c'*‚à•c‚à•‚Åª¬π) f (fun x => c*g x) l :=
  h.trans (is_O_with_self_const_mul c hc g l) hc'

theorem is_O.const_mul_right' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) (h : is_O f g l) : is_O f (fun x => c*g x) l :=
  h.trans (is_O_self_const_mul' hc g l)

theorem is_O.const_mul_right {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) (h : is_O f g l) : is_O f (fun x => c*g x) l :=
  h.const_mul_right'$ IsUnit.mk0 c hc

theorem is_O_const_mul_right_iff' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) : is_O f (fun x => c*g x) l ‚Üî is_O f g l :=
  ‚ü®fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc‚ü©

theorem is_O_const_mul_right_iff {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) : is_O f (fun x => c*g x) l ‚Üî is_O f g l :=
  is_O_const_mul_right_iff'$ IsUnit.mk0 c hc

theorem is_o.of_const_mul_right {g : Œ± ‚Üí R} {c : R} (h : is_o f (fun x => c*g x) l) : is_o f g l :=
  h.trans_is_O (is_O_const_mul_self c g l)

theorem is_o.const_mul_right' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) (h : is_o f g l) : is_o f (fun x => c*g x) l :=
  h.trans_is_O (is_O_self_const_mul' hc g l)

theorem is_o.const_mul_right {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) (h : is_o f g l) : is_o f (fun x => c*g x) l :=
  h.const_mul_right'$ IsUnit.mk0 c hc

theorem is_o_const_mul_right_iff' {g : Œ± ‚Üí R} {c : R} (hc : IsUnit c) : is_o f (fun x => c*g x) l ‚Üî is_o f g l :=
  ‚ü®fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc‚ü©

theorem is_o_const_mul_right_iff {g : Œ± ‚Üí ùïú} {c : ùïú} (hc : c ‚â† 0) : is_o f (fun x => c*g x) l ‚Üî is_o f g l :=
  is_o_const_mul_right_iff'$ IsUnit.mk0 c hc

/-! ### Multiplication -/


theorem is_O_with.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} {c‚ÇÅ c‚ÇÇ : ‚Ñù} (h‚ÇÅ : is_O_with c‚ÇÅ f‚ÇÅ g‚ÇÅ l)
  (h‚ÇÇ : is_O_with c‚ÇÇ f‚ÇÇ g‚ÇÇ l) : is_O_with (c‚ÇÅ*c‚ÇÇ) (fun x => f‚ÇÅ x*f‚ÇÇ x) (fun x => g‚ÇÅ x*g‚ÇÇ x) l :=
  by 
    unfold is_O_with  at *
    filterUpwards [h‚ÇÅ, h‚ÇÇ]
    intro x hx‚ÇÅ hx‚ÇÇ 
    apply le_trans‚Çì (norm_mul_le _ _)
    convert mul_le_mul hx‚ÇÅ hx‚ÇÇ (norm_nonneg _) (le_trans‚Çì (norm_nonneg _) hx‚ÇÅ) using 1
    rw [NormedField.norm_mul]
    acRfl

theorem is_O.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_O f‚ÇÅ g‚ÇÅ l) (h‚ÇÇ : is_O f‚ÇÇ g‚ÇÇ l) :
  is_O (fun x => f‚ÇÅ x*f‚ÇÇ x) (fun x => g‚ÇÅ x*g‚ÇÇ x) l :=
  let ‚ü®c, hc‚ü© := h‚ÇÅ.is_O_with 
  let ‚ü®c', hc'‚ü© := h‚ÇÇ.is_O_with
  (hc.mul hc').IsO

theorem is_O.mul_is_o {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_O f‚ÇÅ g‚ÇÅ l) (h‚ÇÇ : is_o f‚ÇÇ g‚ÇÇ l) :
  is_o (fun x => f‚ÇÅ x*f‚ÇÇ x) (fun x => g‚ÇÅ x*g‚ÇÇ x) l :=
  by 
    unfold is_o  at *
    intro c cpos 
    rcases h‚ÇÅ.exists_pos with ‚ü®c', c'pos, hc'‚ü©
    exact (hc'.mul (h‚ÇÇ (div_pos cpos c'pos))).congr_const (mul_div_cancel' _ (ne_of_gt‚Çì c'pos))

theorem is_o.mul_is_O {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_o f‚ÇÅ g‚ÇÅ l) (h‚ÇÇ : is_O f‚ÇÇ g‚ÇÇ l) :
  is_o (fun x => f‚ÇÅ x*f‚ÇÇ x) (fun x => g‚ÇÅ x*g‚ÇÇ x) l :=
  by 
    unfold is_o  at *
    intro c cpos 
    rcases h‚ÇÇ.exists_pos with ‚ü®c', c'pos, hc'‚ü©
    exact ((h‚ÇÅ (div_pos cpos c'pos)).mul hc').congr_const (div_mul_cancel _ (ne_of_gt‚Çì c'pos))

theorem is_o.mul {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_o f‚ÇÅ g‚ÇÅ l) (h‚ÇÇ : is_o f‚ÇÇ g‚ÇÇ l) :
  is_o (fun x => f‚ÇÅ x*f‚ÇÇ x) (fun x => g‚ÇÅ x*g‚ÇÇ x) l :=
  h‚ÇÅ.mul_is_O h‚ÇÇ.is_O

theorem is_O_with.pow' {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : is_O_with c f g l) :
  ‚àÄ n : ‚Ñï, is_O_with (Nat.casesOn n ‚à•(1 : R)‚à• fun n => c ^ n+1) (fun x => f x ^ n) (fun x => g x ^ n) l
| 0 =>
  by 
    simpa using is_O_with_const_const (1 : R) (@one_ne_zero ùïú _ _) l
| 1 =>
  by 
    simpa
| n+2 =>
  by 
    simpa [pow_succ‚Çì] using h.mul (is_O_with.pow' (n+1))

theorem is_O_with.pow [NormOneClass R] {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : is_O_with c f g l) :
  ‚àÄ n : ‚Ñï, is_O_with (c ^ n) (fun x => f x ^ n) (fun x => g x ^ n) l
| 0 =>
  by 
    simpa using h.pow' 0
| n+1 => h.pow' (n+1)

theorem is_O.pow {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : is_O f g l) (n : ‚Ñï) : is_O (fun x => f x ^ n) (fun x => g x ^ n) l :=
  let ‚ü®C, hC‚ü© := h.is_O_with 
  is_O_iff_is_O_with.2 ‚ü®_, hC.pow' n‚ü©

theorem is_o.pow {f : Œ± ‚Üí R} {g : Œ± ‚Üí ùïú} (h : is_o f g l) {n : ‚Ñï} (hn : 0 < n) :
  is_o (fun x => f x ^ n) (fun x => g x ^ n) l :=
  by 
    cases n 
    exact hn.false.elim 
    clear hn 
    induction' n with n ihn
    ¬∑
      simpa only [pow_one‚Çì]
    convert h.mul ihn <;> simp [pow_succ‚Çì]

/-! ### Scalar multiplication -/


section SmulConst

variable [NormedSpace ùïú E']

theorem is_O_with.const_smul_left (h : is_O_with c f' g l) (c' : ùïú) : is_O_with (‚à•c'‚à•*c) (fun x => c' ‚Ä¢ f' x) g l :=
  by 
    refine' ((h.norm_left.const_mul_left ‚à•c'‚à•).congr _ _ fun _ => rfl).of_norm_left <;>
      intros  <;> simp only [norm_norm, norm_smul]

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_O_const_smul_left_iff
{c : ùïú}
(hc : ¬´expr ‚â† ¬ª(c, 0)) : ¬´expr ‚Üî ¬ª(is_O (Œª x, ¬´expr ‚Ä¢ ¬ª(c, f' x)) g l, is_O f' g l) :=
begin
  have [ident cne0] [":", expr ¬´expr ‚â† ¬ª(¬´expr‚à• ‚à•¬ª(c), 0)] [],
  from [expr mt norm_eq_zero.mp hc],
  rw ["[", "<-", expr is_O_norm_left, "]"] [],
  simp [] [] ["only"] ["[", expr norm_smul, "]"] [] [],
  rw ["[", expr is_O_const_mul_left_iff cne0, ",", expr is_O_norm_left, "]"] []
end

theorem is_o_const_smul_left (h : is_o f' g l) (c : ùïú) : is_o (fun x => c ‚Ä¢ f' x) g l :=
  by 
    refine' ((h.norm_left.const_mul_left ‚à•c‚à•).congr_left _).of_norm_left 
    exact fun x => (norm_smul _ _).symm

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_o_const_smul_left_iff
{c : ùïú}
(hc : ¬´expr ‚â† ¬ª(c, 0)) : ¬´expr ‚Üî ¬ª(is_o (Œª x, ¬´expr ‚Ä¢ ¬ª(c, f' x)) g l, is_o f' g l) :=
begin
  have [ident cne0] [":", expr ¬´expr ‚â† ¬ª(¬´expr‚à• ‚à•¬ª(c), 0)] [],
  from [expr mt norm_eq_zero.mp hc],
  rw ["[", "<-", expr is_o_norm_left, "]"] [],
  simp [] [] ["only"] ["[", expr norm_smul, "]"] [] [],
  rw ["[", expr is_o_const_mul_left_iff cne0, ",", expr is_o_norm_left, "]"] []
end

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_O_const_smul_right
{c : ùïú}
(hc : ¬´expr ‚â† ¬ª(c, 0)) : ¬´expr ‚Üî ¬ª(is_O f (Œª x, ¬´expr ‚Ä¢ ¬ª(c, f' x)) l, is_O f f' l) :=
begin
  have [ident cne0] [":", expr ¬´expr ‚â† ¬ª(¬´expr‚à• ‚à•¬ª(c), 0)] [],
  from [expr mt norm_eq_zero.mp hc],
  rw ["[", "<-", expr is_O_norm_right, "]"] [],
  simp [] [] ["only"] ["[", expr norm_smul, "]"] [] [],
  rw ["[", expr is_O_const_mul_right_iff cne0, ",", expr is_O_norm_right, "]"] []
end

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_o_const_smul_right
{c : ùïú}
(hc : ¬´expr ‚â† ¬ª(c, 0)) : ¬´expr ‚Üî ¬ª(is_o f (Œª x, ¬´expr ‚Ä¢ ¬ª(c, f' x)) l, is_o f f' l) :=
begin
  have [ident cne0] [":", expr ¬´expr ‚â† ¬ª(¬´expr‚à• ‚à•¬ª(c), 0)] [],
  from [expr mt norm_eq_zero.mp hc],
  rw ["[", "<-", expr is_o_norm_right, "]"] [],
  simp [] [] ["only"] ["[", expr norm_smul, "]"] [] [],
  rw ["[", expr is_o_const_mul_right_iff cne0, ",", expr is_o_norm_right, "]"] []
end

end SmulConst

section Smul

variable [NormedSpace ùïú E'] [NormedSpace ùïú F']

theorem is_O_with.smul {k‚ÇÅ k‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_O_with c k‚ÇÅ k‚ÇÇ l) (h‚ÇÇ : is_O_with c' f' g' l) :
  is_O_with (c*c') (fun x => k‚ÇÅ x ‚Ä¢ f' x) (fun x => k‚ÇÇ x ‚Ä¢ g' x) l :=
  by 
    refine' ((h‚ÇÅ.norm_norm.mul h‚ÇÇ.norm_norm).congr rfl _ _).of_norm_norm <;>
      ¬∑
        intros  <;> simp only [norm_smul]

theorem is_O.smul {k‚ÇÅ k‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_O k‚ÇÅ k‚ÇÇ l) (h‚ÇÇ : is_O f' g' l) :
  is_O (fun x => k‚ÇÅ x ‚Ä¢ f' x) (fun x => k‚ÇÇ x ‚Ä¢ g' x) l :=
  by 
    refine' ((h‚ÇÅ.norm_norm.mul h‚ÇÇ.norm_norm).congr _ _).of_norm_norm <;>
      ¬∑
        intros  <;> simp only [norm_smul]

theorem is_O.smul_is_o {k‚ÇÅ k‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_O k‚ÇÅ k‚ÇÇ l) (h‚ÇÇ : is_o f' g' l) :
  is_o (fun x => k‚ÇÅ x ‚Ä¢ f' x) (fun x => k‚ÇÇ x ‚Ä¢ g' x) l :=
  by 
    refine' ((h‚ÇÅ.norm_norm.mul_is_o h‚ÇÇ.norm_norm).congr _ _).of_norm_norm <;>
      ¬∑
        intros  <;> simp only [norm_smul]

theorem is_o.smul_is_O {k‚ÇÅ k‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_o k‚ÇÅ k‚ÇÇ l) (h‚ÇÇ : is_O f' g' l) :
  is_o (fun x => k‚ÇÅ x ‚Ä¢ f' x) (fun x => k‚ÇÇ x ‚Ä¢ g' x) l :=
  by 
    refine' ((h‚ÇÅ.norm_norm.mul_is_O h‚ÇÇ.norm_norm).congr _ _).of_norm_norm <;>
      ¬∑
        intros  <;> simp only [norm_smul]

theorem is_o.smul {k‚ÇÅ k‚ÇÇ : Œ± ‚Üí ùïú} (h‚ÇÅ : is_o k‚ÇÅ k‚ÇÇ l) (h‚ÇÇ : is_o f' g' l) :
  is_o (fun x => k‚ÇÅ x ‚Ä¢ f' x) (fun x => k‚ÇÇ x ‚Ä¢ g' x) l :=
  by 
    refine' ((h‚ÇÅ.norm_norm.mul h‚ÇÇ.norm_norm).congr _ _).of_norm_norm <;>
      ¬∑
        intros  <;> simp only [norm_smul]

end Smul

/-! ### Sum -/


section Sum

variable {Œπ : Type _} {A : Œπ ‚Üí Œ± ‚Üí E'} {C : Œπ ‚Üí ‚Ñù} {s : Finset Œπ}

theorem is_O_with.sum (h : ‚àÄ i _ : i ‚àà s, is_O_with (C i) (A i) g l) :
  is_O_with (‚àëi in s, C i) (fun x => ‚àëi in s, A i x) g l :=
  by 
    induction' s using Finset.induction_on with i s is IH
    ¬∑
      simp only [is_O_with_zero', Finset.sum_empty, forall_true_iff]
    ¬∑
      simp only [is, Finset.sum_insert, not_false_iff]
      exact (h _ (Finset.mem_insert_self i s)).add (IH fun j hj => h _ (Finset.mem_insert_of_mem hj))

theorem is_O.sum (h : ‚àÄ i _ : i ‚àà s, is_O (A i) g l) : is_O (fun x => ‚àëi in s, A i x) g l :=
  by 
    induction' s using Finset.induction_on with i s is IH
    ¬∑
      simp only [is_O_zero, Finset.sum_empty, forall_true_iff]
    ¬∑
      simp only [is, Finset.sum_insert, not_false_iff]
      exact (h _ (Finset.mem_insert_self i s)).add (IH fun j hj => h _ (Finset.mem_insert_of_mem hj))

theorem is_o.sum (h : ‚àÄ i _ : i ‚àà s, is_o (A i) g' l) : is_o (fun x => ‚àëi in s, A i x) g' l :=
  by 
    induction' s using Finset.induction_on with i s is IH
    ¬∑
      simp only [is_o_zero, Finset.sum_empty, forall_true_iff]
    ¬∑
      simp only [is, Finset.sum_insert, not_false_iff]
      exact (h _ (Finset.mem_insert_self i s)).add (IH fun j hj => h _ (Finset.mem_insert_of_mem hj))

end Sum

/-! ### Relation between `f = o(g)` and `f / g ‚Üí 0` -/


theorem is_o.tendsto_0 {f g : Œ± ‚Üí ùïú} {l : Filter Œ±} (h : is_o f g l) : tendsto (fun x => f x / g x) l (ùìù 0) :=
  have eq‚ÇÅ : is_o (fun x => f x / g x) (fun x => g x / g x) l :=
    by 
      simpa only [div_eq_mul_inv] using h.mul_is_O (is_O_refl _ _)
  have eq‚ÇÇ : is_O (fun x => g x / g x) (fun x => (1 : ùïú)) l :=
    is_O_of_le _
      fun x =>
        by 
          byCases' h : ‚à•g x‚à• = 0 <;> simp [h, zero_le_one]
  (is_o_one_iff ùïú).mp (eq‚ÇÅ.trans_is_O eq‚ÇÇ)

theorem is_o_iff_tendsto' {f g : Œ± ‚Üí ùïú} {l : Filter Œ±} (hgf : ‚àÄ·∂†x in l, g x = 0 ‚Üí f x = 0) :
  is_o f g l ‚Üî tendsto (fun x => f x / g x) l (ùìù 0) :=
  Iff.intro is_o.tendsto_0$
    fun h =>
      (((is_o_one_iff _).mpr h).mul_is_O (is_O_refl g l)).congr' (hgf.mono$ fun x => div_mul_cancel_of_imp)
        (eventually_of_forall$ fun x => one_mul‚Çì _)

theorem is_o_iff_tendsto {f g : Œ± ‚Üí ùïú} {l : Filter Œ±} (hgf : ‚àÄ x, g x = 0 ‚Üí f x = 0) :
  is_o f g l ‚Üî tendsto (fun x => f x / g x) l (ùìù 0) :=
  ‚ü®fun h => h.tendsto_0, (is_o_iff_tendsto' (eventually_of_forall hgf)).2‚ü©

alias is_o_iff_tendsto' ‚Üî _ Asymptotics.is_o_of_tendsto'

alias is_o_iff_tendsto ‚Üî _ Asymptotics.is_o_of_tendsto

/-!
### Eventually (u / v) * v = u

If `u` and `v` are linked by an `is_O_with` relation, then we
eventually have `(u / v) * v = u`, even if `v` vanishes.
-/


section EventuallyMulDivCancel

variable {u v : Œ± ‚Üí ùïú}

theorem is_O_with.eventually_mul_div_cancel (h : is_O_with c u v l) : ((u / v)*v) =·∂†[l] u :=
  eventually.mono h.bound
    fun y hy =>
      div_mul_cancel_of_imp$
        fun hv =>
          by 
            simpa [hv] using hy

/-- If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/
theorem is_O.eventually_mul_div_cancel (h : is_O u v l) : ((u / v)*v) =·∂†[l] u :=
  let ‚ü®c, hc‚ü© := h.is_O_with 
  hc.eventually_mul_div_cancel

/-- If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/
theorem is_o.eventually_mul_div_cancel (h : is_o u v l) : ((u / v)*v) =·∂†[l] u :=
  (h.forall_is_O_with zero_lt_one).eventually_mul_div_cancel

end EventuallyMulDivCancel

/-! ### Equivalent definitions of the form `‚àÉ œÜ, u =·∂†[l] œÜ * v` in a `normed_field`. -/


section ExistsMulEq

variable {u v : Œ± ‚Üí ùïú}

/-- If `‚à•œÜ‚à•` is eventually bounded by `c`, and `u =·∂†[l] œÜ * v`, then we have `is_O_with c u v l`.
    This does not require any assumptions on `c`, which is why we keep this version along with
    `is_O_with_iff_exists_eq_mul`. -/
theorem is_O_with_of_eq_mul (œÜ : Œ± ‚Üí ùïú) (hœÜ : ‚àÄ·∂†x in l, ‚à•œÜ x‚à• ‚â§ c) (h : u =·∂†[l] œÜ*v) : is_O_with c u v l :=
  by 
    unfold is_O_with 
    refine' h.symm.rw (fun x a => ‚à•a‚à• ‚â§ c*‚à•v x‚à•) (hœÜ.mono$ fun x hx => _)
    simp only [NormedField.norm_mul, Pi.mul_apply]
    exact mul_le_mul_of_nonneg_right hx (norm_nonneg _)

theorem is_O_with_iff_exists_eq_mul (hc : 0 ‚â§ c) :
  is_O_with c u v l ‚Üî ‚àÉ (œÜ : Œ± ‚Üí ùïú)(hœÜ : ‚àÄ·∂†x in l, ‚à•œÜ x‚à• ‚â§ c), u =·∂†[l] œÜ*v :=
  by 
    split 
    ¬∑
      intro h 
      use fun x => u x / v x 
      refine' ‚ü®eventually.mono h.bound fun y hy => _, h.eventually_mul_div_cancel.symm‚ü©
      simpa using div_le_of_nonneg_of_le_mul (norm_nonneg _) hc hy
    ¬∑
      rintro ‚ü®œÜ, hœÜ, h‚ü©
      exact is_O_with_of_eq_mul œÜ hœÜ h

theorem is_O_with.exists_eq_mul (h : is_O_with c u v l) (hc : 0 ‚â§ c) :
  ‚àÉ (œÜ : Œ± ‚Üí ùïú)(hœÜ : ‚àÄ·∂†x in l, ‚à•œÜ x‚à• ‚â§ c), u =·∂†[l] œÜ*v :=
  (is_O_with_iff_exists_eq_mul hc).mp h

theorem is_O_iff_exists_eq_mul : is_O u v l ‚Üî ‚àÉ (œÜ : Œ± ‚Üí ùïú)(hœÜ : l.is_bounded_under (¬∑ ‚â§ ¬∑) (norm ‚àò œÜ)), u =·∂†[l] œÜ*v :=
  by 
    split 
    ¬∑
      rintro h 
      rcases h.exists_nonneg with ‚ü®c, hnnc, hc‚ü©
      rcases hc.exists_eq_mul hnnc with ‚ü®œÜ, hœÜ, huvœÜ‚ü©
      exact ‚ü®œÜ, ‚ü®c, hœÜ‚ü©, huvœÜ‚ü©
    ¬∑
      rintro ‚ü®œÜ, ‚ü®c, hœÜ‚ü©, huvœÜ‚ü©
      exact is_O_iff_is_O_with.2 ‚ü®c, is_O_with_of_eq_mul œÜ hœÜ huvœÜ‚ü©

alias is_O_iff_exists_eq_mul ‚Üî Asymptotics.IsO.exists_eq_mul _

theorem is_o_iff_exists_eq_mul : is_o u v l ‚Üî ‚àÉ (œÜ : Œ± ‚Üí ùïú)(hœÜ : tendsto œÜ l (ùìù 0)), u =·∂†[l] œÜ*v :=
  by 
    split 
    ¬∑
      exact fun h => ‚ü®fun x => u x / v x, h.tendsto_0, h.eventually_mul_div_cancel.symm‚ü©
    ¬∑
      unfold is_o 
      rintro ‚ü®œÜ, hœÜ, huvœÜ‚ü© c hpos 
      rw [NormedGroup.tendsto_nhds_zero] at hœÜ 
      exact is_O_with_of_eq_mul _ ((hœÜ c hpos).mono$ fun x => le_of_lt‚Çì) huvœÜ

alias is_o_iff_exists_eq_mul ‚Üî Asymptotics.IsO‚Çì.exists_eq_mul _

end ExistsMulEq

/-! ### Miscellanous lemmas -/


theorem div_is_bounded_under_of_is_O {Œ± : Type _} {l : Filter Œ±} {f g : Œ± ‚Üí ùïú} (h : is_O f g l) :
  is_bounded_under (¬∑ ‚â§ ¬∑) l fun x => ‚à•f x / g x‚à• :=
  by 
    obtain ‚ü®c, hc‚ü© := is_O_iff.mp h 
    refine' ‚ü®max c 0, eventually_map.2 (Filter.mem_of_superset hc fun x hx => _)‚ü©
    simp only [mem_set_of_eq, NormedField.norm_div] at hx‚ä¢
    byCases' hgx : g x = 0
    ¬∑
      rw [hgx, norm_zero, div_zero, le_max_iff]
      exact Or.inr le_rfl
    ¬∑
      exact le_max_iff.2 (Or.inl ((div_le_iff (norm_pos_iff.2 hgx)).2 hx))

theorem is_O_iff_div_is_bounded_under {Œ± : Type _} {l : Filter Œ±} {f g : Œ± ‚Üí ùïú} (hgf : ‚àÄ·∂†x in l, g x = 0 ‚Üí f x = 0) :
  is_O f g l ‚Üî is_bounded_under (¬∑ ‚â§ ¬∑) l fun x => ‚à•f x / g x‚à• :=
  by 
    refine' ‚ü®div_is_bounded_under_of_is_O, fun h => _‚ü©
    obtain ‚ü®c, hc‚ü© := h 
    rw [Filter.eventually_iff] at hgf hc 
    simp only [mem_set_of_eq, mem_map, NormedField.norm_div] at hc 
    refine' is_O_iff.2 ‚ü®c, Filter.eventually_of_mem (inter_mem hgf hc) fun x hx => _‚ü©
    byCases' hgx : g x = 0
    ¬∑
      simp [hx.1 hgx, hgx]
    ¬∑
      refine' (div_le_iff (norm_pos_iff.2 hgx)).mp hx.2

theorem is_O_of_div_tendsto_nhds {Œ± : Type _} {l : Filter Œ±} {f g : Œ± ‚Üí ùïú} (hgf : ‚àÄ·∂†x in l, g x = 0 ‚Üí f x = 0) (c : ùïú)
  (H : Filter.Tendsto (f / g) l (ùìù c)) : is_O f g l :=
  (is_O_iff_div_is_bounded_under hgf).2$ is_bounded_under_of_tendsto H

theorem is_o.tendsto_zero_of_tendsto {Œ± E ùïú : Type _} [NormedGroup E] [NormedField ùïú] {u : Œ± ‚Üí E} {v : Œ± ‚Üí ùïú}
  {l : Filter Œ±} {y : ùïú} (huv : is_o u v l) (hv : tendsto v l (ùìù y)) : tendsto u l (ùìù 0) :=
  by 
    suffices h : is_o u (fun x => (1 : ùïú)) l
    ¬∑
      rwa [is_o_one_iff] at h 
    exact huv.trans_is_O (is_O_one_of_tendsto ùïú hv)

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_o_pow_pow
{m n : expr‚Ñï()}
(h : ¬´expr < ¬ª(m, n)) : is_o (Œª x : ùïú, ¬´expr ^ ¬ª(x, n)) (Œª x, ¬´expr ^ ¬ª(x, m)) (exprùìù() 0) :=
begin
  let [ident p] [] [":=", expr ¬´expr - ¬ª(n, m)],
  have [ident nmp] [":", expr ¬´expr = ¬ª(n, ¬´expr + ¬ª(m, p))] [":=", expr (add_tsub_cancel_of_le (le_of_lt h)).symm],
  have [] [":", expr ¬´expr = ¬ª(Œª x : ùïú, ¬´expr ^ ¬ª(x, m), Œª x, ¬´expr * ¬ª(¬´expr ^ ¬ª(x, m), 1))] [],
  by simp [] [] ["only"] ["[", expr mul_one, "]"] [] [],
  simp [] [] ["only"] ["[", expr this, ",", expr pow_add, ",", expr nmp, "]"] [] [],
  refine [expr is_O.mul_is_o (is_O_refl _ _) ((is_o_one_iff _).2 _)],
  convert [] [expr (continuous_pow p).tendsto (0 : ùïú)] [],
  exact [expr (zero_pow (tsub_pos_of_lt h)).symm]
end

theorem is_o_norm_pow_norm_pow {m n : ‚Ñï} (h : m < n) : is_o (fun x : E' => ‚à•x‚à• ^ n) (fun x => ‚à•x‚à• ^ m) (ùìù (0 : E')) :=
  (is_o_pow_pow h).comp_tendsto tendsto_norm_zero

theorem is_o_pow_id {n : ‚Ñï} (h : 1 < n) : is_o (fun x : ùïú => x ^ n) (fun x => x) (ùìù 0) :=
  by 
    convert is_o_pow_pow h 
    simp only [pow_one‚Çì]

theorem is_o_norm_pow_id {n : ‚Ñï} (h : 1 < n) : is_o (fun x : E' => ‚à•x‚à• ^ n) (fun x => x) (ùìù 0) :=
  by 
    simpa only [pow_one‚Çì, is_o_norm_right] using @is_o_norm_pow_norm_pow E' _ _ _ h

theorem is_O_with.right_le_sub_of_lt_1 {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : is_O_with c f‚ÇÅ f‚ÇÇ l) (hc : c < 1) :
  is_O_with (1 / (1 - c)) f‚ÇÇ (fun x => f‚ÇÇ x - f‚ÇÅ x) l :=
  is_O_with.of_bound$
    mem_of_superset h.bound$
      fun x hx =>
        by 
          simp only [mem_set_of_eq] at hx‚ä¢
          rw [mul_comm‚Çì, one_div, ‚Üêdiv_eq_mul_inv, le_div_iff, mul_sub, mul_one‚Çì, mul_comm‚Çì]
          ¬∑
            exact le_trans‚Çì (sub_le_sub_left hx _) (norm_sub_norm_le _ _)
          ¬∑
            exact sub_pos.2 hc

theorem is_O_with.right_le_add_of_lt_1 {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : is_O_with c f‚ÇÅ f‚ÇÇ l) (hc : c < 1) :
  is_O_with (1 / (1 - c)) f‚ÇÇ (fun x => f‚ÇÅ x+f‚ÇÇ x) l :=
  (h.neg_right.right_le_sub_of_lt_1 hc).neg_right.of_neg_left.congr rfl (fun x => rfl)
    fun x =>
      by 
        rw [neg_sub, sub_neg_eq_add]

theorem is_o.right_is_O_sub {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : is_o f‚ÇÅ f‚ÇÇ l) : is_O f‚ÇÇ (fun x => f‚ÇÇ x - f‚ÇÅ x) l :=
  ((h.def' one_half_pos).right_le_sub_of_lt_1 one_half_lt_one).IsO

theorem is_o.right_is_O_add {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} (h : is_o f‚ÇÅ f‚ÇÇ l) : is_O f‚ÇÇ (fun x => f‚ÇÅ x+f‚ÇÇ x) l :=
  ((h.def' one_half_pos).right_le_add_of_lt_1 one_half_lt_one).IsO

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- If `f x = O(g x)` along `cofinite`, then there exists a positive constant `C` such that
`‚à•f x‚à• ‚â§ C * ‚à•g x‚à•` whenever `g x ‚â† 0`. -/
theorem bound_of_is_O_cofinite
(h : is_O f g' cofinite) : ¬´expr‚àÉ , ¬ª((C ¬´expr > ¬ª 0), ‚àÄ
 {{x}}, ¬´expr ‚â† ¬ª(g' x, 0) ‚Üí ¬´expr ‚â§ ¬ª(¬´expr‚à• ‚à•¬ª(f x), ¬´expr * ¬ª(C, ¬´expr‚à• ‚à•¬ª(g' x)))) :=
begin
  rcases [expr h.exists_pos, "with", "‚ü®", ident C, ",", ident C‚ÇÄ, ",", ident hC, "‚ü©"],
  rw ["[", expr is_O_with, ",", expr eventually_cofinite, "]"] ["at", ident hC],
  rcases [expr (hC.to_finset.image (Œª
     x, ¬´expr / ¬ª(¬´expr‚à• ‚à•¬ª(f x), ¬´expr‚à• ‚à•¬ª(g' x)))).exists_le, "with", "‚ü®", ident C', ",", ident hC', "‚ü©"],
  have [] [":", expr ‚àÄ
   x, ¬´expr < ¬ª(¬´expr * ¬ª(C, ¬´expr‚à• ‚à•¬ª(g' x)), ¬´expr‚à• ‚à•¬ª(f x)) ‚Üí ¬´expr ‚â§ ¬ª(¬´expr / ¬ª(¬´expr‚à• ‚à•¬ª(f x), ¬´expr‚à• ‚à•¬ª(g' x)), C')] [],
  by simpa [] [] [] [] [] ["using", expr hC'],
  refine [expr ‚ü®max C C', lt_max_iff.2 (or.inl C‚ÇÄ), Œª x h‚ÇÄ, _‚ü©],
  rw ["[", expr max_mul_of_nonneg _ _ (norm_nonneg _), ",", expr le_max_iff, ",", expr or_iff_not_imp_left, ",", expr not_le, "]"] [],
  exact [expr Œª hx, (div_le_iff (norm_pos_iff.2 h‚ÇÄ)).1 (this _ hx)]
end

theorem is_O_cofinite_iff (h : ‚àÄ x, g' x = 0 ‚Üí f' x = 0) : is_O f' g' cofinite ‚Üî ‚àÉ C, ‚àÄ x, ‚à•f' x‚à• ‚â§ C*‚à•g' x‚à• :=
  ‚ü®fun h' =>
      let ‚ü®C, C‚ÇÄ, hC‚ü© := bound_of_is_O_cofinite h'
      ‚ü®C,
        fun x =>
          if hx : g' x = 0 then
            by 
              simp [h _ hx, hx]
          else hC hx‚ü©,
    fun h => (is_O_top.2 h).mono le_top‚ü©

theorem bound_of_is_O_nat_at_top {f : ‚Ñï ‚Üí E} {g' : ‚Ñï ‚Üí E'} (h : is_O f g' at_top) :
  ‚àÉ (C : _)(_ : C > 0), ‚àÄ ‚¶Éx‚¶Ñ, g' x ‚â† 0 ‚Üí ‚à•f x‚à• ‚â§ C*‚à•g' x‚à• :=
  bound_of_is_O_cofinite$
    by 
      rwa [Nat.cofinite_eq_at_top]

theorem is_O_nat_at_top_iff {f : ‚Ñï ‚Üí E'} {g : ‚Ñï ‚Üí F'} (h : ‚àÄ x, g x = 0 ‚Üí f x = 0) :
  is_O f g at_top ‚Üî ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C*‚à•g x‚à• :=
  by 
    rw [‚ÜêNat.cofinite_eq_at_top, is_O_cofinite_iff h]

theorem is_O_one_nat_at_top_iff {f : ‚Ñï ‚Üí E'} : is_O f (fun n => 1 : ‚Ñï ‚Üí ‚Ñù) at_top ‚Üî ‚àÉ C, ‚àÄ n, ‚à•f n‚à• ‚â§ C :=
  Iff.trans (is_O_nat_at_top_iff fun n h => (one_ne_zero h).elim)$
    by 
      simp only [norm_one, mul_one‚Çì]

theorem is_O_with_pi {Œπ : Type _} [Fintype Œπ] {E' : Œπ ‚Üí Type _} [‚àÄ i, NormedGroup (E' i)] {f : Œ± ‚Üí ‚àÄ i, E' i} {C : ‚Ñù}
  (hC : 0 ‚â§ C) : is_O_with C f g' l ‚Üî ‚àÄ i, is_O_with C (fun x => f x i) g' l :=
  have  : ‚àÄ x, 0 ‚â§ C*‚à•g' x‚à• := fun x => mul_nonneg hC (norm_nonneg _)
  by 
    simp only [is_O_with_iff, pi_norm_le_iff (this _), eventually_all]

@[simp]
theorem is_O_pi {Œπ : Type _} [Fintype Œπ] {E' : Œπ ‚Üí Type _} [‚àÄ i, NormedGroup (E' i)] {f : Œ± ‚Üí ‚àÄ i, E' i} :
  is_O f g' l ‚Üî ‚àÄ i, is_O (fun x => f x i) g' l :=
  by 
    simp only [is_O_iff_eventually_is_O_with, ‚Üêeventually_all]
    exact eventually_congr (eventually_at_top.2 ‚ü®0, fun c => is_O_with_pi‚ü©)

-- error in Analysis.Asymptotics.Asymptotics: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[simp]
theorem is_o_pi
{Œπ : Type*}
[fintype Œπ]
{E' : Œπ ‚Üí Type*}
[‚àÄ i, normed_group (E' i)]
{f : Œ± ‚Üí ‚àÄ i, E' i} : ¬´expr ‚Üî ¬ª(is_o f g' l, ‚àÄ i, is_o (Œª x, f x i) g' l) :=
begin
  simp [] [] ["only"] ["[", expr is_o, ",", expr is_O_with_pi, ",", expr le_of_lt, "]"] [] [] { contextual := tt },
  exact [expr ‚ü®Œª h i c hc, h hc i, Œª h c hc i, h i hc‚ü©]
end

end Asymptotics

open Asymptotics

theorem summable_of_is_O {Œπ E} [NormedGroup E] [CompleteSpace E] {f : Œπ ‚Üí E} {g : Œπ ‚Üí ‚Ñù} (hg : Summable g)
  (h : is_O f g cofinite) : Summable f :=
  let ‚ü®C, hC‚ü© := h.is_O_with 
  summable_of_norm_bounded_eventually (fun x => C*‚à•g x‚à•) (hg.abs.mul_left _) hC.bound

theorem summable_of_is_O_nat {E} [NormedGroup E] [CompleteSpace E] {f : ‚Ñï ‚Üí E} {g : ‚Ñï ‚Üí ‚Ñù} (hg : Summable g)
  (h : is_O f g at_top) : Summable f :=
  summable_of_is_O hg$ Nat.cofinite_eq_at_top.symm ‚ñ∏ h

namespace LocalHomeomorph

variable {Œ± : Type _} {Œ≤ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

variable {E : Type _} [HasNorm E] {F : Type _} [HasNorm F]

/-- Transfer `is_O_with` over a `local_homeomorph`. -/
theorem is_O_with_congr (e : LocalHomeomorph Œ± Œ≤) {b : Œ≤} (hb : b ‚àà e.target) {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} {C : ‚Ñù} :
  is_O_with C f g (ùìù b) ‚Üî is_O_with C (f ‚àò e) (g ‚àò e) (ùìù (e.symm b)) :=
  ‚ü®fun h =>
      h.comp_tendsto$
        by 
          convert e.continuous_at (e.map_target hb)
          exact (e.right_inv hb).symm,
    fun h =>
      (h.comp_tendsto (e.continuous_at_symm hb)).congr' rfl
        ((e.eventually_right_inverse hb).mono$ fun x hx => congr_arg‚Çì f hx)
        ((e.eventually_right_inverse hb).mono$ fun x hx => congr_arg‚Çì g hx)‚ü©

/-- Transfer `is_O` over a `local_homeomorph`. -/
theorem is_O_congr (e : LocalHomeomorph Œ± Œ≤) {b : Œ≤} (hb : b ‚àà e.target) {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} :
  is_O f g (ùìù b) ‚Üî is_O (f ‚àò e) (g ‚àò e) (ùìù (e.symm b)) :=
  by 
    unfold is_O 
    exact exists_congr fun C => e.is_O_with_congr hb

/-- Transfer `is_o` over a `local_homeomorph`. -/
theorem is_o_congr (e : LocalHomeomorph Œ± Œ≤) {b : Œ≤} (hb : b ‚àà e.target) {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} :
  is_o f g (ùìù b) ‚Üî is_o (f ‚àò e) (g ‚àò e) (ùìù (e.symm b)) :=
  by 
    unfold is_o 
    exact forall_congr‚Çì$ fun c => forall_congr‚Çì$ fun hc => e.is_O_with_congr hb

end LocalHomeomorph

namespace Homeomorph

variable {Œ± : Type _} {Œ≤ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

variable {E : Type _} [HasNorm E] {F : Type _} [HasNorm F]

open Asymptotics

/-- Transfer `is_O_with` over a `homeomorph`. -/
theorem is_O_with_congr (e : Œ± ‚âÉ‚Çú Œ≤) {b : Œ≤} {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} {C : ‚Ñù} :
  is_O_with C f g (ùìù b) ‚Üî is_O_with C (f ‚àò e) (g ‚àò e) (ùìù (e.symm b)) :=
  e.to_local_homeomorph.is_O_with_congr trivial‚Çì

/-- Transfer `is_O` over a `homeomorph`. -/
theorem is_O_congr (e : Œ± ‚âÉ‚Çú Œ≤) {b : Œ≤} {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} :
  is_O f g (ùìù b) ‚Üî is_O (f ‚àò e) (g ‚àò e) (ùìù (e.symm b)) :=
  by 
    unfold is_O 
    exact exists_congr fun C => e.is_O_with_congr

/-- Transfer `is_o` over a `homeomorph`. -/
theorem is_o_congr (e : Œ± ‚âÉ‚Çú Œ≤) {b : Œ≤} {f : Œ≤ ‚Üí E} {g : Œ≤ ‚Üí F} :
  is_o f g (ùìù b) ‚Üî is_o (f ‚àò e) (g ‚àò e) (ùìù (e.symm b)) :=
  by 
    unfold is_o 
    exact forall_congr‚Çì fun c => forall_congr‚Çì fun hc => e.is_O_with_congr

end Homeomorph

