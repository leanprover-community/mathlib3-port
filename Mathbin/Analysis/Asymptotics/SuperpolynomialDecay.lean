/-
Copyright (c) 2021 Devon Tuma. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Devon Tuma

! This file was ported from Lean 3 source module analysis.asymptotics.superpolynomial_decay
! leanprover-community/mathlib commit f2ce6086713c78a7f880485f7917ea547a215982
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Asymptotics.Asymptotics
import Mathbin.Analysis.Normed.Order.Basic
import Mathbin.Data.Polynomial.Eval
import Mathbin.Topology.Algebra.Order.LiminfLimsup

/-!
# Super-Polynomial Function Decay

This file defines a predicate `asymptotics.superpolynomial_decay f` for a function satisfying
  one of following equivalent definitions (The definition is in terms of the first condition):

* `x ^ n * f` tends to `𝓝 0` for all (or sufficiently large) naturals `n`
* `|x ^ n * f|` tends to `𝓝 0` for all naturals `n` (`superpolynomial_decay_iff_abs_tendsto_zero`)
* `|x ^ n * f|` is bounded for all naturals `n` (`superpolynomial_decay_iff_abs_is_bounded_under`)
* `f` is `o(x ^ c)` for all integers `c` (`superpolynomial_decay_iff_is_o`)
* `f` is `O(x ^ c)` for all integers `c` (`superpolynomial_decay_iff_is_O`)

These conditions are all equivalent to conditions in terms of polynomials, replacing `x ^ c` with
  `p(x)` or `p(x)⁻¹` as appropriate, since asymptotically `p(x)` behaves like `X ^ p.nat_degree`.
These further equivalences are not proven in mathlib but would be good future projects.

The definition of superpolynomial decay for `f : α → β` is relative to a parameter `k : α → β`.
Super-polynomial decay then means `f x` decays faster than `(k x) ^ c` for all integers `c`.
Equivalently `f x` decays faster than `p.eval (k x)` for all polynomials `p : β[X]`.
The definition is also relative to a filter `l : filter α` where the decay rate is compared.

When the map `k` is given by `n ↦ ↑n : ℕ → ℝ` this defines negligible functions:
https://en.wikipedia.org/wiki/Negligible_function

When the map `k` is given by `(r₁,...,rₙ) ↦ r₁*...*rₙ : ℝⁿ → ℝ` this is equivalent
  to the definition of rapidly decreasing functions given here:
https://ncatlab.org/nlab/show/rapidly+decreasing+function

# Main Theorems

* `superpolynomial_decay.polynomial_mul` says that if `f(x)` is negligible,
    then so is `p(x) * f(x)` for any polynomial `p`.
* `superpolynomial_decay_iff_zpow_tendsto_zero` gives an equivalence between definitions in terms
    of decaying faster than `k(x) ^ n` for all naturals `n` or `k(x) ^ c` for all integer `c`.
-/


namespace Asymptotics

open Topology Polynomial

open Filter

#print Asymptotics.SuperpolynomialDecay /-
/-- `f` has superpolynomial decay in parameter `k` along filter `l` if
  `k ^ n * f` tends to zero at `l` for all naturals `n` -/
def SuperpolynomialDecay {α β : Type _} [TopologicalSpace β] [CommSemiring β] (l : Filter α)
    (k : α → β) (f : α → β) :=
  ∀ n : ℕ, Tendsto (fun a : α => k a ^ n * f a) l (𝓝 0)
#align asymptotics.superpolynomial_decay Asymptotics.SuperpolynomialDecay
-/

variable {α β : Type _} {l : Filter α} {k : α → β} {f g g' : α → β}

section CommSemiring

variable [TopologicalSpace β] [CommSemiring β]

/- warning: asymptotics.superpolynomial_decay.congr' -> Asymptotics.SuperpolynomialDecay.congr' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Filter.EventuallyEq.{u1, u2} α β l f g) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k g)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k f) -> (Filter.EventuallyEq.{u2, u1} α β l f g) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k g)
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.congr' Asymptotics.SuperpolynomialDecay.congr'ₓ'. -/
theorem SuperpolynomialDecay.congr' (hf : SuperpolynomialDecay l k f) (hfg : f =ᶠ[l] g) :
    SuperpolynomialDecay l k g := fun z =>
  (hf z).congr' (EventuallyEq.mul (EventuallyEq.refl l _) hfg)
#align asymptotics.superpolynomial_decay.congr' Asymptotics.SuperpolynomialDecay.congr'

/- warning: asymptotics.superpolynomial_decay.congr -> Asymptotics.SuperpolynomialDecay.congr is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (x : α), Eq.{succ u2} β (f x) (g x)) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k g)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k f) -> (forall (x : α), Eq.{succ u1} β (f x) (g x)) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k g)
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.congr Asymptotics.SuperpolynomialDecay.congrₓ'. -/
theorem SuperpolynomialDecay.congr (hf : SuperpolynomialDecay l k f) (hfg : ∀ x, f x = g x) :
    SuperpolynomialDecay l k g := fun z =>
  (hf z).congr fun x => (congr_arg fun a => k x ^ z * a) <| hfg x
#align asymptotics.superpolynomial_decay.congr Asymptotics.SuperpolynomialDecay.congr

/- warning: asymptotics.superpolynomial_decay_zero -> Asymptotics.superpolynomialDecay_zero is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] (l : Filter.{u1} α) (k : α -> β), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (OfNat.ofNat.{max u1 u2} (α -> β) 0 (OfNat.mk.{max u1 u2} (α -> β) 0 (Zero.zero.{max u1 u2} (α -> β) (Pi.instZero.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => MulZeroClass.toHasZero.{u2} β (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))))))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β] (l : Filter.{u2} α) (k : α -> β), Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k (OfNat.ofNat.{max u2 u1} (α -> β) 0 (Zero.toOfNat0.{max u2 u1} (α -> β) (Pi.instZero.{u2, u1} α (fun (a._@.Mathlib.Analysis.Asymptotics.SuperpolynomialDecay._hyg.20 : α) => β) (fun (i : α) => CommMonoidWithZero.toZero.{u1} β (CommSemiring.toCommMonoidWithZero.{u1} β _inst_2)))))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_zero Asymptotics.superpolynomialDecay_zeroₓ'. -/
@[simp]
theorem superpolynomialDecay_zero (l : Filter α) (k : α → β) : SuperpolynomialDecay l k 0 :=
  fun z => by simpa only [Pi.zero_apply, MulZeroClass.mul_zero] using tendsto_const_nhds
#align asymptotics.superpolynomial_decay_zero Asymptotics.superpolynomialDecay_zero

/- warning: asymptotics.superpolynomial_decay.add -> Asymptotics.SuperpolynomialDecay.add is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousAdd.{u2} β _inst_1 (Distrib.toHasAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k g) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HAdd.hAdd.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHAdd.{max u1 u2} (α -> β) (Pi.instAdd.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) f g))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousAdd.{u2} β _inst_1 (Distrib.toAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k g) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HAdd.hAdd.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHAdd.{max u1 u2} (α -> β) (Pi.instAdd.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) f g))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.add Asymptotics.SuperpolynomialDecay.addₓ'. -/
theorem SuperpolynomialDecay.add [ContinuousAdd β] (hf : SuperpolynomialDecay l k f)
    (hg : SuperpolynomialDecay l k g) : SuperpolynomialDecay l k (f + g) := fun z => by
  simpa only [mul_add, add_zero, Pi.add_apply] using (hf z).add (hg z)
#align asymptotics.superpolynomial_decay.add Asymptotics.SuperpolynomialDecay.add

/- warning: asymptotics.superpolynomial_decay.mul -> Asymptotics.SuperpolynomialDecay.mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k g) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) f g))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k g) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) f g))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.mul Asymptotics.SuperpolynomialDecay.mulₓ'. -/
theorem SuperpolynomialDecay.mul [ContinuousMul β] (hf : SuperpolynomialDecay l k f)
    (hg : SuperpolynomialDecay l k g) : SuperpolynomialDecay l k (f * g) := fun z => by
  simpa only [mul_assoc, one_mul, MulZeroClass.mul_zero, pow_zero] using (hf z).mul (hg 0)
#align asymptotics.superpolynomial_decay.mul Asymptotics.SuperpolynomialDecay.mul

/- warning: asymptotics.superpolynomial_decay.mul_const -> Asymptotics.SuperpolynomialDecay.mul_const is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (c : β), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) (f n) c))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (c : β), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))) (f n) c))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.mul_const Asymptotics.SuperpolynomialDecay.mul_constₓ'. -/
theorem SuperpolynomialDecay.mul_const [ContinuousMul β] (hf : SuperpolynomialDecay l k f) (c : β) :
    SuperpolynomialDecay l k fun n => f n * c := fun z => by
  simpa only [← mul_assoc, MulZeroClass.zero_mul] using tendsto.mul_const c (hf z)
#align asymptotics.superpolynomial_decay.mul_const Asymptotics.SuperpolynomialDecay.mul_const

/- warning: asymptotics.superpolynomial_decay.const_mul -> Asymptotics.SuperpolynomialDecay.const_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (c : β), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) c (f n)))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (c : β), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))) c (f n)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.const_mul Asymptotics.SuperpolynomialDecay.const_mulₓ'. -/
theorem SuperpolynomialDecay.const_mul [ContinuousMul β] (hf : SuperpolynomialDecay l k f) (c : β) :
    SuperpolynomialDecay l k fun n => c * f n :=
  (hf.mul_const c).congr fun _ => mul_comm _ _
#align asymptotics.superpolynomial_decay.const_mul Asymptotics.SuperpolynomialDecay.const_mul

/- warning: asymptotics.superpolynomial_decay.param_mul -> Asymptotics.SuperpolynomialDecay.param_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) k f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocSemiring.toMul.{u1} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} β (Semiring.toNonAssocSemiring.{u1} β (CommSemiring.toSemiring.{u1} β _inst_2)))))) k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.param_mul Asymptotics.SuperpolynomialDecay.param_mulₓ'. -/
theorem SuperpolynomialDecay.param_mul (hf : SuperpolynomialDecay l k f) :
    SuperpolynomialDecay l k (k * f) := fun z =>
  tendsto_nhds.2 fun s hs hs0 =>
    l.sets_of_superset ((tendsto_nhds.1 (hf <| z + 1)) s hs hs0) fun x hx => by
      simpa only [Set.mem_preimage, Pi.mul_apply, ← mul_assoc, ← pow_succ'] using hx
#align asymptotics.superpolynomial_decay.param_mul Asymptotics.SuperpolynomialDecay.param_mul

/- warning: asymptotics.superpolynomial_decay.mul_param -> Asymptotics.SuperpolynomialDecay.mul_param is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) f k))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k f) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocSemiring.toMul.{u1} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} β (Semiring.toNonAssocSemiring.{u1} β (CommSemiring.toSemiring.{u1} β _inst_2)))))) f k))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.mul_param Asymptotics.SuperpolynomialDecay.mul_paramₓ'. -/
theorem SuperpolynomialDecay.mul_param (hf : SuperpolynomialDecay l k f) :
    SuperpolynomialDecay l k (f * k) :=
  hf.param_mul.congr fun _ => mul_comm _ _
#align asymptotics.superpolynomial_decay.mul_param Asymptotics.SuperpolynomialDecay.mul_param

/- warning: asymptotics.superpolynomial_decay.param_pow_mul -> Asymptotics.SuperpolynomialDecay.param_pow_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (n : Nat), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) (HPow.hPow.{max u1 u2, 0, max u1 u2} (α -> β) Nat (α -> β) (instHPow.{max u1 u2, 0} (α -> β) Nat (Pi.hasPow.{u1, u2, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u2} β (MonoidWithZero.toMonoid.{u2} β (Semiring.toMonoidWithZero.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) k n) f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k f) -> (forall (n : Nat), Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocSemiring.toMul.{u1} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} β (Semiring.toNonAssocSemiring.{u1} β (CommSemiring.toSemiring.{u1} β _inst_2)))))) (HPow.hPow.{max u2 u1, 0, max u2 u1} (α -> β) Nat (α -> β) (instHPow.{max u2 u1, 0} (α -> β) Nat (Pi.instPow.{u2, u1, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (CommSemiring.toSemiring.{u1} β _inst_2)))))) k n) f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.param_pow_mul Asymptotics.SuperpolynomialDecay.param_pow_mulₓ'. -/
theorem SuperpolynomialDecay.param_pow_mul (hf : SuperpolynomialDecay l k f) (n : ℕ) :
    SuperpolynomialDecay l k (k ^ n * f) :=
  by
  induction' n with n hn
  · simpa only [one_mul, pow_zero] using hf
  · simpa only [pow_succ, mul_assoc] using hn.param_mul
#align asymptotics.superpolynomial_decay.param_pow_mul Asymptotics.SuperpolynomialDecay.param_pow_mul

/- warning: asymptotics.superpolynomial_decay.mul_param_pow -> Asymptotics.SuperpolynomialDecay.mul_param_pow is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (n : Nat), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))))) f (HPow.hPow.{max u1 u2, 0, max u1 u2} (α -> β) Nat (α -> β) (instHPow.{max u1 u2, 0} (α -> β) Nat (Pi.hasPow.{u1, u2, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u2} β (MonoidWithZero.toMonoid.{u2} β (Semiring.toMonoidWithZero.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) k n)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : CommSemiring.{u1} β], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k f) -> (forall (n : Nat), Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 _inst_2 l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocSemiring.toMul.{u1} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} β (Semiring.toNonAssocSemiring.{u1} β (CommSemiring.toSemiring.{u1} β _inst_2)))))) f (HPow.hPow.{max u2 u1, 0, max u2 u1} (α -> β) Nat (α -> β) (instHPow.{max u2 u1, 0} (α -> β) Nat (Pi.instPow.{u2, u1, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (CommSemiring.toSemiring.{u1} β _inst_2)))))) k n)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.mul_param_pow Asymptotics.SuperpolynomialDecay.mul_param_powₓ'. -/
theorem SuperpolynomialDecay.mul_param_pow (hf : SuperpolynomialDecay l k f) (n : ℕ) :
    SuperpolynomialDecay l k (f * k ^ n) :=
  (hf.param_pow_mul n).congr fun _ => mul_comm _ _
#align asymptotics.superpolynomial_decay.mul_param_pow Asymptotics.SuperpolynomialDecay.mul_param_pow

/- warning: asymptotics.superpolynomial_decay.polynomial_mul -> Asymptotics.SuperpolynomialDecay.polynomial_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousAdd.{u2} β _inst_1 (Distrib.toHasAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))] [_inst_4 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (p : Polynomial.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (x : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) (Polynomial.eval.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2) (k x) p) (f x)))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousAdd.{u2} β _inst_1 (Distrib.toAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))] [_inst_4 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (p : Polynomial.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (x : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))) (Polynomial.eval.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2) (k x) p) (f x)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.polynomial_mul Asymptotics.SuperpolynomialDecay.polynomial_mulₓ'. -/
theorem SuperpolynomialDecay.polynomial_mul [ContinuousAdd β] [ContinuousMul β]
    (hf : SuperpolynomialDecay l k f) (p : β[X]) :
    SuperpolynomialDecay l k fun x => (p.eval <| k x) * f x :=
  Polynomial.induction_on' p (fun p q hp hq => by simpa [add_mul] using hp.add hq) fun n c => by
    simpa [mul_assoc] using (hf.param_pow_mul n).const_mul c
#align asymptotics.superpolynomial_decay.polynomial_mul Asymptotics.SuperpolynomialDecay.polynomial_mul

/- warning: asymptotics.superpolynomial_decay.mul_polynomial -> Asymptotics.SuperpolynomialDecay.mul_polynomial is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousAdd.{u2} β _inst_1 (Distrib.toHasAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))] [_inst_4 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (p : Polynomial.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (x : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))) (f x) (Polynomial.eval.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2) (k x) p)))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : CommSemiring.{u2} β] [_inst_3 : ContinuousAdd.{u2} β _inst_1 (Distrib.toAdd.{u2} β (NonUnitalNonAssocSemiring.toDistrib.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)))))] [_inst_4 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k f) -> (forall (p : Polynomial.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2)), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 _inst_2 l k (fun (x : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (NonUnitalNonAssocSemiring.toMul.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2))))) (f x) (Polynomial.eval.{u2} β (CommSemiring.toSemiring.{u2} β _inst_2) (k x) p)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.mul_polynomial Asymptotics.SuperpolynomialDecay.mul_polynomialₓ'. -/
theorem SuperpolynomialDecay.mul_polynomial [ContinuousAdd β] [ContinuousMul β]
    (hf : SuperpolynomialDecay l k f) (p : β[X]) :
    SuperpolynomialDecay l k fun x => f x * (p.eval <| k x) :=
  (hf.polynomial_mul p).congr fun _ => mul_comm _ _
#align asymptotics.superpolynomial_decay.mul_polynomial Asymptotics.SuperpolynomialDecay.mul_polynomial

end CommSemiring

section OrderedCommSemiring

variable [TopologicalSpace β] [OrderedCommSemiring β] [OrderTopology β]

/- warning: asymptotics.superpolynomial_decay.trans_eventually_le -> Asymptotics.SuperpolynomialDecay.trans_eventuallyLE is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} {g' : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : OrderedCommSemiring.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommMonoid.toPartialOrder.{u2} β (OrderedSemiring.toOrderedAddCommMonoid.{u2} β (OrderedCommSemiring.toOrderedSemiring.{u2} β _inst_2))))], (Filter.EventuallyLE.{u1, u2} α β (Preorder.toLE.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommMonoid.toPartialOrder.{u2} β (OrderedSemiring.toOrderedAddCommMonoid.{u2} β (OrderedCommSemiring.toOrderedSemiring.{u2} β _inst_2))))) l (OfNat.ofNat.{max u1 u2} (α -> β) 0 (OfNat.mk.{max u1 u2} (α -> β) 0 (Zero.zero.{max u1 u2} (α -> β) (Pi.instZero.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => MulZeroClass.toHasZero.{u2} β (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} β (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} β (Semiring.toNonAssocSemiring.{u2} β (OrderedSemiring.toSemiring.{u2} β (OrderedCommSemiring.toOrderedSemiring.{u2} β _inst_2)))))))))) k) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (OrderedCommSemiring.toCommSemiring.{u2} β _inst_2) l k g) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (OrderedCommSemiring.toCommSemiring.{u2} β _inst_2) l k g') -> (Filter.EventuallyLE.{u1, u2} α β (Preorder.toLE.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommMonoid.toPartialOrder.{u2} β (OrderedSemiring.toOrderedAddCommMonoid.{u2} β (OrderedCommSemiring.toOrderedSemiring.{u2} β _inst_2))))) l g f) -> (Filter.EventuallyLE.{u1, u2} α β (Preorder.toLE.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommMonoid.toPartialOrder.{u2} β (OrderedSemiring.toOrderedAddCommMonoid.{u2} β (OrderedCommSemiring.toOrderedSemiring.{u2} β _inst_2))))) l f g') -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (OrderedCommSemiring.toCommSemiring.{u2} β _inst_2) l k f)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} {g : α -> β} {g' : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : OrderedCommSemiring.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (OrderedSemiring.toPartialOrder.{u1} β (OrderedCommSemiring.toOrderedSemiring.{u1} β _inst_2)))], (Filter.EventuallyLE.{u2, u1} α β (Preorder.toLE.{u1} β (PartialOrder.toPreorder.{u1} β (OrderedSemiring.toPartialOrder.{u1} β (OrderedCommSemiring.toOrderedSemiring.{u1} β _inst_2)))) l (OfNat.ofNat.{max u2 u1} (α -> β) 0 (Zero.toOfNat0.{max u2 u1} (α -> β) (Pi.instZero.{u2, u1} α (fun (a._@.Mathlib.Order.Filter.Basic._hyg.21857 : α) => β) (fun (i : α) => CommMonoidWithZero.toZero.{u1} β (CommSemiring.toCommMonoidWithZero.{u1} β (OrderedCommSemiring.toCommSemiring.{u1} β _inst_2)))))) k) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (OrderedCommSemiring.toCommSemiring.{u1} β _inst_2) l k g) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (OrderedCommSemiring.toCommSemiring.{u1} β _inst_2) l k g') -> (Filter.EventuallyLE.{u2, u1} α β (Preorder.toLE.{u1} β (PartialOrder.toPreorder.{u1} β (OrderedSemiring.toPartialOrder.{u1} β (OrderedCommSemiring.toOrderedSemiring.{u1} β _inst_2)))) l g f) -> (Filter.EventuallyLE.{u2, u1} α β (Preorder.toLE.{u1} β (PartialOrder.toPreorder.{u1} β (OrderedSemiring.toPartialOrder.{u1} β (OrderedCommSemiring.toOrderedSemiring.{u1} β _inst_2)))) l f g') -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (OrderedCommSemiring.toCommSemiring.{u1} β _inst_2) l k f)
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.trans_eventually_le Asymptotics.SuperpolynomialDecay.trans_eventuallyLEₓ'. -/
theorem SuperpolynomialDecay.trans_eventuallyLE (hk : 0 ≤ᶠ[l] k) (hg : SuperpolynomialDecay l k g)
    (hg' : SuperpolynomialDecay l k g') (hfg : g ≤ᶠ[l] f) (hfg' : f ≤ᶠ[l] g') :
    SuperpolynomialDecay l k f := fun z =>
  tendsto_of_tendsto_of_tendsto_of_le_of_le' (hg z) (hg' z)
    (hfg.mp (hk.mono fun x hx hx' => mul_le_mul_of_nonneg_left hx' (pow_nonneg hx z)))
    (hfg'.mp (hk.mono fun x hx hx' => mul_le_mul_of_nonneg_left hx' (pow_nonneg hx z)))
#align asymptotics.superpolynomial_decay.trans_eventually_le Asymptotics.SuperpolynomialDecay.trans_eventuallyLE

end OrderedCommSemiring

section LinearOrderedCommRing

variable [TopologicalSpace β] [LinearOrderedCommRing β] [OrderTopology β]

variable (l k f)

/- warning: asymptotics.superpolynomial_decay_iff_abs_tendsto_zero -> Asymptotics.superpolynomialDecay_iff_abs_tendsto_zero is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedCommRing.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))], Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l k f) (forall (n : Nat), Filter.Tendsto.{u1, u2} α β (fun (a : α) => Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (HPow.hPow.{u2, 0, u2} β Nat β (instHPow.{u2, 0} β Nat (Monoid.Pow.{u2} β (Ring.toMonoid.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (k a) n) (f a))) l (nhds.{u2} β _inst_1 (OfNat.ofNat.{u2} β 0 (OfNat.mk.{u2} β 0 (Zero.zero.{u2} β (MulZeroClass.toHasZero.{u2} β (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} β (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))))))))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} (l : Filter.{u2} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedCommRing.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))], Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l k f) (forall (n : Nat), Filter.Tendsto.{u2, u1} α β (fun (a : α) => Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))))) (HMul.hMul.{u1, u1, u1} β β β (instHMul.{u1} β (NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))))) (HPow.hPow.{u1, 0, u1} β Nat β (instHPow.{u1, 0} β Nat (Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (StrictOrderedSemiring.toSemiring.{u1} β (LinearOrderedSemiring.toStrictOrderedSemiring.{u1} β (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2)))))))) (k a) n) (f a))) l (nhds.{u1} β _inst_1 (OfNat.ofNat.{u1} β 0 (Zero.toOfNat0.{u1} β (CommMonoidWithZero.toZero.{u1} β (CancelCommMonoidWithZero.toCommMonoidWithZero.{u1} β (IsDomain.toCancelCommMonoidWithZero.{u1} β (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) (LinearOrderedRing.isDomain.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))))))))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_abs_tendsto_zero Asymptotics.superpolynomialDecay_iff_abs_tendsto_zeroₓ'. -/
theorem superpolynomialDecay_iff_abs_tendsto_zero :
    SuperpolynomialDecay l k f ↔ ∀ n : ℕ, Tendsto (fun a : α => |k a ^ n * f a|) l (𝓝 0) :=
  ⟨fun h z => (tendsto_zero_iff_abs_tendsto_zero _).1 (h z), fun h z =>
    (tendsto_zero_iff_abs_tendsto_zero _).2 (h z)⟩
#align asymptotics.superpolynomial_decay_iff_abs_tendsto_zero Asymptotics.superpolynomialDecay_iff_abs_tendsto_zero

/- warning: asymptotics.superpolynomial_decay_iff_superpolynomial_decay_abs -> Asymptotics.superpolynomialDecay_iff_superpolynomialDecay_abs is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedCommRing.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))], Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l k f) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l (fun (a : α) => Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (k a)) (fun (a : α) => Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (f a)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} (l : Filter.{u2} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedCommRing.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))], Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l k f) (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l (fun (a : α) => Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))))) (k a)) (fun (a : α) => Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))))) (f a)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_superpolynomial_decay_abs Asymptotics.superpolynomialDecay_iff_superpolynomialDecay_absₓ'. -/
theorem superpolynomialDecay_iff_superpolynomialDecay_abs :
    SuperpolynomialDecay l k f ↔ SuperpolynomialDecay l (fun a => |k a|) fun a => |f a| :=
  (superpolynomialDecay_iff_abs_tendsto_zero l k f).trans
    (by simp_rw [superpolynomial_decay, abs_mul, abs_pow])
#align asymptotics.superpolynomial_decay_iff_superpolynomial_decay_abs Asymptotics.superpolynomialDecay_iff_superpolynomialDecay_abs

variable {l k f}

/- warning: asymptotics.superpolynomial_decay.trans_eventually_abs_le -> Asymptotics.SuperpolynomialDecay.trans_eventually_abs_le is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedCommRing.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l k f) -> (Filter.EventuallyLE.{u1, u2} α β (Preorder.toLE.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) l (Function.comp.{succ u1, succ u2, succ u2} α β β (Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2))))))) g) (Function.comp.{succ u1, succ u2, succ u2} α β β (Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2))))))) f)) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l k g)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedCommRing.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l k f) -> (Filter.EventuallyLE.{u2, u1} α β (Preorder.toLE.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))) l (Function.comp.{succ u2, succ u1, succ u1} α β β (Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))))))) g) (Function.comp.{succ u2, succ u1, succ u1} α β β (Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))))))) f)) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l k g)
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.trans_eventually_abs_le Asymptotics.SuperpolynomialDecay.trans_eventually_abs_leₓ'. -/
theorem SuperpolynomialDecay.trans_eventually_abs_le (hf : SuperpolynomialDecay l k f)
    (hfg : abs ∘ g ≤ᶠ[l] abs ∘ f) : SuperpolynomialDecay l k g :=
  by
  rw [superpolynomial_decay_iff_abs_tendsto_zero] at hf⊢
  refine' fun z =>
    tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds (hf z)
      (eventually_of_forall fun x => abs_nonneg _) (hfg.mono fun x hx => _)
  calc
    |k x ^ z * g x| = |k x ^ z| * |g x| := abs_mul (k x ^ z) (g x)
    _ ≤ |k x ^ z| * |f x| := (mul_le_mul le_rfl hx (abs_nonneg _) (abs_nonneg _))
    _ = |k x ^ z * f x| := (abs_mul (k x ^ z) (f x)).symm
    
#align asymptotics.superpolynomial_decay.trans_eventually_abs_le Asymptotics.SuperpolynomialDecay.trans_eventually_abs_le

/- warning: asymptotics.superpolynomial_decay.trans_abs_le -> Asymptotics.SuperpolynomialDecay.trans_abs_le is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedCommRing.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))], (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l k f) -> (forall (x : α), LE.le.{u2} β (Preorder.toLE.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (g x)) (Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (StrictOrderedRing.toRing.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β _inst_2)))))) (f x))) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u2} β (StrictOrderedCommRing.toStrictOrderedCommSemiring.{u2} β (LinearOrderedCommRing.toStrictOrderedCommRing.{u2} β _inst_2))) l k g)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} {g : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedCommRing.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))], (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l k f) -> (forall (x : α), LE.le.{u1} β (Preorder.toLE.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))) (Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))))) (g x)) (Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (StrictOrderedRing.toRing.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β _inst_2))))))) (f x))) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (StrictOrderedCommSemiring.toCommSemiring.{u1} β (LinearOrderedCommSemiring.toStrictOrderedCommSemiring.{u1} β (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u1} β _inst_2))) l k g)
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.trans_abs_le Asymptotics.SuperpolynomialDecay.trans_abs_leₓ'. -/
theorem SuperpolynomialDecay.trans_abs_le (hf : SuperpolynomialDecay l k f)
    (hfg : ∀ x, |g x| ≤ |f x|) : SuperpolynomialDecay l k g :=
  hf.trans_eventually_abs_le (eventually_of_forall hfg)
#align asymptotics.superpolynomial_decay.trans_abs_le Asymptotics.SuperpolynomialDecay.trans_abs_le

end LinearOrderedCommRing

section Field

variable [TopologicalSpace β] [Field β] (l k f)

/- warning: asymptotics.superpolynomial_decay_mul_const_iff -> Asymptotics.superpolynomialDecay_mul_const_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : Field.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2))))] {c : β}, (Ne.{succ u2} β c (OfNat.ofNat.{u2} β 0 (OfNat.mk.{u2} β 0 (Zero.zero.{u2} β (MulZeroClass.toHasZero.{u2} β (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} β (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2))))))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2))))) (f n) c)) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k f))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : Field.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocRing.toMul.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2)))))] {c : β}, (Ne.{succ u2} β c (OfNat.ofNat.{u2} β 0 (Zero.toOfNat0.{u2} β (CommMonoidWithZero.toZero.{u2} β (CommGroupWithZero.toCommMonoidWithZero.{u2} β (Semifield.toCommGroupWithZero.{u2} β (Field.toSemifield.{u2} β _inst_2))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (NonUnitalNonAssocRing.toMul.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2)))))) (f n) c)) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_mul_const_iff Asymptotics.superpolynomialDecay_mul_const_iffₓ'. -/
theorem superpolynomialDecay_mul_const_iff [ContinuousMul β] {c : β} (hc0 : c ≠ 0) :
    (SuperpolynomialDecay l k fun n => f n * c) ↔ SuperpolynomialDecay l k f :=
  ⟨fun h => (h.mul_const c⁻¹).congr fun x => by simp [mul_assoc, mul_inv_cancel hc0], fun h =>
    h.mul_const c⟩
#align asymptotics.superpolynomial_decay_mul_const_iff Asymptotics.superpolynomialDecay_mul_const_iff

/- warning: asymptotics.superpolynomial_decay_const_mul_iff -> Asymptotics.superpolynomialDecay_const_mul_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : Field.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2))))] {c : β}, (Ne.{succ u2} β c (OfNat.ofNat.{u2} β 0 (OfNat.mk.{u2} β 0 (Zero.zero.{u2} β (MulZeroClass.toHasZero.{u2} β (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} β (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2))))))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2))))) c (f n))) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k f))
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : Field.{u2} β] [_inst_3 : ContinuousMul.{u2} β _inst_1 (NonUnitalNonAssocRing.toMul.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2)))))] {c : β}, (Ne.{succ u2} β c (OfNat.ofNat.{u2} β 0 (Zero.toOfNat0.{u2} β (CommMonoidWithZero.toZero.{u2} β (CommGroupWithZero.toCommMonoidWithZero.{u2} β (Semifield.toCommGroupWithZero.{u2} β (Field.toSemifield.{u2} β _inst_2))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k (fun (n : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (NonUnitalNonAssocRing.toMul.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β _inst_2)))))) c (f n))) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (Field.toSemifield.{u2} β _inst_2)) l k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_const_mul_iff Asymptotics.superpolynomialDecay_const_mul_iffₓ'. -/
theorem superpolynomialDecay_const_mul_iff [ContinuousMul β] {c : β} (hc0 : c ≠ 0) :
    (SuperpolynomialDecay l k fun n => c * f n) ↔ SuperpolynomialDecay l k f :=
  ⟨fun h => (h.const_mul c⁻¹).congr fun x => by simp [← mul_assoc, inv_mul_cancel hc0], fun h =>
    h.const_mul c⟩
#align asymptotics.superpolynomial_decay_const_mul_iff Asymptotics.superpolynomialDecay_const_mul_iff

variable {l k f}

end Field

section LinearOrderedField

variable [TopologicalSpace β] [LinearOrderedField β] [OrderTopology β]

variable (f)

/- warning: asymptotics.superpolynomial_decay_iff_abs_is_bounded_under -> Asymptotics.superpolynomialDecay_iff_abs_isBoundedUnder is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f) (forall (z : Nat), Filter.IsBoundedUnder.{u2, u1} β α (LE.le.{u2} β (Preorder.toLE.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) l (fun (a : α) => Abs.abs.{u2} β (Neg.toHasAbs.{u2} β (SubNegMonoid.toHasNeg.{u2} β (AddGroup.toSubNegMonoid.{u2} β (AddGroupWithOne.toAddGroup.{u2} β (AddCommGroupWithOne.toAddGroupWithOne.{u2} β (Ring.toAddCommGroupWithOne.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2)))))))) (SemilatticeSup.toHasSup.{u2} β (Lattice.toSemilatticeSup.{u2} β (LinearOrder.toLattice.{u2} β (LinearOrderedRing.toLinearOrder.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))) (HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2)))))) (HPow.hPow.{u2, 0, u2} β Nat β (instHPow.{u2, 0} β Nat (Monoid.Pow.{u2} β (Ring.toMonoid.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2)))))) (k a) z) (f a)))))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f) (forall (z : Nat), Filter.IsBoundedUnder.{u1, u2} β α (fun (x._@.Mathlib.Analysis.Asymptotics.SuperpolynomialDecay._hyg.1981 : β) (x._@.Mathlib.Analysis.Asymptotics.SuperpolynomialDecay._hyg.1983 : β) => LE.le.{u1} β (Preorder.toLE.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))) x._@.Mathlib.Analysis.Asymptotics.SuperpolynomialDecay._hyg.1981 x._@.Mathlib.Analysis.Asymptotics.SuperpolynomialDecay._hyg.1983) l (fun (a : α) => Abs.abs.{u1} β (Neg.toHasAbs.{u1} β (Ring.toNeg.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))) (SemilatticeSup.toSup.{u1} β (Lattice.toSemilatticeSup.{u1} β (DistribLattice.toLattice.{u1} β (instDistribLattice.{u1} β (LinearOrderedRing.toLinearOrder.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))))) (HMul.hMul.{u1, u1, u1} β β β (instHMul.{u1} β (NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))))) (HPow.hPow.{u1, 0, u1} β Nat β (instHPow.{u1, 0} β Nat (Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (DivisionSemiring.toSemiring.{u1} β (Semifield.toDivisionSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2)))))))) (k a) z) (f a)))))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_abs_is_bounded_under Asymptotics.superpolynomialDecay_iff_abs_isBoundedUnderₓ'. -/
theorem superpolynomialDecay_iff_abs_isBoundedUnder (hk : Tendsto k l atTop) :
    SuperpolynomialDecay l k f ↔ ∀ z : ℕ, IsBoundedUnder (· ≤ ·) l fun a : α => |k a ^ z * f a| :=
  by
  refine'
    ⟨fun h z => tendsto.is_bounded_under_le (tendsto.abs (h z)), fun h =>
      (superpolynomial_decay_iff_abs_tendsto_zero l k f).2 fun z => _⟩
  obtain ⟨m, hm⟩ := h (z + 1)
  have h1 : tendsto (fun a : α => (0 : β)) l (𝓝 0) := tendsto_const_nhds
  have h2 : tendsto (fun a : α => |(k a)⁻¹| * m) l (𝓝 0) :=
    MulZeroClass.zero_mul m ▸
      tendsto.mul_const m ((tendsto_zero_iff_abs_tendsto_zero _).1 hk.inv_tendsto_at_top)
  refine'
    tendsto_of_tendsto_of_tendsto_of_le_of_le' h1 h2 (eventually_of_forall fun x => abs_nonneg _)
      ((eventually_map.1 hm).mp _)
  refine' (hk.eventually_ne_at_top 0).mono fun x hk0 hx => _
  refine' Eq.trans_le _ (mul_le_mul_of_nonneg_left hx <| abs_nonneg (k x)⁻¹)
  rw [← abs_mul, ← mul_assoc, pow_succ, ← mul_assoc, inv_mul_cancel hk0, one_mul]
#align asymptotics.superpolynomial_decay_iff_abs_is_bounded_under Asymptotics.superpolynomialDecay_iff_abs_isBoundedUnder

/- warning: asymptotics.superpolynomial_decay_iff_zpow_tendsto_zero -> Asymptotics.superpolynomialDecay_iff_zpow_tendsto_zero is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f) (forall (z : Int), Filter.Tendsto.{u1, u2} α β (fun (a : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2)))))) (HPow.hPow.{u2, 0, u2} β Int β (instHPow.{u2, 0} β Int (DivInvMonoid.Pow.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))) (k a) z) (f a)) l (nhds.{u2} β _inst_1 (OfNat.ofNat.{u2} β 0 (OfNat.mk.{u2} β 0 (Zero.zero.{u2} β (MulZeroClass.toHasZero.{u2} β (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} β (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} β (NonAssocRing.toNonUnitalNonAssocRing.{u2} β (Ring.toNonAssocRing.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))))))))))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f) (forall (z : Int), Filter.Tendsto.{u2, u1} α β (fun (a : α) => HMul.hMul.{u1, u1, u1} β β β (instHMul.{u1} β (NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))))) (HPow.hPow.{u1, 0, u1} β Int β (instHPow.{u1, 0} β Int (DivInvMonoid.Pow.{u1} β (DivisionRing.toDivInvMonoid.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))) (k a) z) (f a)) l (nhds.{u1} β _inst_1 (OfNat.ofNat.{u1} β 0 (Zero.toOfNat0.{u1} β (CommMonoidWithZero.toZero.{u1} β (CommGroupWithZero.toCommMonoidWithZero.{u1} β (Semifield.toCommGroupWithZero.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))))))))))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_zpow_tendsto_zero Asymptotics.superpolynomialDecay_iff_zpow_tendsto_zeroₓ'. -/
theorem superpolynomialDecay_iff_zpow_tendsto_zero (hk : Tendsto k l atTop) :
    SuperpolynomialDecay l k f ↔ ∀ z : ℤ, Tendsto (fun a : α => k a ^ z * f a) l (𝓝 0) :=
  by
  refine' ⟨fun h z => _, fun h n => by simpa only [zpow_ofNat] using h (n : ℤ)⟩
  by_cases hz : 0 ≤ z
  · lift z to ℕ using hz
    simpa using h z
  · have : tendsto (fun a => k a ^ z) l (𝓝 0) :=
      tendsto.comp (tendsto_zpow_atTop_zero (not_le.1 hz)) hk
    have h : tendsto f l (𝓝 0) := by simpa using h 0
    exact MulZeroClass.zero_mul (0 : β) ▸ this.mul h
#align asymptotics.superpolynomial_decay_iff_zpow_tendsto_zero Asymptotics.superpolynomialDecay_iff_zpow_tendsto_zero

variable {f}

/- warning: asymptotics.superpolynomial_decay.param_zpow_mul -> Asymptotics.SuperpolynomialDecay.param_zpow_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f) -> (forall (z : Int), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (fun (a : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2)))))) (HPow.hPow.{u2, 0, u2} β Int β (instHPow.{u2, 0} β Int (DivInvMonoid.Pow.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))) (k a) z) (f a)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f) -> (forall (z : Int), Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (fun (a : α) => HMul.hMul.{u1, u1, u1} β β β (instHMul.{u1} β (NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))))) (HPow.hPow.{u1, 0, u1} β Int β (instHPow.{u1, 0} β Int (DivInvMonoid.Pow.{u1} β (DivisionRing.toDivInvMonoid.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))) (k a) z) (f a)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.param_zpow_mul Asymptotics.SuperpolynomialDecay.param_zpow_mulₓ'. -/
theorem SuperpolynomialDecay.param_zpow_mul (hk : Tendsto k l atTop)
    (hf : SuperpolynomialDecay l k f) (z : ℤ) : SuperpolynomialDecay l k fun a => k a ^ z * f a :=
  by
  rw [superpolynomial_decay_iff_zpow_tendsto_zero _ hk] at hf⊢
  refine' fun z' => (hf <| z' + z).congr' ((hk.eventually_ne_at_top 0).mono fun x hx => _)
  simp [zpow_add₀ hx, mul_assoc, Pi.mul_apply]
#align asymptotics.superpolynomial_decay.param_zpow_mul Asymptotics.SuperpolynomialDecay.param_zpow_mul

/- warning: asymptotics.superpolynomial_decay.mul_param_zpow -> Asymptotics.SuperpolynomialDecay.mul_param_zpow is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f) -> (forall (z : Int), Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (fun (a : α) => HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2)))))) (f a) (HPow.hPow.{u2, 0, u2} β Int β (instHPow.{u2, 0} β Int (DivInvMonoid.Pow.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))) (k a) z)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f) -> (forall (z : Int), Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (fun (a : α) => HMul.hMul.{u1, u1, u1} β β β (instHMul.{u1} β (NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))))) (f a) (HPow.hPow.{u1, 0, u1} β Int β (instHPow.{u1, 0} β Int (DivInvMonoid.Pow.{u1} β (DivisionRing.toDivInvMonoid.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2))))) (k a) z)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.mul_param_zpow Asymptotics.SuperpolynomialDecay.mul_param_zpowₓ'. -/
theorem SuperpolynomialDecay.mul_param_zpow (hk : Tendsto k l atTop)
    (hf : SuperpolynomialDecay l k f) (z : ℤ) : SuperpolynomialDecay l k fun a => f a * k a ^ z :=
  (hf.param_zpow_mul hk z).congr fun _ => mul_comm _ _
#align asymptotics.superpolynomial_decay.mul_param_zpow Asymptotics.SuperpolynomialDecay.mul_param_zpow

/- warning: asymptotics.superpolynomial_decay.inv_param_mul -> Asymptotics.SuperpolynomialDecay.inv_param_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) (Inv.inv.{max u1 u2} (α -> β) (Pi.instInv.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => DivInvMonoid.toHasInv.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))) k) f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))))))) (Inv.inv.{max u2 u1} (α -> β) (Pi.instInv.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => LinearOrderedField.toInv.{u1} β _inst_2)) k) f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.inv_param_mul Asymptotics.SuperpolynomialDecay.inv_param_mulₓ'. -/
theorem SuperpolynomialDecay.inv_param_mul (hk : Tendsto k l atTop)
    (hf : SuperpolynomialDecay l k f) : SuperpolynomialDecay l k (k⁻¹ * f) := by
  simpa using hf.param_zpow_mul hk (-1)
#align asymptotics.superpolynomial_decay.inv_param_mul Asymptotics.SuperpolynomialDecay.inv_param_mul

/- warning: asymptotics.superpolynomial_decay.param_inv_mul -> Asymptotics.SuperpolynomialDecay.param_inv_mul is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f) -> (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) f (Inv.inv.{max u1 u2} (α -> β) (Pi.instInv.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => DivInvMonoid.toHasInv.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))) k)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} {f : α -> β} [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f) -> (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))))))) f (Inv.inv.{max u2 u1} (α -> β) (Pi.instInv.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => LinearOrderedField.toInv.{u1} β _inst_2)) k)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay.param_inv_mul Asymptotics.SuperpolynomialDecay.param_inv_mulₓ'. -/
theorem SuperpolynomialDecay.param_inv_mul (hk : Tendsto k l atTop)
    (hf : SuperpolynomialDecay l k f) : SuperpolynomialDecay l k (f * k⁻¹) :=
  (hf.inv_param_mul hk).congr fun _ => mul_comm _ _
#align asymptotics.superpolynomial_decay.param_inv_mul Asymptotics.SuperpolynomialDecay.param_inv_mul

variable (f)

/- warning: asymptotics.superpolynomial_decay_param_mul_iff -> Asymptotics.superpolynomialDecay_param_mul_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) k f)) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))))))) k f)) (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_param_mul_iff Asymptotics.superpolynomialDecay_param_mul_iffₓ'. -/
theorem superpolynomialDecay_param_mul_iff (hk : Tendsto k l atTop) :
    SuperpolynomialDecay l k (k * f) ↔ SuperpolynomialDecay l k f :=
  ⟨fun h =>
    (h.inv_param_mul hk).congr'
      ((hk.eventually_ne_atTop 0).mono fun x hx => by simp [← mul_assoc, inv_mul_cancel hx]),
    fun h => h.param_mul⟩
#align asymptotics.superpolynomial_decay_param_mul_iff Asymptotics.superpolynomialDecay_param_mul_iff

/- warning: asymptotics.superpolynomial_decay_mul_param_iff -> Asymptotics.superpolynomialDecay_mul_param_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) f k)) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))))))) f k)) (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_mul_param_iff Asymptotics.superpolynomialDecay_mul_param_iffₓ'. -/
theorem superpolynomialDecay_mul_param_iff (hk : Tendsto k l atTop) :
    SuperpolynomialDecay l k (f * k) ↔ SuperpolynomialDecay l k f := by
  simpa [mul_comm k] using superpolynomial_decay_param_mul_iff f hk
#align asymptotics.superpolynomial_decay_mul_param_iff Asymptotics.superpolynomialDecay_mul_param_iff

/- warning: asymptotics.superpolynomial_decay_param_pow_mul_iff -> Asymptotics.superpolynomialDecay_param_pow_mul_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (forall (n : Nat), Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) (HPow.hPow.{max u1 u2, 0, max u1 u2} (α -> β) Nat (α -> β) (instHPow.{max u1 u2, 0} (α -> β) Nat (Pi.hasPow.{u1, u2, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u2} β (Ring.toMonoid.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) k n) f)) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (forall (n : Nat), Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))))))) (HPow.hPow.{max u2 u1, 0, max u2 u1} (α -> β) Nat (α -> β) (instHPow.{max u2 u1, 0} (α -> β) Nat (Pi.instPow.{u2, u1, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (DivisionSemiring.toSemiring.{u1} β (Semifield.toDivisionSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))))))))) k n) f)) (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_param_pow_mul_iff Asymptotics.superpolynomialDecay_param_pow_mul_iffₓ'. -/
theorem superpolynomialDecay_param_pow_mul_iff (hk : Tendsto k l atTop) (n : ℕ) :
    SuperpolynomialDecay l k (k ^ n * f) ↔ SuperpolynomialDecay l k f :=
  by
  induction' n with n hn
  · simp
  ·
    simpa [pow_succ, ← mul_comm k, mul_assoc,
      superpolynomial_decay_param_mul_iff (k ^ n * f) hk] using hn
#align asymptotics.superpolynomial_decay_param_pow_mul_iff Asymptotics.superpolynomialDecay_param_pow_mul_iff

/- warning: asymptotics.superpolynomial_decay_mul_param_pow_iff -> Asymptotics.superpolynomialDecay_mul_param_pow_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u2} β] [_inst_2 : LinearOrderedField.{u2} β] [_inst_3 : OrderTopology.{u2} β _inst_1 (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β _inst_2)))))))) -> (forall (n : Nat), Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k (HMul.hMul.{max u1 u2, max u1 u2, max u1 u2} (α -> β) (α -> β) (α -> β) (instHMul.{max u1 u2} (α -> β) (Pi.instMul.{u1, u2} α (fun (ᾰ : α) => β) (fun (i : α) => Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) f (HPow.hPow.{max u1 u2, 0, max u1 u2} (α -> β) Nat (α -> β) (instHPow.{max u1 u2, 0} (α -> β) Nat (Pi.hasPow.{u1, u2, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u2} β (Ring.toMonoid.{u2} β (DivisionRing.toRing.{u2} β (Field.toDivisionRing.{u2} β (LinearOrderedField.toField.{u2} β _inst_2))))))) k n))) (Asymptotics.SuperpolynomialDecay.{u1, u2} α β _inst_1 (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β _inst_2))) l k f))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : TopologicalSpace.{u1} β] [_inst_2 : LinearOrderedField.{u1} β] [_inst_3 : OrderTopology.{u1} β _inst_1 (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2)))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β _inst_2))))))) -> (forall (n : Nat), Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k (HMul.hMul.{max u2 u1, max u2 u1, max u2 u1} (α -> β) (α -> β) (α -> β) (instHMul.{max u2 u1} (α -> β) (Pi.instMul.{u2, u1} α (fun (ᾰ : α) => β) (fun (i : α) => NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (DivisionRing.toRing.{u1} β (Field.toDivisionRing.{u1} β (LinearOrderedField.toField.{u1} β _inst_2)))))))) f (HPow.hPow.{max u2 u1, 0, max u2 u1} (α -> β) Nat (α -> β) (instHPow.{max u2 u1, 0} (α -> β) Nat (Pi.instPow.{u2, u1, 0} α Nat (fun (ᾰ : α) => β) (fun (i : α) => Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (DivisionSemiring.toSemiring.{u1} β (Semifield.toDivisionSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))))))))) k n))) (Asymptotics.SuperpolynomialDecay.{u2, u1} α β _inst_1 (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β _inst_2))) l k f))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_mul_param_pow_iff Asymptotics.superpolynomialDecay_mul_param_pow_iffₓ'. -/
theorem superpolynomialDecay_mul_param_pow_iff (hk : Tendsto k l atTop) (n : ℕ) :
    SuperpolynomialDecay l k (f * k ^ n) ↔ SuperpolynomialDecay l k f := by
  simpa [mul_comm f] using superpolynomial_decay_param_pow_mul_iff f hk n
#align asymptotics.superpolynomial_decay_mul_param_pow_iff Asymptotics.superpolynomialDecay_mul_param_pow_iff

variable {f}

end LinearOrderedField

section NormedLinearOrderedField

variable [NormedLinearOrderedField β]

variable (l k f)

/- warning: asymptotics.superpolynomial_decay_iff_norm_tendsto_zero -> Asymptotics.superpolynomialDecay_iff_norm_tendsto_zero is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u2} β], Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β (UniformSpace.toTopologicalSpace.{u2} β (PseudoMetricSpace.toUniformSpace.{u2} β (SeminormedRing.toPseudoMetricSpace.{u2} β (SeminormedCommRing.toSemiNormedRing.{u2} β (NormedCommRing.toSeminormedCommRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1)))) l k f) (forall (n : Nat), Filter.Tendsto.{u1, 0} α Real (fun (a : α) => Norm.norm.{u2} β (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) (HMul.hMul.{u2, u2, u2} β β β (instHMul.{u2} β (Distrib.toHasMul.{u2} β (Ring.toDistrib.{u2} β (NormedRing.toRing.{u2} β (NormedCommRing.toNormedRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (HPow.hPow.{u2, 0, u2} β Nat β (instHPow.{u2, 0} β Nat (Monoid.Pow.{u2} β (Ring.toMonoid.{u2} β (NormedRing.toRing.{u2} β (NormedCommRing.toNormedRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (k a) n) (f a))) l (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} (l : Filter.{u2} α) (k : α -> β) (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u1} β], Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β (UniformSpace.toTopologicalSpace.{u1} β (PseudoMetricSpace.toUniformSpace.{u1} β (SeminormedRing.toPseudoMetricSpace.{u1} β (SeminormedCommRing.toSeminormedRing.{u1} β (NormedCommRing.toSeminormedCommRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1))))))) (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1)))) l k f) (forall (n : Nat), Filter.Tendsto.{u2, 0} α Real (fun (a : α) => Norm.norm.{u1} β (NormedLinearOrderedField.toNorm.{u1} β _inst_1) (HMul.hMul.{u1, u1, u1} β β β (instHMul.{u1} β (NonUnitalNonAssocRing.toMul.{u1} β (NonAssocRing.toNonUnitalNonAssocRing.{u1} β (Ring.toNonAssocRing.{u1} β (NormedRing.toRing.{u1} β (NormedCommRing.toNormedRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1)))))))) (HPow.hPow.{u1, 0, u1} β Nat β (instHPow.{u1, 0} β Nat (Monoid.Pow.{u1} β (MonoidWithZero.toMonoid.{u1} β (Semiring.toMonoidWithZero.{u1} β (DivisionSemiring.toSemiring.{u1} β (Semifield.toDivisionSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1))))))))) (k a) n) (f a))) l (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_norm_tendsto_zero Asymptotics.superpolynomialDecay_iff_norm_tendsto_zeroₓ'. -/
theorem superpolynomialDecay_iff_norm_tendsto_zero :
    SuperpolynomialDecay l k f ↔ ∀ n : ℕ, Tendsto (fun a : α => ‖k a ^ n * f a‖) l (𝓝 0) :=
  ⟨fun h z => tendsto_zero_iff_norm_tendsto_zero.1 (h z), fun h z =>
    tendsto_zero_iff_norm_tendsto_zero.2 (h z)⟩
#align asymptotics.superpolynomial_decay_iff_norm_tendsto_zero Asymptotics.superpolynomialDecay_iff_norm_tendsto_zero

/- warning: asymptotics.superpolynomial_decay_iff_superpolynomial_decay_norm -> Asymptotics.superpolynomialDecay_iff_superpolynomialDecay_norm is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} (l : Filter.{u1} α) (k : α -> β) (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u2} β], Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β (UniformSpace.toTopologicalSpace.{u2} β (PseudoMetricSpace.toUniformSpace.{u2} β (SeminormedRing.toPseudoMetricSpace.{u2} β (SeminormedCommRing.toSemiNormedRing.{u2} β (NormedCommRing.toSeminormedCommRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1)))) l k f) (Asymptotics.SuperpolynomialDecay.{u1, 0} α Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Real.commSemiring l (fun (a : α) => Norm.norm.{u2} β (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) (k a)) (fun (a : α) => Norm.norm.{u2} β (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) (f a)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} (l : Filter.{u2} α) (k : α -> β) (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u1} β], Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β (UniformSpace.toTopologicalSpace.{u1} β (PseudoMetricSpace.toUniformSpace.{u1} β (SeminormedRing.toPseudoMetricSpace.{u1} β (SeminormedCommRing.toSeminormedRing.{u1} β (NormedCommRing.toSeminormedCommRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1))))))) (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1)))) l k f) (Asymptotics.SuperpolynomialDecay.{u2, 0} α Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Real.instCommSemiringReal l (fun (a : α) => Norm.norm.{u1} β (NormedLinearOrderedField.toNorm.{u1} β _inst_1) (k a)) (fun (a : α) => Norm.norm.{u1} β (NormedLinearOrderedField.toNorm.{u1} β _inst_1) (f a)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_superpolynomial_decay_norm Asymptotics.superpolynomialDecay_iff_superpolynomialDecay_normₓ'. -/
theorem superpolynomialDecay_iff_superpolynomialDecay_norm :
    SuperpolynomialDecay l k f ↔ SuperpolynomialDecay l (fun a => ‖k a‖) fun a => ‖f a‖ :=
  (superpolynomialDecay_iff_norm_tendsto_zero l k f).trans (by simp [superpolynomial_decay])
#align asymptotics.superpolynomial_decay_iff_superpolynomial_decay_norm Asymptotics.superpolynomialDecay_iff_superpolynomialDecay_norm

variable {l k}

variable [OrderTopology β]

/- warning: asymptotics.superpolynomial_decay_iff_is_O -> Asymptotics.superpolynomialDecay_iff_isBigO is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u2} β] [_inst_2 : OrderTopology.{u2} β (UniformSpace.toTopologicalSpace.{u2} β (PseudoMetricSpace.toUniformSpace.{u2} β (SeminormedRing.toPseudoMetricSpace.{u2} β (SeminormedCommRing.toSemiNormedRing.{u2} β (NormedCommRing.toSeminormedCommRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1)))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1))))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β (UniformSpace.toTopologicalSpace.{u2} β (PseudoMetricSpace.toUniformSpace.{u2} β (SeminormedRing.toPseudoMetricSpace.{u2} β (SeminormedCommRing.toSemiNormedRing.{u2} β (NormedCommRing.toSeminormedCommRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1)))) l k f) (forall (z : Int), Asymptotics.IsBigO.{u1, u2, u2} α β β (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) l f (fun (a : α) => HPow.hPow.{u2, 0, u2} β Int β (instHPow.{u2, 0} β Int (DivInvMonoid.Pow.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (NormedDivisionRing.toDivisionRing.{u2} β (NormedField.toNormedDivisionRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1)))))) (k a) z)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u1} β] [_inst_2 : OrderTopology.{u1} β (UniformSpace.toTopologicalSpace.{u1} β (PseudoMetricSpace.toUniformSpace.{u1} β (SeminormedRing.toPseudoMetricSpace.{u1} β (SeminormedCommRing.toSeminormedRing.{u1} β (NormedCommRing.toSeminormedCommRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1))))))) (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1))))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1)))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β (UniformSpace.toTopologicalSpace.{u1} β (PseudoMetricSpace.toUniformSpace.{u1} β (SeminormedRing.toPseudoMetricSpace.{u1} β (SeminormedCommRing.toSeminormedRing.{u1} β (NormedCommRing.toSeminormedCommRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1))))))) (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1)))) l k f) (forall (z : Int), Asymptotics.IsBigO.{u2, u1, u1} α β β (NormedLinearOrderedField.toNorm.{u1} β _inst_1) (NormedLinearOrderedField.toNorm.{u1} β _inst_1) l f (fun (a : α) => HPow.hPow.{u1, 0, u1} β Int β (instHPow.{u1, 0} β Int (DivInvMonoid.Pow.{u1} β (DivisionRing.toDivInvMonoid.{u1} β (NormedDivisionRing.toDivisionRing.{u1} β (NormedField.toNormedDivisionRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1)))))) (k a) z)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_is_O Asymptotics.superpolynomialDecay_iff_isBigOₓ'. -/
theorem superpolynomialDecay_iff_isBigO (hk : Tendsto k l atTop) :
    SuperpolynomialDecay l k f ↔ ∀ z : ℤ, f =O[l] fun a : α => k a ^ z :=
  by
  refine' (superpolynomial_decay_iff_zpow_tendsto_zero f hk).trans _
  have hk0 : ∀ᶠ x in l, k x ≠ 0 := hk.eventually_ne_at_top 0
  refine' ⟨fun h z => _, fun h z => _⟩
  · refine' is_O_of_div_tendsto_nhds (hk0.mono fun x hx hxz => absurd (zpow_eq_zero hxz) hx) 0 _
    have : (fun a : α => k a ^ z)⁻¹ = fun a : α => k a ^ (-z) := funext fun x => by simp
    rw [div_eq_mul_inv, mul_comm f, this]
    exact h (-z)
  · suffices : (fun a : α => k a ^ z * f a) =O[l] fun a : α => (k a)⁻¹
    exact is_O.trans_tendsto this hk.inv_tendsto_at_top
    refine'
      ((is_O_refl (fun a => k a ^ z) l).mul (h (-(z + 1)))).trans
        (is_O.of_bound 1 <| hk0.mono fun a ha0 => _)
    simp only [one_mul, neg_add z 1, zpow_add₀ ha0, ← mul_assoc, zpow_neg,
      mul_inv_cancel (zpow_ne_zero z ha0), zpow_one]
#align asymptotics.superpolynomial_decay_iff_is_O Asymptotics.superpolynomialDecay_iff_isBigO

/- warning: asymptotics.superpolynomial_decay_iff_is_o -> Asymptotics.superpolynomialDecay_iff_isLittleO is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {l : Filter.{u1} α} {k : α -> β} (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u2} β] [_inst_2 : OrderTopology.{u2} β (UniformSpace.toTopologicalSpace.{u2} β (PseudoMetricSpace.toUniformSpace.{u2} β (SeminormedRing.toPseudoMetricSpace.{u2} β (SeminormedCommRing.toSemiNormedRing.{u2} β (NormedCommRing.toSeminormedCommRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1)))))))], (Filter.Tendsto.{u1, u2} α β k l (Filter.atTop.{u2} β (PartialOrder.toPreorder.{u2} β (OrderedAddCommGroup.toPartialOrder.{u2} β (StrictOrderedRing.toOrderedAddCommGroup.{u2} β (LinearOrderedRing.toStrictOrderedRing.{u2} β (LinearOrderedCommRing.toLinearOrderedRing.{u2} β (LinearOrderedField.toLinearOrderedCommRing.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1))))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u1, u2} α β (UniformSpace.toTopologicalSpace.{u2} β (PseudoMetricSpace.toUniformSpace.{u2} β (SeminormedRing.toPseudoMetricSpace.{u2} β (SeminormedCommRing.toSemiNormedRing.{u2} β (NormedCommRing.toSeminormedCommRing.{u2} β (NormedField.toNormedCommRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1))))))) (Semifield.toCommSemiring.{u2} β (LinearOrderedSemifield.toSemifield.{u2} β (LinearOrderedField.toLinearOrderedSemifield.{u2} β (NormedLinearOrderedField.toLinearOrderedField.{u2} β _inst_1)))) l k f) (forall (z : Int), Asymptotics.IsLittleO.{u1, u2, u2} α β β (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) (NormedLinearOrderedField.toHasNorm.{u2} β _inst_1) l f (fun (a : α) => HPow.hPow.{u2, 0, u2} β Int β (instHPow.{u2, 0} β Int (DivInvMonoid.Pow.{u2} β (DivisionRing.toDivInvMonoid.{u2} β (NormedDivisionRing.toDivisionRing.{u2} β (NormedField.toNormedDivisionRing.{u2} β (NormedLinearOrderedField.toNormedField.{u2} β _inst_1)))))) (k a) z)))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} {l : Filter.{u2} α} {k : α -> β} (f : α -> β) [_inst_1 : NormedLinearOrderedField.{u1} β] [_inst_2 : OrderTopology.{u1} β (UniformSpace.toTopologicalSpace.{u1} β (PseudoMetricSpace.toUniformSpace.{u1} β (SeminormedRing.toPseudoMetricSpace.{u1} β (SeminormedCommRing.toSeminormedRing.{u1} β (NormedCommRing.toSeminormedCommRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1))))))) (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1))))))], (Filter.Tendsto.{u2, u1} α β k l (Filter.atTop.{u1} β (PartialOrder.toPreorder.{u1} β (StrictOrderedRing.toPartialOrder.{u1} β (LinearOrderedRing.toStrictOrderedRing.{u1} β (LinearOrderedCommRing.toLinearOrderedRing.{u1} β (LinearOrderedField.toLinearOrderedCommRing.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1)))))))) -> (Iff (Asymptotics.SuperpolynomialDecay.{u2, u1} α β (UniformSpace.toTopologicalSpace.{u1} β (PseudoMetricSpace.toUniformSpace.{u1} β (SeminormedRing.toPseudoMetricSpace.{u1} β (SeminormedCommRing.toSeminormedRing.{u1} β (NormedCommRing.toSeminormedCommRing.{u1} β (NormedField.toNormedCommRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1))))))) (Semifield.toCommSemiring.{u1} β (LinearOrderedSemifield.toSemifield.{u1} β (LinearOrderedField.toLinearOrderedSemifield.{u1} β (NormedLinearOrderedField.toLinearOrderedField.{u1} β _inst_1)))) l k f) (forall (z : Int), Asymptotics.IsLittleO.{u2, u1, u1} α β β (NormedLinearOrderedField.toNorm.{u1} β _inst_1) (NormedLinearOrderedField.toNorm.{u1} β _inst_1) l f (fun (a : α) => HPow.hPow.{u1, 0, u1} β Int β (instHPow.{u1, 0} β Int (DivInvMonoid.Pow.{u1} β (DivisionRing.toDivInvMonoid.{u1} β (NormedDivisionRing.toDivisionRing.{u1} β (NormedField.toNormedDivisionRing.{u1} β (NormedLinearOrderedField.toNormedField.{u1} β _inst_1)))))) (k a) z)))
Case conversion may be inaccurate. Consider using '#align asymptotics.superpolynomial_decay_iff_is_o Asymptotics.superpolynomialDecay_iff_isLittleOₓ'. -/
theorem superpolynomialDecay_iff_isLittleO (hk : Tendsto k l atTop) :
    SuperpolynomialDecay l k f ↔ ∀ z : ℤ, f =o[l] fun a : α => k a ^ z :=
  by
  refine' ⟨fun h z => _, fun h => (superpolynomial_decay_iff_is_O f hk).2 fun z => (h z).IsBigO⟩
  have hk0 : ∀ᶠ x in l, k x ≠ 0 := hk.eventually_ne_at_top 0
  have : (fun x : α => (1 : β)) =o[l] k :=
    is_o_of_tendsto' (hk0.mono fun x hkx hkx' => absurd hkx' hkx)
      (by simpa using hk.inv_tendsto_at_top)
  have : f =o[l] fun x : α => k x * k x ^ (z - 1) := by
    simpa using this.mul_is_O ((superpolynomial_decay_iff_is_O f hk).1 h <| z - 1)
  refine' this.trans_is_O (is_O.of_bound 1 (hk0.mono fun x hkx => le_of_eq _))
  rw [one_mul, zpow_sub_one₀ hkx, mul_comm (k x), mul_assoc, inv_mul_cancel hkx, mul_one]
#align asymptotics.superpolynomial_decay_iff_is_o Asymptotics.superpolynomialDecay_iff_isLittleO

end NormedLinearOrderedField

end Asymptotics

