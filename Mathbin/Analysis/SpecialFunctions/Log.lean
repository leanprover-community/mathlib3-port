import Mathbin.Analysis.SpecialFunctions.Exp

/-!
# Real logarithm

In this file we define `real.log` to be the logarithm of a real number. As usual, we extend it from
its domain `(0, +‚àû)` to a globally defined function. We choose to do it so that `log 0 = 0` and
`log (-x) = log x`.

We prove some basic properties of this function and show that it is continuous.

## Tags

logarithm, continuity
-/


open Set Filter Function

open_locale TopologicalSpace

noncomputable theory

namespace Real

variable{x y : ‚Ñù}

/-- The real logarithm function, equal to the inverse of the exponential for `x > 0`,
to `log |x|` for `x < 0`, and to `0` for `0`. We use this unconventional extension to
`(-‚àû, 0]` as it gives the formula `log (x * y) = log x + log y` for all nonzero `x` and `y`, and
the derivative of `log` is `1/x` away from `0`. -/
@[pp_nodot]
noncomputable def log (x : ‚Ñù) : ‚Ñù :=
  if hx : x = 0 then 0 else exp_order_iso.symm ‚ü®|x|, abs_pos.2 hx‚ü©

theorem log_of_ne_zero (hx : x ‚â† 0) : log x = exp_order_iso.symm ‚ü®|x|, abs_pos.2 hx‚ü© :=
  dif_neg hx

theorem log_of_pos (hx : 0 < x) : log x = exp_order_iso.symm ‚ü®x, hx‚ü© :=
  by 
    rw [log_of_ne_zero hx.ne']
    congr 
    exact abs_of_pos hx

theorem exp_log_eq_abs (hx : x ‚â† 0) : exp (log x) = |x| :=
  by 
    rw [log_of_ne_zero hx, ‚Üêcoe_exp_order_iso_apply, OrderIso.apply_symm_apply, Subtype.coe_mk]

theorem exp_log (hx : 0 < x) : exp (log x) = x :=
  by 
    rw [exp_log_eq_abs hx.ne']
    exact abs_of_pos hx

theorem exp_log_of_neg (hx : x < 0) : exp (log x) = -x :=
  by 
    rw [exp_log_eq_abs (ne_of_lt‚Çì hx)]
    exact abs_of_neg hx

@[simp]
theorem log_exp (x : ‚Ñù) : log (exp x) = x :=
  exp_injective$ exp_log (exp_pos x)

theorem surj_on_log : surj_on log (Ioi 0) univ :=
  fun x _ => ‚ü®exp x, exp_pos x, log_exp x‚ü©

theorem log_surjective : surjective log :=
  fun x => ‚ü®exp x, log_exp x‚ü©

@[simp]
theorem range_log : range log = univ :=
  log_surjective.range_eq

@[simp]
theorem log_zero : log 0 = 0 :=
  dif_pos rfl

@[simp]
theorem log_one : log 1 = 0 :=
  exp_injective$
    by 
      rw [exp_log zero_lt_one, exp_zero]

@[simp]
theorem log_abs (x : ‚Ñù) : log |x| = log x :=
  by 
    byCases' h : x = 0
    ¬∑
      simp [h]
    ¬∑
      rw [‚Üêexp_eq_exp, exp_log_eq_abs h, exp_log_eq_abs (abs_pos.2 h).ne', abs_abs]

@[simp]
theorem log_neg_eq_log (x : ‚Ñù) : log (-x) = log x :=
  by 
    rw [‚Üêlog_abs x, ‚Üêlog_abs (-x), abs_neg]

theorem surj_on_log' : surj_on log (Iio 0) univ :=
  fun x _ =>
    ‚ü®-exp x, neg_lt_zero.2$ exp_pos x,
      by 
        rw [log_neg_eq_log, log_exp]‚ü©

theorem log_mul (hx : x ‚â† 0) (hy : y ‚â† 0) : log (x*y) = log x+log y :=
  exp_injective$
    by 
      rw [exp_log_eq_abs (mul_ne_zero hx hy), exp_add, exp_log_eq_abs hx, exp_log_eq_abs hy, abs_mul]

theorem log_div (hx : x ‚â† 0) (hy : y ‚â† 0) : log (x / y) = log x - log y :=
  exp_injective$
    by 
      rw [exp_log_eq_abs (div_ne_zero hx hy), exp_sub, exp_log_eq_abs hx, exp_log_eq_abs hy, abs_div]

@[simp]
theorem log_inv (x : ‚Ñù) : log (x‚Åª¬π) = -log x :=
  by 
    byCases' hx : x = 0
    ¬∑
      simp [hx]
    rw [‚Üêexp_eq_exp, exp_log_eq_abs (inv_ne_zero hx), exp_neg, exp_log_eq_abs hx, abs_inv]

theorem log_le_log (h : 0 < x) (h‚ÇÅ : 0 < y) : Real.log x ‚â§ Real.log y ‚Üî x ‚â§ y :=
  by 
    rw [‚Üêexp_le_exp, exp_log h, exp_log h‚ÇÅ]

theorem log_lt_log (hx : 0 < x) : x < y ‚Üí log x < log y :=
  by 
    intro h 
    rwa [‚Üêexp_lt_exp, exp_log hx, exp_log (lt_trans‚Çì hx h)]

theorem log_lt_log_iff (hx : 0 < x) (hy : 0 < y) : log x < log y ‚Üî x < y :=
  by 
    rw [‚Üêexp_lt_exp, exp_log hx, exp_log hy]

theorem log_le_iff_le_exp (hx : 0 < x) : log x ‚â§ y ‚Üî x ‚â§ exp y :=
  by 
    rw [‚Üêexp_le_exp, exp_log hx]

theorem log_lt_iff_lt_exp (hx : 0 < x) : log x < y ‚Üî x < exp y :=
  by 
    rw [‚Üêexp_lt_exp, exp_log hx]

theorem le_log_iff_exp_le (hy : 0 < y) : x ‚â§ log y ‚Üî exp x ‚â§ y :=
  by 
    rw [‚Üêexp_le_exp, exp_log hy]

theorem lt_log_iff_exp_lt (hy : 0 < y) : x < log y ‚Üî exp x < y :=
  by 
    rw [‚Üêexp_lt_exp, exp_log hy]

theorem log_pos_iff (hx : 0 < x) : 0 < log x ‚Üî 1 < x :=
  by 
    rw [‚Üêlog_one]
    exact log_lt_log_iff zero_lt_one hx

theorem log_pos (hx : 1 < x) : 0 < log x :=
  (log_pos_iff (lt_trans‚Çì zero_lt_one hx)).2 hx

theorem log_neg_iff (h : 0 < x) : log x < 0 ‚Üî x < 1 :=
  by 
    rw [‚Üêlog_one]
    exact log_lt_log_iff h zero_lt_one

theorem log_neg (h0 : 0 < x) (h1 : x < 1) : log x < 0 :=
  (log_neg_iff h0).2 h1

theorem log_nonneg_iff (hx : 0 < x) : 0 ‚â§ log x ‚Üî 1 ‚â§ x :=
  by 
    rw [‚Üênot_lt‚Çì, log_neg_iff hx, not_lt‚Çì]

theorem log_nonneg (hx : 1 ‚â§ x) : 0 ‚â§ log x :=
  (log_nonneg_iff (zero_lt_one.trans_le hx)).2 hx

theorem log_nonpos_iff (hx : 0 < x) : log x ‚â§ 0 ‚Üî x ‚â§ 1 :=
  by 
    rw [‚Üênot_lt‚Çì, log_pos_iff hx, not_lt‚Çì]

theorem log_nonpos_iff' (hx : 0 ‚â§ x) : log x ‚â§ 0 ‚Üî x ‚â§ 1 :=
  by 
    rcases hx.eq_or_lt with (rfl | hx)
    ¬∑
      simp [le_refl‚Çì, zero_le_one]
    exact log_nonpos_iff hx

theorem log_nonpos (hx : 0 ‚â§ x) (h'x : x ‚â§ 1) : log x ‚â§ 0 :=
  (log_nonpos_iff' hx).2 h'x

theorem strict_mono_on_log : StrictMonoOn log (Set.Ioi 0) :=
  fun x hx y hy hxy => log_lt_log hx hxy

theorem strict_anti_on_log : StrictAntiOn log (Set.Iio 0) :=
  by 
    rintro x (hx : x < 0) y (hy : y < 0) hxy 
    rw [‚Üêlog_abs y, ‚Üêlog_abs x]
    refine' log_lt_log (abs_pos.2 hy.ne) _ 
    rwa [abs_of_neg hy, abs_of_neg hx, neg_lt_neg_iff]

theorem log_inj_on_pos : Set.InjOn log (Set.Ioi 0) :=
  strict_mono_on_log.InjOn

theorem eq_one_of_pos_of_log_eq_zero {x : ‚Ñù} (h‚ÇÅ : 0 < x) (h‚ÇÇ : log x = 0) : x = 1 :=
  log_inj_on_pos (Set.mem_Ioi.2 h‚ÇÅ) (Set.mem_Ioi.2 zero_lt_one) (h‚ÇÇ.trans Real.log_one.symm)

theorem log_ne_zero_of_pos_of_ne_one {x : ‚Ñù} (hx_pos : 0 < x) (hx : x ‚â† 1) : log x ‚â† 0 :=
  mt (eq_one_of_pos_of_log_eq_zero hx_pos) hx

@[simp]
theorem log_eq_zero {x : ‚Ñù} : log x = 0 ‚Üî x = 0 ‚à® x = 1 ‚à® x = -1 :=
  by 
    split 
    ¬∑
      intro h 
      rcases lt_trichotomy‚Çì x 0 with (x_lt_zero | rfl | x_gt_zero)
      ¬∑
        refine' Or.inr (Or.inr (eq_neg_iff_eq_neg.mp _))
        rw [‚Üêlog_neg_eq_log x] at h 
        exact (eq_one_of_pos_of_log_eq_zero (neg_pos.mpr x_lt_zero) h).symm
      ¬∑
        exact Or.inl rfl
      ¬∑
        exact Or.inr (Or.inl (eq_one_of_pos_of_log_eq_zero x_gt_zero h))
    ¬∑
      rintro (rfl | rfl | rfl) <;> simp only [log_one, log_zero, log_neg_eq_log]

/-- The real logarithm function tends to `+‚àû` at `+‚àû`. -/
theorem tendsto_log_at_top : tendsto log at_top at_top :=
  tendsto_comp_exp_at_top.1$
    by 
      simpa only [log_exp] using tendsto_id

theorem tendsto_log_nhds_within_zero : tendsto log (ùìù[¬´expr ·∂ú¬ª {0}] 0) at_bot :=
  by 
    rw [‚Üêshow _ = log from funext log_abs]
    refine' tendsto.comp _ tendsto_abs_nhds_within_zero 
    simpa [‚Üêtendsto_comp_exp_at_bot] using tendsto_id

theorem continuous_on_log : ContinuousOn log (¬´expr ·∂ú¬ª {0}) :=
  by 
    rw [continuous_on_iff_continuous_restrict, restrict]
    conv  in log _ => rw [log_of_ne_zero (show (x : ‚Ñù) ‚â† 0 from x.2)]
    exact exp_order_iso.symm.continuous.comp (continuous_subtype_mk _ continuous_subtype_coe.norm)

-- error in Analysis.SpecialFunctions.Log: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
@[continuity #[]] theorem continuous_log : continuous (Œª x : {x : expr‚Ñù() // ¬´expr ‚â† ¬ª(x, 0)}, log x) :=
¬´expr $ ¬ª(continuous_on_iff_continuous_restrict.1, ¬´expr $ ¬ª(continuous_on_log.mono, Œª x hx, hx))

-- error in Analysis.SpecialFunctions.Log: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
@[continuity #[]] theorem continuous_log' : continuous (Œª x : {x : expr‚Ñù() // ¬´expr < ¬ª(0, x)}, log x) :=
¬´expr $ ¬ª(continuous_on_iff_continuous_restrict.1, ¬´expr $ ¬ª(continuous_on_log.mono, Œª x hx, ne_of_gt hx))

theorem continuous_at_log (hx : x ‚â† 0) : ContinuousAt log x :=
  (continuous_on_log x hx).ContinuousAt$ IsOpen.mem_nhds is_open_compl_singleton hx

@[simp]
theorem continuous_at_log_iff : ContinuousAt log x ‚Üî x ‚â† 0 :=
  by 
    refine' ‚ü®_, continuous_at_log‚ü©
    rintro h rfl 
    exact not_tendsto_nhds_of_tendsto_at_bot tendsto_log_nhds_within_zero _ (h.tendsto.mono_left inf_le_left)

end Real

section Continuity

open Real

variable{Œ± : Type _}

theorem Filter.Tendsto.log {f : Œ± ‚Üí ‚Ñù} {l : Filter Œ±} {x : ‚Ñù} (h : tendsto f l (ùìù x)) (hx : x ‚â† 0) :
  tendsto (fun x => log (f x)) l (ùìù (log x)) :=
  (continuous_at_log hx).Tendsto.comp h

variable[TopologicalSpace Œ±]{f : Œ± ‚Üí ‚Ñù}{s : Set Œ±}{a : Œ±}

theorem Continuous.log (hf : Continuous f) (h‚ÇÄ : ‚àÄ x, f x ‚â† 0) : Continuous fun x => log (f x) :=
  continuous_on_log.comp_continuous hf h‚ÇÄ

theorem ContinuousAt.log (hf : ContinuousAt f a) (h‚ÇÄ : f a ‚â† 0) : ContinuousAt (fun x => log (f x)) a :=
  hf.log h‚ÇÄ

theorem ContinuousWithinAt.log (hf : ContinuousWithinAt f s a) (h‚ÇÄ : f a ‚â† 0) :
  ContinuousWithinAt (fun x => log (f x)) s a :=
  hf.log h‚ÇÄ

theorem ContinuousOn.log (hf : ContinuousOn f s) (h‚ÇÄ : ‚àÄ x (_ : x ‚àà s), f x ‚â† 0) :
  ContinuousOn (fun x => log (f x)) s :=
  fun x hx => (hf x hx).log (h‚ÇÄ x hx)

end Continuity

