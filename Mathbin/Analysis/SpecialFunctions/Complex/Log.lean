import Mathbin.Analysis.SpecialFunctions.Complex.Arg 
import Mathbin.Analysis.SpecialFunctions.Log

/-!
# The complex `log` function

Basic properties, relationship with `exp`.
-/


noncomputable theory

namespace Complex

open Set Filter

open_locale Real TopologicalSpace

/-- Inverse of the `exp` function. Returns values such that `(log x).im > - œÄ` and `(log x).im ‚â§ œÄ`.
  `log 0 = 0`-/
@[pp_nodot]
noncomputable def log (x : ‚ÑÇ) : ‚ÑÇ :=
  x.abs.log+arg x*I

theorem log_re (x : ‚ÑÇ) : x.log.re = x.abs.log :=
  by 
    simp [log]

theorem log_im (x : ‚ÑÇ) : x.log.im = x.arg :=
  by 
    simp [log]

theorem neg_pi_lt_log_im (x : ‚ÑÇ) : -œÄ < (log x).im :=
  by 
    simp only [log_im, neg_pi_lt_arg]

theorem log_im_le_pi (x : ‚ÑÇ) : (log x).im ‚â§ œÄ :=
  by 
    simp only [log_im, arg_le_pi]

theorem exp_log {x : ‚ÑÇ} (hx : x ‚â† 0) : exp (log x) = x :=
  by 
    rw [log, exp_add_mul_I, ‚Üêof_real_sin, sin_arg, ‚Üêof_real_cos, cos_arg hx, ‚Üêof_real_exp, Real.exp_log (abs_pos.2 hx),
      mul_add‚Çì, of_real_div, of_real_div, mul_div_cancel' _ (of_real_ne_zero.2 (mt abs_eq_zero.1 hx)), ‚Üêmul_assoc‚Çì,
      mul_div_cancel' _ (of_real_ne_zero.2 (mt abs_eq_zero.1 hx)), re_add_im]

@[simp]
theorem range_exp : range exp = ¬´expr ·∂ú¬ª {0} :=
  Set.ext$
    fun x =>
      ‚ü®by 
          rintro ‚ü®x, rfl‚ü©
          exact exp_ne_zero x,
        fun hx => ‚ü®log x, exp_log hx‚ü©‚ü©

theorem log_exp {x : ‚ÑÇ} (hx‚ÇÅ : -œÄ < x.im) (hx‚ÇÇ : x.im ‚â§ œÄ) : log (exp x) = x :=
  by 
    rw [log, abs_exp, Real.log_exp, exp_eq_exp_re_mul_sin_add_cos, ‚Üêof_real_exp,
      arg_mul_cos_add_sin_mul_I (Real.exp_pos _) ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, re_add_im]

theorem exp_inj_of_neg_pi_lt_of_le_pi {x y : ‚ÑÇ} (hx‚ÇÅ : -œÄ < x.im) (hx‚ÇÇ : x.im ‚â§ œÄ) (hy‚ÇÅ : -œÄ < y.im) (hy‚ÇÇ : y.im ‚â§ œÄ)
  (hxy : exp x = exp y) : x = y :=
  by 
    rw [‚Üêlog_exp hx‚ÇÅ hx‚ÇÇ, ‚Üêlog_exp hy‚ÇÅ hy‚ÇÇ, hxy]

theorem of_real_log {x : ‚Ñù} (hx : 0 ‚â§ x) : (x.log : ‚ÑÇ) = log x :=
  Complex.ext
    (by 
      rw [log_re, of_real_re, abs_of_nonneg hx])
    (by 
      rw [of_real_im, log_im, arg_of_real_of_nonneg hx])

theorem log_of_real_re (x : ‚Ñù) : (log (x : ‚ÑÇ)).re = Real.log x :=
  by 
    simp [log_re]

@[simp]
theorem log_zero : log 0 = 0 :=
  by 
    simp [log]

@[simp]
theorem log_one : log 1 = 0 :=
  by 
    simp [log]

theorem log_neg_one : log (-1) = œÄ*I :=
  by 
    simp [log]

theorem log_I : log I = (œÄ / 2)*I :=
  by 
    simp [log]

theorem log_neg_I : log (-I) = (-(œÄ / 2))*I :=
  by 
    simp [log]

theorem two_pi_I_ne_zero : ((2*œÄ)*I : ‚ÑÇ) ‚â† 0 :=
  by 
    normNum [Real.pi_ne_zero, I_ne_zero]

-- error in Analysis.SpecialFunctions.Complex.Log: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem exp_eq_one_iff
{x : expr‚ÑÇ()} : ¬´expr ‚Üî ¬ª(¬´expr = ¬ª(exp x, 1), ¬´expr‚àÉ , ¬ª((n : expr‚Ñ§()), ¬´expr = ¬ª(x, ¬´expr * ¬ª(n, ¬´expr * ¬ª(¬´expr * ¬ª(2, exprœÄ()), I))))) :=
begin
  split,
  { intro [ident h],
    rcases [expr exists_unique_add_zsmul_mem_Ioc real.two_pi_pos x.im ¬´expr- ¬ª(exprœÄ()), "with", "‚ü®", ident n, ",", ident hn, ",", "-", "‚ü©"],
    use [expr ¬´expr- ¬ª(n)],
    rw ["[", expr int.cast_neg, ",", "<-", expr neg_mul_eq_neg_mul, ",", expr eq_neg_iff_add_eq_zero, "]"] [],
    have [] [":", expr ¬´expr ‚àà ¬ª(¬´expr + ¬ª(x, ¬´expr * ¬ª(n, ¬´expr * ¬ª(¬´expr * ¬ª(2, exprœÄ()), I))).im, Ioc ¬´expr- ¬ª(exprœÄ()) exprœÄ())] [],
    by simpa [] [] [] ["[", expr two_mul, ",", expr mul_add, "]"] [] ["using", expr hn],
    rw ["[", "<-", expr log_exp this.1 this.2, ",", expr exp_periodic.int_mul n, ",", expr h, ",", expr log_one, "]"] [] },
  { rintro ["‚ü®", ident n, ",", ident rfl, "‚ü©"],
    exact [expr (exp_periodic.int_mul n).eq.trans exp_zero] }
end

theorem exp_eq_exp_iff_exp_sub_eq_one {x y : ‚ÑÇ} : exp x = exp y ‚Üî exp (x - y) = 1 :=
  by 
    rw [exp_sub, div_eq_one_iff_eq (exp_ne_zero _)]

theorem exp_eq_exp_iff_exists_int {x y : ‚ÑÇ} : exp x = exp y ‚Üî ‚àÉ n : ‚Ñ§, x = y+n*(2*œÄ)*I :=
  by 
    simp only [exp_eq_exp_iff_exp_sub_eq_one, exp_eq_one_iff, sub_eq_iff_eq_add']

@[simp]
theorem countable_preimage_exp {s : Set ‚ÑÇ} : countable (exp ‚Åª¬π' s) ‚Üî countable s :=
  by 
    refine' ‚ü®fun hs => _, fun hs => _‚ü©
    ¬∑
      refine' ((hs.image exp).insert 0).mono _ 
      rw [image_preimage_eq_inter_range, range_exp, ‚Üêdiff_eq, ‚Üêunion_singleton, diff_union_self]
      exact subset_union_left _ _
    ¬∑
      rw [‚ÜêbUnion_preimage_singleton]
      refine' hs.bUnion fun z hz => _ 
      rcases em (‚àÉ w, exp w = z) with (‚ü®w, rfl‚ü© | hne)
      ¬∑
        simp only [preimage, mem_singleton_iff, exp_eq_exp_iff_exists_int, set_of_exists]
        exact countable_Union fun m => countable_singleton _
      ¬∑
        pushNeg  at hne 
        simp [preimage, hne]

alias countable_preimage_exp ‚Üî _ Set.Countable.preimage_cexp

-- error in Analysis.SpecialFunctions.Complex.Log: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem tendsto_log_nhds_within_im_neg_of_re_neg_of_im_zero
{z : expr‚ÑÇ()}
(hre : ¬´expr < ¬ª(z.re, 0))
(him : ¬´expr = ¬ª(z.im, 0)) : tendsto log ¬´exprùìù[ ] ¬ª({z : expr‚ÑÇ() | ¬´expr < ¬ª(z.im, 0)}, z) ¬´expr $ ¬ª(exprùìù(), ¬´expr - ¬ª(real.log (abs z), ¬´expr * ¬ª(exprœÄ(), I))) :=
begin
  have [] [] [":=", expr (continuous_of_real.continuous_at.comp_continuous_within_at (continuous_abs.continuous_within_at.log _)).tendsto.add (¬´expr $ ¬ª((continuous_of_real.tendsto _).comp, tendsto_arg_nhds_within_im_neg_of_re_neg_of_im_zero hre him).mul tendsto_const_nhds)],
  convert [] [expr this] [],
  { simp [] [] [] ["[", expr sub_eq_add_neg, "]"] [] [] },
  { lift [expr z] ["to", expr expr‚Ñù()] ["using", expr him] [],
    simpa [] [] [] [] [] ["using", expr hre.ne] }
end

-- error in Analysis.SpecialFunctions.Complex.Log: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem continuous_within_at_log_of_re_neg_of_im_zero
{z : expr‚ÑÇ()}
(hre : ¬´expr < ¬ª(z.re, 0))
(him : ¬´expr = ¬ª(z.im, 0)) : continuous_within_at log {z : expr‚ÑÇ() | ¬´expr ‚â§ ¬ª(0, z.im)} z :=
begin
  have [] [] [":=", expr (continuous_of_real.continuous_at.comp_continuous_within_at (continuous_abs.continuous_within_at.log _)).tendsto.add (¬´expr $ ¬ª(continuous_of_real.continuous_at.comp_continuous_within_at, continuous_within_at_arg_of_re_neg_of_im_zero hre him).mul tendsto_const_nhds)],
  convert [] [expr this] [],
  { lift [expr z] ["to", expr expr‚Ñù()] ["using", expr him] [],
    simpa [] [] [] [] [] ["using", expr hre.ne] }
end

theorem tendsto_log_nhds_within_im_nonneg_of_re_neg_of_im_zero {z : ‚ÑÇ} (hre : z.re < 0) (him : z.im = 0) :
  tendsto log (ùìù[{ z:‚ÑÇ | 0 ‚â§ z.im }] z) (ùìù$ Real.log (abs z)+œÄ*I) :=
  by 
    simpa only [log, arg_eq_pi_iff.2 ‚ü®hre, him‚ü©] using (continuous_within_at_log_of_re_neg_of_im_zero hre him).Tendsto

end Complex

section LogDeriv

open Complex Filter

open_locale TopologicalSpace

variable{Œ± : Type _}

-- error in Analysis.SpecialFunctions.Complex.Log: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem continuous_at_clog
{x : expr‚ÑÇ()}
(h : ¬´expr ‚à® ¬ª(¬´expr < ¬ª(0, x.re), ¬´expr ‚â† ¬ª(x.im, 0))) : continuous_at log x :=
begin
  refine [expr continuous_at.add _ _],
  { refine [expr continuous_of_real.continuous_at.comp _],
    refine [expr (real.continuous_at_log _).comp complex.continuous_abs.continuous_at],
    rw [expr abs_ne_zero] [],
    rintro [ident rfl],
    simpa [] [] [] [] [] ["using", expr h] },
  { have [ident h_cont_mul] [":", expr continuous (Œª x : expr‚ÑÇ(), ¬´expr * ¬ª(x, I))] [],
    from [expr continuous_id'.mul continuous_const],
    refine [expr h_cont_mul.continuous_at.comp (continuous_of_real.continuous_at.comp _)],
    exact [expr continuous_at_arg h] }
end

theorem Filter.Tendsto.clog {l : Filter Œ±} {f : Œ± ‚Üí ‚ÑÇ} {x : ‚ÑÇ} (h : tendsto f l (ùìù x)) (hx : 0 < x.re ‚à® x.im ‚â† 0) :
  tendsto (fun t => log (f t)) l (ùìù$ log x) :=
  (continuous_at_clog hx).Tendsto.comp h

variable[TopologicalSpace Œ±]

theorem ContinuousAt.clog {f : Œ± ‚Üí ‚ÑÇ} {x : Œ±} (h‚ÇÅ : ContinuousAt f x) (h‚ÇÇ : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  ContinuousAt (fun t => log (f t)) x :=
  h‚ÇÅ.clog h‚ÇÇ

theorem ContinuousWithinAt.clog {f : Œ± ‚Üí ‚ÑÇ} {s : Set Œ±} {x : Œ±} (h‚ÇÅ : ContinuousWithinAt f s x)
  (h‚ÇÇ : 0 < (f x).re ‚à® (f x).im ‚â† 0) : ContinuousWithinAt (fun t => log (f t)) s x :=
  h‚ÇÅ.clog h‚ÇÇ

theorem ContinuousOn.clog {f : Œ± ‚Üí ‚ÑÇ} {s : Set Œ±} (h‚ÇÅ : ContinuousOn f s)
  (h‚ÇÇ : ‚àÄ x (_ : x ‚àà s), 0 < (f x).re ‚à® (f x).im ‚â† 0) : ContinuousOn (fun t => log (f t)) s :=
  fun x hx => (h‚ÇÅ x hx).clog (h‚ÇÇ x hx)

theorem Continuous.clog {f : Œ± ‚Üí ‚ÑÇ} (h‚ÇÅ : Continuous f) (h‚ÇÇ : ‚àÄ x, 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  Continuous fun t => log (f t) :=
  continuous_iff_continuous_at.2$ fun x => h‚ÇÅ.continuous_at.clog (h‚ÇÇ x)

end LogDeriv

