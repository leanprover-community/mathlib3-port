import Mathbin.Analysis.SpecialFunctions.Pow 
import Mathbin.Analysis.SpecialFunctions.Complex.LogDeriv 
import Mathbin.Analysis.Calculus.ExtendDeriv 
import Mathbin.Analysis.SpecialFunctions.LogDeriv 
import Mathbin.Analysis.SpecialFunctions.Trigonometric.Deriv

/-!
# Derivatives of power function on `‚ÑÇ`, `‚Ñù`, `‚Ñù‚â•0`, and `‚Ñù‚â•0‚àû`

We also prove differentiability and provide derivatives for the power functions `x ^ y`.
-/


noncomputable theory

open_locale Classical Real TopologicalSpace Nnreal Ennreal Filter

open Filter

namespace Complex

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem has_strict_fderiv_at_cpow
{p : ¬´expr √ó ¬ª(expr‚ÑÇ(), expr‚ÑÇ())}
(hp : ¬´expr ‚à® ¬ª(¬´expr < ¬ª(0, p.1.re), ¬´expr ‚â† ¬ª(p.1.im, 0))) : has_strict_fderiv_at (Œª
 x : ¬´expr √ó ¬ª(expr‚ÑÇ(), expr‚ÑÇ()), ¬´expr ^ ¬ª(x.1, x.2)) ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(p.2, ¬´expr ^ ¬ª(p.1, ¬´expr - ¬ª(p.2, 1))), continuous_linear_map.fst expr‚ÑÇ() expr‚ÑÇ() expr‚ÑÇ()), ¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(¬´expr ^ ¬ª(p.1, p.2), log p.1), continuous_linear_map.snd expr‚ÑÇ() expr‚ÑÇ() expr‚ÑÇ())) p :=
begin
  have [ident A] [":", expr ¬´expr ‚â† ¬ª(p.1, 0)] [],
  by { intro [ident h],
    simpa [] [] [] ["[", expr h, ",", expr lt_irrefl, "]"] [] ["using", expr hp] },
  have [] [":", expr ¬´expr =·∂†[ ] ¬ª(Œª
    x : ¬´expr √ó ¬ª(expr‚ÑÇ(), expr‚ÑÇ()), ¬´expr ^ ¬ª(x.1, x.2), exprùìù() p, Œª x, exp ¬´expr * ¬ª(log x.1, x.2))] [],
  from [expr ((is_open_ne.preimage continuous_fst).eventually_mem A).mono (Œª p hp, cpow_def_of_ne_zero hp _)],
  rw ["[", expr cpow_sub _ _ A, ",", expr cpow_one, ",", expr mul_div_comm, ",", expr mul_smul, ",", expr mul_smul, ",", "<-", expr smul_add, "]"] [],
  refine [expr has_strict_fderiv_at.congr_of_eventually_eq _ this.symm],
  simpa [] [] ["only"] ["[", expr cpow_def_of_ne_zero A, ",", expr div_eq_mul_inv, ",", expr mul_smul, ",", expr add_comm, "]"] [] ["using", expr ((has_strict_fderiv_at_fst.clog hp).mul has_strict_fderiv_at_snd).cexp]
end

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem has_strict_fderiv_at_cpow'
{x y : expr‚ÑÇ()}
(hp : ¬´expr ‚à® ¬ª(¬´expr < ¬ª(0, x.re), ¬´expr ‚â† ¬ª(x.im, 0))) : has_strict_fderiv_at (Œª
 x : ¬´expr √ó ¬ª(expr‚ÑÇ(), expr‚ÑÇ()), ¬´expr ^ ¬ª(x.1, x.2)) ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(y, ¬´expr ^ ¬ª(x, ¬´expr - ¬ª(y, 1))), continuous_linear_map.fst expr‚ÑÇ() expr‚ÑÇ() expr‚ÑÇ()), ¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(¬´expr ^ ¬ª(x, y), log x), continuous_linear_map.snd expr‚ÑÇ() expr‚ÑÇ() expr‚ÑÇ())) (x, y) :=
@has_strict_fderiv_at_cpow (x, y) hp

theorem has_strict_deriv_at_const_cpow {x y : ‚ÑÇ} (h : x ‚â† 0 ‚à® y ‚â† 0) :
  HasStrictDerivAt (fun y => x^y) ((x^y)*log x) y :=
  by 
    rcases em (x = 0) with (rfl | hx)
    ¬∑
      replace h := h.neg_resolve_left rfl 
      rw [log_zero, mul_zero]
      refine' (has_strict_deriv_at_const _ 0).congr_of_eventually_eq _ 
      exact (is_open_ne.eventually_mem h).mono fun y hy => (zero_cpow hy).symm
    ¬∑
      simpa only [cpow_def_of_ne_zero hx, mul_one‚Çì] using ((has_strict_deriv_at_id y).const_mul (log x)).cexp

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem has_fderiv_at_cpow
{p : ¬´expr √ó ¬ª(expr‚ÑÇ(), expr‚ÑÇ())}
(hp : ¬´expr ‚à® ¬ª(¬´expr < ¬ª(0, p.1.re), ¬´expr ‚â† ¬ª(p.1.im, 0))) : has_fderiv_at (Œª
 x : ¬´expr √ó ¬ª(expr‚ÑÇ(), expr‚ÑÇ()), ¬´expr ^ ¬ª(x.1, x.2)) ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(p.2, ¬´expr ^ ¬ª(p.1, ¬´expr - ¬ª(p.2, 1))), continuous_linear_map.fst expr‚ÑÇ() expr‚ÑÇ() expr‚ÑÇ()), ¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(¬´expr ^ ¬ª(p.1, p.2), log p.1), continuous_linear_map.snd expr‚ÑÇ() expr‚ÑÇ() expr‚ÑÇ())) p :=
(has_strict_fderiv_at_cpow hp).has_fderiv_at

end Complex

section fderiv

open Complex

variable{E : Type _}[NormedGroup E][NormedSpace ‚ÑÇ E]{f g : E ‚Üí ‚ÑÇ}{f' g' : E ‚ÜíL[‚ÑÇ] ‚ÑÇ}{x : E}{s : Set E}{c : ‚ÑÇ}

theorem HasStrictFderivAt.cpow (hf : HasStrictFderivAt f f' x) (hg : HasStrictFderivAt g g' x)
  (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasStrictFderivAt (fun x => f x^g x) (((g x*f x^g x - 1) ‚Ä¢ f')+((f x^g x)*log (f x)) ‚Ä¢ g') x :=
  by 
    convert (@has_strict_fderiv_at_cpow ((fun x => (f x, g x)) x) h0).comp x (hf.prod hg)

theorem HasStrictFderivAt.const_cpow (hf : HasStrictFderivAt f f' x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  HasStrictFderivAt (fun x => c^f x) (((c^f x)*log c) ‚Ä¢ f') x :=
  (has_strict_deriv_at_const_cpow h0).comp_has_strict_fderiv_at x hf

theorem HasFderivAt.cpow (hf : HasFderivAt f f' x) (hg : HasFderivAt g g' x) (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasFderivAt (fun x => f x^g x) (((g x*f x^g x - 1) ‚Ä¢ f')+((f x^g x)*log (f x)) ‚Ä¢ g') x :=
  by 
    convert (@Complex.has_fderiv_at_cpow ((fun x => (f x, g x)) x) h0).comp x (hf.prod hg)

theorem HasFderivAt.const_cpow (hf : HasFderivAt f f' x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  HasFderivAt (fun x => c^f x) (((c^f x)*log c) ‚Ä¢ f') x :=
  (has_strict_deriv_at_const_cpow h0).HasDerivAt.comp_has_fderiv_at x hf

theorem HasFderivWithinAt.cpow (hf : HasFderivWithinAt f f' s x) (hg : HasFderivWithinAt g g' s x)
  (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasFderivWithinAt (fun x => f x^g x) (((g x*f x^g x - 1) ‚Ä¢ f')+((f x^g x)*log (f x)) ‚Ä¢ g') s x :=
  by 
    convert (@Complex.has_fderiv_at_cpow ((fun x => (f x, g x)) x) h0).comp_has_fderiv_within_at x (hf.prod hg)

theorem HasFderivWithinAt.const_cpow (hf : HasFderivWithinAt f f' s x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  HasFderivWithinAt (fun x => c^f x) (((c^f x)*log c) ‚Ä¢ f') s x :=
  (has_strict_deriv_at_const_cpow h0).HasDerivAt.comp_has_fderiv_within_at x hf

theorem DifferentiableAt.cpow (hf : DifferentiableAt ‚ÑÇ f x) (hg : DifferentiableAt ‚ÑÇ g x)
  (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) : DifferentiableAt ‚ÑÇ (fun x => f x^g x) x :=
  (hf.has_fderiv_at.cpow hg.has_fderiv_at h0).DifferentiableAt

theorem DifferentiableAt.const_cpow (hf : DifferentiableAt ‚ÑÇ f x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  DifferentiableAt ‚ÑÇ (fun x => c^f x) x :=
  (hf.has_fderiv_at.const_cpow h0).DifferentiableAt

theorem DifferentiableWithinAt.cpow (hf : DifferentiableWithinAt ‚ÑÇ f s x) (hg : DifferentiableWithinAt ‚ÑÇ g s x)
  (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) : DifferentiableWithinAt ‚ÑÇ (fun x => f x^g x) s x :=
  (hf.has_fderiv_within_at.cpow hg.has_fderiv_within_at h0).DifferentiableWithinAt

theorem DifferentiableWithinAt.const_cpow (hf : DifferentiableWithinAt ‚ÑÇ f s x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  DifferentiableWithinAt ‚ÑÇ (fun x => c^f x) s x :=
  (hf.has_fderiv_within_at.const_cpow h0).DifferentiableWithinAt

end fderiv

section deriv

open Complex

variable{f g : ‚ÑÇ ‚Üí ‚ÑÇ}{s : Set ‚ÑÇ}{f' g' x c : ‚ÑÇ}

/-- A private lemma that rewrites the output of lemmas like `has_fderiv_at.cpow` to the form
expected by lemmas like `has_deriv_at.cpow`. -/
private theorem aux :
  (((g x*f x^g x - 1) ‚Ä¢ (1 : ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ).smulRight f')+((f x^g x)*log (f x)) ‚Ä¢ (1 : ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ).smulRight g') 1 =
    ((g x*f x^g x - 1)*f')+((f x^g x)*log (f x))*g' :=
  by 
    simp only [Algebra.id.smul_eq_mul, one_mul‚Çì, ContinuousLinearMap.one_apply, ContinuousLinearMap.smul_right_apply,
      ContinuousLinearMap.add_apply, Pi.smul_apply, ContinuousLinearMap.coe_smul']

theorem HasStrictDerivAt.cpow (hf : HasStrictDerivAt f f' x) (hg : HasStrictDerivAt g g' x)
  (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasStrictDerivAt (fun x => f x^g x) (((g x*f x^g x - 1)*f')+((f x^g x)*log (f x))*g') x :=
  by 
    simpa only [aux] using (hf.cpow hg h0).HasStrictDerivAt

theorem HasStrictDerivAt.const_cpow (hf : HasStrictDerivAt f f' x) (h : c ‚â† 0 ‚à® f x ‚â† 0) :
  HasStrictDerivAt (fun x => c^f x) (((c^f x)*log c)*f') x :=
  (has_strict_deriv_at_const_cpow h).comp x hf

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem complex.has_strict_deriv_at_cpow_const
(h : ¬´expr ‚à® ¬ª(¬´expr < ¬ª(0, x.re), ¬´expr ‚â† ¬ª(x.im, 0))) : has_strict_deriv_at (Œª
 z : expr‚ÑÇ(), ¬´expr ^ ¬ª(z, c)) ¬´expr * ¬ª(c, ¬´expr ^ ¬ª(x, ¬´expr - ¬ª(c, 1))) x :=
by simpa [] [] ["only"] ["[", expr mul_zero, ",", expr add_zero, ",", expr mul_one, "]"] [] ["using", expr (has_strict_deriv_at_id x).cpow (has_strict_deriv_at_const x c) h]

theorem HasStrictDerivAt.cpow_const (hf : HasStrictDerivAt f f' x) (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasStrictDerivAt (fun x => f x^c) ((c*f x^c - 1)*f') x :=
  (Complex.has_strict_deriv_at_cpow_const h0).comp x hf

theorem HasDerivAt.cpow (hf : HasDerivAt f f' x) (hg : HasDerivAt g g' x) (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasDerivAt (fun x => f x^g x) (((g x*f x^g x - 1)*f')+((f x^g x)*log (f x))*g') x :=
  by 
    simpa only [aux] using (hf.has_fderiv_at.cpow hg h0).HasDerivAt

theorem HasDerivAt.const_cpow (hf : HasDerivAt f f' x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  HasDerivAt (fun x => c^f x) (((c^f x)*log c)*f') x :=
  (has_strict_deriv_at_const_cpow h0).HasDerivAt.comp x hf

theorem HasDerivAt.cpow_const (hf : HasDerivAt f f' x) (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasDerivAt (fun x => f x^c) ((c*f x^c - 1)*f') x :=
  (Complex.has_strict_deriv_at_cpow_const h0).HasDerivAt.comp x hf

theorem HasDerivWithinAt.cpow (hf : HasDerivWithinAt f f' s x) (hg : HasDerivWithinAt g g' s x)
  (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasDerivWithinAt (fun x => f x^g x) (((g x*f x^g x - 1)*f')+((f x^g x)*log (f x))*g') s x :=
  by 
    simpa only [aux] using (hf.has_fderiv_within_at.cpow hg h0).HasDerivWithinAt

theorem HasDerivWithinAt.const_cpow (hf : HasDerivWithinAt f f' s x) (h0 : c ‚â† 0 ‚à® f x ‚â† 0) :
  HasDerivWithinAt (fun x => c^f x) (((c^f x)*log c)*f') s x :=
  (has_strict_deriv_at_const_cpow h0).HasDerivAt.comp_has_deriv_within_at x hf

theorem HasDerivWithinAt.cpow_const (hf : HasDerivWithinAt f f' s x) (h0 : 0 < (f x).re ‚à® (f x).im ‚â† 0) :
  HasDerivWithinAt (fun x => f x^c) ((c*f x^c - 1)*f') s x :=
  (Complex.has_strict_deriv_at_cpow_const h0).HasDerivAt.comp_has_deriv_within_at x hf

end deriv

namespace Real

variable{x y z : ‚Ñù}

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- `(x, y) ‚Ü¶ x ^ y` is strictly differentiable at `p : ‚Ñù √ó ‚Ñù` such that `0 < p.fst`. -/
theorem has_strict_fderiv_at_rpow_of_pos
(p : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()))
(hp : ¬´expr < ¬ª(0, p.1)) : has_strict_fderiv_at (Œª
 x : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()), ¬´expr ^ ¬ª(x.1, x.2)) ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(p.2, ¬´expr ^ ¬ª(p.1, ¬´expr - ¬ª(p.2, 1))), continuous_linear_map.fst expr‚Ñù() expr‚Ñù() expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(¬´expr ^ ¬ª(p.1, p.2), log p.1), continuous_linear_map.snd expr‚Ñù() expr‚Ñù() expr‚Ñù())) p :=
begin
  have [] [":", expr ¬´expr =·∂†[ ] ¬ª(Œª
    x : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()), ¬´expr ^ ¬ª(x.1, x.2), exprùìù() p, Œª x, exp ¬´expr * ¬ª(log x.1, x.2))] [],
  from [expr (continuous_at_fst.eventually (lt_mem_nhds hp)).mono (Œª p hp, rpow_def_of_pos hp _)],
  refine [expr has_strict_fderiv_at.congr_of_eventually_eq _ this.symm],
  convert [] [expr ((has_strict_fderiv_at_fst.log hp.ne').mul has_strict_fderiv_at_snd).exp] [],
  rw ["[", expr rpow_sub_one hp.ne', ",", "<-", expr rpow_def_of_pos hp, ",", expr smul_add, ",", expr smul_smul, ",", expr mul_div_comm, ",", expr div_eq_mul_inv, ",", expr smul_smul, ",", expr smul_smul, ",", expr mul_assoc, ",", expr add_comm, "]"] []
end

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- `(x, y) ‚Ü¶ x ^ y` is strictly differentiable at `p : ‚Ñù √ó ‚Ñù` such that `p.fst < 0`. -/
theorem has_strict_fderiv_at_rpow_of_neg
(p : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()))
(hp : ¬´expr < ¬ª(p.1, 0)) : has_strict_fderiv_at (Œª
 x : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()), ¬´expr ^ ¬ª(x.1, x.2)) ¬´expr + ¬ª(¬´expr ‚Ä¢ ¬ª(¬´expr * ¬ª(p.2, ¬´expr ^ ¬ª(p.1, ¬´expr - ¬ª(p.2, 1))), continuous_linear_map.fst expr‚Ñù() expr‚Ñù() expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(¬´expr - ¬ª(¬´expr * ¬ª(¬´expr ^ ¬ª(p.1, p.2), log p.1), ¬´expr * ¬ª(¬´expr * ¬ª(exp ¬´expr * ¬ª(log p.1, p.2), sin ¬´expr * ¬ª(p.2, exprœÄ())), exprœÄ())), continuous_linear_map.snd expr‚Ñù() expr‚Ñù() expr‚Ñù())) p :=
begin
  have [] [":", expr ¬´expr =·∂†[ ] ¬ª(Œª
    x : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()), ¬´expr ^ ¬ª(x.1, x.2), exprùìù() p, Œª
    x, ¬´expr * ¬ª(exp ¬´expr * ¬ª(log x.1, x.2), cos ¬´expr * ¬ª(x.2, exprœÄ())))] [],
  from [expr (continuous_at_fst.eventually (gt_mem_nhds hp)).mono (Œª p hp, rpow_def_of_neg hp _)],
  refine [expr has_strict_fderiv_at.congr_of_eventually_eq _ this.symm],
  convert [] [expr ((has_strict_fderiv_at_fst.log hp.ne).mul has_strict_fderiv_at_snd).exp.mul (has_strict_fderiv_at_snd.mul_const _).cos] ["using", 1],
  simp_rw ["[", expr rpow_sub_one hp.ne, ",", expr smul_add, ",", "<-", expr add_assoc, ",", expr smul_smul, ",", "<-", expr add_smul, ",", "<-", expr mul_assoc, ",", expr mul_comm (cos _), ",", "<-", expr rpow_def_of_neg hp, "]"] [],
  rw ["[", expr div_eq_mul_inv, ",", expr add_comm, "]"] [],
  congr' [2] []; ring []
end

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- The function `Œª (x, y), x ^ y` is infinitely smooth at `(x, y)` unless `x = 0`. -/
theorem times_cont_diff_at_rpow_of_ne
(p : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()))
(hp : ¬´expr ‚â† ¬ª(p.1, 0))
{n : with_top expr‚Ñï()} : times_cont_diff_at expr‚Ñù() n (Œª p : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()), ¬´expr ^ ¬ª(p.1, p.2)) p :=
begin
  cases [expr hp.lt_or_lt] ["with", ident hneg, ident hpos],
  exacts ["[", expr (((times_cont_diff_at_fst.log hneg.ne).mul times_cont_diff_at_snd).exp.mul (times_cont_diff_at_snd.mul times_cont_diff_at_const).cos).congr_of_eventually_eq ((continuous_at_fst.eventually (gt_mem_nhds hneg)).mono (Œª
     p
     hp, rpow_def_of_neg hp _)), ",", expr ((times_cont_diff_at_fst.log hpos.ne').mul times_cont_diff_at_snd).exp.congr_of_eventually_eq ((continuous_at_fst.eventually (lt_mem_nhds hpos)).mono (Œª
     p hp, rpow_def_of_pos hp _)), "]"]
end

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem differentiable_at_rpow_of_ne
(p : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()))
(hp : ¬´expr ‚â† ¬ª(p.1, 0)) : differentiable_at expr‚Ñù() (Œª p : ¬´expr √ó ¬ª(expr‚Ñù(), expr‚Ñù()), ¬´expr ^ ¬ª(p.1, p.2)) p :=
(times_cont_diff_at_rpow_of_ne p hp).differentiable_at le_rfl

theorem _root_.has_strict_deriv_at.rpow {f g : ‚Ñù ‚Üí ‚Ñù} {f' g' : ‚Ñù} (hf : HasStrictDerivAt f f' x)
  (hg : HasStrictDerivAt g g' x) (h : 0 < f x) :
  HasStrictDerivAt (fun x => f x^g x) (((f'*g x)*f x^g x - 1)+(g'*f x^g x)*log (f x)) x :=
  by 
    convert (has_strict_fderiv_at_rpow_of_pos ((fun x => (f x, g x)) x) h).comp_has_strict_deriv_at _ (hf.prod hg) using
      1
    simp [mul_assoc‚Çì, mul_comm‚Çì, mul_left_comm‚Çì]

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem has_strict_deriv_at_rpow_const_of_ne
{x : expr‚Ñù()}
(hx : ¬´expr ‚â† ¬ª(x, 0))
(p : expr‚Ñù()) : has_strict_deriv_at (Œª x, ¬´expr ^ ¬ª(x, p)) ¬´expr * ¬ª(p, ¬´expr ^ ¬ª(x, ¬´expr - ¬ª(p, 1))) x :=
begin
  cases [expr hx.lt_or_lt] ["with", ident hx, ident hx],
  { have [] [] [":=", expr (has_strict_fderiv_at_rpow_of_neg (x, p) hx).comp_has_strict_deriv_at x ((has_strict_deriv_at_id x).prod (has_strict_deriv_at_const _ _))],
    convert [] [expr this] [],
    simp [] [] [] [] [] [] },
  { simpa [] [] [] [] [] ["using", expr (has_strict_deriv_at_id x).rpow (has_strict_deriv_at_const x p) hx] }
end

theorem has_strict_deriv_at_const_rpow {a : ‚Ñù} (ha : 0 < a) (x : ‚Ñù) : HasStrictDerivAt (fun x => a^x) ((a^x)*log a) x :=
  by 
    simpa using (has_strict_deriv_at_const _ _).rpow (has_strict_deriv_at_id x) ha

/-- This lemma says that `Œª x, a ^ x` is strictly differentiable for `a < 0`. Note that these
values of `a` are outside of the "official" domain of `a ^ x`, and we may redefine `a ^ x`
for negative `a` if some other definition will be more convenient. -/
theorem has_strict_deriv_at_const_rpow_of_neg {a x : ‚Ñù} (ha : a < 0) :
  HasStrictDerivAt (fun x => a^x) (((a^x)*log a) - (exp (log a*x)*sin (x*œÄ))*œÄ) x :=
  by 
    simpa using
      (has_strict_fderiv_at_rpow_of_neg (a, x) ha).comp_has_strict_deriv_at x
        ((has_strict_deriv_at_const _ _).Prod (has_strict_deriv_at_id _))

end Real

namespace Real

variable{z x y : ‚Ñù}

theorem has_deriv_at_rpow_const {x p : ‚Ñù} (h : x ‚â† 0 ‚à® 1 ‚â§ p) : HasDerivAt (fun x => x^p) (p*x^p - 1) x :=
  by 
    rcases ne_or_eq x 0 with (hx | rfl)
    ¬∑
      exact (has_strict_deriv_at_rpow_const_of_ne hx _).HasDerivAt 
    replace h : 1 ‚â§ p := h.neg_resolve_left rfl 
    apply has_deriv_at_of_has_deriv_at_of_ne fun x hx => (has_strict_deriv_at_rpow_const_of_ne hx p).HasDerivAt 
    exacts[continuous_at_id.rpow_const (Or.inr (zero_le_one.trans h)),
      continuous_at_const.mul (continuous_at_id.rpow_const (Or.inr (sub_nonneg.2 h)))]

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem differentiable_rpow_const
{p : expr‚Ñù()}
(hp : ¬´expr ‚â§ ¬ª(1, p)) : differentiable expr‚Ñù() (Œª x : expr‚Ñù(), ¬´expr ^ ¬ª(x, p)) :=
Œª x, (has_deriv_at_rpow_const (or.inr hp)).differentiable_at

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem deriv_rpow_const
{x p : expr‚Ñù()}
(h : ¬´expr ‚à® ¬ª(¬´expr ‚â† ¬ª(x, 0), ¬´expr ‚â§ ¬ª(1, p))) : ¬´expr = ¬ª(deriv (Œª
  x : expr‚Ñù(), ¬´expr ^ ¬ª(x, p)) x, ¬´expr * ¬ª(p, ¬´expr ^ ¬ª(x, ¬´expr - ¬ª(p, 1)))) :=
(has_deriv_at_rpow_const h).deriv

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem deriv_rpow_const'
{p : expr‚Ñù()}
(h : ¬´expr ‚â§ ¬ª(1, p)) : ¬´expr = ¬ª(deriv (Œª
  x : expr‚Ñù(), ¬´expr ^ ¬ª(x, p)), Œª x, ¬´expr * ¬ª(p, ¬´expr ^ ¬ª(x, ¬´expr - ¬ª(p, 1)))) :=
¬´expr $ ¬ª(funext, Œª x, deriv_rpow_const (or.inr h))

theorem times_cont_diff_at_rpow_const_of_ne {x p : ‚Ñù} {n : WithTop ‚Ñï} (h : x ‚â† 0) :
  TimesContDiffAt ‚Ñù n (fun x => x^p) x :=
  (times_cont_diff_at_rpow_of_ne (x, p) h).comp x (times_cont_diff_at_id.Prod times_cont_diff_at_const)

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem times_cont_diff_rpow_const_of_le
{p : expr‚Ñù()}
{n : expr‚Ñï()}
(h : ¬´expr ‚â§ ¬ª(¬´expr‚Üë ¬ª(n), p)) : times_cont_diff expr‚Ñù() n (Œª x : expr‚Ñù(), ¬´expr ^ ¬ª(x, p)) :=
begin
  induction [expr n] [] ["with", ident n, ident ihn] ["generalizing", ident p],
  { exact [expr times_cont_diff_zero.2 (continuous_id.rpow_const (Œª x, or.inr h))] },
  { have [ident h1] [":", expr ¬´expr ‚â§ ¬ª(1, p)] [],
    from [expr le_trans (by simp [] [] [] [] [] []) h],
    rw ["[", expr nat.cast_succ, ",", "<-", expr le_sub_iff_add_le, "]"] ["at", ident h],
    simpa [] [] [] ["[", expr times_cont_diff_succ_iff_deriv, ",", expr differentiable_rpow_const, ",", expr h1, ",", expr deriv_rpow_const', "]"] [] ["using", expr times_cont_diff_const.mul (ihn h)] }
end

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem times_cont_diff_at_rpow_const_of_le
{x p : expr‚Ñù()}
{n : expr‚Ñï()}
(h : ¬´expr ‚â§ ¬ª(¬´expr‚Üë ¬ª(n), p)) : times_cont_diff_at expr‚Ñù() n (Œª x : expr‚Ñù(), ¬´expr ^ ¬ª(x, p)) x :=
(times_cont_diff_rpow_const_of_le h).times_cont_diff_at

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem times_cont_diff_at_rpow_const
{x p : expr‚Ñù()}
{n : expr‚Ñï()}
(h : ¬´expr ‚à® ¬ª(¬´expr ‚â† ¬ª(x, 0), ¬´expr ‚â§ ¬ª(¬´expr‚Üë ¬ª(n), p))) : times_cont_diff_at expr‚Ñù() n (Œª
 x : expr‚Ñù(), ¬´expr ^ ¬ª(x, p)) x :=
h.elim times_cont_diff_at_rpow_const_of_ne times_cont_diff_at_rpow_const_of_le

theorem has_strict_deriv_at_rpow_const {x p : ‚Ñù} (hx : x ‚â† 0 ‚à® 1 ‚â§ p) : HasStrictDerivAt (fun x => x^p) (p*x^p - 1) x :=
  TimesContDiffAt.has_strict_deriv_at'
    (times_cont_diff_at_rpow_const
      (by 
        rwa [Nat.cast_one]))
    (has_deriv_at_rpow_const hx) le_rfl

end Real

section Differentiability

open Real

section fderiv

variable{E :
    Type _}[NormedGroup E][NormedSpace ‚Ñù E]{f g : E ‚Üí ‚Ñù}{f' g' : E ‚ÜíL[‚Ñù] ‚Ñù}{x : E}{s : Set E}{c p : ‚Ñù}{n : WithTop ‚Ñï}

theorem HasFderivWithinAt.rpow (hf : HasFderivWithinAt f f' s x) (hg : HasFderivWithinAt g g' s x) (h : 0 < f x) :
  HasFderivWithinAt (fun x => f x^g x) (((g x*f x^g x - 1) ‚Ä¢ f')+((f x^g x)*log (f x)) ‚Ä¢ g') s x :=
  (has_strict_fderiv_at_rpow_of_pos (f x, g x) h).HasFderivAt.comp_has_fderiv_within_at x (hf.prod hg)

theorem HasFderivAt.rpow (hf : HasFderivAt f f' x) (hg : HasFderivAt g g' x) (h : 0 < f x) :
  HasFderivAt (fun x => f x^g x) (((g x*f x^g x - 1) ‚Ä¢ f')+((f x^g x)*log (f x)) ‚Ä¢ g') x :=
  (has_strict_fderiv_at_rpow_of_pos (f x, g x) h).HasFderivAt.comp x (hf.prod hg)

theorem HasStrictFderivAt.rpow (hf : HasStrictFderivAt f f' x) (hg : HasStrictFderivAt g g' x) (h : 0 < f x) :
  HasStrictFderivAt (fun x => f x^g x) (((g x*f x^g x - 1) ‚Ä¢ f')+((f x^g x)*log (f x)) ‚Ä¢ g') x :=
  (has_strict_fderiv_at_rpow_of_pos (f x, g x) h).comp x (hf.prod hg)

theorem DifferentiableWithinAt.rpow (hf : DifferentiableWithinAt ‚Ñù f s x) (hg : DifferentiableWithinAt ‚Ñù g s x)
  (h : f x ‚â† 0) : DifferentiableWithinAt ‚Ñù (fun x => f x^g x) s x :=
  (differentiable_at_rpow_of_ne (f x, g x) h).comp_differentiable_within_at x (hf.prod hg)

theorem DifferentiableAt.rpow (hf : DifferentiableAt ‚Ñù f x) (hg : DifferentiableAt ‚Ñù g x) (h : f x ‚â† 0) :
  DifferentiableAt ‚Ñù (fun x => f x^g x) x :=
  (differentiable_at_rpow_of_ne (f x, g x) h).comp x (hf.prod hg)

theorem DifferentiableOn.rpow (hf : DifferentiableOn ‚Ñù f s) (hg : DifferentiableOn ‚Ñù g s)
  (h : ‚àÄ x (_ : x ‚àà s), f x ‚â† 0) : DifferentiableOn ‚Ñù (fun x => f x^g x) s :=
  fun x hx => (hf x hx).rpow (hg x hx) (h x hx)

theorem Differentiable.rpow (hf : Differentiable ‚Ñù f) (hg : Differentiable ‚Ñù g) (h : ‚àÄ x, f x ‚â† 0) :
  Differentiable ‚Ñù fun x => f x^g x :=
  fun x => (hf x).rpow (hg x) (h x)

theorem HasFderivWithinAt.rpow_const (hf : HasFderivWithinAt f f' s x) (h : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  HasFderivWithinAt (fun x => f x^p) ((p*f x^p - 1) ‚Ä¢ f') s x :=
  (has_deriv_at_rpow_const h).comp_has_fderiv_within_at x hf

theorem HasFderivAt.rpow_const (hf : HasFderivAt f f' x) (h : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  HasFderivAt (fun x => f x^p) ((p*f x^p - 1) ‚Ä¢ f') x :=
  (has_deriv_at_rpow_const h).comp_has_fderiv_at x hf

theorem HasStrictFderivAt.rpow_const (hf : HasStrictFderivAt f f' x) (h : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  HasStrictFderivAt (fun x => f x^p) ((p*f x^p - 1) ‚Ä¢ f') x :=
  (has_strict_deriv_at_rpow_const h).comp_has_strict_fderiv_at x hf

theorem DifferentiableWithinAt.rpow_const (hf : DifferentiableWithinAt ‚Ñù f s x) (h : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  DifferentiableWithinAt ‚Ñù (fun x => f x^p) s x :=
  (hf.has_fderiv_within_at.rpow_const h).DifferentiableWithinAt

@[simp]
theorem DifferentiableAt.rpow_const (hf : DifferentiableAt ‚Ñù f x) (h : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  DifferentiableAt ‚Ñù (fun x => f x^p) x :=
  (hf.has_fderiv_at.rpow_const h).DifferentiableAt

theorem DifferentiableOn.rpow_const (hf : DifferentiableOn ‚Ñù f s) (h : ‚àÄ x (_ : x ‚àà s), f x ‚â† 0 ‚à® 1 ‚â§ p) :
  DifferentiableOn ‚Ñù (fun x => f x^p) s :=
  fun x hx => (hf x hx).rpow_const (h x hx)

theorem Differentiable.rpow_const (hf : Differentiable ‚Ñù f) (h : ‚àÄ x, f x ‚â† 0 ‚à® 1 ‚â§ p) :
  Differentiable ‚Ñù fun x => f x^p :=
  fun x => (hf x).rpow_const (h x)

theorem HasFderivWithinAt.const_rpow (hf : HasFderivWithinAt f f' s x) (hc : 0 < c) :
  HasFderivWithinAt (fun x => c^f x) (((c^f x)*log c) ‚Ä¢ f') s x :=
  (has_strict_deriv_at_const_rpow hc (f x)).HasDerivAt.comp_has_fderiv_within_at x hf

theorem HasFderivAt.const_rpow (hf : HasFderivAt f f' x) (hc : 0 < c) :
  HasFderivAt (fun x => c^f x) (((c^f x)*log c) ‚Ä¢ f') x :=
  (has_strict_deriv_at_const_rpow hc (f x)).HasDerivAt.comp_has_fderiv_at x hf

theorem HasStrictFderivAt.const_rpow (hf : HasStrictFderivAt f f' x) (hc : 0 < c) :
  HasStrictFderivAt (fun x => c^f x) (((c^f x)*log c) ‚Ä¢ f') x :=
  (has_strict_deriv_at_const_rpow hc (f x)).comp_has_strict_fderiv_at x hf

theorem TimesContDiffWithinAt.rpow (hf : TimesContDiffWithinAt ‚Ñù n f s x) (hg : TimesContDiffWithinAt ‚Ñù n g s x)
  (h : f x ‚â† 0) : TimesContDiffWithinAt ‚Ñù n (fun x => f x^g x) s x :=
  (times_cont_diff_at_rpow_of_ne (f x, g x) h).comp_times_cont_diff_within_at x (hf.prod hg)

theorem TimesContDiffAt.rpow (hf : TimesContDiffAt ‚Ñù n f x) (hg : TimesContDiffAt ‚Ñù n g x) (h : f x ‚â† 0) :
  TimesContDiffAt ‚Ñù n (fun x => f x^g x) x :=
  (times_cont_diff_at_rpow_of_ne (f x, g x) h).comp x (hf.prod hg)

theorem TimesContDiffOn.rpow (hf : TimesContDiffOn ‚Ñù n f s) (hg : TimesContDiffOn ‚Ñù n g s)
  (h : ‚àÄ x (_ : x ‚àà s), f x ‚â† 0) : TimesContDiffOn ‚Ñù n (fun x => f x^g x) s :=
  fun x hx => (hf x hx).rpow (hg x hx) (h x hx)

theorem TimesContDiff.rpow (hf : TimesContDiff ‚Ñù n f) (hg : TimesContDiff ‚Ñù n g) (h : ‚àÄ x, f x ‚â† 0) :
  TimesContDiff ‚Ñù n fun x => f x^g x :=
  times_cont_diff_iff_times_cont_diff_at.mpr$ fun x => hf.times_cont_diff_at.rpow hg.times_cont_diff_at (h x)

theorem TimesContDiffWithinAt.rpow_const_of_ne (hf : TimesContDiffWithinAt ‚Ñù n f s x) (h : f x ‚â† 0) :
  TimesContDiffWithinAt ‚Ñù n (fun x => f x^p) s x :=
  hf.rpow times_cont_diff_within_at_const h

theorem TimesContDiffAt.rpow_const_of_ne (hf : TimesContDiffAt ‚Ñù n f x) (h : f x ‚â† 0) :
  TimesContDiffAt ‚Ñù n (fun x => f x^p) x :=
  hf.rpow times_cont_diff_at_const h

theorem TimesContDiffOn.rpow_const_of_ne (hf : TimesContDiffOn ‚Ñù n f s) (h : ‚àÄ x (_ : x ‚àà s), f x ‚â† 0) :
  TimesContDiffOn ‚Ñù n (fun x => f x^p) s :=
  fun x hx => (hf x hx).rpow_const_of_ne (h x hx)

theorem TimesContDiff.rpow_const_of_ne (hf : TimesContDiff ‚Ñù n f) (h : ‚àÄ x, f x ‚â† 0) :
  TimesContDiff ‚Ñù n fun x => f x^p :=
  hf.rpow times_cont_diff_const h

variable{m : ‚Ñï}

theorem TimesContDiffWithinAt.rpow_const_of_le (hf : TimesContDiffWithinAt ‚Ñù m f s x) (h : ¬´expr‚Üë ¬ª m ‚â§ p) :
  TimesContDiffWithinAt ‚Ñù m (fun x => f x^p) s x :=
  (times_cont_diff_at_rpow_const_of_le h).comp_times_cont_diff_within_at x hf

theorem TimesContDiffAt.rpow_const_of_le (hf : TimesContDiffAt ‚Ñù m f x) (h : ¬´expr‚Üë ¬ª m ‚â§ p) :
  TimesContDiffAt ‚Ñù m (fun x => f x^p) x :=
  by 
    rw [‚Üêtimes_cont_diff_within_at_univ] at *
    exact hf.rpow_const_of_le h

theorem TimesContDiffOn.rpow_const_of_le (hf : TimesContDiffOn ‚Ñù m f s) (h : ¬´expr‚Üë ¬ª m ‚â§ p) :
  TimesContDiffOn ‚Ñù m (fun x => f x^p) s :=
  fun x hx => (hf x hx).rpow_const_of_le h

theorem TimesContDiff.rpow_const_of_le (hf : TimesContDiff ‚Ñù m f) (h : ¬´expr‚Üë ¬ª m ‚â§ p) :
  TimesContDiff ‚Ñù m fun x => f x^p :=
  times_cont_diff_iff_times_cont_diff_at.mpr$ fun x => hf.times_cont_diff_at.rpow_const_of_le h

end fderiv

section deriv

variable{f g : ‚Ñù ‚Üí ‚Ñù}{f' g' x y p : ‚Ñù}{s : Set ‚Ñù}

theorem HasDerivWithinAt.rpow (hf : HasDerivWithinAt f f' s x) (hg : HasDerivWithinAt g g' s x) (h : 0 < f x) :
  HasDerivWithinAt (fun x => f x^g x) (((f'*g x)*f x^g x - 1)+(g'*f x^g x)*log (f x)) s x :=
  by 
    convert (hf.has_fderiv_within_at.rpow hg.has_fderiv_within_at h).HasDerivWithinAt using 1
    dsimp 
    ring

theorem HasDerivAt.rpow (hf : HasDerivAt f f' x) (hg : HasDerivAt g g' x) (h : 0 < f x) :
  HasDerivAt (fun x => f x^g x) (((f'*g x)*f x^g x - 1)+(g'*f x^g x)*log (f x)) x :=
  by 
    rw [‚Üêhas_deriv_within_at_univ] at *
    exact hf.rpow hg h

theorem HasDerivWithinAt.rpow_const (hf : HasDerivWithinAt f f' s x) (hx : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  HasDerivWithinAt (fun y => f y^p) ((f'*p)*f x^p - 1) s x :=
  by 
    convert (has_deriv_at_rpow_const hx).comp_has_deriv_within_at x hf using 1
    ring

theorem HasDerivAt.rpow_const (hf : HasDerivAt f f' x) (hx : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  HasDerivAt (fun y => f y^p) ((f'*p)*f x^p - 1) x :=
  by 
    rw [‚Üêhas_deriv_within_at_univ] at *
    exact hf.rpow_const hx

theorem deriv_within_rpow_const (hf : DifferentiableWithinAt ‚Ñù f s x) (hx : f x ‚â† 0 ‚à® 1 ‚â§ p)
  (hxs : UniqueDiffWithinAt ‚Ñù s x) : derivWithin (fun x => f x^p) s x = (derivWithin f s x*p)*f x^p - 1 :=
  (hf.has_deriv_within_at.rpow_const hx).derivWithin hxs

@[simp]
theorem deriv_rpow_const (hf : DifferentiableAt ‚Ñù f x) (hx : f x ‚â† 0 ‚à® 1 ‚â§ p) :
  deriv (fun x => f x^p) x = (deriv f x*p)*f x^p - 1 :=
  (hf.has_deriv_at.rpow_const hx).deriv

end deriv

end Differentiability

section Limits

open Real Filter

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- The function `(1 + t/x) ^ x` tends to `exp t` at `+‚àû`. -/
theorem tendsto_one_plus_div_rpow_exp
(t : expr‚Ñù()) : tendsto (Œª x : expr‚Ñù(), ¬´expr ^ ¬ª(¬´expr + ¬ª(1, ¬´expr / ¬ª(t, x)), x)) at_top (exprùìù() (exp t)) :=
begin
  apply [expr ((real.continuous_exp.tendsto _).comp (tendsto_mul_log_one_plus_div_at_top t)).congr' _],
  have [ident h‚ÇÅ] [":", expr ¬´expr < ¬ª(¬´expr / ¬ª((1 : expr‚Ñù()), 2), 1)] [":=", expr by linarith [] [] []],
  have [ident h‚ÇÇ] [":", expr tendsto (Œª
    x : expr‚Ñù(), ¬´expr + ¬ª(1, ¬´expr / ¬ª(t, x))) at_top (exprùìù() 1)] [":=", expr by simpa [] [] [] [] [] ["using", expr (tendsto_inv_at_top_zero.const_mul t).const_add 1]],
  refine [expr (eventually_ge_of_tendsto_gt h‚ÇÅ h‚ÇÇ).mono (Œª x hx, _)],
  have [ident hx'] [":", expr ¬´expr < ¬ª(0, ¬´expr + ¬ª(1, ¬´expr / ¬ª(t, x)))] [":=", expr by linarith [] [] []],
  simp [] [] [] ["[", expr mul_comm x, ",", expr exp_mul, ",", expr exp_log hx', "]"] [] []
end

-- error in Analysis.SpecialFunctions.PowDeriv: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- The function `(1 + t/x) ^ x` tends to `exp t` at `+‚àû` for naturals `x`. -/
theorem tendsto_one_plus_div_pow_exp
(t : expr‚Ñù()) : tendsto (Œª
 x : expr‚Ñï(), ¬´expr ^ ¬ª(¬´expr + ¬ª(1, ¬´expr / ¬ª(t, (x : expr‚Ñù()))), x)) at_top (exprùìù() (real.exp t)) :=
((tendsto_one_plus_div_rpow_exp t).comp tendsto_coe_nat_at_top_at_top).congr (by simp [] [] [] [] [] [])

end Limits

