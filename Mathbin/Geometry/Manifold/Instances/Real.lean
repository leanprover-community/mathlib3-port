import Mathbin.LinearAlgebra.FiniteDimensional 
import Mathbin.Geometry.Manifold.SmoothManifoldWithCorners 
import Mathbin.Analysis.InnerProductSpace.PiL2

/-!
# Constructing examples of manifolds over ‚Ñù

We introduce the necessary bits to be able to define manifolds modelled over `‚Ñù^n`, boundaryless
or with boundary or with corners. As a concrete example, we construct explicitly the manifold with
boundary structure on the real interval `[x, y]`.

More specifically, we introduce
* `model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_half_space n)` for the model space
  used to define `n`-dimensional real manifolds with boundary
* `model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_quadrant n)` for the model space used
  to define `n`-dimensional real manifolds with corners

## Notations

In the locale `manifold`, we introduce the notations
* `ùì° n` for the identity model with corners on `euclidean_space ‚Ñù (fin n)`
* `ùì°‚àÇ n` for `model_with_corners ‚Ñù (euclidean_space ‚Ñù (fin n)) (euclidean_half_space n)`.

For instance, if a manifold `M` is boundaryless, smooth and modelled on `euclidean_space ‚Ñù (fin m)`,
and `N` is smooth with boundary modelled on `euclidean_half_space n`, and `f : M ‚Üí N` is a smooth
map, then the derivative of `f` can be written simply as `mfderiv (ùì° m) (ùì°‚àÇ n) f` (as to why the
model with corners can not be implicit, see the discussion in `smooth_manifold_with_corners.lean`).

## Implementation notes

The manifold structure on the interval `[x, y] = Icc x y` requires the assumption `x < y` as a
typeclass. We provide it as `[fact (x < y)]`.
-/


noncomputable theory

open Set Function

open_locale Manifold

attribute [local instance] fact_one_le_two_real

/--
The half-space in `‚Ñù^n`, used to model manifolds with boundary. We only define it when
`1 ‚â§ n`, as the definition only makes sense in this case.
-/
def EuclideanHalfSpace (n : ‚Ñï) [HasZero (Fin‚Çì n)] : Type :=
  { x : EuclideanSpace ‚Ñù (Fin‚Çì n) // 0 ‚â§ x 0 }

/--
The quadrant in `‚Ñù^n`, used to model manifolds with corners, made of all vectors with nonnegative
coordinates.
-/
def EuclideanQuadrant (n : ‚Ñï) : Type :=
  { x : EuclideanSpace ‚Ñù (Fin‚Çì n) // ‚àÄ (i : Fin‚Çì n), 0 ‚â§ x i }

section 

attribute [local reducible] EuclideanHalfSpace EuclideanQuadrant

variable{n : ‚Ñï}

instance  [HasZero (Fin‚Çì n)] : TopologicalSpace (EuclideanHalfSpace n) :=
  by 
    infer_instance

instance  : TopologicalSpace (EuclideanQuadrant n) :=
  by 
    infer_instance

instance  [HasZero (Fin‚Çì n)] : Inhabited (EuclideanHalfSpace n) :=
  ‚ü®‚ü®0, le_refl‚Çì _‚ü©‚ü©

instance  : Inhabited (EuclideanQuadrant n) :=
  ‚ü®‚ü®0, fun i => le_refl‚Çì _‚ü©‚ü©

-- error in Geometry.Manifold.Instances.Real: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem range_half_space
(n : expr‚Ñï())
[has_zero (fin n)] : ¬´expr = ¬ª(range (Œª x : euclidean_half_space n, x.val), {y | ¬´expr ‚â§ ¬ª(0, y 0)}) :=
by simp [] [] [] [] [] []

-- error in Geometry.Manifold.Instances.Real: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem range_quadrant
(n : expr‚Ñï()) : ¬´expr = ¬ª(range (Œª x : euclidean_quadrant n, x.val), {y | ‚àÄ i : fin n, ¬´expr ‚â§ ¬ª(0, y i)}) :=
by simp [] [] [] [] [] []

end 

-- error in Geometry.Manifold.Instances.Real: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/--
Definition of the model with corners `(euclidean_space ‚Ñù (fin n), euclidean_half_space n)`, used as
a model for manifolds with boundary. In the locale `manifold`, use the shortcut `ùì°‚àÇ n`.
-/
def model_with_corners_euclidean_half_space
(n : expr‚Ñï())
[has_zero (fin n)] : model_with_corners expr‚Ñù() (euclidean_space expr‚Ñù() (fin n)) (euclidean_half_space n) :=
{ to_fun := subtype.val,
  inv_fun := Œª x, ‚ü®update x 0 (max (x 0) 0), by simp [] [] [] ["[", expr le_refl, "]"] [] []‚ü©,
  source := univ,
  target := {x | ¬´expr ‚â§ ¬ª(0, x 0)},
  map_source' := Œª x hx, x.property,
  map_target' := Œª x hx, mem_univ _,
  left_inv' := Œª ‚ü®xval, xprop‚ü© (hx), begin
    rw ["[", expr subtype.mk_eq_mk, ",", expr update_eq_iff, "]"] [],
    exact [expr ‚ü®max_eq_left xprop, Œª i _, rfl‚ü©]
  end,
  right_inv' := Œª x hx, update_eq_iff.2 ‚ü®max_eq_left hx, Œª i _, rfl‚ü©,
  source_eq := rfl,
  unique_diff' := have this : unique_diff_on expr‚Ñù() _ := unique_diff_on.pi (fin n) (Œª
   _, expr‚Ñù()) _ _ (Œª i ¬´expr ‚àà ¬ª ({0} : set (fin n)), unique_diff_on_Ici 0),
  by simpa [] [] ["only"] ["[", expr singleton_pi, "]"] [] ["using", expr this],
  continuous_to_fun := continuous_subtype_val,
  continuous_inv_fun := ¬´expr $ ¬ª(continuous_subtype_mk _, ¬´expr $ ¬ª(continuous_id.update 0, (continuous_apply 0).max continuous_const)) }

/--
Definition of the model with corners `(euclidean_space ‚Ñù (fin n), euclidean_quadrant n)`, used as a
model for manifolds with corners -/
def modelWithCornersEuclideanQuadrant (n : ‚Ñï) : ModelWithCorners ‚Ñù (EuclideanSpace ‚Ñù (Fin‚Çì n)) (EuclideanQuadrant n) :=
  { toFun := Subtype.val,
    invFun :=
      fun x =>
        ‚ü®fun i => max (x i) 0,
          fun i =>
            by 
              simp only [le_refl‚Çì, or_true‚Çì, le_max_iff]‚ü©,
    Source := univ, Target := { x | ‚àÄ i, 0 ‚â§ x i },
    map_source' :=
      fun x hx =>
        by 
          simpa only [Subtype.range_val] using x.property,
    map_target' := fun x hx => mem_univ _,
    left_inv' :=
      fun ‚ü®xval, xprop‚ü© hx =>
        by 
          ext i 
          simp only [Subtype.coe_mk, xprop i, max_eq_left‚Çì],
    right_inv' :=
      fun x hx =>
        by 
          ext1 i 
          simp only [hx i, max_eq_left‚Çì],
    source_eq := rfl,
    unique_diff' :=
      have this : UniqueDiffOn ‚Ñù _ := UniqueDiffOn.univ_pi (Fin‚Çì n) (fun _ => ‚Ñù) _ fun i => unique_diff_on_Ici 0 
      by 
        simpa only [pi_univ_Ici] using this,
    continuous_to_fun := continuous_subtype_val,
    continuous_inv_fun :=
      continuous_subtype_mk _$ continuous_pi$ fun i => (continuous_id.max continuous_const).comp (continuous_apply i) }

localized [Manifold] notation "ùì° " n => modelWithCornersSelf ‚Ñù (EuclideanSpace ‚Ñù (Fin‚Çì n))

localized [Manifold] notation "ùì°‚àÇ " n => modelWithCornersEuclideanHalfSpace n

-- error in Geometry.Manifold.Instances.Real: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/--
The left chart for the topological space `[x, y]`, defined on `[x,y)` and sending `x` to `0` in
`euclidean_half_space 1`.
-/ def Icc_left_chart (x y : expr‚Ñù()) [fact ¬´expr < ¬ª(x, y)] : local_homeomorph (Icc x y) (euclidean_half_space 1) :=
{ source := {z : Icc x y | ¬´expr < ¬ª(z.val, y)},
  target := {z : euclidean_half_space 1 | ¬´expr < ¬ª(z.val 0, ¬´expr - ¬ª(y, x))},
  to_fun := Œª z : Icc x y, ‚ü®Œª i, ¬´expr - ¬ª(z.val, x), sub_nonneg.mpr z.property.1‚ü©,
  inv_fun := Œª
  z, ‚ü®min ¬´expr + ¬ª(z.val 0, x) y, by simp [] [] [] ["[", expr le_refl, ",", expr z.prop, ",", expr le_of_lt (fact.out ¬´expr < ¬ª(x, y)), "]"] [] []‚ü©,
  map_source' := by simp [] [] ["only"] ["[", expr imp_self, ",", expr sub_lt_sub_iff_right, ",", expr mem_set_of_eq, ",", expr forall_true_iff, "]"] [] [],
  map_target' := by { simp [] [] ["only"] ["[", expr min_lt_iff, ",", expr mem_set_of_eq, "]"] [] [],
    assume [binders (z hz)],
    left,
    dsimp [] ["[", "-", ident subtype.val_eq_coe, "]"] [] ["at", ident hz],
    linarith [] [] [] },
  left_inv' := begin
    rintros ["‚ü®", ident z, ",", ident hz, "‚ü©", ident h'z],
    simp [] [] ["only"] ["[", expr mem_set_of_eq, ",", expr mem_Icc, "]"] [] ["at", ident hz, ident h'z],
    simp [] [] ["only"] ["[", expr hz, ",", expr min_eq_left, ",", expr sub_add_cancel, "]"] [] []
  end,
  right_inv' := begin
    rintros ["‚ü®", ident z, ",", ident hz, "‚ü©", ident h'z],
    rw [expr subtype.mk_eq_mk] [],
    funext [],
    dsimp [] [] [] ["at", ident hz, ident h'z],
    have [ident A] [":", expr ¬´expr ‚â§ ¬ª(¬´expr + ¬ª(x, z 0), y)] [],
    by linarith [] [] [],
    rw [expr subsingleton.elim i 0] [],
    simp [] [] ["only"] ["[", expr A, ",", expr add_comm, ",", expr add_sub_cancel', ",", expr min_eq_left, "]"] [] []
  end,
  open_source := begin
    have [] [":", expr is_open {z : expr‚Ñù() | ¬´expr < ¬ª(z, y)}] [":=", expr is_open_Iio],
    exact [expr this.preimage continuous_subtype_val]
  end,
  open_target := begin
    have [] [":", expr is_open {z : expr‚Ñù() | ¬´expr < ¬ª(z, ¬´expr - ¬ª(y, x))}] [":=", expr is_open_Iio],
    have [] [":", expr is_open {z : euclidean_space expr‚Ñù() (fin 1) | ¬´expr < ¬ª(z 0, ¬´expr - ¬ª(y, x))}] [":=", expr this.preimage (@continuous_apply (fin 1) (Œª
       _, expr‚Ñù()) _ 0)],
    exact [expr this.preimage continuous_subtype_val]
  end,
  continuous_to_fun := begin
    apply [expr continuous.continuous_on],
    apply [expr continuous_subtype_mk],
    have [] [":", expr continuous (Œª
      (z : expr‚Ñù())
      (i : fin 1), ¬´expr - ¬ª(z, x))] [":=", expr continuous.sub ¬´expr $ ¬ª(continuous_pi, Œª
      i, continuous_id) continuous_const],
    exact [expr this.comp continuous_subtype_val]
  end,
  continuous_inv_fun := begin
    apply [expr continuous.continuous_on],
    apply [expr continuous_subtype_mk],
    have [ident A] [":", expr continuous (Œª
      z : expr‚Ñù(), min ¬´expr + ¬ª(z, x) y)] [":=", expr (continuous_id.add continuous_const).min continuous_const],
    have [ident B] [":", expr continuous (Œª z : euclidean_space expr‚Ñù() (fin 1), z 0)] [":=", expr continuous_apply 0],
    exact [expr (A.comp B).comp continuous_subtype_val]
  end }

-- error in Geometry.Manifold.Instances.Real: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/--
The right chart for the topological space `[x, y]`, defined on `(x,y]` and sending `y` to `0` in
`euclidean_half_space 1`.
-/ def Icc_right_chart (x y : expr‚Ñù()) [fact ¬´expr < ¬ª(x, y)] : local_homeomorph (Icc x y) (euclidean_half_space 1) :=
{ source := {z : Icc x y | ¬´expr < ¬ª(x, z.val)},
  target := {z : euclidean_half_space 1 | ¬´expr < ¬ª(z.val 0, ¬´expr - ¬ª(y, x))},
  to_fun := Œª z : Icc x y, ‚ü®Œª i, ¬´expr - ¬ª(y, z.val), sub_nonneg.mpr z.property.2‚ü©,
  inv_fun := Œª
  z, ‚ü®max ¬´expr - ¬ª(y, z.val 0) x, by simp [] [] [] ["[", expr le_refl, ",", expr z.prop, ",", expr le_of_lt (fact.out ¬´expr < ¬ª(x, y)), ",", expr sub_eq_add_neg, "]"] [] []‚ü©,
  map_source' := by simp [] [] ["only"] ["[", expr imp_self, ",", expr mem_set_of_eq, ",", expr sub_lt_sub_iff_left, ",", expr forall_true_iff, "]"] [] [],
  map_target' := by { simp [] [] ["only"] ["[", expr lt_max_iff, ",", expr mem_set_of_eq, "]"] [] [],
    assume [binders (z hz)],
    left,
    dsimp [] ["[", "-", ident subtype.val_eq_coe, "]"] [] ["at", ident hz],
    linarith [] [] [] },
  left_inv' := begin
    rintros ["‚ü®", ident z, ",", ident hz, "‚ü©", ident h'z],
    simp [] [] ["only"] ["[", expr mem_set_of_eq, ",", expr mem_Icc, "]"] [] ["at", ident hz, ident h'z],
    simp [] [] ["only"] ["[", expr hz, ",", expr sub_eq_add_neg, ",", expr max_eq_left, ",", expr add_add_neg_cancel'_right, ",", expr neg_add_rev, ",", expr neg_neg, "]"] [] []
  end,
  right_inv' := begin
    rintros ["‚ü®", ident z, ",", ident hz, "‚ü©", ident h'z],
    rw [expr subtype.mk_eq_mk] [],
    funext [],
    dsimp [] [] [] ["at", ident hz, ident h'z],
    have [ident A] [":", expr ¬´expr ‚â§ ¬ª(x, ¬´expr - ¬ª(y, z 0))] [],
    by linarith [] [] [],
    rw [expr subsingleton.elim i 0] [],
    simp [] [] ["only"] ["[", expr A, ",", expr sub_sub_cancel, ",", expr max_eq_left, "]"] [] []
  end,
  open_source := begin
    have [] [":", expr is_open {z : expr‚Ñù() | ¬´expr < ¬ª(x, z)}] [":=", expr is_open_Ioi],
    exact [expr this.preimage continuous_subtype_val]
  end,
  open_target := begin
    have [] [":", expr is_open {z : expr‚Ñù() | ¬´expr < ¬ª(z, ¬´expr - ¬ª(y, x))}] [":=", expr is_open_Iio],
    have [] [":", expr is_open {z : euclidean_space expr‚Ñù() (fin 1) | ¬´expr < ¬ª(z 0, ¬´expr - ¬ª(y, x))}] [":=", expr this.preimage (@continuous_apply (fin 1) (Œª
       _, expr‚Ñù()) _ 0)],
    exact [expr this.preimage continuous_subtype_val]
  end,
  continuous_to_fun := begin
    apply [expr continuous.continuous_on],
    apply [expr continuous_subtype_mk],
    have [] [":", expr continuous (Œª
      (z : expr‚Ñù())
      (i : fin 1), ¬´expr - ¬ª(y, z))] [":=", expr continuous_const.sub (continuous_pi (Œª i, continuous_id))],
    exact [expr this.comp continuous_subtype_val]
  end,
  continuous_inv_fun := begin
    apply [expr continuous.continuous_on],
    apply [expr continuous_subtype_mk],
    have [ident A] [":", expr continuous (Œª
      z : expr‚Ñù(), max ¬´expr - ¬ª(y, z) x)] [":=", expr (continuous_const.sub continuous_id).max continuous_const],
    have [ident B] [":", expr continuous (Œª z : euclidean_space expr‚Ñù() (fin 1), z 0)] [":=", expr continuous_apply 0],
    exact [expr (A.comp B).comp continuous_subtype_val]
  end }

/--
Charted space structure on `[x, y]`, using only two charts taking values in
`euclidean_half_space 1`.
-/
instance iccManifold (x y : ‚Ñù) [Fact (x < y)] : ChartedSpace (EuclideanHalfSpace 1) (Icc x y) :=
  { Atlas := {iccLeftChart x y, iccRightChart x y},
    chartAt := fun z => if z.val < y then iccLeftChart x y else iccRightChart x y,
    mem_chart_source :=
      fun z =>
        by 
          byCases' h' : z.val < y
          ¬∑
            simp only [h', if_true]
            exact h'
          ¬∑
            simp only [h', if_false]
            apply lt_of_lt_of_le‚Çì (Fact.out (x < y))
            simpa only [not_lt‚Çì] using h',
    chart_mem_atlas :=
      fun z =>
        by 
          byCases' h' : z.val < y <;> simp [h'] }

-- error in Geometry.Manifold.Instances.Real: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/--
The manifold structure on `[x, y]` is smooth.
-/
instance Icc_smooth_manifold
(x y : expr‚Ñù())
[fact ¬´expr < ¬ª(x, y)] : smooth_manifold_with_corners ¬´exprùì°‚àÇ ¬ª(1) (Icc x y) :=
begin
  have [ident M] [":", expr times_cont_diff_on expr‚Ñù() ¬´expr‚àû¬ª() (Œª
    z : euclidean_space expr‚Ñù() (fin 1), ¬´expr + ¬ª(¬´expr- ¬ª(z), Œª i, ¬´expr - ¬ª(y, x))) univ] [],
  { rw [expr times_cont_diff_on_univ] [],
    exact [expr times_cont_diff_id.neg.add times_cont_diff_const] },
  apply [expr smooth_manifold_with_corners_of_times_cont_diff_on],
  assume [binders (e e' he he')],
  simp [] [] ["only"] ["[", expr atlas, ",", expr mem_singleton_iff, ",", expr mem_insert_iff, "]"] [] ["at", ident he, ident he'],
  rcases [expr he, "with", ident rfl, "|", ident rfl]; rcases [expr he', "with", ident rfl, "|", ident rfl],
  { exact [expr (mem_groupoid_of_pregroupoid.mpr (symm_trans_mem_times_cont_diff_groupoid _ _ _)).1] },
  { apply [expr M.congr_mono _ (subset_univ _)],
    rintro ["_", "‚ü®", "‚ü®", ident hz‚ÇÅ, ",", ident hz‚ÇÇ, "‚ü©", ",", "‚ü®", "‚ü®", ident z, ",", ident hz‚ÇÄ, "‚ü©", ",", ident rfl, "‚ü©", "‚ü©"],
    simp [] [] ["only"] ["[", expr model_with_corners_euclidean_half_space, ",", expr Icc_left_chart, ",", expr Icc_right_chart, ",", expr update_same, ",", expr max_eq_left, ",", expr hz‚ÇÄ, ",", expr lt_sub_iff_add_lt, "]"] ["with", ident mfld_simps] ["at", ident hz‚ÇÅ, ident hz‚ÇÇ],
    rw ["[", expr min_eq_left hz‚ÇÅ.le, ",", expr lt_add_iff_pos_left, "]"] ["at", ident hz‚ÇÇ],
    ext [] [ident i] [],
    rw [expr subsingleton.elim i 0] [],
    simp [] [] ["only"] ["[", expr model_with_corners_euclidean_half_space, ",", expr Icc_left_chart, ",", expr Icc_right_chart, ",", "*", ",", expr pi_Lp.add_apply, ",", expr pi_Lp.neg_apply, ",", expr max_eq_left, ",", expr min_eq_left hz‚ÇÅ.le, ",", expr update_same, "]"] ["with", ident mfld_simps] [],
    abel [] [] [] },
  { apply [expr M.congr_mono _ (subset_univ _)],
    rintro ["_", "‚ü®", "‚ü®", ident hz‚ÇÅ, ",", ident hz‚ÇÇ, "‚ü©", ",", "‚ü®", ident z, ",", ident hz‚ÇÄ, "‚ü©", ",", ident rfl, "‚ü©"],
    simp [] [] ["only"] ["[", expr model_with_corners_euclidean_half_space, ",", expr Icc_left_chart, ",", expr Icc_right_chart, ",", expr max_lt_iff, ",", expr update_same, ",", expr max_eq_left hz‚ÇÄ, "]"] ["with", ident mfld_simps] ["at", ident hz‚ÇÅ, ident hz‚ÇÇ],
    rw [expr lt_sub] ["at", ident hz‚ÇÅ],
    ext [] [ident i] [],
    rw [expr subsingleton.elim i 0] [],
    simp [] [] ["only"] ["[", expr model_with_corners_euclidean_half_space, ",", expr Icc_left_chart, ",", expr Icc_right_chart, ",", expr pi_Lp.add_apply, ",", expr pi_Lp.neg_apply, ",", expr update_same, ",", expr max_eq_left, ",", expr hz‚ÇÄ, ",", expr hz‚ÇÅ.le, "]"] ["with", ident mfld_simps] [],
    abel [] [] [] },
  { exact [expr (mem_groupoid_of_pregroupoid.mpr (symm_trans_mem_times_cont_diff_groupoid _ _ _)).1] }
end

/-! Register the manifold structure on `Icc 0 1`, and also its zero and one. -/


section 

theorem fact_zero_lt_one : Fact ((0 : ‚Ñù) < 1) :=
  ‚ü®zero_lt_one‚ü©

attribute [local instance] fact_zero_lt_one

instance  : ChartedSpace (EuclideanHalfSpace 1) (Icc (0 : ‚Ñù) 1) :=
  by 
    infer_instance

instance  : SmoothManifoldWithCorners (ùì°‚àÇ 1) (Icc (0 : ‚Ñù) 1) :=
  by 
    infer_instance

end 

