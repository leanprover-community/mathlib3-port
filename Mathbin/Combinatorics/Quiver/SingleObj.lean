/-
Copyright (c) 2023 Antoine Labelle. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Antoine Labelle

! This file was ported from Lean 3 source module combinatorics.quiver.single_obj
! leanprover-community/mathlib commit d101e93197bb5f6ea89bd7ba386b7f7dff1f3903
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Combinatorics.Quiver.Cast
import Mathbin.Combinatorics.Quiver.Symmetric

/-!
# Single-object quiver

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

Single object quiver with a given arrows type.

## Main definitions

Given a type `Œ±`, `single_obj Œ±` is the `unit` type, whose single object is called `star Œ±`, with
`quiver` structure such that `star Œ± ‚ü∂ star Œ±` is the type `Œ±`.
An element `x : Œ±` can be reinterpreted as an element of `star Œ± ‚ü∂ star Œ±` using
`to_hom`.
More generally, a list of elements of `a` can be reinterpreted as a path from `star Œ±` to
itself using `path_equiv_list`.
-/


namespace Quiver

#print Quiver.SingleObj /-
/-- Type tag on `unit` used to define single-object quivers. -/
@[nolint unused_arguments]
def SingleObj (Œ± : Type _) : Type :=
  Unit deriving Unique
#align quiver.single_obj Quiver.SingleObj
-/

namespace SingleObj

variable (Œ± Œ≤ Œ≥ : Type _)

instance : Quiver (SingleObj Œ±) :=
  ‚ü®fun _ _ => Œ±‚ü©

#print Quiver.SingleObj.star /-
/-- The single object in `single_obj Œ±`. -/
def star : SingleObj Œ± :=
  Unit.unit
#align quiver.single_obj.star Quiver.SingleObj.star
-/

instance : Inhabited (SingleObj Œ±) :=
  ‚ü®star Œ±‚ü©

variable {Œ± Œ≤ Œ≥}

#print Quiver.SingleObj.hasReverse /-
-- See note [reducible non-instances]
/-- Equip `single_obj Œ±` with a reverse operation. -/
@[reducible]
def hasReverse (rev : Œ± ‚Üí Œ±) : HasReverse (SingleObj Œ±) :=
  ‚ü®fun _ _ => rev‚ü©
#align quiver.single_obj.has_reverse Quiver.SingleObj.hasReverse
-/

#print Quiver.SingleObj.hasInvolutiveReverse /-
-- See note [reducible non-instances]
/-- Equip `single_obj Œ±` with an involutive reverse operation. -/
@[reducible]
def hasInvolutiveReverse (rev : Œ± ‚Üí Œ±) (h : Function.Involutive rev) :
    HasInvolutiveReverse (SingleObj Œ±)
    where
  toHasReverse := hasReverse rev
  inv' _ _ := h
#align quiver.single_obj.has_involutive_reverse Quiver.SingleObj.hasInvolutiveReverse
-/

#print Quiver.SingleObj.toHom /-
/-- The type of arrows from `star Œ±` to itself is equivalent to the original type `Œ±`. -/
@[simps]
def toHom : Œ± ‚âÉ (star Œ± ‚ü∂ star Œ±) :=
  Equiv.refl _
#align quiver.single_obj.to_hom Quiver.SingleObj.toHom
-/

#print Quiver.SingleObj.toPrefunctor /-
/-- Prefunctors between two `single_obj` quivers correspond to functions between the corresponding
arrows types.
-/
@[simps]
def toPrefunctor : (Œ± ‚Üí Œ≤) ‚âÉ SingleObj Œ± ‚•§q SingleObj Œ≤
    where
  toFun f := ‚ü®id, fun _ _ => f‚ü©
  invFun f a := f.map (toHom a)
  left_inv _ := rfl
  right_inv f := by cases f <;> obviously
#align quiver.single_obj.to_prefunctor Quiver.SingleObj.toPrefunctor
-/

#print Quiver.SingleObj.toPrefunctor_id /-
theorem toPrefunctor_id : toPrefunctor id = ùü≠q (SingleObj Œ±) :=
  rfl
#align quiver.single_obj.to_prefunctor_id Quiver.SingleObj.toPrefunctor_id
-/

#print Quiver.SingleObj.toPrefunctor_symm_id /-
@[simp]
theorem toPrefunctor_symm_id : toPrefunctor.symm (ùü≠q (SingleObj Œ±)) = id :=
  rfl
#align quiver.single_obj.to_prefunctor_symm_id Quiver.SingleObj.toPrefunctor_symm_id
-/

/- warning: quiver.single_obj.to_prefunctor_comp -> Quiver.SingleObj.toPrefunctor_comp is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {Œ≥ : Type.{u3}} (f : Œ± -> Œ≤) (g : Œ≤ -> Œ≥), Eq.{max 1 (succ u1) (succ u3)} (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (coeFn.{max 1 (succ u1) (succ u3), max 1 (succ u1) (succ u3)} (Equiv.{max (succ u1) (succ u3), max 1 (succ u1) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) (fun (_x : Equiv.{max (succ u1) (succ u3), max 1 (succ u1) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) => (Œ± -> Œ≥) -> (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) (Equiv.hasCoeToFun.{max (succ u1) (succ u3), max 1 (succ u1) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) (Quiver.SingleObj.toPrefunctor.{u1, u3} Œ± Œ≥) (Function.comp.{succ u1, succ u2, succ u3} Œ± Œ≤ Œ≥ g f)) (Prefunctor.comp.{0, succ u1, 0, succ u2, 0, succ u3} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥) (coeFn.{max 1 (succ u1) (succ u2), max 1 (succ u1) (succ u2)} (Equiv.{max (succ u1) (succ u2), max 1 (succ u1) (succ u2)} (Œ± -> Œ≤) (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤))) (fun (_x : Equiv.{max (succ u1) (succ u2), max 1 (succ u1) (succ u2)} (Œ± -> Œ≤) (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤))) => (Œ± -> Œ≤) -> (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤))) (Equiv.hasCoeToFun.{max (succ u1) (succ u2), max 1 (succ u1) (succ u2)} (Œ± -> Œ≤) (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤))) (Quiver.SingleObj.toPrefunctor.{u1, u2} Œ± Œ≤) f) (coeFn.{max 1 (succ u2) (succ u3), max 1 (succ u2) (succ u3)} (Equiv.{max (succ u2) (succ u3), max 1 (succ u2) (succ u3)} (Œ≤ -> Œ≥) (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) (fun (_x : Equiv.{max (succ u2) (succ u3), max 1 (succ u2) (succ u3)} (Œ≤ -> Œ≥) (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) => (Œ≤ -> Œ≥) -> (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) (Equiv.hasCoeToFun.{max (succ u2) (succ u3), max 1 (succ u2) (succ u3)} (Œ≤ -> Œ≥) (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥))) (Quiver.SingleObj.toPrefunctor.{u2, u3} Œ≤ Œ≥) g))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u1}} {Œ≥ : Type.{u2}} (f : Œ± -> Œ≤) (g : Œ≤ -> Œ≥), Eq.{max (succ u3) (succ u2)} ((fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Œ± -> Œ≥) => Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥)) (Function.comp.{succ u3, succ u1, succ u2} Œ± Œ≤ Œ≥ g f)) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (Equiv.{max (succ u3) (succ u2), max (succ u2) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥))) (Œ± -> Œ≥) (fun (_x : Œ± -> Œ≥) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Œ± -> Œ≥) => Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥)) _x) (Equiv.instFunLikeEquiv.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥))) (Quiver.SingleObj.toPrefunctor.{u3, u2} Œ± Œ≥) (Function.comp.{succ u3, succ u1, succ u2} Œ± Œ≤ Œ≥ g f)) (Prefunctor.comp.{0, succ u3, 0, succ u1, 0, succ u2} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥) (FunLike.coe.{max (succ u1) (succ u3), max (succ u1) (succ u3), max (succ u1) (succ u3)} (Equiv.{max (succ u3) (succ u1), max (succ u1) (succ u3)} (Œ± -> Œ≤) (Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤))) (Œ± -> Œ≤) (fun (_x : Œ± -> Œ≤) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Œ± -> Œ≤) => Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤)) _x) (Equiv.instFunLikeEquiv.{max (succ u1) (succ u3), max (succ u1) (succ u3)} (Œ± -> Œ≤) (Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤))) (Quiver.SingleObj.toPrefunctor.{u3, u1} Œ± Œ≤) f) (FunLike.coe.{max (succ u2) (succ u1), max (succ u2) (succ u1), max (succ u2) (succ u1)} (Equiv.{max (succ u1) (succ u2), max (succ u2) (succ u1)} (Œ≤ -> Œ≥) (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥))) (Œ≤ -> Œ≥) (fun (_x : Œ≤ -> Œ≥) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Œ≤ -> Œ≥) => Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥)) _x) (Equiv.instFunLikeEquiv.{max (succ u2) (succ u1), max (succ u2) (succ u1)} (Œ≤ -> Œ≥) (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≤) (Quiver.SingleObj.{u2} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≥))) (Quiver.SingleObj.toPrefunctor.{u1, u2} Œ≤ Œ≥) g))
Case conversion may be inaccurate. Consider using '#align quiver.single_obj.to_prefunctor_comp Quiver.SingleObj.toPrefunctor_comp‚Çì'. -/
theorem toPrefunctor_comp (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
    toPrefunctor (g ‚àò f) = toPrefunctor f ‚ãôq toPrefunctor g :=
  rfl
#align quiver.single_obj.to_prefunctor_comp Quiver.SingleObj.toPrefunctor_comp

/- warning: quiver.single_obj.to_prefunctor_symm_comp -> Quiver.SingleObj.toPrefunctor_symm_comp is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {Œ≥ : Type.{u3}} (f : Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤)) (g : Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)), Eq.{max (succ u1) (succ u3)} (Œ± -> Œ≥) (coeFn.{max 1 (succ u1) (succ u3), max 1 (succ u1) (succ u3)} (Equiv.{max 1 (succ u1) (succ u3), max (succ u1) (succ u3)} (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Œ± -> Œ≥)) (fun (_x : Equiv.{max 1 (succ u1) (succ u3), max (succ u1) (succ u3)} (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Œ± -> Œ≥)) => (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) -> Œ± -> Œ≥) (Equiv.hasCoeToFun.{max 1 (succ u1) (succ u3), max (succ u1) (succ u3)} (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Œ± -> Œ≥)) (Equiv.symm.{max (succ u1) (succ u3), max 1 (succ u1) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u1, succ u3, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Quiver.SingleObj.toPrefunctor.{u1, u3} Œ± Œ≥)) (Prefunctor.comp.{0, succ u1, 0, succ u2, 0, succ u3} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥) f g)) (Function.comp.{succ u1, succ u2, succ u3} Œ± Œ≤ Œ≥ (coeFn.{max 1 (succ u2) (succ u3), max 1 (succ u2) (succ u3)} (Equiv.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Œ≤ -> Œ≥)) (fun (_x : Equiv.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Œ≤ -> Œ≥)) => (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) -> Œ≤ -> Œ≥) (Equiv.hasCoeToFun.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Œ≤ -> Œ≥)) (Equiv.symm.{max (succ u2) (succ u3), max 1 (succ u2) (succ u3)} (Œ≤ -> Œ≥) (Prefunctor.{succ u2, succ u3, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤) (Quiver.SingleObj.{u3} Œ≥) (Quiver.SingleObj.quiver.{u3} Œ≥)) (Quiver.SingleObj.toPrefunctor.{u2, u3} Œ≤ Œ≥)) g) (coeFn.{max 1 (succ u1) (succ u2), max 1 (succ u1) (succ u2)} (Equiv.{max 1 (succ u1) (succ u2), max (succ u1) (succ u2)} (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤)) (Œ± -> Œ≤)) (fun (_x : Equiv.{max 1 (succ u1) (succ u2), max (succ u1) (succ u2)} (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤)) (Œ± -> Œ≤)) => (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤)) -> Œ± -> Œ≤) (Equiv.hasCoeToFun.{max 1 (succ u1) (succ u2), max (succ u1) (succ u2)} (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤)) (Œ± -> Œ≤)) (Equiv.symm.{max (succ u1) (succ u2), max 1 (succ u1) (succ u2)} (Œ± -> Œ≤) (Prefunctor.{succ u1, succ u2, 0, 0} (Quiver.SingleObj.{u1} Œ±) (Quiver.SingleObj.quiver.{u1} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.quiver.{u2} Œ≤)) (Quiver.SingleObj.toPrefunctor.{u1, u2} Œ± Œ≤)) f))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u2}} {Œ≥ : Type.{u1}} (f : Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) (g : Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)), Eq.{max (succ u3) (succ u1)} ((fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) => Œ± -> Œ≥) (Prefunctor.comp.{0, succ u3, 0, succ u2, 0, succ u1} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥) f g)) (FunLike.coe.{max (succ u1) (succ u3), max (succ u1) (succ u3), max (succ u1) (succ u3)} (Equiv.{max (succ u1) (succ u3), max (succ u1) (succ u3)} (Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (Œ± -> Œ≥)) (Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (fun (_x : Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) => Œ± -> Œ≥) _x) (Equiv.instFunLikeEquiv.{max (succ u1) (succ u3), max (succ u1) (succ u3)} (Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (Œ± -> Œ≥)) (Equiv.symm.{max (succ u1) (succ u3), max (succ u1) (succ u3)} (Œ± -> Œ≥) (Prefunctor.{succ u3, succ u1, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (Quiver.SingleObj.toPrefunctor.{u3, u1} Œ± Œ≥)) (Prefunctor.comp.{0, succ u3, 0, succ u2, 0, succ u1} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥) f g)) (Function.comp.{succ u3, succ u2, succ u1} Œ± Œ≤ Œ≥ (FunLike.coe.{max (succ u1) (succ u2), max (succ u1) (succ u2), max (succ u1) (succ u2)} (Equiv.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (Œ≤ -> Œ≥)) (Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (fun (_x : Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) => Œ≤ -> Œ≥) _x) (Equiv.instFunLikeEquiv.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (Œ≤ -> Œ≥)) (Equiv.symm.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (Œ≤ -> Œ≥) (Prefunctor.{succ u2, succ u1, 0, 0} (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤) (Quiver.SingleObj.{u1} Œ≥) (Quiver.SingleObj.instQuiverSingleObj.{u1} Œ≥)) (Quiver.SingleObj.toPrefunctor.{u2, u1} Œ≤ Œ≥)) g) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (Equiv.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) (Œ± -> Œ≤)) (Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) (fun (_x : Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) => Œ± -> Œ≤) _x) (Equiv.instFunLikeEquiv.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) (Œ± -> Œ≤)) (Equiv.symm.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (Œ± -> Œ≤) (Prefunctor.{succ u3, succ u2, 0, 0} (Quiver.SingleObj.{u3} Œ±) (Quiver.SingleObj.instQuiverSingleObj.{u3} Œ±) (Quiver.SingleObj.{u2} Œ≤) (Quiver.SingleObj.instQuiverSingleObj.{u2} Œ≤)) (Quiver.SingleObj.toPrefunctor.{u3, u2} Œ± Œ≤)) f))
Case conversion may be inaccurate. Consider using '#align quiver.single_obj.to_prefunctor_symm_comp Quiver.SingleObj.toPrefunctor_symm_comp‚Çì'. -/
@[simp]
theorem toPrefunctor_symm_comp (f : SingleObj Œ± ‚•§q SingleObj Œ≤) (g : SingleObj Œ≤ ‚•§q SingleObj Œ≥) :
    toPrefunctor.symm (f ‚ãôq g) = toPrefunctor.symm g ‚àò toPrefunctor.symm f := by
  simp only [Equiv.symm_apply_eq, to_prefunctor_comp, Equiv.apply_symm_apply]
#align quiver.single_obj.to_prefunctor_symm_comp Quiver.SingleObj.toPrefunctor_symm_comp

#print Quiver.SingleObj.pathToList /-
/-- Auxiliary definition for `quiver.single_obj.path_equiv_list`.
Converts a path in the quiver `single_obj Œ±` into a list of elements of type `a`.
-/
@[simp]
def pathToList : ‚àÄ {x : SingleObj Œ±}, Path (star Œ±) x ‚Üí List Œ±
  | _, path.nil => []
  | _, path.cons p a => a :: path_to_list p
#align quiver.single_obj.path_to_list Quiver.SingleObj.pathToList
-/

#print Quiver.SingleObj.listToPath /-
/-- Auxiliary definition for `quiver.single_obj.path_equiv_list`.
Converts a list of elements of type `Œ±` into a path in the quiver `single_obj Œ±`.
-/
@[simp]
def listToPath : List Œ± ‚Üí Path (star Œ±) (star Œ±)
  | [] => Path.nil
  | a :: l => (list_to_path l).cons a
#align quiver.single_obj.list_to_path Quiver.SingleObj.listToPath
-/

#print Quiver.SingleObj.listToPath_pathToList /-
theorem listToPath_pathToList {x : SingleObj Œ±} (p : Path (star Œ±) x) :
    listToPath (pathToList p) = p.cast rfl Unit.ext :=
  by
  induction' p with y z p a ih
  rfl
  tidy
#align quiver.single_obj.path_to_list_to_path Quiver.SingleObj.listToPath_pathToList
-/

#print Quiver.SingleObj.pathToList_listToPath /-
theorem pathToList_listToPath (l : List Œ±) : pathToList (listToPath l) = l :=
  by
  induction' l with a l ih
  rfl
  simp [ih]
#align quiver.single_obj.list_to_path_to_list Quiver.SingleObj.pathToList_listToPath
-/

#print Quiver.SingleObj.pathEquivList /-
/-- Paths in `single_obj Œ±` quiver correspond to lists of elements of type `Œ±`. -/
def pathEquivList : Path (star Œ±) (star Œ±) ‚âÉ List Œ± :=
  ‚ü®pathToList, listToPath, fun p => listToPath_pathToList p, pathToList_listToPath‚ü©
#align quiver.single_obj.path_equiv_list Quiver.SingleObj.pathEquivList
-/

#print Quiver.SingleObj.pathEquivList_nil /-
@[simp]
theorem pathEquivList_nil : pathEquivList Path.nil = ([] : List Œ±) :=
  rfl
#align quiver.single_obj.path_equiv_list_nil Quiver.SingleObj.pathEquivList_nil
-/

#print Quiver.SingleObj.pathEquivList_cons /-
@[simp]
theorem pathEquivList_cons (p : Path (star Œ±) (star Œ±)) (a : star Œ± ‚ü∂ star Œ±) :
    pathEquivList (Path.cons p a) = a :: pathToList p :=
  rfl
#align quiver.single_obj.path_equiv_list_cons Quiver.SingleObj.pathEquivList_cons
-/

#print Quiver.SingleObj.pathEquivList_symm_nil /-
@[simp]
theorem pathEquivList_symm_nil : pathEquivList.symm ([] : List Œ±) = Path.nil :=
  rfl
#align quiver.single_obj.path_equiv_list_symm_nil Quiver.SingleObj.pathEquivList_symm_nil
-/

#print Quiver.SingleObj.pathEquivList_symm_cons /-
@[simp]
theorem pathEquivList_symm_cons (l : List Œ±) (a : Œ±) :
    pathEquivList.symm (a :: l) = Path.cons (pathEquivList.symm l) a :=
  rfl
#align quiver.single_obj.path_equiv_list_symm_cons Quiver.SingleObj.pathEquivList_symm_cons
-/

end SingleObj

end Quiver

