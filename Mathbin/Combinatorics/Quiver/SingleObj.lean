/-
Copyright (c) 2023 Antoine Labelle. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Antoine Labelle

! This file was ported from Lean 3 source module combinatorics.quiver.single_obj
! leanprover-community/mathlib commit 1126441d6bccf98c81214a0780c73d499f6721fe
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Combinatorics.Quiver.Cast
import Mathbin.Combinatorics.Quiver.Symmetric

/-!
# Single-object quiver

Single object quiver with a given arrows type.

## Main definitions

Given a type `Œ±`, `single_obj Œ±` is the `unit` type, whose single object is called `star Œ±`, with
`quiver` structure such that `star Œ± ‚ü∂ star Œ±` is the type `Œ±`.
An element `x : Œ±` can be reinterpreted as an element of `star Œ± ‚ü∂ star Œ±` using
`to_hom`.
More generally, a list of elements of `a` can be reinterpreted as a path from `star Œ±` to
itself using `path_equiv_list`.
-/


namespace Quiver

/-- Type tag on `unit` used to define single-object quivers. -/
@[nolint unused_arguments]
def SingleObj (Œ± : Type _) : Type :=
  Unit deriving Unique
#align quiver.single_obj Quiver.SingleObj

namespace SingleObj

variable (Œ± Œ≤ Œ≥ : Type _)

instance : Quiver (SingleObj Œ±) :=
  ‚ü®fun _ _ => Œ±‚ü©

/-- The single object in `single_obj Œ±`. -/
def star : SingleObj Œ± :=
  Unit.unit
#align quiver.single_obj.star Quiver.SingleObj.star

instance : Inhabited (SingleObj Œ±) :=
  ‚ü®star Œ±‚ü©

variable {Œ± Œ≤ Œ≥}

-- See note [reducible non-instances]
/-- Equip `single_obj Œ±` with a reverse operation. -/
@[reducible]
def hasReverse (rev : Œ± ‚Üí Œ±) : HasReverse (SingleObj Œ±) :=
  ‚ü®fun _ _ => rev‚ü©
#align quiver.single_obj.has_reverse Quiver.SingleObj.hasReverse

-- See note [reducible non-instances]
/-- Equip `single_obj Œ±` with an involutive reverse operation. -/
@[reducible]
def hasInvolutiveReverse (rev : Œ± ‚Üí Œ±) (h : Function.Involutive rev) :
    HasInvolutiveReverse (SingleObj Œ±)
    where
  toHasReverse := hasReverse rev
  inv' _ _ := h
#align quiver.single_obj.has_involutive_reverse Quiver.SingleObj.hasInvolutiveReverse

/-- The type of arrows from `star Œ±` to itself is equivalent to the original type `Œ±`. -/
@[simps]
def toHom : Œ± ‚âÉ (star Œ± ‚ü∂ star Œ±) :=
  Equiv.refl _
#align quiver.single_obj.to_hom Quiver.SingleObj.toHom

/-- Prefunctors between two `single_obj` quivers correspond to functions between the corresponding
arrows types.
-/
@[simps]
def toPrefunctor : (Œ± ‚Üí Œ≤) ‚âÉ SingleObj Œ± ‚•§q SingleObj Œ≤
    where
  toFun f := ‚ü®id, fun _ _ => f‚ü©
  invFun f a := f.map (toHom a)
  left_inv _ := rfl
  right_inv f := by cases f <;> obviously
#align quiver.single_obj.to_prefunctor Quiver.SingleObj.toPrefunctor

theorem toPrefunctor_id : toPrefunctor id = ùü≠q (SingleObj Œ±) :=
  rfl
#align quiver.single_obj.to_prefunctor_id Quiver.SingleObj.toPrefunctor_id

@[simp]
theorem toPrefunctor_symm_id : toPrefunctor.symm (ùü≠q (SingleObj Œ±)) = id :=
  rfl
#align quiver.single_obj.to_prefunctor_symm_id Quiver.SingleObj.toPrefunctor_symm_id

theorem toPrefunctor_comp (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
    toPrefunctor (g ‚àò f) = toPrefunctor f ‚ãôq toPrefunctor g :=
  rfl
#align quiver.single_obj.to_prefunctor_comp Quiver.SingleObj.toPrefunctor_comp

@[simp]
theorem toPrefunctor_symm_comp (f : SingleObj Œ± ‚•§q SingleObj Œ≤) (g : SingleObj Œ≤ ‚•§q SingleObj Œ≥) :
    toPrefunctor.symm (f ‚ãôq g) = toPrefunctor.symm g ‚àò toPrefunctor.symm f := by
  simp only [Equiv.symm_apply_eq, to_prefunctor_comp, Equiv.apply_symm_apply]
#align quiver.single_obj.to_prefunctor_symm_comp Quiver.SingleObj.toPrefunctor_symm_comp

/-- Auxiliary definition for `quiver.single_obj.path_equiv_list`.
Converts a path in the quiver `single_obj Œ±` into a list of elements of type `a`.
-/
@[simp]
def pathToList : ‚àÄ {x : SingleObj Œ±}, Path (star Œ±) x ‚Üí List Œ±
  | _, path.nil => []
  | _, path.cons p a => a :: path_to_list p
#align quiver.single_obj.path_to_list Quiver.SingleObj.pathToList

/-- Auxiliary definition for `quiver.single_obj.path_equiv_list`.
Converts a list of elements of type `Œ±` into a path in the quiver `single_obj Œ±`.
-/
@[simp]
def listToPath : List Œ± ‚Üí Path (star Œ±) (star Œ±)
  | [] => Path.nil
  | a :: l => (list_to_path l).cons a
#align quiver.single_obj.list_to_path Quiver.SingleObj.listToPath

theorem pathToList_to_path {x : SingleObj Œ±} (p : Path (star Œ±) x) :
    listToPath (pathToList p) = p.cast rfl Unit.ext :=
  by
  induction' p with y z p a ih
  rfl
  tidy
#align quiver.single_obj.path_to_list_to_path Quiver.SingleObj.pathToList_to_path

theorem listToPath_to_list (l : List Œ±) : pathToList (listToPath l) = l :=
  by
  induction' l with a l ih
  rfl
  simp [ih]
#align quiver.single_obj.list_to_path_to_list Quiver.SingleObj.listToPath_to_list

/-- Paths in `single_obj Œ±` quiver correspond to lists of elements of type `Œ±`. -/
def pathEquivList : Path (star Œ±) (star Œ±) ‚âÉ List Œ± :=
  ‚ü®pathToList, listToPath, fun p => pathToList_to_path p, listToPath_to_list‚ü©
#align quiver.single_obj.path_equiv_list Quiver.SingleObj.pathEquivList

@[simp]
theorem pathEquivList_nil : pathEquivList Path.nil = ([] : List Œ±) :=
  rfl
#align quiver.single_obj.path_equiv_list_nil Quiver.SingleObj.pathEquivList_nil

@[simp]
theorem pathEquivList_cons (p : Path (star Œ±) (star Œ±)) (a : star Œ± ‚ü∂ star Œ±) :
    pathEquivList (Path.cons p a) = a :: pathToList p :=
  rfl
#align quiver.single_obj.path_equiv_list_cons Quiver.SingleObj.pathEquivList_cons

@[simp]
theorem pathEquivList_symm_nil : pathEquivList.symm ([] : List Œ±) = path.nil :=
  rfl
#align quiver.single_obj.path_equiv_list_symm_nil Quiver.SingleObj.pathEquivList_symm_nil

@[simp]
theorem pathEquivList_symm_cons (l : List Œ±) (a : Œ±) :
    pathEquivList.symm (a :: l) = Path.cons (pathEquivList.symm l) a :=
  rfl
#align quiver.single_obj.path_equiv_list_symm_cons Quiver.SingleObj.pathEquivList_symm_cons

end SingleObj

end Quiver

